<?php
    /* Dashboard Builder.
   Copyright (C) 2018 DISIT Lab https://www.disit.org - University of Florence

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License as
   published by the Free Software Foundation, either version 3 of the
   License, or (at your option) any later version.
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.
   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>. */
   
   include('process-form.php');
   include('../config.php');
  include '../locale.php';
   header("Cache-Control: private, max-age=$cacheControlMaxAge");
   
   if(!isset($_SESSION))
   {
       session_start();
   }
   checkSession('Manager');
   
    $link = mysqli_connect($host, $username, $password);
    mysqli_select_db($link, $dbname);
    error_reporting(E_ERROR);

    $lastUsedColors = null;
    $dashId = escapeForSQL($_REQUEST['dashboardId'], $link);
    if (checkVarType($dashId, "integer") === false) {
        eventLog("Returned the following ERROR in dashboard_configdash.php for dashId = ".$dashId.": ".$dashId." is not an integer as expected. Exit from script.");
        exit();
    };
    $q = "SELECT * FROM Dashboard.Config_dashboard WHERE Id = '$dashId'";
    $r = mysqli_query($link, $q);

    if($r) 
    {
        $row = mysqli_fetch_assoc($r);
        
        if(!$row || $row['deleted'] === 'yes')
        {
            header("Location: ../view/dashboardNotAvailable.php");
            exit();
        }
        else
        {
            $lastUsedColors = json_decode($row['lastUsedColors']);
            $dashboardAuthorName = $row['user']; //$_REQUEST['dashboardAuthorName'];
            $dashboardTitle = $row['title_header']; //$_REQUEST['dashboardTitle'];
            $dashboardEditorName = $_SESSION['loggedUsername'];
            $dashOrg = $row['organizations'];
        }
    }
?>

<!DOCTYPE HTML>
<html>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Dashboard Management System</title>

    <!-- Bootstrap Core CSS -->
    <link href="../css/bootstrap.css" rel="stylesheet">
    <link rel="stylesheet" href="../css/styles_gridster.css" type="text/css" />
    <link rel="stylesheet" href="../css/style_widgets.css?v=<?php echo time();?>" type="text/css" />
    <link href="../css/bootstrap-colorpicker.min.css" rel="stylesheet">
    <link rel="stylesheet" href="../css/chat.css" type="text/css" />
    
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    
    <link href="https://fonts.googleapis.com/css?family=Cabin:400,500,600,700|Catamaran|Varela+Round" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Montserrat" rel="stylesheet">
    
    <!-- jQuery -->
    <!-- <script src="../js/jquery-1.10.1.min.js"></script> -->
    <script src="../js/jquery-2.2.4.min.js"></script>
    
    <!-- Bootstrap Core JavaScript -->
    <script src="../js/bootstrap.min.js"></script>
    
    <!-- Bootstrap Multiselect -->
    <script src="../js/bootstrap-multiselect.js"></script>
    <link href="../css/bootstrap-multiselect.css" rel="stylesheet">

    <!-- DataTables -->
    <script type="text/javascript" charset="utf8" src="../js/DataTables/datatables.js"></script>
    <link rel="stylesheet" type="text/css" href="../js/DataTables/datatables.css">
    <script type="text/javascript" charset="utf8" src="../js/DataTables/dataTables.bootstrap.min.js"></script>
    <script type="text/javascript" charset="utf8" src="../js/DataTables/dataTables.responsive.min.js"></script>
    <script type="text/javascript" charset="utf8" src="../js/DataTables/responsive.bootstrap.min.js"></script>
    <link rel="stylesheet" type="text/css" href="../css/DataTables/dataTables.bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="../css/DataTables/responsive.bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="../css/DataTables/jquery.dataTables.min.css">
    <script type="text/javascript" charset="utf8" src="../js/DataTables/Select-1.2.5/js/dataTables.select.min.js"></script>
    <link rel="stylesheet" type="text/css" href="../js/DataTables/Select-1.2.5/css/select.dataTables.min.css">
    <script type="text/javascript" charset="utf8" src="../js/DataTables/dataTables.scrollResize.min.js"></script>

    
    <!-- Select2-->
   <!-- <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.0/js/select2.full.min.js"></script>  -->
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.0/css/select2.min.css">
    
    <!-- Gridster -->
    <link rel="stylesheet" type="text/css" href="../css/jquery.gridster.css">
    <script src="../js/jquery.gridsterMod.js" type="text/javascript" charset="utf-8"></script>
    
    <!-- New Gridster -->
    <!--<link rel="stylesheet" type="text/css" href="../newGridster/dist/jquery.gridster.css">
    <script src="../newGridster/dist/jquery.gridster.js" type="text/javascript" charset="utf-8"></script>-->

    <!-- CKEditor --> 
    <script src="../js/ckeditor/ckeditor.js"></script>
    <link rel="stylesheet" href="../js/ckeditor/skins/moono/editor.css">
    
     <!-- Filestyle -->
    <script type="text/javascript" src="../js/filestyle/src/bootstrap-filestyle.min.js"></script>
    
    <!-- JQUERY UI -->
    <script src="../js/jqueryUi/jquery-ui.js"></script>
    
    <!-- Font awesome icons -->
    <link rel="stylesheet" href="../js/fontAwesome/css/font-awesome.min.css">

    <!-- Bootstrap colorpicker -->
    <script src="../js/bootstrap-colorpicker.min.js"></script>
    
    <!-- Modernizr -->
    <script src="../js/modernizr-custom.js"></script>
    
    <!-- Highcharts -->
   <!-- <script src="../js/highcharts/code/highcharts.js"></script>
    <script src="../js/highcharts/code/modules/exporting.js"></script>
    <script src="../js/highcharts/code/highcharts-more.js"></script>
    <script src="../js/highcharts/code/modules/solid-gauge.js"></script>
    <script src="../js/highcharts/code/highcharts-3d.js"></script>
    <script src="../js/highcharts-8.0.0/code/highcharts.js"></script>
    <script src="../js/highcharts-8.0.0/code/modules/exporting.js"></script>
    <script src="../js/highcharts-8.0.0/code/highcharts-more.js"></script>
    <script src="../js/highcharts-8.0.0/code/modules/parallel-coordinates.js"></script>
    <script src="../js/highcharts-8.0.0/code/modules/solid-gauge.js"></script>
    <script src="../js/highcharts-8.0.0/code/highcharts-3d.js"></script>  -->

    <script src="../js/highcharts-9/code/highcharts.js"></script>
    <script src="../js/highcharts-9/code/modules/exporting.js"></script>
    <script src="../js/highcharts-9/code/modules/export-data.js"></script>
    <script src="../js/highcharts-9/code/highcharts-more.js"></script>
    <script src="../js/highcharts-9/code/modules/parallel-coordinates.js"></script>
    <script src="../js/highcharts-9/code/modules/solid-gauge.js"></script>
    <script src="../js/highcharts-9/code/highcharts-3d.js"></script>
    <script src="../js/highcharts-9/code/modules/streamgraph.js"></script>
    
    <!-- Bootstrap editable tables -->
    <link href="../bootstrap3-editable/css/bootstrap-editable.css" rel="stylesheet">
    <script src="../bootstrap3-editable/js/bootstrap-editable.js"></script>
    
    <!-- TinyColors -->
    <script src="../js/tinyColor.js" type="text/javascript" charset="utf-8"></script>
    
    <!-- Bootstrap select -->
    <link href="../bootstrapSelect/css/bootstrap-select.css" rel="stylesheet"/>
    <script src="../bootstrapSelect/js/bootstrap-select.js"></script>
    
    <!-- Moment -->
    <script type="text/javascript" src="../moment/moment.js"></script>
    
    <!-- Bootstrap datetimepicker -->
    <script src="../datetimepicker/build/js/bootstrap-datetimepicker.min.js"></script>
    <link rel="stylesheet" href="../datetimepicker/build/css/bootstrap-datetimepicker.min.css">
    
    <!-- Bootstrap toggle button -->
   <link href="../bootstrapToggleButton/css/bootstrap-toggle.min.css" rel="stylesheet">
   <script src="../bootstrapToggleButton/js/bootstrap-toggle.min.js"></script>
   
   <!-- html2canvas -->
    <script type="text/javascript" src="../js/html2canvas.js"></script>
    
    <!-- Leaflet -->
   <!-- Versione locale: 1.3.1 --> 
   <link rel="stylesheet" href="../leafletCore/leaflet.css" />
   <script src="../leafletCore/leaflet.js"></script>
   <script src="../js/OMS-leaflet/oms.min.js"></script>    <!-- OverlappingMarkerSpider for Leaflet -->
   
   <!-- Leaflet Wicket: libreria per parsare i file WKT --> 
   <script src="../wicket/wicket.js"></script> 
   <script src="../wicket/wicket-leaflet.js"></script>

   <!-- Leaflet Zoom Display -->
    <script src="../js/leaflet.zoomdisplay-src.js"></script>
    <link href="../css/leaflet.zoomdisplay.css" rel="stylesheet"/>
    
   <!-- Dot dot dot -->
   <script src="../dotdotdot/jquery.dotdotdot.js" type="text/javascript"></script>
   
   <!-- Bootstrap slider -->
   <script src="../bootstrapSlider/bootstrap-slider.js"></script>
   <link href="../bootstrapSlider/css/bootstrap-slider.css" rel="stylesheet"/>
   
   <!-- Weather icons -->
    <link rel="stylesheet" href="../img/meteoIcons/singleColor/css/weather-icons.css?v=<?php echo time();?>">
    
    <!-- Text fill -->
    <script src="../js/jquery.textfill.min.js"></script>
    
    <!-- Custom CSS -->
    <link href="../css/dashboard.css?v=<?php echo time();?>" rel="stylesheet">
    <link href="../css/dashboardView.css?v=<?php echo time();?>" rel="stylesheet">
    <?php if($_SESSION['loggedRole'] == 'RootAdmin' && isset($useOpenSearch) && $useOpenSearch == "yes") { ?>
        <link href="../css/addWidgetWizardOS-W.css?v=<?php echo time();?>" rel="stylesheet">
    <?php } else { ?>
        <link href="../css/addWidgetWizard.css?v=<?php echo time();?>" rel="stylesheet">
    <?php } ?>
    <link href="../css/addDashboardTab.css?v=<?php echo time();?>" rel="stylesheet">
    <link href="../css/dashboard_configdash.css?v=<?php echo time();?>" rel="stylesheet">
    <link href="../css/widgetCtxMenu.css?v=<?php echo time();?>" rel="stylesheet">
    <link href="../css/widgetDimControls.css?v=<?php echo time();?>" rel="stylesheet">
    <link href="../css/widgetHeader.css?v=<?php echo time();?>" rel="stylesheet">
    <script src="../js/widgetsCommonFunctions.js?v=<?php echo time();?>" type="text/javascript" charset="utf-8"></script>
    <script src="../js/dashboard_configdash.js?v=<?php echo time();?>" type="text/javascript" charset="utf-8"></script>
    <script src="../widgets/trafficEventsTypes.js?v=<?php echo time();?>" type="text/javascript" charset="utf-8"></script>
    <script src="../widgets/alarmTypes.js?v=<?php echo time();?>" type="text/javascript" charset="utf-8"></script>
    <script src="../widgets/fakeGeoJsons.js?v=<?php echo time();?>" type="text/javascript" charset="utf-8"></script>
    <link href="../css/chat.css?v=<?php echo time();?>" rel="stylesheet">
    <!--<script src="../js/bootstrap-ckeditor-.js?v=<?php echo time();?>" type="text/javascript" charset="utf-8"></script>-->
    
    <!--OpenLayers-->
    <script src="ol/ol.js"></script>
    <link rel="stylesheet" href="ol/ol.css" />
    
    <!--Deck.gl-->
    <!-- <script src="../widgets/layers/deckgl.min.js"></script> -->
    
<!-- Dynamic Routing -->
    <!--- Leaflet.drawer plugin -->
    <script src="../js/dynamic_routing/leaflet.draw.js"></script>
    <script src="../js/dynamic_routing/Leaflet.draw.drag-src.js"></script>
    <link rel="stylesheet" href="../css/dynamic_routing/leaflet.draw.css"/>
    <!-- Leaflet Control Geocoder -->
    <link rel="stylesheet" href="../css/dynamic_routing/Control.Geocoder.css" />
    <script src="../js/dynamic_routing/Control.Geocoder.js"></script>
    <!-- GH Leaflet Routing Machine plugin -->
    <link rel="stylesheet" href="../css/dynamic_routing/leaflet-routing-machine.css" />
    <script src="../js/dynamic_routing/leaflet-routing-machine.js"></script>
    <script src="../js/dynamic_routing/corslite.min.js"></script>

 <!--   <script src="../js/elasticWizard/elasticsearch.js"></script>
    <script src="../js/elasticWizard/jquery.elastic-datatables.js"></script>    -->

    <!-- fontIconPicker v3.1.1 core CSS -->
    <link rel="stylesheet" type="text/css" href="../css/jquery.fonticonpicker.min.css">
      <!-- required default theme -->
    <link rel="stylesheet" type="text/css" href="../css/jquery.fonticonpicker.grey.min.css">
     <!-- fontIconPicker v3.1.1 scripts -->
    <script type="text/javascript" src="../js/jquery.fonticonpicker.min.js"></script>
    <link rel="stylesheet" type="text/css" href="../css/jquery.fonticonpicker.bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="../css/jquery.fonticonpicker.darkgrey.min.css">
    <link rel="stylesheet" type="text/css" href="../css/inverted-theme/jquery.fonticonpicker.inverted.min.css">

    <!--    <script type="text/javascript" src="https://unpkg.com/@fonticonpicker/fonticonpicker/dist/js/jquery.fonticonpicker.min.js"></script>
      <link rel="stylesheet" type="text/css" href="https://unpkg.com/@fonticonpicker/fonticonpicker@3.1.1/dist/css/base/jquery.fonticonpicker.min.css"> -->

      <!-- default grey-theme -->
    <!--  <link rel="stylesheet" type="text/css" href="https://unpkg.com/@fonticonpicker/fonticonpicker@3.0.0-alpha.0/dist/css/themes/grey-theme/jquery.fonticonpicker.grey.min.css">

    <link rel="stylesheet" type="text/css" href="https://unpkg.com/@fonticonpicker/fonticonpicker@3.0.0-alpha.0/dist/css/themes/bootstrap-theme/jquery.fonticonpicker.bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/@fonticonpicker/fonticonpicker@3.0.0-alpha.0/dist/css/themes/dark-grey-theme/jquery.fonticonpicker.darkgrey.min.css">
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/@fonticonpicker/fonticonpicker@3.0.0-alpha.0/dist/css/themes/inverted-theme/jquery.fonticonpicker.inverted.min.css"> -->

	<!-- MS> WidgetSelectorTech is based on Fancytree -->	
	<link href="../js/skin-win8/ui.fancytree.css" rel="stylesheet">
	<script src="../js/fancytree/jquery.fancytree.ui-deps.js"></script>
	<script src="../js/fancytree/jquery.fancytree.js"></script>
	<!-- <MS -->

    <!-- Hijrah Date -->
    <script type="text/javascript" src="../js/hijrah-date.js"></script>
  <!--  <script src="https://rawgithub.com/miladjafary/highcharts-plugins/master/js/jalali.js"></script>    -->
    <script src="../js/highcharts-localization.js"></script>

    <!-- New WS -->
    <script src="https://www.snap4city.org/synoptics/socket.io/socket.io.js"></script>

</head>

    <style type="text/css">
        .left{
            float:left;
        }
        .right{
            float: right;
        }

        .switch {
            position: relative;
            display: inline-block;
            width: 82px;
            height: 20px;
        }

        .switch input {display:none;}

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #DBDBDB;
            -webkit-transition: .4s;
            transition: .4s;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 14px;
            width: 14px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

        input:checked + .slider {
            background-color: blue;
        }

        input:focus + .slider {
            box-shadow: 0 0 1px #2196F3;
        }

        input:checked + .slider:before {
            -webkit-transform: translateX(62px);
            -ms-transform: translateX(62px);
            transform: translateX(62px);
        }

        /*------ ADDED CSS ---------*/
        .fixMapon
        {
            display: none;
        }

        .fixMapon, .fixMapoff
        {
            color: white;
            position: absolute;
            transform: translate(-50%,-50%);
            top: 50%;
            left: 50%;
            font-size: 10px;
            font-family: Verdana, sans-serif;
        }

        input:checked+ .slider .on
        {display: block;}

        input:checked + .slider .off
        {display: none;}

        /*--------- END --------*/

        /* Rounded sliders */
        .slider.round {
            border-radius: 34px;
        }

        .slider.round:before {
            border-radius: 50%;}
        
        .datetime-control {
            display: block;
            width: 100%;
            padding: 6px 12px;
            font-size: 14px;
            line-height: 1.42857143;
            color: #555;
            background-color: #fff;
            background-image: none;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .theme_content{
            margin: 5%;
            padding-top: 2%;
            padding-bottom: 2%;
        }

        #scrSelectThemeImageContent{
            background-image: url('../css/themes/Legacy/preview.png');
            width: 300px;
            height: 200px;
            background-size: contain;
            background-repeat:   no-repeat;
            background-position: center center;
        }
        
        #button_dropdown{
           border: none;
           background: rgba(0, 162, 211, 1);
        }

        #button_dropdown:hover:enabled{
             color: #000000;
             background: rgba(0, 162, 211, 1);
        }

        .vertical-slider {
            width: 300px!important;
            margin-top: 150px;
            margin-left: 75px;
            transform: rotate(-90deg);
            -webkit-appearance: none;
            height: 25px;
            background: #d3d3d3;
            background-image: linear-gradient(90deg, goldenrod 50%, #d3d3d3 50%);
            outline: none;
            opacity: 0.7;
            -webkit-transition: .2s;
            transition: opacity .2s;
        }

        .vertical-slider:hover {
        opacity: 1;
        }

        .vertical-slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 25px;
        height: 75px;
        background: #04AA6D;
        cursor: pointer;
        }

        .vertical-slider::-moz-range-thumb {
        width: 25px;
        height: 25px;
        background: #04AA6D;
        cursor: pointer;
        }
    </style>

<body> 
	<?php include "../cookie_banner/cookie-banner.php"; ?>
    <?php include "sessionExpiringPopup.php" ?>
   
    <input type="hidden" id="draggingWidget" value="false">
    
    <div id="dashBckCnt">
       <div id="dashBckOverlay">
        
       </div> 
    </div>
    
    <div id="editDashboardMenu">
        <div class="row">
            <a id="link_modifyDash" href="#" data-toggle="modal" data-target="#modalEditDashboard">
                <div class="col-xs-6 col-sm-3 col-lg-1 col-lg-offset-1 dashEditMenuItemCnt">
                    <div class="dashEditMenuIconCnt col-xs-2 centerWithFlex"><i class="fa fa-dashboard" style="color: #00cc66"></i></div>
                    <div class="dashEditMenuTxtCnt col-xs-10 centerWithFlex"><?= _("Properties")?></div>
                </div>
            </a>
            <a id="link_start_wizard" href="#" data-toggle="modal">     
                <div class="col-xs-6 col-sm-3 col-lg-1 dashEditMenuItemCnt">
                    <div class="dashEditMenuIconCnt col-xs-2 centerWithFlex"><i class="fa fa-magic" style="color: #66efff"></i></div>
                    <div class="dashEditMenuTxtCnt col-xs-10 centerWithFlex"><?= _("Wizard")?></div>
                </div>
            </a>
        <!--    <a id="link_start_wizardOS" href="#" data-toggle="modal">
                <div class="col-xs-6 col-sm-3 col-lg-1 dashEditMenuItemCnt">
                    <div class="dashEditMenuIconCnt col-xs-2 centerWithFlex"><i class="fa fa-magic" style="color: #4169e1"></i></div>
                    <div class="dashEditMenuTxtCnt col-xs-10 centerWithFlex"><?= _("WizardOS")?></div>
                </div>
            </a>    -->
            <!-- csbl editor -->
            <a id="link_start_editor" href="#" data-toggle="modal" data-target="#flowEditor" onclick="openEditor();" style="display:none">
                <div id="csbl_editor_button" class="col-xs-6 col-sm-3 col-lg-1 dashEditMenuItemCnt">
                    <div class="dashEditMenuIconCnt col-xs-2 centerWithFlex"><i class="fa fa-magic" style="color: #8f00ff"></i></div>
                    <div class="dashEditMenuTxtCnt col-xs-10 centerWithFlex"><?= _("CSBL Editor")?></div>
                </div>
            </a>
            <a id="link_add_widget" href="#" data-toggle="modal">
                <div class="col-xs-6 col-sm-3 col-lg-1 dashEditMenuItemCnt">
                    <div class="dashEditMenuIconCnt col-xs-2 centerWithFlex"><i class="fa fa-plus-circle" style="color: #ffcc00"></i></div>
                    <div class="dashEditMenuTxtCnt col-xs-10 centerWithFlex"><?= _("Add widget")?></div>
                </div>
            </a>
            <a id="link_add_separator" href="#" data-toggle="modal">
                <div class="col-xs-6 col-sm-3 col-lg-1 dashEditMenuItemCnt">
                    <div class="dashEditMenuIconCnt col-xs-2 centerWithFlex"><i class="fa fa-arrows-v" style="color: #80bfff"></i></div>
                    <div class="dashEditMenuTxtCnt col-xs-10 centerWithFlex"><?= _("Separator")?></div>
                </div>
            </a>
            <a id="embedCodeBtn" href="#" data-toggle="modal">
                <div class="col-xs-6 col-sm-3 col-lg-1 dashEditMenuItemCnt">
		    <div class="dashEditMenuIconCnt col-xs-2 centerWithFlex"><i class="fa fa-file-code-o" style="color: #ffffff"></i></div>
                    <div class="dashEditMenuTxtCnt col-xs-10 centerWithFlex"><?= _("Embedding")?></div>
                </div>
            </a>
            <!-- Select Theme -->
            <a id="link_select_theme" href="#" data-toggle="modal">
                <div class="col-xs-6 col-sm-3 col-lg-1 dashEditMenuItemCnt">
                <div class="dashEditMenuIconCnt col-xs-2 centerWithFlex"><i class="fa fa-paint-brush" style="color: #25CF3A"></i></div>
                    <div class="dashEditMenuTxtCnt col-xs-10 centerWithFlex"><?= _("Theme")?></div>
                </div>
            </a>
            <a id="link_save_configuration" class="internalLink" href="#">
                <div class="col-xs-6 col-sm-3 col-lg-1 dashEditMenuItemCnt">
                <div class="dashEditMenuIconCnt col-xs-2 centerWithFlex"><i class="fa fa-cubes" style="color: #ff9933"></i></div>
                    <div class="dashEditMenuTxtCnt col-xs-10 centerWithFlex"><?= _("Save")?></div>
                </div>
            </a>
            <a id="export-dashboard" class="internalLink" href="#">
                <div class="col-xs-6 col-sm-3 col-lg-1 dashEditMenuItemCnt">
                <div class="dashEditMenuIconCnt col-xs-2 centerWithFlex"><i class="fa fa-download" style="color: white"></i></div>
                    <div class="dashEditMenuTxtCnt col-xs-10 centerWithFlex"><?= _("Export Dashboard")?></div>
                </div>
            </a>
            <a id="import-widget" class="internalLink" href="#">
                <div class="col-xs-6 col-sm-3 col-lg-1 dashEditMenuItemCnt">
                <div class="dashEditMenuIconCnt col-xs-2 centerWithFlex"><i class="fa fa-upload" style="color: white"></i></div>
                    <div class="dashEditMenuTxtCnt col-xs-10 centerWithFlex"><?= _("Import Widget")?></div>
                </div>
            </a>
            <a id="dashboardViewLink" href="#" target="_blank">
                <div class="col-xs-6 col-sm-3 col-lg-1 dashEditMenuItemCnt">
		    <div class="dashEditMenuIconCnt col-xs-2 centerWithFlex"><i class="fa fa-desktop" style="color: #ff0000"></i></div>
                    <div class="dashEditMenuTxtCnt col-xs-10 centerWithFlex"><?= _("Preview")?></div>
                </div>
            </a>
       </div> 
        </div>
    </div> 
	
    <!-- Main container -->
    <div id="dashboardViewMainContainer" class="container-fluid">
        <nav id="dashboardViewHeaderContainer" class="navbar navbar-fixed-top" role="navigation">
            <div id="fullscreenBtnContainer" data-status="normal">
                <span>
                    <i id="dashboardCtxMenuBtn" class="fa fa-caret-square-o-down" data-status="normal"></i>
                    <div id="dashboardEditHeaderMenu" data-shown="false" class="applicationCtxMenu fullCtxMenu container-fluid dashboardCtxMenu">
                        <div class="row fullCtxMenuRow" data-selected="false">
                            <div class="col-xs-2 fullCtxMenuIcon centerWithFlex"><i class="fa fa-paint-brush"></i></div>
                            <div class="col-xs-10 fullCtxMenuTxt "><?= _("Header color")?></div>
                        </div>
                        <div class="row fullCtxMenuRow" data-selected="false">
                            <div class="col-xs-2 fullCtxMenuIcon centerWithFlex"><i class="fa fa-paint-brush"></i></div>
                            <div class="col-xs-10 fullCtxMenuTxt "><?= _("Title color")?></div>
                        </div>
                        <div class="row fullCtxMenuRow" data-selected="false">
                            <div class="col-xs-2 fullCtxMenuIcon centerWithFlex"><i class="fa fa-paint-brush"></i></div>
                            <div class="col-xs-10 fullCtxMenuTxt "><?= _("Widgets area color")?></div>
                        </div>
                        <div class="row fullCtxMenuRow" data-selected="false">
                            <div class="col-xs-2 fullCtxMenuIcon centerWithFlex"><i class="fa fa-paint-brush"></i></div>
                            <div class="col-xs-10 fullCtxMenuTxt "><?= _("External area color")?></div>
                        </div>
                        <div class="row fullCtxMenuRow" id="dashboardBckDarknessMenuRow" data-selected="false">
                            <div class="col-xs-2 fullCtxMenuIcon centerWithFlex"><i class="fa fa-adjust"></i></div>
                            <div class="col-xs-10 fullCtxMenuTxt "><?= _("Background darkness")?></div>
                        </div>
                            <?php

                            $link = mysqli_connect($host, $username, $password);
                            mysqli_select_db($link, $dbname);

                            $orgMenuVisibilityQuery = "SELECT * FROM Dashboard.Config_dashboard WHERE id = '$dashId';";
                            $r = mysqli_query($link, $orgMenuVisibilityQuery);

                            if($r) {
                                while ($row = mysqli_fetch_assoc($r)) {

                                    $orgMenuVisible = $row['orgMenuVisible'];
                                    if ($orgMenuVisible == 'yes') {
                                        $orgMenuVisibility = 'true';
                                        $orgMenuVisibilityText = 'Hide Links Menu';
                                        $iconClass = 'fa fa-eye-slash';
                                    } else {
                                        $orgMenuVisibility = 'false';
                                        $orgMenuVisibilityText = 'Show Links Menu';
                                        $iconClass = 'fa fa-eye';
                                    }

                                    $newItem = '<div class="row fullCtxMenuRow menuVisibility" data-menushown = "' . $orgMenuVisibility . '" data-selected = "false">' .
                                        '<div class="col-xs-2 fullCtxMenuIcon centerWithFlex" ><i class="' . $iconClass . '"></i ></div >' .
                                        '<div class="col-xs-10 fullCtxMenuTxt"> ' . $orgMenuVisibilityText . '</div >' .
                                        '</div >';

                                    echo($newItem);

                                    $newItem = '<div class="row fullCtxMenuRow centerWithFlex quitRow" data-selected="false">' .
                                        '<div class="col-xs-2 fullCtxMenuIcon centerWithFlex"><i class="fa fa-mail-reply"></i></div>' .
                                        '<div class="col-xs-10 fullCtxMenuTxt">Quit</div>' .
                                        '</div>' .
                                        '</div>';

                                    echo($newItem);

                                    $orgMenuIconHidden = '<i id="orgMenuButton" class="fa fa-bars" style="display:none"></i>';
                                    $orgMenuIconShown = '<i id="orgMenuButton" class="fa fa-bars"></i>';
                                    if ($orgMenuVisible == 'yes') {
                                        echo($orgMenuIconShown);
                                    } else {
                                        echo($orgMenuIconHidden);
                                    }

                                }
                            }
                            mysqli_close($link);
                            
                            ?>

                    <div id="orgMenu" data-shown="false" class="applicationCtxMenu fullCtxMenu container-fluid dashboardCtxMenu">
                        <div id="orgMenuCnt">
                            <?php

                            $link = mysqli_connect($host, $username, $password);
                            mysqli_select_db($link, $dbname);

                            $domainId = null;

                            $currDom = $_SERVER['HTTP_HOST'];

                            $domQ = "SELECT * FROM Dashboard.Domains WHERE domains LIKE '%$currDom%'";
                            $r = mysqli_query($link, $domQ);

                            if($r)
                            {
                                if(mysqli_num_rows($r) > 0)
                                {
                                    $row = mysqli_fetch_assoc($r);
                                    $domainId = $row['id'];
                                    //   echo $row['claim'];
                                }
                                else
                                {
                                    //   echo 'DISIT';
                                }
                            }
                            else
                            {
                                //   echo 'DISIT';
                            }

                         /*   if(isset($_SESSION['loggedOrganization'])) {
                                $organization = $_SESSION['loggedOrganization'];
                                $organizationSql = $organization;
                            } else {
                                $organization = "None";
                                $organizationSql = "Other";
                            }   */

                            $organizationSql = $dashOrg;

                            $menuQuery = "SELECT * FROM Dashboard.OrgMenu WHERE domain = $domainId ORDER BY menuOrder ASC";
                            $r = mysqli_query($link, $menuQuery);

                            if($r)
                            {
                                while($row = mysqli_fetch_assoc($r))
                                {
                                    $menuItemId = $row['id'];
                                    $linkUrl = $row['publicLinkUrl']!=null && $_SESSION['isPublic'] ? $row['publicLinkUrl']: $row['linkUrl'];
                                    $linkId = $row['linkId'];
                                    $icon = $row['icon'];
                                    $text = $row['text'];
                                    $privileges = $row['privileges'];
                                    $userType = $row['userType'];
                                    $externalApp = $row['externalApp'];
                                    $openMode = $row['openMode'];
                                    $iconColor = $row['iconColor'];
                                    $pageTitle = $row['pageTitle'];
                                    $externalApp = $row['externalApp'];
                                    $allowedOrgs = $row['organizations'];

                                    if($allowedOrgs=='*' || strpos($allowedOrgs, "'".$organizationSql) !== false || $_SESSION['loggedRole'] == 'RootAdmin') {
                                        if ($externalApp == 'yes') {
                                            if ($openMode == 'newTab') {
                                                if ($linkUrl == 'submenu') {
                                                    $newItem =  '<div class="row" data-selected="false">' .
                                                        '<div class="col-md-12 orgMenuItemCnt">' .
                                                        '<a href="' . $linkUrl . '" id="' . $linkId . '" data-externalApp="' . $externalApp . '" data-openMode="' . $openMode . '" data-linkUrl="' . $linkUrl . '" data-pageTitle="' . $pageTitle . '" data-submenuVisible="false" class="internalLink moduleLink mainMenuLink" target="_blank">' .
                                                        '<i class="' . $icon . '" style="color: ' . $iconColor . '"></i>&nbsp;&nbsp;&nbsp;' . $text . '&nbsp;&nbsp;&nbsp;<i class="fa fa-caret-down submenuIndicator" style="color: rgb(51, 64, 69)"></i>' .
                                                        '</a>'.
                                                        '</div>' .
                                                        '</div>';

                                                    /* $newItem = '<a href="' . $linkUrl . '" id="' . $linkId . '" data-externalApp="' . $externalApp . '" data-openMode="' . $openMode . '" data-linkUrl="' . $linkUrl . '" data-pageTitle="' . $pageTitle . '" data-submenuVisible="false" class="internalLink moduleLink mainMenuLink" target="_blank">' .
                                                         '<div class="col-md-12 mainMenuItemCnt">' .
                                                         '<i class="' . $icon . '" style="color: ' . $iconColor . '"></i>&nbsp;&nbsp;&nbsp;' . $text . '&nbsp;&nbsp;&nbsp;<i class="fa fa-caret-down submenuIndicator" style="color: white"></i>' .
                                                         '</div>' .
                                                         '</a>';*/
                                                } else {
                                                    $newItem =  '<div class="row" data-selected="false">' .
                                                        '<div class="col-md-12 orgMenuItemCnt">' .
                                                        '<a href="' . $linkUrl . '" id="' . $linkId . '" data-externalApp="' . $externalApp . '" data-openMode="' . $openMode . '" data-linkUrl="' . $linkUrl . '" data-pageTitle="' . $pageTitle . '" data-submenuVisible="false" class="internalLink moduleLink mainMenuLink" target="_blank">' .
                                                        '<i class="' . $icon . '" style="color: ' . $iconColor . '"></i>&nbsp;&nbsp;&nbsp;' . $text .
                                                        '</a>'.
                                                        '</div>' .
                                                        '</div>';

                                                    /*    $newItem = '<a href="' . $linkUrl . '" id="' . $linkId . '" data-externalApp="' . $externalApp . '" data-openMode="' . $openMode . '" data-linkUrl="' . $linkUrl . '" data-pageTitle="' . $pageTitle . '" data-submenuVisible="false" class="internalLink moduleLink mainMenuLink mainMenuIframeLink">' .
                                                            '<div class="col-md-12 mainMenuItemCnt">' .
                                                            '<i class="' . $icon . '" style="color: ' . $iconColor . '"></i>&nbsp;&nbsp;&nbsp;' . $text .
                                                            '</div>' .
                                                            '</a>';*/
                                                }
                                            } else {
                                                //CASO IFRAME
                                                if ($linkUrl == 'submenu') {
                                                    $newItem =  '<div class="row" data-selected="false">' .
                                                        '<div class="col-md-12 orgMenuItemCnt">' .
                                                        '<a href="' . $linkUrl . '" id="' . $linkId . '" data-externalApp="' . $externalApp . '" data-openMode="' . $openMode . '" data-linkUrl="' . $linkUrl . '" data-pageTitle="' . $pageTitle . '" data-submenuVisible="false" class="internalLink moduleLink mainMenuLink mainMenuIframeLink">' .
                                                        '<i class="' . $icon . '" style="color: ' . $iconColor . '"></i>&nbsp;&nbsp;&nbsp;' . $text . '&nbsp;&nbsp;&nbsp;<i class="fa fa-caret-down submenuIndicator" style="color: rgb(51, 64, 69)"></i>' .
                                                        '</a>'.
                                                        '</div>' .
                                                        '</div>';

                                                    /*    $newItem = '<a href="' . $linkUrl . '" id="' . $linkId . '" data-externalApp="' . $externalApp . '" data-openMode="' . $openMode . '" data-linkUrl="' . $linkUrl . '" data-pageTitle="' . $pageTitle . '" data-submenuVisible="false" class="internalLink moduleLink mainMenuLink mainMenuIframeLink">' .
                                                            '<div class="col-md-12 mainMenuItemCnt">' .
                                                            '<i class="' . $icon . '" style="color: ' . $iconColor . '"></i>&nbsp;&nbsp;&nbsp;' . $text . '&nbsp;&nbsp;&nbsp;<i class="fa fa-caret-down submenuIndicator" style="color: white"></i>' .
                                                            '</div>' .
                                                            '</a>';*/
                                                } else {
                                                    $newItem =  '<div class="row" data-selected="false">' .
                                                        '<div class="col-md-12 orgMenuItemCnt">' .
                                                        '<a href="' . $linkUrl . '" id="' . $linkId . '" data-externalApp="' . $externalApp . '" data-openMode="' . $openMode . '" data-linkUrl="' . $linkUrl . '" data-pageTitle="' . $pageTitle . '" data-submenuVisible="false" class="internalLink moduleLink mainMenuLink mainMenuIframeLink">' .
                                                        '<i class="' . $icon . '" style="color: ' . $iconColor . '"></i>&nbsp;&nbsp;&nbsp;' . $text .
                                                        '</a>'.
                                                        '</div>' .
                                                        '</div>';

                                                    /*    $newItem = '<a href="' . $linkUrl . '" id="' . $linkId . '" data-externalApp="' . $externalApp . '" data-openMode="' . $openMode . '" data-linkUrl="' . $linkUrl . '" data-pageTitle="' . $pageTitle . '" data-submenuVisible="false" class="internalLink moduleLink mainMenuLink mainMenuIframeLink">' .
                                                            '<div class="col-md-12 mainMenuItemCnt">' .
                                                            '<i class="' . $icon . '" style="color: ' . $iconColor . '"></i>&nbsp;&nbsp;&nbsp;' . $text .
                                                            '</div>' .
                                                            '</a>';*/
                                                }
                                            }
                                        } else {
                                            if ($linkUrl == 'submenu') {
                                                $newItem =  '<div class="row" data-selected="false">' .
                                                    '<div class="col-md-12 orgMenuItemCnt">' .
                                                    '<a href="' . $linkUrl . '" id="' . $linkId . '" data-externalApp="' . $externalApp . '" data-openMode="' . $openMode . '" data-linkUrl="' . $linkUrl . '" data-pageTitle="' . $pageTitle . '" data-submenuVisible="false" class="internalLink moduleLink mainMenuLink">' .
                                                    '<i class="' . $icon . '" style="color: ' . $iconColor . '"></i>&nbsp;&nbsp;&nbsp;' . $text . '&nbsp;&nbsp;&nbsp;<i class="fa fa-caret-down submenuIndicator" style="color: rgb(51, 64, 69)"></i>' .
                                                    '</a>'.
                                                    '</div>' .
                                                    '</div>';

                                                /*    $newItem = '<a href="' . $linkUrl . '" id="' . $linkId . '" data-externalApp="' . $externalApp . '" data-openMode="' . $openMode . '" data-linkUrl="' . $linkUrl . '" data-pageTitle="' . $pageTitle . '" data-submenuVisible="false" class="internalLink moduleLink mainMenuLink">' .
                                                        '<div class="col-md-12 mainMenuItemCnt">' .
                                                        '<i class="' . $icon . '" style="color: ' . $iconColor . '"></i>&nbsp;&nbsp;&nbsp;' . $text . '&nbsp;&nbsp;&nbsp;<i class="fa fa-caret-down submenuIndicator" style="color: white"></i>' .
                                                        '</div>' .
                                                        '</a>';*/
                                            } else {
                                                $newItem =  '<div class="row" data-selected="false">' .
                                                    '<div class="col-md-12 orgMenuItemCnt">' .
                                                    '<a href="' . $linkUrl . '" id="' . $linkId . '" data-externalApp="' . $externalApp . '" data-openMode="' . $openMode . '" data-linkUrl="' . $linkUrl . '" data-pageTitle="' . $pageTitle . '" data-submenuVisible="false" class="internalLink moduleLink mainMenuLink">' .
                                                    '<i class="' . $icon . '" style="color: ' . $iconColor . '"></i>&nbsp;&nbsp;&nbsp;' . $text .
                                                    '</a>'.
                                                    '</div>' .
                                                    '</div>';

                                                /*    $newItem = '<a href="' . $linkUrl . '" id="' . $linkId . '" data-externalApp="' . $externalApp . '" data-openMode="' . $openMode . '" data-linkUrl="' . $linkUrl . '" data-pageTitle="' . $pageTitle . '" data-submenuVisible="false" class="internalLink moduleLink mainMenuLink">' .
                                                        '<div class="col-md-12 mainMenuItemCnt">' .
                                                        '<i class="' . $icon . '" style="color: ' . $iconColor . '"></i>&nbsp;&nbsp;&nbsp;' . $text .
                                                        '</div>' .
                                                        '</a>';*/
                                            }
                                        }
                                    }

                                    if((strpos($privileges, "'". ($_SESSION['isPublic'] ? 'Public' : $_SESSION['loggedRole'])) !== false)&&(($userType == 'any')||(($userType != 'any')&&($userType == $_SESSION['loggedType']))) && ($allowedOrgs=='*' || (strpos($allowedOrgs, "'".$organizationSql) !== false) || $_SESSION['loggedRole'] == 'RootAdmin'))
                                    {
                                        echo $newItem;
                                    }

                                    $uname = isset($_SESSION['loggedUsername']) ? $_SESSION['loggedUsername'] : '';

                                    $submenuQuery = "SELECT * FROM Dashboard.OrgMenuSubmenus s LEFT JOIN Dashboard.MainMenuSubmenusUser u ON u.submenu=s.id WHERE menu = '$menuItemId' AND (user is NULL OR user='$uname') ORDER BY menuOrder ASC";
                                    $r2 = mysqli_query($link, $submenuQuery);

                                    if($r2)
                                    {
                                        while($row2 = mysqli_fetch_assoc($r2))
                                        {
                                            $menuItemId2 = $row2['id'];
                                            $linkUrl2 = $row2['linkUrl'];

                                            if($linkUrl2 == 'submenu')
                                            {
                                                $linkUrl2 = '#';
                                            }

                                            $linkId2 = $row2['linkId'];
                                            $icon2 = $row2['icon'];
                                            $text2 = $row2['text'];
                                            $privileges2 = $row2['privileges'];
                                            $userType2 = $row2['userType'];
                                            $externalApp2 = $row2['externalApp'];
                                            $openMode2 = $row2['openMode'];
                                            $iconColor2 = $row2['iconColor'];
                                            $pageTitle2 = $row2['pageTitle'];
                                            $externalApp2 = $row2['externalApp'];
                                            $allowedOrgs2 = $row2['organizations'];

                                            if($allowedOrgs2=='*' || strpos($allowedOrgs2, "'".$organizationSql) !== false || $_SESSION['loggedRole'] == 'RootAdmin') {
                                                if ($externalApp2 == 'yes') {
                                                    if ($openMode2 == 'newTab') {
                                                        if ($_REQUEST['fromSubmenu'] == false || $_REQUEST['fromSubmenu'] != $linkId) {
                                                            $newItem =  '<div class="row" data-selected="false">' .
                                                                '<div class="col-md-12 orgMenuSubItemCnt" data-fatherMenuIdDiv="' . $linkId .'" style="display: none">' .
                                                                '<a href="' . $linkUrl2 . '" id="' . $linkId2 . '" style="text-decoration:none;padding-left:15px" data-fatherMenuId="' . $linkId . '" data-externalApp="' . $externalApp2 . '" data-openMode="' . $openMode2 . '" data-linkUrl="' . $linkUrl2 . '" data-pageTitle="' . $pageTitle2 . '" data-submenuVisible="false" class="internalLink moduleLink orgMenuSubItemLink" target="_blank">' .
                                                                '<i class="' . $icon2 . '" style="color: ' . $iconColor2 . '"></i>&nbsp;&nbsp;&nbsp;' . $text2 .
                                                                '</a>'.
                                                                '</div>' .
                                                                '</div>';

                                                            /*    $newItem = '<a href="' . $linkUrl2 . '" id="' . $linkId2 . '" data-fatherMenuId="' . $linkId . '" data-externalApp="' . $externalApp2 . '" data-openMode="' . $openMode2 . '" data-linkUrl="' . $linkUrl2 . '" data-pageTitle="' . $pageTitle2 . '" data-submenuVisible="false" class="internalLink moduleLink mainMenuSubItemLink" target="_blank">' .
                                                                    '<div class="col-md-12 mainMenuSubItemCnt" style="display: none">' .
                                                                    '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i class="' . $icon2 . '" style="color: ' . $iconColor2 . '"></i>&nbsp;&nbsp;&nbsp;' . $text .
                                                                    '</div>' .
                                                                    '</a>';*/
                                                        } else {
                                                            $newItem =  '<div class="row" data-selected="false">' .
                                                                '<div class="col-md-12 orgMenuSubItemCnt" data-fatherMenuIdDiv="' . $linkId .'" style="display: none">' .
                                                                '<a href="' . $linkUrl2 . '" id="' . $linkId2 . '" style="text-decoration:none;padding-left:15px" data-fatherMenuId="' . $linkId . '" data-externalApp="' . $externalApp2 . '" data-openMode="' . $openMode2 . '" data-linkUrl="' . $linkUrl2 . '" data-pageTitle="' . $pageTitle2 . '" data-submenuVisible="false" class="internalLink moduleLink orgMenuSubItemLink" target="_blank">' .
                                                                '<i class="' . $icon2 . '" style="color: ' . $iconColor2 . '"></i>&nbsp;&nbsp;&nbsp;' . $text .
                                                                '</a>'.
                                                                '</div>' .
                                                                '</div>';

                                                            /*    $newItem = '<a href="' . $linkUrl2 . '" id="' . $linkId2 . '" data-fatherMenuId="' . $linkId . '" data-externalApp="' . $externalApp2 . '" data-openMode="' . $openMode2 . '" data-linkUrl="' . $linkUrl2 . '" data-pageTitle="' . $pageTitle2 . '" data-submenuVisible="false" class="internalLink moduleLink mainMenuSubItemLink" target="_blank">' .
                                                                    '<div class="col-md-12 mainMenuSubItemCnt">' .
                                                                    '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i class="' . $icon2 . '" style="color: ' . $iconColor2 . '"></i>&nbsp;&nbsp;&nbsp;' . $text .
                                                                    '</div>' .
                                                                    '</a>';*/
                                                        }
                                                    } else {
                                                        //CASO IFRAME
                                                        if ($_REQUEST['fromSubmenu'] == false || $_REQUEST['fromSubmenu'] != $linkId) {
                                                            $newItem =  '<div class="row" data-selected="false">' .
                                                                '<div class="col-md-12 orgMenuSubItemCnt" data-fatherMenuIdDiv="' . $linkId .'" style="display: none">' .
                                                                '<a href="' . $linkUrl2 . '" id="' . $linkId2 . '" style="text-decoration:none;padding-left:15px" data-fatherMenuId="' . $linkId . '" data-externalApp="' . $externalApp2 . '" data-openMode="' . $openMode2 . '" data-linkUrl="' . $linkUrl2 . '" data-pageTitle="' . $pageTitle2 . '" data-submenuVisible="false" class="internalLink moduleLink orgMenuSubItemLink mainMenuIframeLink">' .
                                                                '<i class="' . $icon2 . '" style="color: ' . $iconColor2 . '"></i>&nbsp;&nbsp;&nbsp;' . $text2 .
                                                                '</a>'.
                                                                '</div>' .
                                                                '</div>';

                                                            /*    $newItem = '<a href="' . $linkUrl2 . '" id="' . $linkId2 . '" data-fatherMenuId="' . $linkId . '" data-externalApp="' . $externalApp2 . '" data-openMode="' . $openMode2 . '" data-linkUrl="' . $linkUrl2 . '" data-pageTitle="' . $pageTitle2 . '" data-submenuVisible="false" class="internalLink moduleLink mainMenuSubItemLink mainMenuIframeLink">' .
                                                                    '<div class="col-md-12 mainMenuSubItemCnt" style="display: none">' .
                                                                    '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i class="' . $icon2 . '" style="color: ' . $iconColor2 . '"></i>&nbsp;&nbsp;&nbsp;' . $text2 .
                                                                    '</div>' .
                                                                    '</a>';*/
                                                        } else {
                                                            $newItem =  '<div class="row" data-selected="false">' .
                                                                '<div class="col-md-12 orgMenuSubItemCnt" data-fatherMenuIdDiv="' . $linkId .'" style="display: none">' .
                                                                '<a href="' . $linkUrl2 . '" id="' . $linkId2 . '" style="text-decoration:none;padding-left:15px" data-fatherMenuId="' . $linkId . '" data-externalApp="' . $externalApp2 . '" data-openMode="' . $openMode2 . '" data-linkUrl="' . $linkUrl2 . '" data-pageTitle="' . $pageTitle2 . '" data-submenuVisible="false" class="internalLink moduleLink orgMenuSubItemLink mainMenuIframeLink">' .
                                                                '<i class="' . $icon2 . '" style="color: ' . $iconColor2 . '"></i>&nbsp;&nbsp;&nbsp;' . $text2 .
                                                                '</a>'.
                                                                '</div>' .
                                                                '</div>';

                                                            /*    $newItem = '<a href="' . $linkUrl2 . '" id="' . $linkId2 . '" data-fatherMenuId="' . $linkId . '" data-externalApp="' . $externalApp2 . '" data-openMode="' . $openMode2 . '" data-linkUrl="' . $linkUrl2 . '" data-pageTitle="' . $pageTitle2 . '" data-submenuVisible="false" class="internalLink moduleLink mainMenuSubItemLink mainMenuIframeLink">' .
                                                                    '<div class="col-md-12 mainMenuSubItemCnt">' .
                                                                    '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i class="' . $icon2 . '" style="color: ' . $iconColor2 . '"></i>&nbsp;&nbsp;&nbsp;' . $text2 .
                                                                    '</div>' .
                                                                    '</a>';*/
                                                        }
                                                    }
                                                } else {
                                                    if ($_REQUEST['fromSubmenu'] == false || $_REQUEST['fromSubmenu'] != $linkId) {
                                                        $newItem =  '<div class="row" data-selected="false">' .
                                                            '<div class="col-md-12 orgMenuSubItemCnt" data-fatherMenuIdDiv="' . $linkId .'" style="display: none">' .
                                                            '<a href="' . $linkUrl2 . '" id="' . $linkId2 . '" style="text-decoration:none;padding-left:15px" data-fatherMenuId="' . $linkId . '" data-externalApp="' . $externalApp2 . '" data-openMode="' . $openMode2 . '" data-linkUrl="' . $linkUrl2 . '" data-pageTitle="' . $pageTitle2 . '" data-submenuVisible="false" class="internalLink moduleLink orgMenuSubItemLink">' .
                                                            '<i class="' . $icon2 . '" style="color: ' . $iconColor2 . '"></i>&nbsp;&nbsp;&nbsp;' . $text2 .
                                                            '</a>'.
                                                            '</div>' .
                                                            '</div>';

                                                        /*   $newItem = '<a href="' . $linkUrl2 . '" id="' . $linkId2 . '" data-fatherMenuId="' . $linkId . '" data-externalApp="' . $externalApp2 . '" data-openMode="' . $openMode2 . '" data-linkUrl="' . $linkUrl2 . '" data-pageTitle="' . $pageTitle2 . '" data-submenuVisible="false" class="internalLink moduleLink mainMenuSubItemLink">' .
                                                               '<div class="col-md-12 mainMenuSubItemCnt" style="display: none">' .
                                                               '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i class="' . $icon2 . '" style="color: ' . $iconColor2 . '"></i>&nbsp;&nbsp;&nbsp;' . $text2 .
                                                               '</div>' .
                                                               '</a>';*/
                                                    } else {
                                                        $newItem =  '<div class="row" data-selected="false">' .
                                                            '<div class="col-md-12 orgMenuSubItemCnt" data-fatherMenuIdDiv="' . $linkId .'" style="display: none">' .
                                                            '<a href="' . $linkUrl2 . '" id="' . $linkId2 . '" style="text-decoration:none;padding-left:15px" data-fatherMenuId="' . $linkId . '" data-externalApp="' . $externalApp2 . '" data-openMode="' . $openMode2 . '" data-linkUrl="' . $linkUrl2 . '" data-pageTitle="' . $pageTitle2 . '" data-submenuVisible="false" class="internalLink moduleLink orgMenuSubItemLink">' .
                                                            '<i class="' . $icon2 . '" style="color: ' . $iconColor2 . '"></i>&nbsp;&nbsp;&nbsp;' . $text2 .
                                                            '</a>'.
                                                            '</div>' .
                                                            '</div>';

                                                        /*   $newItem = '<a href="' . $linkUrl2 . '" id="' . $linkId2 . '" data-fatherMenuId="' . $linkId . '" data-externalApp="' . $externalApp2 . '" data-openMode="' . $openMode2 . '" data-linkUrl="' . $linkUrl2 . '" data-pageTitle="' . $pageTitle2 . '" data-submenuVisible="false" class="internalLink moduleLink mainMenuSubItemLink">' .
                                                               '<div class="col-md-12 mainMenuSubItemCnt">' .
                                                               '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i class="' . $icon2 . '" style="color: ' . $iconColor2 . '"></i>&nbsp;&nbsp;&nbsp;' . $text2 .
                                                               '</div>' .
                                                               '</a>';*/
                                                    }
                                                }
                                            }

                                            if((strpos($privileges2, "'".($_SESSION['isPublic'] ? 'Public' : $_SESSION['loggedRole'])) !== false)&&(($userType == 'any')||(($userType != 'any')&&($userType == $_SESSION['loggedType']))) && ($allowedOrgs2=='*' || (strpos($allowedOrgs2, "'".$organizationSql) !== false) || $_SESSION['loggedRole'] == 'RootAdmin'))
                                            {
                                                echo $newItem;
                                            }
                                        }
                                    }
                                }
                            }

                            mysqli_close($link);
                            ?>

                            <div class="row fullCtxMenuRow quitRow" data-selected="false">
                                <div class="col-md-12 orgMenuItemCnt">
                                    <i class="fa fa-mail-reply"></i>&nbsp;&nbsp;&nbsp;<?= _("Quit")?>&nbsp;&nbsp;&nbsp;
                                    <!--  <div class="col-xs-2 fullCtxMenuIcon centerWithFlex"><i class="fa fa-mail-reply"></i></div>
                                      <div class="col-xs-10 fullCtxMenuTxt">Quit</div>    -->
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div id="dashboardEditTitleColorSubmenu" class="fullCtxMenu fullCtxSubmenu dashboardCtxMenu widgetSubmenu container-fluid">
                        <div class="row">
                           <div class="col-xs-12 centerWithFlex submenuLabel"><?= _("Palette")?></div> 
                           <div id="dashHeaderColorPicker" class="col-xs-12 centerWithFlex"></div>
                        </div>
                        <div class="row">
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 255, 255, 0)">
                                <div class="transQuadWhite"></div>
                                <div class="transQuadGrey"></div>
                                <div class="transQuadGrey"></div>
                                <div class="transQuadWhite"></div>
                            </div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 255, 255, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 217, 0, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 153, 51, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 51, 0, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(204, 0, 0, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(102, 255, 51, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(0, 204, 0, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(0, 255, 255, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(51, 204, 255, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(0, 153, 204, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(0, 0, 0, 1)"></div>
                        </div>
                        <div class="row lastUsedColorsRow">
                            <div class="col-xs-12 centerWithFlex submenuLabel"><?= _("Last used")?></div> 
                            <?php
                                for($i = 0; $i < count($lastUsedColors); $i++)
                                {
                                    echo '<div class="col-xs-1 ctxMenuPaletteColor" data-color="' . $lastUsedColors[$i] . '"></div>';
                                }
                            ?>
                        </div>
                        <div class="row contextMenuBtnsRow">
                            <div class="col-xs-4 centerWithFlex">
                                <button type="button" class="contextMenuQuitBtn" id="dashHeaderColorQuitBtn"><?= _("Quit")?></button>
                            </div>
                            <div class="col-xs-4 centerWithFlex">
                                <button type="button" class="contextMenuCancelBtn" id="dashHeaderColorCancelBtn"><?= _("Undo")?></button>
                            </div>
                            <div class="col-xs-4 centerWithFlex">
                                <button type="button" class="contextMenuConfirmBtn" id="dashHeaderColorConfirmBtn"><?= _("Apply")?></button>
                            </div>
                        </div>
                        <div class="row contextMenuMsgRow">
                            <div class="col-xs-12 centerWithFlex"></div>
                        </div>
                    </div>
                    
                    <div id="dashboardEditTitleFontColorSubmenu" class="fullCtxMenu fullCtxSubmenu dashboardCtxMenu widgetSubmenu container-fluid">
                        <div class="row">
                           <div class="col-xs-12 centerWithFlex submenuLabel"><?= _("Palette")?></div> 
                           <div id="dashHeaderFontColorPicker" class="col-xs-12 centerWithFlex"></div>
                        </div>
                        <div class="row">
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 255, 255, 0)">
                                <div class="transQuadWhite"></div>
                                <div class="transQuadGrey"></div>
                                <div class="transQuadGrey"></div>
                                <div class="transQuadWhite"></div>
                            </div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 255, 255, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 217, 0, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 153, 51, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 51, 0, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(204, 0, 0, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(102, 255, 51, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(0, 204, 0, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(0, 255, 255, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(51, 204, 255, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(0, 153, 204, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(0, 0, 0, 1)"></div>
                        </div>
                        <div class="row lastUsedColorsRow">
                            <div class="col-xs-12 centerWithFlex submenuLabel"><?= _("Last used")?></div> 
                            <?php
                                for($i = 0; $i < count($lastUsedColors); $i++)
                                {
                                    echo '<div class="col-xs-1 ctxMenuPaletteColor" data-color="' . $lastUsedColors[$i] . '"></div>';
                                }
                            ?>
                        </div>
                        <div class="row contextMenuBtnsRow">
                            <div class="col-xs-4 centerWithFlex">
                                <button type="button" class="contextMenuQuitBtn" id="dashHeaderFontColorQuitBtn"><?= _("Quit")?></button>
                            </div>
                            <div class="col-xs-4 centerWithFlex">
                                <button type="button" class="contextMenuCancelBtn" id="dashHeaderFontColorCancelBtn"><?= _("Undo")?></button>
                            </div>
                            <div class="col-xs-4 centerWithFlex">
                                <button type="button" class="contextMenuConfirmBtn" id="dashHeaderFontColorConfirmBtn"><?= _("Apply")?></button>
                            </div>
                        </div>
                        <div class="row contextMenuMsgRow">
                            <div class="col-xs-12 centerWithFlex"></div>
                        </div>
                    </div>
                    <div id="dashboardEditAreaColorSubmenu" class="fullCtxMenu fullCtxSubmenu dashboardCtxMenu widgetSubmenu container-fluid">
                        <div class="row">
                           <div class="col-xs-12 centerWithFlex submenuLabel"><?= _("Palette")?></div> 
                           <div id="dashAreaColorPicker" class="col-xs-12 centerWithFlex"></div>
                        </div>
                        <div class="row">
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 255, 255, 0)">
                                <div class="transQuadWhite"></div>
                                <div class="transQuadGrey"></div>
                                <div class="transQuadGrey"></div>
                                <div class="transQuadWhite"></div>
                            </div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 255, 255, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 217, 0, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 153, 51, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 51, 0, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(204, 0, 0, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(102, 255, 51, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(0, 204, 0, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(0, 255, 255, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(51, 204, 255, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(0, 153, 204, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(0, 0, 0, 1)"></div>
                        </div>
                        <div class="row lastUsedColorsRow">
                            <div class="col-xs-12 centerWithFlex submenuLabel"><?= _("Last used")?></div> 
                            <?php
                                for($i = 0; $i < count($lastUsedColors); $i++)
                                {
                                    echo '<div class="col-xs-1 ctxMenuPaletteColor" data-color="' . $lastUsedColors[$i] . '"></div>';
                                }
                            ?>
                        </div>
                        <div class="row contextMenuBtnsRow">
                            <div class="col-xs-4 centerWithFlex">
                                <button type="button" class="contextMenuQuitBtn" id="dashAreaColorQuitBtn"><?= _("Quit")?></button>
                            </div>
                            <div class="col-xs-4 centerWithFlex">
                                <button type="button" class="contextMenuCancelBtn" id="dashAreaColorCancelBtn"><?= _("Undo")?></button>
                            </div>
                            <div class="col-xs-4 centerWithFlex">
                                <button type="button" class="contextMenuConfirmBtn" id="dashAreaColorConfirmBtn"><?= _("Apply")?></button>
                            </div>
                        </div>
                        <div class="row contextMenuMsgRow">
                            <div class="col-xs-12 centerWithFlex"></div>
                        </div>
                    </div>
                    <div id="dashboardEditFrameColorSubmenu" class="fullCtxMenu fullCtxSubmenu dashboardCtxMenu widgetSubmenu container-fluid">
                        <div class="row">
                           <div class="col-xs-12 centerWithFlex submenuLabel"><?= _("Palette")?></div> 
                           <div id="dashFrameColorPicker" class="col-xs-12 centerWithFlex"></div>
                        </div>
                        <div class="row">
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 255, 255, 0)">
                                <div class="transQuadWhite"></div>
                                <div class="transQuadGrey"></div>
                                <div class="transQuadGrey"></div>
                                <div class="transQuadWhite"></div>
                            </div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 255, 255, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 217, 0, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 153, 51, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(255, 51, 0, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(204, 0, 0, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(102, 255, 51, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(0, 204, 0, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(0, 255, 255, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(51, 204, 255, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(0, 153, 204, 1)"></div>
                            <div class="col-xs-1 ctxMenuPaletteColor" data-color="rgba(0, 0, 0, 1)"></div>
                        </div>
                        <div class="row lastUsedColorsRow">
                            <div class="col-xs-12 centerWithFlex submenuLabel"><?= _("Last used")?></div> 
                            <?php
                                for($i = 0; $i < count($lastUsedColors); $i++)
                                {
                                    echo '<div class="col-xs-1 ctxMenuPaletteColor" data-color="' . $lastUsedColors[$i] . '"></div>';
                                }
                            ?>
                        </div>
                        <div class="row contextMenuBtnsRow">
                            <div class="col-xs-4 centerWithFlex">
                                <button type="button" class="contextMenuQuitBtn" id="dashFrameColorQuitBtn"><?= _("Quit")?></button>
                            </div>
                            <div class="col-xs-4 centerWithFlex">
                                <button type="button" class="contextMenuCancelBtn" id="dashFrameColorCancelBtn"><?= _("Undo")?></button>
                            </div>
                            <div class="col-xs-4 centerWithFlex">
                                <button type="button" class="contextMenuConfirmBtn" id="dashFrameColorConfirmBtn"><?= _("Apply")?></button>
                            </div>
                        </div>
                        <div class="row contextMenuMsgRow">
                            <div class="col-xs-12 centerWithFlex"></div>
                        </div>
                    </div>
                    
                    <div id="dashboardBckDarknessSubmenu" class="fullCtxMenu fullCtxSubmenu dashboardCtxMenu widgetSubmenu container-fluid">
                        <div class="row">
                           <div class="col-xs-12 centerWithFlex submenuLabel"><?= _("Darkness")?></div> 
                           <div class="col-xs-12 centerWithFlex">
                               <input id="dashboardBckDarknessSlider" type="text" data-provide="slider"/>
                           </div>
                           <div id="dashboardBckDarknessVal" class="col-xs-12 centerWithFlex submenuLabel">
                               
                           </div>    
                        </div>
                    </div>
                </span>
            </div>
            <div id="dashboardViewTitleAndSubtitleContainer">
                <div id="dashboardTitle" style="position: relative">
                    <span class="inplaceEditable" data-underEdit="false" contenteditable="false"></span>
                    <div id="dashboardTitleMenu" class="applicationCtxMenu compactMenu">
                        <div class="compactMenuBtns">
                            <button type="button" class="compactMenuCancelBtn" id="dashHeaderTitleEditCancelBtn"><i class="fa fa-remove"></i></button> 
                            <button type="button" class="compactMenuConfirmBtn" id="dashHeaderTitleEditConfirmBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button>
                        </div>
                        <div class="compactMenuMsg">
                             
                        </div>
                    </div>
                </div>
                
                <div id="dashboardSubtitle">
                    <span class="inplaceEditable" data-underEdit="false" contenteditable="false"></span>
                    <div id="dashboardSubtitleMenu" class="applicationCtxMenu compactMenu">
                        <div class="compactMenuBtns">
                            <button type="button" class="compactMenuCancelBtn" id="dashHeaderSubtitleEditCancelBtn"><i class="fa fa-remove"></i></button> 
                            <button type="button" class="compactMenuConfirmBtn" id="dashHeaderSubtitleEditConfirmBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button>
                        </div>
                        <div class="compactMenuMsg">
                             
                        </div>
                    </div>
                </div>            
            </div>

            <!--<div id="chatContainer" data-status="closed">
                <iframe id="chatIframe"></iframe>
            </div>
             <div id="BtnContainerChat" data-status="closed">
                <iframe id="chatIframeB"></iframe>
            </div>-->
            
            <!-- Soluzione alternativa con div contenitore unico -->
            <div id="chatContainer" data-status="closed">
                <iframe id="chatIframeB" class="chatIframe" scrolling="no"></iframe>
                <iframe id="chatIframeD" class="chatIframe" scrolling="no"></iframe>
                <iframe id="chatIframe" class="chatIframe"></iframe>
            </div>
            
            <div id="headerLogo">
                <img id="headerLogoImg"/>
                       
                 
            </div>
            <?php
                if ($_SESSION['loggedRole'] == "Manager"){
                   echo '<i id="chatBtn" data-status="closed"></i>';
                }else{
                    echo '<i class="fa fa-comment-o" id="chatBtn" data-status="closed" style="display: none"></i>';
                    echo '<i class="fa fa-comment" id="chatBtnNew" data-status="closed" style="display: none"></i>';
                    echo '<i class="fa fa-exclamation-triangle" id="chatBtnError" data-status="closed" style="display: none"></i>';
                }
                ?>
            
            <div id="clock">
                <span id="tick2"><?php include('../widgets/time.php'); ?></span>
            </div>
        </nav>
        
        <div id="dashboardViewWidgetsContainer" class="gridster">
            <ul id="gridsterUl"></ul>            
        </div>
        
        <table id="gridTable" data-html2canvas-ignore></table>
        
        <div id="embedAutoLogoContainer" data-html2canvas-ignore>
            <a title="Km4City" href="https://www.km4city.org" target="_new"><img id="embedAutoLogo" src="../img/PoweredByKm4City1Line.png" /></a>
        </div>
        <div id="logos" class="footerLogos" data-html2canvas-ignore>
            <a title="Logout from this dashboard" href="#" class="footerLogo"><i id="viewLogoutBtn" class="fa fa-sign-out"></i></a>
            <a title="Disit" href="https://www.snap4city.org" target="_new" class="footerLogo"><img src="https://dashboard.km4city.org/img/applicationLogos/disitLogoTransparent.png" /></a>
        </div>
    </div>
        
    <!-- Inizio dei modali --> 
    <!-- Modale wizard -->
    <div class="modal fade" id="addWidgetWizard" tabindex="-1" role="dialog" aria-labelledby="addWidgetWizardLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content modalContentWizardForm"> 
                <div class="modalHeader centerWithFlex">
                 <?= _("Wizard")?> 
                </div>
            
                <div id="addWidgetWizardLabelBody" class="modal-body modalBody">
                    <?php if($_SESSION['loggedRole'] == 'RootAdmin' && isset($useOpenSearch) && $useOpenSearch == "yes") {
                        include "addWidgetWizardInclusionCodeOS.php";
                    } else { 
                        include "addWidgetWizardInclusionCode.php";
                    } ?>
                </div>
                
                <div id="modalStartWizardFooter" class="modal-footer">
                   <div class="row">
                        <div class="col-xs-8 col-xs-offset-2 centerWithFlex">
                            <button type="button" id="addWidgetWizardPrevBtn" name="addWidgetWizardPrevBtn" class="btn confirmBtn"><?= _("Prev")?></button>
                            <button type="button" id="addWidgetWizardNextBtn" name="addWidgetWizardNextBtn" class="btn confirmBtn"><?= _("Next")?></button>
                        </div>    
                        <div class="col-xs-2">
                            <button type="button" id="addWidgetWizardCancelBtn" class="btn cancelBtn" data-dismiss="modal"><?= _("Close")?></button>
                        </div>   
                   </div>  
                </div>
            </div>    <!-- Fine modal content -->
        </div> <!-- Fine modal dialog -->
    </div><!-- Fine modale -->
    <!-- Fine modale wizard -->

    <!-- Modale editor (for csbl) -->
    <div class="modal fade" id="flowEditor" tabindex="-1" role="dialog" aria-labelledby="flowEditorLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content modalContentWizardForm"> 
                <div class="modalHeader centerWithFlex">
                 <?= _("CSBL Editor")?>
                </div>
            
                <div id="flowEditorLabelBody" class="modal-body modalBody">
                    <!-- marco modal-->
                    <?php include "flowEditorCode.php" ?>
                </div>
                
            </div>    <!-- Fine modal content -->
        </div> <!-- Fine modal dialog -->
    </div><!-- Fine modale -->
    <!-- Fine modale editor -->

    <!--Select theme-->
    <div class="modal fade" id="modal-select-theme" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog" role="document">
           <!-- <div class="modal-content modalContentWizardForm"> -->
            <form id="scrSelectThemeForm" class="form-horizontal" name="scrSelectThemeForm" role="form" method="POST" action="#" data-toggle="validator">  
            <div class="modal-content">
                  <div class="modalHeader centerWithFlex">
                       <?= _("Select Theme")?> 
                  </div>
                  <div id="scrSelectThemeBody" class="modal-body modalBody">
                      <div class="row" style="margin: 2%">
                          
                      <span>
                            <?= _("Please note that the edit works only on Legacy Theme for the size of the widgets. Different themes your select are visible only on Preview and production")?>
                       </span>
                          
                      </div>
                    <div class="row" >
                        <div class="col-xs-12 centerWithFlex" id="scrSelectThemeMsg">
                            
                        <div id="scrSelectThemeLeftContent" class="theme_content" style="float: left;">
                        <div class="col-xs-12" id="scrSelectThemeContent">
                            <b><?= _("Current theme")?> : </b><span id="curr_theme">Legacy</span><br /><br />
                                <div class="dropdown">
                                    
                                 <button id="button_dropdown" class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown"><?= _("Select a Theme")?> <span class="caret"></span></button>
                                        <ul class="dropdown-menu" id="ul_select_list">
                                        </ul>
                                   </div> 
                        </div>
                        </div>
                        <!-- -->
                        <div id="scrSelectThemeRightContent" class="theme_content">
                            <div id="scrSelectThemeImageContent">
                        </div>
                        
                            
                        </div>    
                    </div>   
                     
                  <div id="scrSelectThemeFooter" class="modal-footer">
                    <button type="button" id="cancelSelectThemeBtn" class="btn cancelBtn" data-dismiss="modal"><?= _("Cancel")?></button>
                    <button type="button" id="scrSelectThemeBtn" name="scrSelectThemeBtn" class="btn confirmBtn"><?= _("Confirm")?></button>
                  </div>
            </div>
          </form>  
          </div>
        </div>
       <!-- </div>-->
    </div>
    </div>
    <!-- Modale aggiunta widget -->
    <div class="modal fade" id="modal-add-widget" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modalDialogWidget" role="document" id="adding01">
            <div class="modal-content modalContentWidgetForm">
                <div class="modal-header">
                    <h4 class="modal-title" id="myModalLabel"><?= _("Add new widget to dashboard")?></h4>
                </div>
                <div id="modal-add-widget-body" class="modal-body">
                    <form id="form-setting-widget" class="form-horizontal" name="form-setting-widget" role="form" method="post" action="" enctype="multipart/form-data" data-toggle="validator"> <!-- novalidate -->
                        <div class="well wellCustom2left" id="metricAndWidgetChoice">
                            <legend class="legend-form-group"><?= _("Metric and widget choice")?></legend> 
                            <div id="metricAndWidgetChoiceContent" class="form-group">
                                <div class="row">
                                    <label for="widgetCategory" class="col-md-4 control-label"><?= _("Widget category")?></label>

                                    <div class="col-md-6">
                                        <div class="input-group">
                                            <select class="form-control" id="widgetCategory" name="widgetCategory">
                                                <option value="actuator"><?= _("Actuator")?></option>
                                                <option value="viewer"><?= _("Data viewer")?></option>
                                            </select>                                         
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <label for="metricsCategory" class="col-md-4 control-label"><?= _("Metrics category")?></label>

                                    <div class="col-md-6">
                                        <div class="input-group">
                                            <select class="form-control" id="metricsCategory" name="metricsCategory">
                                                <option value="app"><?= _("Personal metrics")?></option>
                                                <option value="ds"><?= _("Shared metrics")?></option>
                                            </select>                                         
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <label for="actuatorTarget" class="col-md-4 control-label"><?= _("Actuator target")?></label>
                                    <div class="col-md-6">
                                        <select class="form-control" id="actuatorTarget" name="actuatorTarget">
                                            <option value="app"><?= _("Personal apps")?></option>
                                            <option value="broker"><?= _("Context broker")?></option>
                                        </select>    
                                    </div>
                                </div>
                                
                                <!-- Campi per gli widget attuatori (personal apps)-->
                                <div class="row">
                                    <label for="personalAppsInputs" class="col-md-4 control-label"><?= _("Inputs from personal apps")?></label>
                                    <div class="col-md-6">
                                        <select class="form-control" id="personalAppsInputs" name="personalAppsInputs"></select>
                                    </div>    
                                </div>
                                
                                <div class="row">
                                    <label for="personalAppsInputsValueType" class="col-md-4 control-label"><?= _("Value type")?></label>
                                    <div class="col-md-6">
                                    <input type="text" style="background-color: white" class="form-control" id="personalAppsInputsValueType" name="personalAppsInputsValueType" disabled/> 
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <label for="personalAppsInputsStartValue" class="col-md-4 control-label"><?= _("Start value")?></label>
                                    <div class="col-md-6">
                                    <input type="text" style="background-color: white" class="form-control" id="personalAppsInputsStartValue" name="personalAppsInputsStartValue" disabled/>
                                    <input type="hidden" id="personalAppsInputsStartValueHidden" name="personalAppsInputsStartValueHidden" />
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <label for="personalAppsInputsDomainType" class="col-md-4 control-label"><?= _("Domain type")?></label>
                                    <div class="col-md-6">
                                    <input type="text" style="background-color: white" class="form-control" id="personalAppsInputsDomainType" name="personalAppsInputsDomainType" disabled/>
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <label for="personalAppsInputsMinValue" class="col-md-4 control-label"><?= _("Min value")?></label>
                                    <div class="col-md-6">
                                    <input type="text" style="background-color: white" class="form-control" id="personalAppsInputsMinValue" name="personalAppsInputsMinValue" disabled/>
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <label for="personalAppsInputsMaxValue" class="col-md-4 control-label"><?= _("Max value")?></label>
                                    <div class="col-md-6">
                                    <input type="text" style="background-color: white" class="form-control" id="personalAppsInputsMaxValue" name="personalAppsInputsMaxValue" disabled/> 
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <label for="personalAppsInputsOffValue" class="col-md-4 control-label"><?= _("Off value")?></label>
                                    <div class="col-md-6">
                                    <input type="text" style="background-color: white" class="form-control" id="personalAppsInputsOffValue" name="personalAppsInputsOffValue" disabled/> 
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <label for="personalAppsInputsOnValue" class="col-md-4 control-label"><?= _("On value")?></label>
                                    <div class="col-md-6">
                                    <input type="text" style="background-color: white" class="form-control" id="personalAppsInputsOnValue" name="personalAppsInputsOnValue" disabled/> 
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <label for="widgetActuatorTypePersonalApps" class="col-md-4 control-label"><?= _("Widget type")?></label>

                                    <div class="col-md-6">
                                        <div class="input-group">
                                            <select class="form-control" id="widgetActuatorTypePersonalApps" name="widgetActuatorTypePersonalApps"></select>                                         
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Campi per gli widget attuatori (broker)-->
                                <div class="row" id="entityTypeRow">
                                    <label for="entityType" class="col-md-4 control-label"><?= _("Entity type")?></label>

                                    <div class="col-md-8">
                                        <div class="input-group">
                                            <input type="text" class="form-control" id="entityType" name="entityType" />                                         
                                        </div>
                                    </div>
                                </div>
                                <div class="row" id="entityDescRow">
                                    <label for="entityDesc" class="col-md-4 control-label"><?= _("Entity description")?></label>

                                    <div class="col-md-8">
                                        <div class="input-group">
                                            <input type="text" class="form-control" id="entityDesc" name="entityDesc" />                                         
                                        </div>
                                    </div>
                                </div>
                                <div class="row" id="entityAttrNameRow">
                                    <label for="entityAttrName" class="col-md-4 control-label"><?= _("Attribute name")?></label>

                                    <div class="col-md-8">
                                        <div class="input-group">
                                            <input type="text" class="form-control" id="entityAttrName" name="entityAttrName" />                                         
                                        </div>
                                    </div>
                                </div>
                                <div class="row" id="entityAttrDescRow">
                                    <label for="entityAttrDesc" class="col-md-4 control-label"><?= _("Attribute description")?></label>

                                    <div class="col-md-8">
                                        <div class="input-group">
                                            <input type="text" class="form-control" id="entityAttrDesc" name="entityAttrDesc" />                                         
                                        </div>
                                    </div>
                                </div>
                                <div class="row" id="entityAttrTypeRow">
                                    <label for="entityAttrType" class="col-md-4 control-label"><?= _("Attribute type")?></label>

                                    <div class="col-md-8">
                                        <div class="input-group">
                                            <select class="form-control" id="entityAttrType" name="entityAttrType">
                                                <option value="Integer"><?= _("Integer")?></option>
                                                <option value="Float"><?= _("Float")?></option>
                                                <option value="String"><?= _("String")?></option>
                                                <option value="Boolean"><?= _("Boolean")?></option>
                                            </select>    
                                        </div>
                                    </div>
                                </div>
                                <div class="row" id="entityAttrStartValueRow">
                                    <label for="entityAttrStartValue" class="col-md-4 control-label"><?= _("Attribute initial value")?></label>

                                    <div class="col-md-8">
                                        <div class="input-group">
                                            <input type="text" class="form-control" id="entityAttrStartValue" name="entityAttrStartValue" />                                         
                                        </div>
                                    </div>
                                </div>
                                <div class="row" id="widgetActuatorTypeRow">
                                    <label for="widgetActuatorType" class="col-md-4 control-label"><?= _("Widget type")?></label>

                                    <div class="col-md-6">
                                        <div class="input-group">
                                            <select class="form-control" id="widgetActuatorType" name="widgetActuatorType"></select>                                         
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Campi per widget che mostrano dati - Metriche da NodeRED -->
                                <div class="row" id="selectMetricRowNR">
                                    <label for="select-metricNR" class="col-md-4 control-label"><?= _("Metric")?></label>

                                    <div class="col-md-6">
                                        <select class="form-control" id="select-metricNR" name="select-metricNR"></select>     
                                    </div>
                                </div>

                                <div class="row" id="metricDescRowNR">
                                    <label for="textarea-metricNR" class="col-md-4 control-label"><?= _("Metric description")?></label>
                                    <div class="col-md-6">
                                        <textarea id ="textarea-metric-cNR" class="form-control textarea-metric" name="textarea-metricNR" rows="3"></textarea>
                                    </div>
                                </div>
                                
                                <div id ="inputComuneRowNR" class="row">    
                                    <label for="inputComuneWidgetNR" class="col-md-4 control-label"><?= _("Context")?></label>
                                    <div class="col-md-6">
                                        <div class="input-group">
                                            <input type="text" class="form-control autocomplete" id="inputComuneWidgetNR" name="inputComuneWidgetNR" novalidate>
                                            <div class="input-group-btn">
                                                <button type="button" id="link_help_modal-add-widgetNR" class="btn btn-default link_help_modal-add-widget" aria-label="Help">
                                                    <span class="glyphicon glyphicon-question-sign"></span>
                                                </button>
                                            </div>
                                        </div>
                                    </div>  
                                </div>
                                
                                <div class="row" id="widgetTypeRowNR">
                                    <label for="select-widgetNR" class="col-md-4 control-label"><?= _("Widget type")?></label>
                                    <div class="col-md-6">
                                        <select name="select-widgetNR" class="form-control" id="select-widgetNR"></select> 
                                    </div>
                                </div>
                                
                                <div class="row" id="widgetLinkRowNR">
                                    <label for="inputUrlWidgetNR" class="col-md-4 control-label"><?= _("Widget link")?></label>
                                    <div class="col-md-6">
                                        <input type="text" class="form-control" id="inputUrlWidgetNR" name="inputUrlWidgetNR" value="none" >
                                    </div>
                                </div>

                                <!-- Campi per gli widget che mostrano dati - Metriche tradizionali -->
                                <div class="row" id="selectMetricRow">
                                    <label for="select-metric" class="col-md-4 control-label"><?= _("Metric")?></label>

                                    <div class="col-md-6">
                                        <select class="form-control" id="select-metric" name="select-metric"></select>  
                                    </div>
                                </div>

                                <div class="row" id="metricDescRow">
                                    <label for="textarea-metric" class="col-md-4 control-label"><?= _("Metric description")?></label>
                                    <div class="col-md-6">
                                        <textarea id ="textarea-metric-c" class="form-control textarea-metric" name="textarea-metric" rows="3"></textarea>
                                    </div>
                                </div>
                                
                                <div id ="inputComuneRow" class="row">    
                                    <label for="inputComuneWidget" class="col-md-4 control-label"><?= _("Context")?></label>
                                    <div class="col-md-6">
                                        <div class="input-group">
                                            <input type="text" class="form-control autocomplete" id="inputComuneWidget" name="inputComuneWidget" novalidate>
                                            <div class="input-group-btn">
                                                <button type="button" id="link_help_modal-add-widget" class="btn btn-default link_help_modal-add-widget" aria-label="Help">
                                                    <span class="glyphicon glyphicon-question-sign"></span>
                                                </button>
                                            </div>
                                        </div>
                                    </div>  
                                </div>
                                
                                <div class="row" id="widgetTypeRow">
                                    <label for="select-widget" class="col-md-4 control-label"><?= _("Widget type")?></label>
                                    <div class="col-md-6">
                                        <select name="select-widget" class="form-control" id="select-widget"></select> 
                                    </div>
                                </div>
                                
                                <div class="row" id="widgetLinkRow">
                                    <label for="inputUrlWidget" class="col-md-4 control-label"><?= _("Widget link")?></label>
                                    <div class="col-md-6">
                                        <input type="text" class="form-control" id="inputUrlWidget" name="inputUrlWidget">
                                    </div>
                                </div>

                                <div id ="schedulerRow" class="row">
                                    <label for="inputSchedulerWidget" class="col-md-4 control-label" style="display: none"><?= _("Scheduler")?></label>
                                    <div id="inputSchedulerWidgetDiv" class="col-md-6" style="display: none">
                                        <div id="inputSchedulerWidgetGroupDiv"class="input-group" style="display: none">
                                            <select class="form-control" id="inputSchedulerWidget" name="inputSchedulerWidget" style="display: none"></select>
                                        </div>
                                    </div>
                                </div>    
                                <div id ="jobsAreasRow" class="row">    
                                <label for="inputJobsAreasWidget" class="col-md-4 control-label" style="display: none"><?= _("Jobs areas")?></label>
                                    <div id="inputJobsAreasWidgetDiv" class="col-md-6" style="display: none">
                                        <div id="inputJobsAreasWidgetGroupDiv"class="input-group" style="display: none">
                                            <select class="form-control" id="inputJobsAreasWidget" name="inputJobsAreasWidget" style="display: none"></select>
                                        </div>
                                    </div>
                                </div>

                                <div id ="jobsGroupsRow" class="row">    
                                <label for="inputJobsGroupsWidget" class="col-md-4 control-label" style="display: none"><?= _("Jobs groups")?></label>
                                    <div id="inputJobsGroupsWidgetDiv" class="col-md-6" style="display: none">
                                        <div id="inputJobsGroupsWidgetGroupDiv"class="input-group" style="display: none">
                                            <select class="form-control" id="inputJobsGroupsWidget" name="inputJobsGroupsWidget" style="display: none"></select>
                                        </div>
                                    </div>
                                </div>

                                <div id ="jobsNamesRow" class="row">    
                                <label for="inputJobsNamesWidget" class="col-md-4 control-label" style="display: none"><?= _("Jobs names")?></label>
                                    <div id="inputJobsNamesWidgetDiv" class="col-md-6" style="display: none">
                                        <div id="inputJobsNamesWidgetGroupDiv"class="input-group" style="display: none">
                                            <select class="form-control" id="inputJobsNamesWidget" name="inputJobsNamesWidget" style="display: none"></select>
                                        </div>
                                    </div>
                                </div>

                                <input type="hidden" id="firstFreeRowInput" name="firstFreeRowInput">
                                <input type="hidden" id="schedulerName" name="schedulerName">
                                <input type="hidden" id="host" name="host">
                                <input type="hidden" id="user" name="user">
                                <input type="hidden" id="pass" name="pass">
                                <input type="hidden" id="jobArea" name="jobArea">
                                <input type="hidden" id="jobGroup" name="jobGroup">
                                <input type="hidden" id="jobName" name="jobName">
                                <input type="hidden" id="serviceUri" name="serviceUri">
                                <input type="hidden" id="hospitalList" name="hospitalList">
                            </div>
                        </div>
                        
                        <div class="well wellCustom2right" style="height: 416px" id="genericWidgetPropertiesDiv">
                            <legend class="legend-form-group"><?= _("Generic widget properties")?></legend>
                            <div class="form-group">
                                <div class="row">
                                    <label id="titleLabel" for="inputTitleWidget" class="col-md-2 control-label addWidgetParLabel"><?= _("Title")?></label> 
                                    <div class="col-md-3">
                                        <input type="text" class="form-control" id="inputTitleWidget" name="inputTitleWidget">
                                    </div>
                                    
                                    <label id="bckColorLabel" for="inputColorWidget" class="col-md-3 control-label addWidgetParLabel"><?= _("Background color")?></label>
                                    <div class="col-md-3">
                                        <div class="input-group color-choice">
                                            <input type="text" class="form-control demo-1 demo-auto" id="inputColorWidget" name="inputColorWidget" value="#FFFFFF" required>
                                            <span class="input-group-addon"><i id="color_widget"></i></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <label for="inputFontSize" class="col-md-2 control-label addWidgetParLabel"><?= _("Content")?><br/><?= _("font size")?></label>
                                    <div class="col-md-3">
                                        <input type="text" class="form-control" id="inputFontSize" name="inputFontSize" >
                                    </div>
                                    
                                    <label for="inputFontColor" class="col-md-3 control-label addWidgetParLabel"><?= _("Content font color")?></label>
                                    <div class="col-md-3">
                                        <div class="input-group color-choice">
                                            <input type="text" class="form-control demo-1 demo-auto" id="inputFontColor" name="inputFontColor" value="#000000">
                                            <span class="input-group-addon"><i id="widgetFontColor"></i></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <label for="inputFrameColorWidget" class="col-md-2 control-label addWidgetParLabel">Header <br/>color</label>
                                    <div class="col-md-3">
                                        <div class="input-group color-choice">
                                            <input type="text" class="form-control demo-1 demo-auto" id="inputFrameColorWidget" name="inputFrameColorWidget" value="#eeeeee" required>
                                            <span class="input-group-addon"><i></i></span>
                                        </div>
                                    </div>
                                    <label for="inputHeaderFontColorWidget" class="col-md-3 control-label addWidgetParLabel"><?= _("Header text color")?></label>
                                    <div class="col-md-3">
                                        <div class="input-group color-choice">
                                            <input type="text" class="form-control demo-1 demo-auto" id="inputHeaderFontColorWidget" name="inputHeaderFontColorWidget" value="#000000" required>
                                            <span class="input-group-addon"><i id="widgetHeaderFontColor"></i></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <label for="select-IntTemp-Widget" class="col-md-2 control-label addWidgetParLabel"><?= _("Period")?></label>
                                    <div class="col-md-3">
                                        <select name="select-IntTemp-Widget" class="form-control" id="select-IntTemp-Widget" required>
                                            <option value="Nessuno"><?= _("No")?></option>
                                            <option value="4 Ore"><?= _("4 Hours")?></option>
                                            <option value="12 Ore"><?= _("12 Hours")?></option>
                                            <option value="Giornaliera"><?= _("Day")?></option>
                                            <option value="Settimanale"><?= _("Week")?></option>
                                            <option value="Mensile"><?= _("Month")?></option>
                                            <option value="Semestrale"><?= _("6 Months")?></option>
                                            <option value="Annuale"><?= _("Year")?></option>
                                            <option value="2 Anni"><?= _("2 Years")?></option>
                                        	<option value="10 Anni"><?= _("10 Years")?></option>
                                        </select>
                                    </div>
                                    <label for="inputFreqWidget" class="col-md-3 control-label addWidgetParLabel"><?= _("Refresh rate (s)")?></label>

                                    <div class="col-md-3">
                                        <input type="text" class="form-control" id="inputFreqWidget" name="inputFreqWidget" placeholder="" required>
                                    </div>
                                </div>                     
                                <div class="row">
                                    <label for="inputSizeRowsWidget" class="col-md-2 control-label addWidgetParLabel"><?= _("Height")?></label>
                                    <div class="col-md-3">
                                        <select class="form-control" id="inputSizeRowsWidget" name="inputSizeRowsWidget" placeholder="">                                            
                                        </select>
                                    </div>
                                    <label for="inputSizeColumnsWidget" class="col-md-3 control-label addWidgetParLabel"><?= _("Width")?></label>
                                    <div class="col-md-3">
                                        <select class="form-control" id="inputSizeColumnsWidget" name="inputSizeColumnsWidget" placeholder="">                                           
                                        </select>
                                    </div>
                                </div>
                                <div class="row">
                                    <label for="inputUdmWidget" class="col-md-2 control-label addWidgetParLabel"><?= _("U/M")?></label>
                                    <div class="col-md-3">
                                        <input type="text" class="form-control" id="inputUdmWidget" name="inputUdmWidget">
                                    </div>
                                    
                                    <label for="inputUdmWidget" class="col-md-3 control-label addWidgetParLabel"><?= _("U/M position")?></label>
                                    <div class="col-md-3">
                                        <select name="inputUdmPosition" class="form-control" id="inputUdmPosition" required>
                                            <option value="next"><?= _("Next to value")?></option>
                                            <option value="below"><?= _("Below value")?></option>
                                        </select>
                                    </div>
                                </div>
                                <div class="row">
                                    <label for="inputUdmWidget" class="col-md-2 control-label addWidgetParLabel"><?= _("Show header")?></label>
                                    <div class="col-md-3">
                                        <select id="inputShowTitle" name="inputShowTitle" class="form-control" required>
                                            <option value="yes"><?= _("Yes")?></option>
                                            <option value="no"><?= _("No")?></option>
                                        </select>
                                    </div>
                                    <label for="inputFontFamilyWidget" class="col-md-3 control-label addWidgetParLabel"><?= _("Font type (autosuggestion)")?></label>
                                    <div class="col-md-3">
                                        <input type="text" class="form-control autocomplete" id="inputFontFamilyWidget" name="inputFontFamilyWidget" required>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="well wellCustom2left" id="specificWidgetPropertiesDiv">
                            <legend class="legend-form-group"><?= _("Specific widget properties")?></legend>
                            <div class="form-group">
                                <!-- NON CANCELLARE -->
                                <input type="hidden" id="parameters" name="parameters">
                                <!-- NON CANCELLARE -->
                                <input type="hidden" id="barsColors" name="barsColors">
                            </div>
                        </div>
                        
                        <input type="hidden" id="dashboardIdUnderEdit" name="dashboardIdUnderEdit" />
                        <input type="hidden" id="dashboardUser" name="dashboardUser" />
                        <input type="hidden" id="dashboardEditor" name="dashboardEditor" />
                        <input type="hidden" id="currentDashboardTitle" name="currentDashboardTitle" />
                        <input type="hidden" id="currentDashboardSubtitle" name="currentDashboardSubtitle" />
                        
                        <div class="well wellCustomFooter">
                            <button id="button_add_widget" name="add_widget" type="submit" class="btn btn-primary widgetFormButton internalLink" disabled><?= _("Confirm")?></button>
                            <button id="button_close_popup" type="button" class="btn btn-default widgetFormButton widgetFormButtonMargin internalLink" data-dismiss="modal"><?= _("Cancel")?></button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div> 
    <!-- Fine modale aggiunta widget -->
    
    <!-- Modale modifica dashboard -->
    <div class="modal fade" id="modalEditDashboard" tabindex="-1" role="dialog" aria-hidden="true">
	<div class="modal-dialog" role="document">
            <form id="editDashboardForm" class="form-horizontal" name="editDashboardForm" role="form" method="post" action="../controllers/updateDashboard.php?action=updateAdvancedProperties" data-toggle="validator" enctype="multipart/form-data">  
            <div class="modal-content">
                  <div class="modalHeader centerWithFlex">
                      <?= _("Dashboard properties")?>
                  </div>
                  <div id="editDashboardModalBody" class="modal-body modalBody">
                  <ul class="nav nav-tabs nav-justified">
                      <li class="active"><a data-toggle="tab" href="#measuresTab" class="dashboardWizardTabTxt"><?= _("Measures")?></a></li>
                      <li><a data-toggle="tab" href="#headerTab" class="dashboardWizardTabTxt"><?= _("Header")?></a></li>
                      <li><a data-toggle="tab" href="#bckTab" class="dashboardWizardTabTxt"><?= _("Background")?></a></li>
                  </ul>

                  <div class="tab-content">
                      <!-- Measures tab -->
                      <div id="measuresTab" class="tab-pane fade in active">
                            <div class="row">
                                <div class="col-xs-3">
                                    <div class="col-xs-12 centerWithFlex modalNewLabel">
                                        <?= _("Responsive")?>
                                    </div>
                                    <div class="col-xs-12 centerWithFlex">
                                        <input id="inputDashboardViewMode" name="inputDashboardViewMode" type="checkbox">
                                    </div>
                                </div>
                                
                                <div class="col-xs-9">
                                    <div class="col-xs-12 centerWithFlex modalNewLabel">
                                        <?= _("Dashboard width (cells)")?>
                                    </div>
                                    <div class="col-xs-12 centerWithFlex">
                                       <input id="inputWidthDashboard" name="inputWidthDashboard" data-slider-id="inputWidthDashboardSlider" type="text" data-slider-min="1" data-slider-max="300" data-slider-step="1"/>
                                    </div>
                                </div>  
                                
                                <!--<div class="col-xs-12 modalCell">
                                    <div class="modalFieldCnt">
                                        <select name="inputDashboardViewMode" class="modalInputTxt" id="inputDashboardViewMode" required>
                                            <option value="fixed">Fixed width dashboard</option>
                                            <option value="smallResponsive">Responsive on small displays (width < 768px)</option>
                                            <option value="mediumResponsive">Responsive on small and medium displays (width < 992px)</option>
                                            <option value="largeResponsive">Responsive on small, medium and large displays (width < 1200px)</option>
                                            <option value="alwaysResponsive">Always responsive</option>
                                        </select>
                                    </div>
                                    <div class="modalFieldLabelCnt">View mode</div>
                                </div>-->
                            </div>
                          
                          
                          <!--<div class="row">
                              <div class="col-xs-6 modalCell">
                                  <div class="modalFieldCnt">
                                       <input type="text" class="modalInputTxt" name="percentWidth" id="percentWidth" disabled> 
                                  </div>
                                  <div class="modalFieldLabelCnt">Width (%) on your screen</div>
                              </div>
                          </div>-->
                      </div>
                      
                      <!-- Header tab -->
                      <div id="headerTab" class="tab-pane fade">
                          <div class="row">
                                <div class="col-xs-4">
                                    <div class="col-xs-12 centerWithFlex modalNewLabel">
                                         <?= _("Show header")?>
                                    </div>
                                    <div class="col-xs-12 centerWithFlex">
                                        <input id="headerVisible" name="headerVisible" type="checkbox">
                                    </div>
                                </div>
                              
                                <div class="col-xs-8">
                                    <div class="col-xs-12 centerWithFlex modalNewLabel">
                                        <?= _("Header logo")?>
                                    </div>
                                    <div class="col-xs-12 centerWithFlex">
                                       <input id="dashboardLogoInput" name="dashboardLogoInput" type="file" class="filestyle form-control" data-badge="false" data-input ="true" data-size="nr" data-buttonName="btn-primary" data-buttonText="File">
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xs-12">
                                    <div class="col-xs-12 centerWithFlex modalNewLabel">
                                       <?= _("Header logo link")?> 
                                    </div>
                                    <div class="col-xs-12 centerWithFlex">
                                        <input type="text" class="form-control" name="dashboardLogoLinkInput" id="dashboardLogoLinkInput"> 
                                    </div>
                                </div>
                            </div>    
                      </div>
                      
                      <div id="bckTab" class="tab-pane fade">
                        <div class="row">  
                         <div class="col-xs-4">
                            <div class="col-xs-12 centerWithFlex modalNewLabel">
                                <?= _("Use image")?>
                            </div>
                            <div class="col-xs-12 centerWithFlex">
                                <input id="dashBckImgFlag" name="dashBckImgFlag" type="checkbox">
                            </div>
                        </div>   
                         <div class="col-xs-8">
                            <div class="col-xs-12 centerWithFlex modalNewLabel">
                                <?= _("Upload new image")?>
                            </div>
                            <div class="col-xs-12 centerWithFlex">
                               <input id="dashboardBckImg" name="dashboardBckImg" type="file" class="filestyle form-control" data-badge="false" data-input ="true" data-size="nr" data-buttonName="btn-primary" data-buttonText="File">
                            </div>
                         </div>
                        </div>    
                      </div>    
                  </div>
                  
                    <input type="hidden" id="dashboardIdUnderEdit" name="dashboardIdUnderEdit" />
                    <input type="hidden" id="dashboardUser" name="dashboardUser" />
                    <input type="hidden" id="dashboardEditor" name="dashboardEditor" />
                    <input type="hidden" id="currentDashboardTitle" name="currentDashboardTitle" />
                    <input type="hidden" id="currentDashboardSubtitle" name="currentDashboardSubtitle" />
                      
                  <div id="editDashboardModalFooter" class="modal-footer">
                    <button type="button" id="editDashboardCancelBtn" class="btn cancelBtn" data-dismiss="modal"><?= _("Cancel")?></button>
                    <button type="submit" id="editDashboardConfirmBtn" name="editDashboard" class="btn confirmBtn internalLink"><?= _("Confirm")?></button>
                  </div>
            </div>
          </form>  
          </div>
      </div>
    </div>    
    <!-- Fine modale modifica dashboard -->    
    
    <!-- Modale screenshot dashboard -->
    <div class="modal fade" id="scrDashboardModal" tabindex="-1" role="dialog" aria-hidden="true">
	<div class="modal-dialog" role="document">
            <form id="scrDashboardForm" class="form-horizontal" name="scrDashboardForm" role="form" method="POST" action="../controllers/genDashScr.php" data-toggle="validator">  
            <div class="modal-content">
                  <div class="modalHeader centerWithFlex">
                       <?= _("Dashboard screenshot")?> 
                  </div>
                  <div id="scrDashboardModalBody" class="modal-body modalBody">
                    <div class="row">
                        <div class="col-xs-12" id="scrDashboardModalContent">
                            <div class="col-xs-12 centerWithFlex scrDashboardDecalog">
                                    <?= _("1) Open the dashboard in view mode")?><br>
                                    <?= _("2) Take a snapshot (e.g. with STAMP or with specific tools)")?><br>
                                    <?= _("3) Save it in your mass memory")?><br>
                                    <?= _("4) Upload it from the following input")?><br>   
                            </div>
                            <div class="col-xs-12 centerWithFlex">
                               <input id="dashboardScrInput" name="dashboardScrInput" type="file" class="filestyle form-control" data-badge="false" data-input ="true" data-size="nr" data-buttonName="btn-primary" data-buttonText="File">
                            </div>
                        </div>
                        <div class="col-xs-12 centerWithFlex" id="scrDashboardModalMsg">
                            
                        </div>    
                    </div>   
                     
                    <input type="hidden" id="dashboardIdUnderEdit" name="dashboardIdUnderEdit" />
                  <div id="scrDashboardModalFooter" class="modal-footer">
                    <button type="button" id="scrDashboardCancelBtn" class="btn cancelBtn" data-dismiss="modal"><?= _("Cancel")?></button>
                    <button type="submit" id="scrDashboardConfirmBtn" name="scrDashboardConfirmBtn" class="btn confirmBtn"><?= _("Confirm")?></button>
                  </div>
            </div>
          </form>  
          </div>
      </div>
    </div>    
    <!-- Fine modale screenshot dashboard -->   
    
    <!-- Modale impossibilità di apertura link in nuovo tab per widgetExternalContent -->
    <div class="modal fade" tabindex="-1" id="newTabLinkOpenImpossibile" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document"> 
            <div class="modal-content">
                <div class="modal-header centerWithFlex">
                    <h4 class="modal-title"><?= _("External content")?></h4>
                </div>
                <div class="modal-body">
                    <div id="newTabLinkOpenImpossibileMsg"></div>
                    <div id="newTabLinkOpenImpossibileIcon">
                         <i class="fa fa-frown-o"></i>           
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Modale cambio stato evacuation plan -->
    <div class="modal fade" tabindex="-1" id="modalChangePlanStatus" role="dialog" aria-labelledby="myModalLabel">
        <div id="modalChangePlanStatusDialog" class="modal-dialog modal-lg" role="document"> 
            <div class="modal-content">
                <div id="modalChangePlanStatusModalTitle" class="modal-header centerWithFlex">
                    <?= _("evacuation plan status management")?>
                </div>
                <div id="modalChangePlanStatusMain" class="modal-body container-fluid">
                    <div class="row">
                        <div class="col-sm-6 centerWithFlex modalChangePlanStatusLabel">
                            <?= _("plan identifier")?>
                        </div> 
                        <div class="col-sm-6 centerWithFlex modalChangePlanStatusLabel">
                            <?= _("current approval status")?>
                        </div>
                    </div>
                    <div class="row">
                       <div class="col-sm-6 centerWithFlex" id="modalChangePlanStatusTitle" ></div> 
                       <div class="col-sm-4 col-sm-offset-1 centerWithFlex" id="modalChangePlanStatusStatus"></div>
                    </div>

                    <div class="row">
                       <div class="col-sm-6 col-sm-offset-3 centerWithFlex modalChangePlanStatusLabel">
                           <?= _("new approval status")?> 
                       </div> 
                    </div>
                    <div class="row">
                       <div class="col-sm-4 col-sm-offset-4 centerWithFlex">
                           <select class="form-control" id="modalChangePlanStatusSelect" name="modalChangePlanStatusSelect" required></select> 
                       </div> 
                    </div>
                </div>
                <div id="modalChangePlanStatusWait" class="modal-body container-fluid">
                    <div class="row">
                        <div class="col-sm-6 col-sm-offset-3 centerWithFlex">
                           <?= _("updating status, please wait")?> 
                        </div> 
                    </div>
                    <div class="row">
                        <div class="col-sm-6 col-sm-offset-3 centerWithFlex">
                            <i class="fa fa-spinner fa-spin" style="font-size:84px"></i>
                        </div> 
                    </div>
                </div>
                <div id="modalChangePlanStatusOk" class="modal-body container-fluid">
                    <div class="row">
                        <div class="col-sm-10 col-sm-offset-1 centerWithFlex">
                            <?= _("status successfully updated")?>
                        </div> 
                    </div>
                    <div class="row">
                        <div class="col-sm-6 col-sm-offset-3 centerWithFlex">
                            <i class="fa fa-thumbs-o-up" style="font-size:84px"></i>
                        </div> 
                    </div>
                </div>
                <div id="modalChangePlanStatusKo" class="modal-body container-fluid">
                    <div class="row">
                        <div class="col-sm-12 centerWithFlex">
                            <?= _("error while trying to send new status to server, please try again")?>
                        </div> 
                    </div>
                    <div class="row">
                        <div class="col-sm-6 col-sm-offset-3 centerWithFlex">
                            <i class="fa fa-thumbs-down" style="font-size:84px"></i>
                        </div> 
                    </div>
                </div>

                <input type="hidden" id="modalChangePlanStatusPlanId" />
                <input type="hidden" id="modalChangePlanStatusCurrentStatus" />

                <div id="modalChangePlanStatusFooter" class="modal-footer centerWithFlex">
                   <button type="button" class="btn btn-secondary" id="modalChangePlanStatusCancelBtn"><?= _("cancel")?></button>
                   <button type="button" class="btn btn-primary" id="modalChangePlanStatusConfirmBtn"><?= _("confirm")?></button>
                </div>
            </div>
        </div>
    </div>
    <!-- Fine modale cambio stato evacuation plan -->
    
    <!-- Modale modifica widget -->
    <div class="modal fade" id="modal-modify-widget" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modalDialogWidget" role="document" id="modify01">
            <div class="modal-content modalContentWidgetForm">
                <div class="modal-header">
                    <h4 class="modal-title"><?= _("Modify widget")?></h4>
                </div>
                <div class="modal-body">
                    <form id="form-modify-widget" class="form-horizontal" name="form-modify-widget" role="form" method="post" action="" enctype="multipart/form-data" data-toggle="validator">
                        <!-- Nuovo codice -->
                        <div class="well wellCustom2left" id="metricAndWidgetChoiceM">
                            <legend class="legend-form-group"><?= _("Metric and widget choice")?></legend>
                            <div class="form-group">
                                <div class="row">
                                    <label for="widgetCategoryM" class="col-md-4 control-label"><?= _("Widget category")?></label>

                                    <div class="col-md-8">
                                        <div id="widgetCategoryM"></div>  
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <label for="actuatorTargetM" class="col-md-4 control-label"><?= _("Actuator target")?></label>
                                    <div class="col-md-8">
                                        <div id="actuatorTargetM"></div>   
                                        <input type="hidden" id="widgetActuatorTargetM" name="widgetActuatorTargetM" />
                                    </div>
                                </div>
                                
                                <!-- Campi per gli widget attuatori su NodeRED -->
                                <div class="row">
                                    <label for="personalAppsInputsM" class="col-md-4 control-label"><?= _("Input from personal apps")?></label>
                                    <div class="col-md-8">
                                        <div id="personalAppsInputsM"></div>      
                                    </div>
                                </div>
                                <div class="row">
                                    <label for="personalAppsInputsValueTypeM" class="col-md-4 control-label"><?= _("Value type")?></label>
                                    <div class="col-md-8">
                                        <div id="personalAppsInputsValueTypeM"></div>      
                                    </div>
                                </div>
                                <div class="row">
                                    <label for="personalAppsInputsStartValueM" class="col-md-4 control-label"><?= _("Start value")?></label>
                                    <div class="col-md-8">
                                        <div id="personalAppsInputsStartValueM"></div>      
                                    </div>
                                </div>
                                <div class="row">
                                    <label for="personalAppsInputsDomainTypeM" class="col-md-4 control-label"><?= _("Domain type")?></label>
                                    <div class="col-md-8">
                                        <div id="personalAppsInputsDomainTypeM"></div>
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <label for="personalAppsInputsMinValueM" class="col-md-4 control-label"><?= _("Min value")?></label>
                                    <div class="col-md-8">
                                        <div id="personalAppsInputsMinValueM"></div>
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <label for="personalAppsInputsMaxValueM" class="col-md-4 control-label"><?= _("Max value")?></label>
                                    <div class="col-md-8">
                                        <div id="personalAppsInputsMaxValueM"></div>
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <label for="personalAppsInputsOffValueM" class="col-md-4 control-label"><?= _("Off value")?></label>
                                    <div class="col-md-8">
                                        <div id="personalAppsInputsOffValueM"></div>
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <label for="personalAppsInputsOnValueM" class="col-md-4 control-label"><?= _("On value")?></label>
                                    <div class="col-md-8">
                                        <div id="personalAppsInputsOnValueM"></div>
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <label for="widgetActuatorTypePersonalAppsM" class="col-md-4 control-label"><?= _("Widget type")?></label>
                                    <div class="col-md-8">
                                        <div id="widgetActuatorTypePersonalAppsM"></div>
                                        <input type="hidden" id="widgetActuatorTypeAppsHiddenM" name="widgetActuatorTypeAppsHiddenM" />
                                    </div>
                                </div>
                                
                                
                                
                                <!-- Campi per gli widget attuatori su broker-->
                                <div class="row" id="entityIdRowM">
                                    <label for="entityIdM" class="col-md-4 control-label"><?= _("Entity id")?></label>

                                    <div class="col-md-8">
                                        <div id="entityIdM"></div>      
                                    </div>
                                </div>
                                <div class="row" id="entityTypeRowM">
                                    <label for="entityTypeM" class="col-md-4 control-label"><?= _("Entity type")?></label>

                                    <div class="col-md-8">
                                        <div id="entityTypeM"></div>      
                                    </div>
                                </div>
                                <div class="row" id="entityDescRowM">
                                    <label for="entityDescM" class="col-md-4 control-label"><?= _("Entity description")?></label>

                                    <div class="col-md-8">
                                        <div id="entityDescM"></div>                                         
                                    </div>
                                </div>
                                <div class="row" id="entityAttrNameRowM">
                                    <label for="entityAttrNameM" class="col-md-4 control-label"><?= _("Attribute name")?></label>

                                    <div class="col-md-8">
                                        <div id="entityAttrNameM"></div>
                                    </div>
                                </div>
                                <div class="row" id="entityAttrDescRowM">
                                    <label for="entityAttrDescM" class="col-md-4 control-label"><?= _("Attribute description")?></label>

                                    <div class="col-md-8">
                                        <div id="entityAttrDescM"></div>
                                    </div>
                                </div>
                                <div class="row" id="entityAttrTypeRowM">
                                    <label for="entityAttrTypeM" class="col-md-4 control-label"><?= _("Attribute type")?></label>

                                    <div class="col-md-8">
                                        <div id="entityAttrTypeM"></div>
                                    </div>
                                </div>
                                <div class="row" id="widgetActuatorTypeRowM">
                                    <label for="widgetActuatorType" class="col-md-4 control-label"><?= _("Widget type")?></label>

                                    <div class="col-md-8">
                                        <div id="widgetActuatorTypeShownM"></div> 
                                        <input type="hidden" id="widgetActuatorTypeM" name="widgetActuatorTypeM" />
                                    </div>
                                </div>
                                
                                <!-- Campi per gli widget data viewer -->
                                <div class="row" id="metricWidgetMRow">
                                    <label for="metricWidgetM" class="col-md-4 control-label"><?= _("Metric")?></label>
                                    <div class="col-md-6">
                                        <input type="text" class="form-control" id="metricWidgetM" name="metricWidgetM" readonly>
                                    </div>
                                </div>
                                <div class="row" id="inputNameWidgetMRow">
                                    <label for="inputNameWidgetM" class="col-md-4 control-label"><?= _("Widget name")?></label>
                                    <div class="col-md-6">
                                        <input type="text" class="form-control" id="inputNameWidgetM" name="inputNameWidgetM" placeholder="Title" readonly>                                 
                                    </div>
                                </div>
                                <div class="row" id="select-widget-mRow">
                                    <label for="select-widget-m" class="col-md-4 control-label"><?= _("Widget type")?></label>
                                    <div class="col-md-6">
                                        <div class="input-group">
                                            <select name="select-widget-m" class="form-control" id="select-widget-m"></select>
                                            <div id="mod-n-metrcis-widget" class="input-group-addon"></div>
                                        </div>   
                                    </div>
                                </div>   
                                <div id="inputComuneRowM" class="row">
                                    <label for="inputComuneWidgetM" class="col-md-4 control-label"><?= _("Context")?></label>
                                    <div class="col-md-6">
                                        <div class="input-group">
                                            <input type="text" class="form-control" id="inputComuneWidgetM" name="inputComuneWidgetM">
                                            <div class="input-group-btn">
                                                <button type="button" id="link_help_modal-add-widget-m" class="btn btn-default link_help_modal-add-widget" aria-label="Help">
                                                    <span class="glyphicon glyphicon-question-sign"></span>
                                                </button>
                                            </div>

                                        </div>
                                    </div> 
                                </div>
                                <div id="urlWidgetMRow" class="row">
                                    <label for="urlWidgetM" class="col-md-4 control-label"><?= _("Widget link")?></label>
                                    <div class="col-md-6">
                                        <input type="text" class="form-control" id="urlWidgetM" name="urlWidgetM">
                                    </div>
                                </div>
                                <div id="textarea-metric-widget-mRow" class="row">
                                    <label for="textarea-metric-widget-m" class="col-md-4 control-label"><?= _("Metric description")?></label>
                                    <div class="col-md-6">
                                        <textarea id ="textarea-metric-widget-m" class="form-control textarea-metric" name="textarea-metric-widget-m" rows="3"></textarea>
                                    </div>
                                </div>
                                <div id="schedulerRowM" class="row">
                                    <label for="inputSchedulerWidgetM" class="col-md-4 control-label" style="display: none"><?= _("Scheduler")?></label>
                                    <div id="inputSchedulerWidgetDivM" class="col-md-6" style="display: none">
                                        <div id="inputSchedulerWidgetGroupDivM"class="input-group" style="display: none">
                                            <select class="form-control" id="inputSchedulerWidgetM" name="inputSchedulerWidgetM" style="display: none"></select>
                                        </div>
                                    </div>
                                </div>    
                                <div id="jobsAreasRowM" class="row">    
                                    <label for="inputJobsAreasWidgetM" class="col-md-4 control-label"><?= _("Jobs areas")?></label>
                                    <div id="inputJobsAreasWidgetDivM" class="col-md-6" style="display: none">
                                        <div id="inputJobsAreasWidgetGroupDivM"class="input-group" style="display: none">
                                            <select class="form-control" id="inputJobsAreasWidgetM" name="inputJobsAreasWidgetM" style="display: none"></select>
                                        </div>
                                    </div>
                                </div>
                                <div id="jobsGroupsRowM" class="row">    
                                    <label for="inputJobsGroupsWidgetM" class="col-md-4 control-label" style="display: none"><?= _("Jobs groups")?></label>
                                    <div id="inputJobsGroupsWidgetDivM" class="col-md-6" style="display: none">
                                        <div id="inputJobsGroupsWidgetGroupDivM"class="input-group" style="display: none">
                                            <select class="form-control" id="inputJobsGroupsWidgetM" name="inputJobsGroupsWidgetM" style="display: none"></select>
                                        </div>
                                    </div>
                                </div>
                                <div id="jobsNamesRowM" class="row">    
                                    <label for="inputJobsNamesWidgetM" class="col-md-4 control-label" style="display: none"><?= _("Jobs names")?></label>
                                    <div id="inputJobsNamesWidgetDivM" class="col-md-6" style="display: none">
                                        <div id="inputJobsNamesWidgetGroupDivM"class="input-group" style="display: none">
                                            <select class="form-control" id="inputJobsNamesWidgetM" name="inputJobsNamesWidgetM" style="display: none"></select>
                                        </div>
                                    </div>
                                </div>
                                
                                <input type="hidden" id="widgetIdM" name="widgetIdM">
                                <input type="hidden" id="widgetCategoryHiddenM" name="widgetCategoryHiddenM">
                                <input type="hidden" id="schedulerNameM" name="schedulerNameM">
                                <input type="hidden" id="hostM" name="hostM">
                                <input type="hidden" id="userM" name="userM">
                                <input type="hidden" id="passM" name="passM">
                                <input type="hidden" id="jobAreaM" name="jobAreaM">
                                <input type="hidden" id="jobGroupM" name="jobGroupM">
                                <input type="hidden" id="jobNameM" name="jobNameM">
                                <input type="hidden" id="serviceUriM" name="serviceUriM">
                                <input type="hidden" id="hospitalListM" name="hospitalListM">
                            </div>
                        </div>
                        <div class="well wellCustom2right" style="height: 386px" id="genericWidgetPropertiesDivM">
                            <legend class="legend-form-group"><?= _("Generic widget properties")?></legend>
                            <div class="form-group">
                                <div class="row">
                                    <label for="inputTitleWidgetM" class="col-md-2 control-label addWidgetParLabel"><?= _("Title")?></label>
                                    <div class="col-md-3">
                                        <input type="text" class="form-control" id="inputTitleWidgetM" name="inputTitleWidgetM">
                                    </div>
                                    <label for="inputColorWidgetM" class="col-md-3 addWidgetParLabel control-label"><?= _("Backgound color")?></label>
                                    <div class="col-md-3">
                                        <div id="widgetColorPickerContainer" class="input-group">
                                            <input type="text" class="form-control demo-1 demo-auto" id="inputColorWidgetM" name="inputColorWidgetM" required>  <!-- value="#FFFFFF" -->
                                            <span class="input-group-addon"><i id="color_widget_M"></i></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <label for="inputFontSizeM" class="col-md-2 addWidgetParLabel control-label">Content<br/>font size</label>
                                    <div class="col-md-3">
                                        <input type="text" class="form-control" id="inputFontSizeM" name="inputFontSizeM">
                                    </div>
                                    <label for="inputFontColorM" class="col-md-3 addWidgetParLabel control-label"><?= _("Content font color")?></label>
                                    <div class="col-md-3">
                                        <div id="widgetFontColorPickerContainerM" class="input-group color-choice">
                                            <input type="text" class="form-control demo-1 demo-auto" id="inputFontColorM" name="inputFontColorM">
                                            <span class="input-group-addon"><i id="widgetFontColorM"></i></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <label for="select-frameColor-Widget-m" class="col-md-2 addWidgetParLabel control-label"><?= _("Header color")?></label>
                                    <div class="col-md-3">
                                        <div id="widgetFrameColorPickerContainer" class="input-group"> <!-- color-choice -->
                                            <input type="text" class="form-control demo-1 demo-auto" id="select-frameColor-Widget-m" name="select-frameColor-Widget-m" required> <!-- value="#eeeeee" -->
                                            <span class="input-group-addon"><i id="color_fm"></i></span>
                                        </div>
                                    </div>
                                    <label for="inputHeaderFontColorWidgetM" class="col-md-3 control-label addWidgetParLabel"><?= _("Header text color")?></label>
                                    <div class="col-md-3">
                                        <div id="widgetFrameFontColorPickerContainer" class="input-group">
                                            <input type="text" class="form-control demo-1 demo-auto" id="inputHeaderFontColorWidgetM" name="inputHeaderFontColorWidgetM" required>
                                            <span class="input-group-addon"><i id="widgetHeaderFontColorM"></i></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <label for="select-IntTemp-Widget-m" class="col-md-2 addWidgetParLabel control-label"><?= _("Period")?></label>
                                    <div class="col-md-3">
                                        <select name="select-IntTemp-Widget-m" class="form-control" id="select-IntTemp-Widget-m">
                                            <option value="Nessuno"><?= _("No")?></option>                                           
                                            <option value="4 Ore"><?= _("4 Hours")?></option>
                                            <option value="12 Ore"><?= _("12 Hours")?></option>
                                            <option value="Giornaliera"><?= _("Day")?></option>
                                            <option value="Settimanale"><?= _("Week")?></option>
                                            <option value="Mensile"><?= _("Month")?></option>
                                            <option value="Semestrale"><?= _("6 Months")?></option>
                                            <option value="Annuale"><?= _("Year")?></option>
                                    		<option value="2 Anni"><?= _("2 Years")?></option>
                                        	<option value="10 Anni"><?= _("10 Years")?></option>  
                                        </select>
                                    </div>
                                    <label for="inputFreqWidgetM" class="col-md-3 addWidgetParLabel control-label"><?= _("Refresh rate (s)")?></label>
                                    <div class="col-md-3">
                                        <input type="text" class="form-control" id="inputFreqWidgetM" name="inputFreqWidgetM" placeholder="" required>
                                    </div>
                                </div>
                                <div class="row">
                                    <label for="input-rows-m" class="col-md-2 addWidgetParLabel control-label"><?= _("Height")?></label>
                                    <div class="col-md-3">
                                        <select class="form-control" id="inputRows-m" name="inputRows-m" placeholder="">                                            
                                        </select>
                                    </div>
                                    <label for="input-Column" class="col-md-3 addWidgetParLabel control-label"><?= _("Width")?></label>
                                    <div class="col-md-3">
                                        <select class="form-control" id="inputColumn-m" name="inputColumn-m" placeholder="">                                            
                                        </select>
                                    </div>
                                </div>
                                <div class="row">
                                    <label for="inputUdmWidgetM" class="col-md-2 control-label addWidgetParLabel"><?= _("U/M")?></label>
                                    <div class="col-md-3">
                                        <input type="text" class="form-control" id="inputUdmWidgetM" name="inputUdmWidgetM">
                                    </div>
                                    
                                    <label for="inputUdmPositionM" class="col-md-3 control-label addWidgetParLabel"><?= _("U/M position")?></label>
                                    <div class="col-md-3">
                                        <select name="inputUdmPositionM" class="form-control" id="inputUdmPositionM" required>
                                            <option value="next"><?= _("Next to value")?></option>
                                            <option value="below"><?= _("Below value")?></option>
                                        </select>
                                    </div>
                                </div>
                                <div class="row">
                                    <label for="inputShowTitleM" class="col-md-2 control-label addWidgetParLabel"><?= _("Show header")?></label>
                                    <div class="col-md-3">
                                        <select id="inputShowTitleM" name="inputShowTitleM" class="form-control" required>
                                            <option value="yes"><?= _("Yes")?></option>
                                            <option value="no"><?= _("No")?></option>
                                        </select>
                                    </div>
                                    
                                    <label for="inputFontFamilyWidgetM" class="col-md-3 control-label addWidgetParLabel"><?= _("Font type (autosuggestion)")?></label>
                                    <div class="col-md-3">
                                        <input type="text" class="form-control autocomplete" id="inputFontFamilyWidgetM" name="inputFontFamilyWidgetM" required>
                                    </div>
                                </div>
                                
                            </div>
                        </div>
                        <div class="well wellCustom2left" id="specificParamsM">
                            <legend class="legend-form-group"><?= _("Specific widget properties")?></legend>
                            <!--NON CANCELLARE -->
                            <input type="hidden" id="parametersM" name="parametersM" />
                            <input type="hidden" id="parametersDiff" name="parametersDiff" />
                            <input type="hidden" id="barsColorsM" name="barsColorsM" />
                            <!-- CKEDITOR DeviceTable-->
                            <div id="deviceTableEditorSM" name="deviceTableEditorSM" ></div>
                            <!-- -->
                        </div>
                        <div class="well wellCustom2right" id="specificParamsMRight">
                           <!-- <legend class="legend-form-group">Specific widget properties</legend>-->
                            <!--NON CANCELLARE -->
                         <!--   <input type="hidden" id="parametersMRight" name="parametersMRight" />
                            <input type="hidden" id="parametersDiffRight" name="parametersDiffRight" />
                            <input type="hidden" id="barsColorsMRight" name="barsColorsMRight" />   -->
                        </div>
                        
                        <input type="hidden" id="dashboardIdUnderEdit" name="dashboardIdUnderEdit" />
                        <input type="hidden" id="dashboardUser" name="dashboardUser" />
                        <input type="hidden" id="dashboardEditor" name="dashboardEditor" />
                        <input type="hidden" id="currentDashboardTitle" name="currentDashboardTitle" />
                        <input type="hidden" id="currentDashboardSubtitle" name="currentDashboardSubtitle" />
                        
                        <div class="well wellCustomFooter">
                            <button id="button_modify_widget" name="modify_widget" class="btn btn-primary widgetFormButton" type="submit"><?= _("Confirm")?></button>
                            <button id="closeModifyWidgetBtn" type="button" class="btn btn-default widgetFormButton widgetFormButtonMargin" data-dismiss="modal"><?= _("Cancel")?></button>   
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <!-- Fine modale modifica widget -->
        
    <!-- Modale embed previewer -->
    <div class="modal fade" id="embedDashboardModal" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modalHeader centerWithFlex">
              <?= _("Embed this dashboard")?>
            </div>
            
            <div id="embedDashboardModalBody" class="modal-body modalBody">
                <div class="row" id="modalEmbedDasboardBodyContent">
                    <div class="col-xs-12 col-md-3 embedDashboardModalColumn">
                        <div class="col-xs-12 embedDashboardModalColumnInner"> <!-- Serve solo per separazione grafica -->
                            <div class="col-xs-12 mainContentRowDesc centerWithFlex"><?= _("Iframe markup generation")?></div>
                            <div class="col-xs-12 modalCell">
                                <div class="modalFieldCnt">
                                    <select id="embedPolicy" name="embedPolicy" class="modalInputTxt">
                                        <option value="auto"><?= _("Automatic")?></option>
                                        <option value="manual"><?= _("Manual")?></option>
                                    </select>
                                </div>
                                <div class="modalFieldLabelCnt"><?= _("Embed mode")?></div>
                            </div>
                            <div class="col-xs-12 col-md-6 modalCell" for="embedShowHeader">
                                <div class="modalFieldCnt">
                                    <select id="embedShowHeader" name="embedShowHeader" class="modalInputTxt">
                                        <option value="yes"><?= _("Yes")?></option>
                                        <option value="no"><?= _("No")?></option>
                                    </select>
                                </div>
                                <div class="modalFieldLabelCnt"><?= _("Show header")?></div>
                            </div>
                            <div class="col-xs-12 col-md-6 modalCell" for="embedAutofit">
                                <div class="modalFieldCnt">
                                    <select id="embedAutofit" name="embedAutofit" class="modalInputTxt">
                                        <option value="no"><?= _("No")?></option>
                                        <option value="yes"><?= _("Yes")?></option>
                                    </select>
                                </div>
                                <div class="modalFieldLabelCnt"><?= _("Autofit")?></div>
                            </div>
                            <div class="col-xs-12 col-md-6 modalCell" for="embedIframeW">
                                <div class="modalFieldCnt">
                                    <input type="text" id="embedIframeW" class="modalInputTxt" value="800" />
                                </div>
                                <div class="modalFieldLabelCnt"><?= _("Iframe width (px)")?></div>
                            </div>
                            <div class="col-xs-12 col-md-6 modalCell" for="embedIframeH">
                                <div class="modalFieldCnt">
                                    <input type="text" id="embedIframeH" class="modalInputTxt" value="600" />
                                </div>
                                <div class="modalFieldLabelCnt"><?= _("Iframe height (px)")?></div>
                            </div>
                            <div class="col-xs-12 modalCell" for="embedDashboardCode">
                                <textarea class="modalInputTxtArea" rows="5" name="embedDashboardCode" id="embedDashboardCode"></textarea>
                                <div class="modalFieldLabelCnt"><?= _("Code to embed this dashboard")?></div>
                            </div>
                            
                            <div class="col-xs-12 col-md-6 centerWithFlex">
                                <a href="javascript:void(0)" id="saveTxtMarkup"><button class="btn btn-primary"><?= _("Save in txt file")?></button></a>
                            </div>
                            <div class="col-xs-12 col-md-6 centerWithFlex">
                                <a href="javascript:void(0)" id="saveHtmlMarkup"><button class="btn btn-info"><?= _("Save in html file")?></button></a>
                            </div>
                            
                            <div class="col-xs-12 mainContentRowDesc centerWithFlex" style="margin-bottom: 0px !important"><?= _("Embedding authorized pages")?></div>
                            <div class="col-xs-12" id="authorizedPagesTableCnt">
                                <table id="authorizedPagesTable">
                                    <thead>
                                      <th><?= _("Authorized pages")?></th>
                                      <th><i id="addAuthorizedPageBtn" class="fa fa-plus"></i></th>
                                    </thead>
                                    <tbody></tbody>
                                </table>
                            </div>
                            <div class="col-xs-12 centerWithFlex">
                                <button type="button" id="updateAuthorizedPagesBtn" name="updateAuthorizedPagesBtn" class="btn confirmBtn"><?= _("Update list")?></button>
                            </div>    
                            <div class="col-xs-12 centerWithFlex" id="updateAuthorizedPagesOkMsg">
                                <?= _("List updated correctly")?>
                            </div>    
                            <div class="col-xs-12 centerWithFlex" id="updateAuthorizedPagesKoMsg">
                                <?= _("List update error, try again")?>
                            </div>    
                            <input type="hidden" id="authorizedPagesJson" name="authorizedPagesJson" />
                        </div>    
                    </div>
                    
                    <div class="col-xs-12 col-md-9 embedDashboardModalColumn">
                        <div class="col-xs-12 embedDashboardModalColumnInner"> <!-- Serve solo per separazione grafica -->
                            <div class="col-xs-12 mainContentRowDesc centerWithFlex"><?= _("Iframe preview")?></div>
                            <div id="embedPreviewContainer" class="col-xs-12">
                                <iframe id="embedPreviewIframe"></iframe>
                            </div>
                        </div>
                    </div>    
                </div>
            </div>
            <div id="embedDashboardModalFooter" class="modal-footer">
              <button type="button" id="addWidgetTypeCancelBtn" class="btn cancelBtn" data-dismiss="modal"><?= _("Cancel")?></button>
              <button type="button" id="addWidgetTypeConfirmBtn" name="addWidgetType" class="btn confirmBtn internalLink"><?= _("Confirm")?></button>
            </div>
          </div>
        </div>
    </div>
    <!-- Fine modale embed previewer -->
    
    <!-- Modale salvataggio dashboard -->
    <div class="modal fade" tabindex="-1" id="saveDashboardModal" role="dialog" aria-labelledby="myModalLabel" data-backdrop="static" data-keyboard="false" data-html2canvas-ignore>
        <div class="modal-dialog" role="document"> 
            <div class="modal-content">
                <div class="modalHeader centerWithFlex">
                    <?= _("Save dashboard")?>
                </div>
                <div class="modal-body modalBody">
                    <div id="saveDashboardModalMsg" class="text-center"><?= _("Saving dashboard, please wait")?></div>
                    <div id="saveDashboardModalIcon" class="text-center">
                         <i id="saveDashboardModalRunningIcon" class="fa fa-circle-o-notch fa-spin"></i>
                         <i id="saveDashboardModalOkIcon" class="fa fa-thumbs-up"></i>
                         <i id="saveDashboardModalKoIcon" class="fa fa-thumbs-down"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Modale di conferma cancellazione widget-->
    <div class="modal fade" id="modalDelWidget" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modalHeader centerWithFlex">
              <?= _("Widget deletion")?>
            </div>
            <input type="hidden" id="widgetToDelNameHidden" name="widgetToDelNameHidden" />
            <div id="delWidgetModalBody" class="modal-body modalBody">
                <div class="row">
                    <div id="delWidgetNameMsg" class="col-xs-12 modalCell">
                        <div class="modalDelMsg col-xs-12 centerWithFlex">
                            <?= _("Do you want to confirm cancellation of the following widget?")?>
                        </div>
                        <div id="widgetToDelName"  class="modalDelObjName col-xs-12 centerWithFlex"></div> 
                    </div>
                </div>
                <div class="row" id="delWidgetRunningMsg">
                    <div class="col-xs-12 modalCell">
                        <div class="col-xs-12 centerWithFlex modalDelMsg"><?= _("Deleting widget, please wait")?></div>
                        <div class="col-xs-12 centerWithFlex modalDelObjName"><i class="fa fa-circle-o-notch fa-spin" style="font-size:36px"></i></div>
                    </div>
                </div>
                <div class="row" id="delWidgetOkMsg">
                    <div class="col-xs-12 modalCell">
                        <div class="col-xs-12 centerWithFlex modalDelMsg"><?= _("Widget deleted successfully")?></div>
                        <div class="col-xs-12 centerWithFlex modalDelObjName"><i class="fa fa-thumbs-o-up" style="font-size:36px"></i></div>
                    </div>
                </div>
                <div class="row" id="delWidgetKoMsg">
                    <div class="col-xs-12 modalCell">
                        <div class="col-xs-12 centerWithFlex modalDelMsg"><?= _("Error deleting widget, please try again")?></div>
                        <div class="col-xs-12 centerWithFlex modalDelObjName"><i class="fa fa-thumbs-o-down" style="font-size:36px"></i></div>
                    </div>
                </div>
            </div>
            <div id="delWidgetModalFooter" class="modal-footer">
              <button type="button" id="delWidgetCancelBtn" class="btn cancelBtn" data-dismiss="modal"><?= _("Cancel")?></button>
              <button type="button" id="delWidgetConfirmBtn" name="delMetricBtn" class="btn confirmBtn internalLink"><?= _("Confirm")?></button>
            </div>
            
          </div>
        </div>
    </div>
    
    <!-- Modale informazioni widget -->
    <div class="modal fade" id="widgetInfoModal" tabindex="-1" role="dialog" aria-labelledby="widgetInfoModal" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content modalContentWizardForm"> 
                <div class="modalHeader centerWithFlex">
                  
                </div>
            
                <div id="widgetInfoModalBody" class="modal-body modalBody">
                    <div class="row">
                        <div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">
                            <?= _("Here you can insert detailed info of your choice about this widget: you can use the GUI editor or custom HTML code.")?><br>
                            <?= _("If you leave the editor empty, the info button won't be shown in the view.")?>
                        </div>
                    </div>
                    <div class="row">
                       <div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">
                           <textarea id ="widgetInfoEditor" name="widgetInfoEditor" rows="1"></textarea>
                       </div>    
                    </div>  
                </div>
                
                <div id="widgetInfoModalFooter" class="modal-footer">
                    <div class="compactMenuBtns row centerWithFlex">
                        <button type="button" class="compactMenuCancelBtn" id="widgetInfoModalCancelBtn" data-dismiss="modal" style="margin-right: 3px;"><i class="fa fa-remove"></i></button> 
                        <button type="button" class="compactMenuConfirmBtn" id="widgetInfoModalConfirmBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button>
                    </div>
                    <div class="compactMenuMsg centerWithFlex">

                    </div> 
                </div>
                
                <input type="hidden" id="widgetInfoModalWidgetName" name="widgetInfoModalWidgetName" />
            </div>    <!-- Fine modal content -->
        </div> <!-- Fine modal dialog -->
    </div>
    <!-- Fine modale informazioni widget -->

    <!-- Modale import widget -->
    <div class="modal fade" id="modalImportWidget" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modalHeader centerWithFlex">
                    Import Dashboard
                </div>
                <input type="hidden" id="dashImportHidden" name="dashImportHidden" />
                <div id="importWidgetModalBody" class="modal-body modalBody">
                    <div class="row">
                        <div id="importWidgetNameMsg" class="col-xs-12 modalCell">
                            <div class="modalDelMsg col-xs-12 centerWithFlex">
                                <?= _("Choose the JSON File of the Widget to Import")?>
                            </div>
                            <div id="importWidgetFile" class="modalDelObjName col-xs-12 centerWithFlex">
                                <input type="file" id="jsonFile" />
                            </div>
                            <!--<div id="importWidgetFile" class="modalDelObjName col-xs-12 centerWithFlex"><?= _("Widget Name: ")?>
                                <input type="text" id="dashboardName" style="color:black"/>
                            </div>  -->
                        </div>
                    </div>
                    <div class="row" id="importWidgetRunningMsg">
                        <div class="col-xs-12 modalCell">
                            <div class="col-xs-12 centerWithFlex modalDelMsg"><?= _("Importing widget, please wait")?></div>
                            <div class="col-xs-12 centerWithFlex modalDelObjName"><i class="fa fa-circle-o-notch fa-spin" style="font-size:36px"></i></div>
                        </div>
                    </div>
                    <div class="row" id="importWidgetOkMsg">
                        <div class="col-xs-12 modalCell">
                            <div class="col-xs-12 centerWithFlex modalDelMsg"><?= _("Widget imported successfully")?></div>
                            <div class="col-xs-12 centerWithFlex modalDelObjName"><i class="fa fa-thumbs-o-up" style="font-size:36px"></i></div>
                        </div>
                    </div>
                    <div class="row" id="importWidgetKoMsg">
                        <div class="col-xs-12 modalCell">
                            <div id = "importWidgetErrorText" class="col-xs-12 centerWithFlex modalDelMsg"><?= _("Error importing widget, please try again")?></div>
                            <div class="col-xs-12 centerWithFlex modalDelObjName"><i class="fa fa-thumbs-o-down" style="font-size:36px"></i></div>
                        </div>
                    </div>
                </div>
                <div id="importWidgetModalFooter" class="modal-footer">
                    <button type="button" id="importWidgetCancelBtn" class="btn cancelBtn" data-dismiss="modal"><?= _("Cancel")?></button>
                    <button type="button" id="importWidgetConfirmBtn" class="btn confirmBtn internalLink"><?= _("Confirm")?></button>
                </div>
            </div>
        </div>
    </div>
    <!-- Fine modale import widget -->

    <div id="changeMetricCnt">
        <table id="changeMetricTable" class="addWidgetWizardTable table table-striped dt-responsive nowrap"> 
            <thead class="widgetWizardColTitle">
                <tr>  
                    <th id="hihghLevelTypeColTitle" class="widgetWizardTitleCell" data-cellTitle="HighLevelType"><?= _("High-Level Type")?></th>  
                    <th class="widgetWizardTitleCell" data-cellTitle="Nature"><?= _("Nature")?></th>
                    <th class="widgetWizardTitleCell" data-cellTitle="SubNature"><?= _("Subnature")?></th>
                    <th class="widgetWizardTitleCell" data-cellTitle="ValueType"><?= _("Value Type")?></th>   
                    <th class="widgetWizardTitleCell" data-cellTitle="ValueName"><?= _("Value Name")?></th>      
                    <th class="widgetWizardTitleCell" data-cellTitle="InstanceUri"><?= _("Instance URI")?></th>
                    <th class="widgetWizardTitleCell" data-cellTitle="DataType"><?= _("Data Type")?></th>
                    <th class="widgetWizardTitleCell" data-cellTitle="LastDate"><?= _("Last Date")?></th>
                    <th class="widgetWizardTitleCell" data-cellTitle="LastValue"><?= _("Last Value")?></th>
                    <th class="widgetWizardTitleCell" data-cellTitle="Healthiness"><?= _("Healthiness")?></th>
                    <th class="widgetWizardTitleCell" data-cellTitle="InstanceUri"><?= _("Instance URI")?></th>
                    <th class="widgetWizardTitleCell" data-cellTitle="Parameters"><?= _("Parameters")?></th>
                    <th class="widgetWizardTitleCell" data-cellTitle="Id"><?= _("Id")?></th>
                    <th class="widgetWizardTitleCell" data-cellTitle="LastCheck"><?= _("Last Check")?></th>
                    <th class="widgetWizardTitleCell" data-cellTitle="GetInstances"></th>
                    <th class="widgetWizardTitleCell" data-cellTitle="Ownership"><?= _("Ownership")?></th>
                </tr>  
            </thead>
        </table>
        
        <h6>Selected</h6>
        
        <table id="changeMetricSelectedRowsTable" class="addWidgetWizardTableSelected table table-striped dt-responsive nowrap"> 
            <thead class="widgetWizardColTitle">
                <tr>
                    <th class="widgetWizardTitleCell" data-cellTitle="ValueType"><?= _("Value Type")?></th>   
                    <th class="widgetWizardTitleCell" data-cellTitle="ValueName"><?= _("Value Name")?></th>      
                    <th class="widgetWizardTitleCell" data-cellTitle="LastValue"><?= _("Last Value")?></th>
                    <th class="widgetWizardTitleCell" data-cellTitle="Remove"><?= _("Remove")?></th>
                </tr>  
            </thead>
        </table>

        <div id="changeMetricInstantiation" class="centerWithFlex">
            <button type="button" id="changeMetricConfirmBtn" name="changeMetricConfirmBtn" class="btn confirmBtn"><i class="fa fa-magic" style="font-size: 35px"></i></button>
        </div>
        <div class="centerWithFlex"  style="font-size: 11px">
            <?= _("Change Metric")?>
        </div>

    </div>
    
    <!-- Fine dei modali -->
            <script type='text/javascript'>
                var gridster, num_cols, indicatore, datoTitle, datoSubtitle, datoColor, datoWidth, datoRemains, nuovaDashboard, headerFontSize, headerModFontSize, subtitleFontSize, clockFontSizeMod, dashboardName, dashboardOrg, dashboardOrgKbUrl, logoFilename, logoLink, temp, widgetsArray, nomeComune, metricType = null;
                var array_metrics = new Array();
                var array_metricsNR = new Array();
                var informazioni = new Array();
                var elencoScheduler = new Array();
                var elencoJobsGroupsPerScheduler = [[],[],[]];
                var firstFreeRow = 1;
                var comuniLammaArray = new Array();
                var dashboardWizardData = new Array();  // PANTALEO 28/03/2018
                var addWidgetConditionsArray = new Array();
                var editWidgetConditionsArray = null; //Lascialo così, il vettore viene istanziato ad ogni apertura di modale.
                //var widgetWizardTable = null;
                
                $("#button_close_popup").click(function()
                {
                    location.reload();
                });
                
                $("#closeModifyWidgetBtn").click(function()
                {
                    location.reload();
                });
                
                function updateLastUsedColors(newColor)
                {
                    $('.lastUsedColorsRow').each(function(j){
                        if($(this).find('div.ctxMenuPaletteColor').eq(0).attr('data-color') !== newColor)
                        {
                            var lastIndex = parseInt($(this).find('div.ctxMenuPaletteColor').length - 1);
                            for(var i = lastIndex; i > 0; i--)
                            {
                                $(this).find('div.ctxMenuPaletteColor').eq(0).empty();
                                $(this).find('div.ctxMenuPaletteColor').eq(i).attr('data-color', $(this).find('div.ctxMenuPaletteColor').eq(i-1).attr('data-color'));
                                $(this).find('div.ctxMenuPaletteColor').eq(i).css('background-color', $(this).find('div.ctxMenuPaletteColor').eq(i-1).attr('data-color'));
                                if($(this).find('div.ctxMenuPaletteColor').eq(i-1).attr('data-color') === 'rgba(255, 255, 255, 0)')
                                {
                                    $(this).find('div.ctxMenuPaletteColor').eq(i).empty();
                                    $(this).find('div.ctxMenuPaletteColor').eq(i).append('<div class="transQuadWhite"></div>');
                                    $(this).find('div.ctxMenuPaletteColor').eq(i).append('<div class="transQuadGrey"></div>');
                                    $(this).find('div.ctxMenuPaletteColor').eq(i).append('<div class="transQuadGrey"></div>');
                                    $(this).find('div.ctxMenuPaletteColor').eq(i).append('<div class="transQuadWhite"></div>');
                                } 
                            }

                            $(this).find('div.ctxMenuPaletteColor').eq(0).attr('data-color', newColor);
                            $(this).find('div.ctxMenuPaletteColor').eq(0).css('background-color', newColor);
                            if(newColor === 'rgba(255, 255, 255, 0)')
                            {
                                $(this).find('div.ctxMenuPaletteColor').eq(0).empty();
                                $(this).find('div.ctxMenuPaletteColor').eq(0).append('<div class="transQuadWhite"></div>');
                                $(this).find('div.ctxMenuPaletteColor').eq(0).append('<div class="transQuadGrey"></div>');
                                $(this).find('div.ctxMenuPaletteColor').eq(0).append('<div class="transQuadGrey"></div>');
                                $(this).find('div.ctxMenuPaletteColor').eq(0).append('<div class="transQuadWhite"></div>');
                            }       
                        }
                    });
                }

                function isJson(str) {
                    try {
                        JSON.parse(str);
                    } catch (e) {
                        return false;
                    }
                    return true;
                }

                function getAllColorMaps(baseUrl, callback) {

                    $.ajax({
                        url: baseUrl + "getMetrics.php",
                        type: "GET",
                        data: {
                            
                        },
                        async: true,
                        dataType: 'json',
                        success: function(data) {
                            let allMaps = data;
                        /*    //   var convertedData = convertDataFromMyKpiToDm(data);
                            extractedData.value = data[0].value;
                            extractedData.metricType = metricObj[i].metricType;
                            if (metricObj[i].metricId.includes("datamanager/api/v1/poidata/")) {
                                extractedData.metricId = metricObj[i].metricId.split("datamanager/api/v1/poidata/")[1];
                                extractedData.metricName = metricObj[i].metricName + "_" + metricObj[i].metricId.split("datamanager/api/v1/poidata/")[1];
                            } else {
                                extractedData.metricId = metricObj[i].metricId;
                                extractedData.metricName = metricObj[i].metricName + "_" + metricObj[i].metricId;
                            }
                            extractedData.measuredTime = new Date(data[0].dataTime).toUTCString();
                            if(data[0].valueUnit != null) {
                                extractedData.metricValueUnit = data[0].valueUnit;
                            }*/
                            callback(allMaps);
                            //callback(data);
                        },
                        error: function (data) {
                            console.log("Errore!");
                            console.log(JSON.stringify(data));
                        }
                    });

                }
                
                function previewColorMap (colorMapNumber) {
                    let  selectedMap = $('#showColorMapM' + colorMapNumber).find(":selected").text();
                    //    console.log("E' stata selezionata la color map: " + selectedMap);

                    $.ajax({
                        url: "../controllers/getHeatmapImage.php",
                        data: {
                            metricName: selectedMap,
                        },
                        type: "GET",
                        async: true,
                        dataType: 'json',
                        success: function(data)
                        {
                            if(data.detail !== 'Ok')
                            {
                                // no image preview available
                                $('#imgPreviewM').attr('src', '');
                            }
                            else
                            {
                                $('#imgPreviewM').attr('src', data.heatmapLegendPath);

                            }
                        },
                        error: function(errorData)
                        {
                            console.log("Error while retrieving image preview.");
                        }
                    });
                }
                
                $(document).ready(function ()
                { 
                    var hospitalList = null; 
                    var gisTargetCenterMapDiv = null; 
                    var gisTargetCenterMapDivRef = null; 
                    var gisTargetCenterMapDivRefM = null; 
                    var gisTargetCenterMapDivM = null;
                    var headerVisible = null;
                    var editorsArray = new Array();
                    var editorsArrayM = new Array();
                    var authorizedPages = null;
                    var embedViewUrl, sampleIframe = null;
                    var defaultFontFamilyArray = ["Auto", "Arial", "Calibri", "Comic Sans MS", "Courier New", "Digital", "Open Sans", "Times New Roman", "Verdana"];
                    var fontFamilyArray = [];
                    var queryFieldFromDb = null;
                    var internalDest = false;
                    var dashboardTitlesList = null;
                    var dashBckImg = null;
                    var useBckImg = null;
                    var backOverlayOpacity = null;
                    var changeMetricTable = null;
                    var draggedWidgetId, dashboardParams, dashboardWidgets, dashboardViewMode, gridsterCellW, gridsterCellH, widgetsContainerWidth, gridColor, addWidgetWizardMapRef = null;
                    var choosenWidgetMetricIconName = null;
                    var choosenWidgetType = null;
                    var mainWidget, targetWidget, unit, icon, mono_multi, widgetCategory = null;
                    var dashTitleEscaped = null;
                    var scaleFactorFlag, extra_rows_gridster, max_rows_gridster = null;
                    var scaleFactorW = 1;
                    var scaleFactorH = 1;
                  /*  var newScaledGridsterCellW = 15;
                    var newScaledGridsterCellH = 7; */
                    var newScaledGridsterCellW = 26;
                    var newScaledGridsterCellH = 13;
                    var iconPoolDatasetJSONCustom = null;
                    var svgArray = null;
                    var customSvgFlag = false;
                    var newBox = null;
                    var trustedUser = false;

                    $.ajax({
                        url: "../controllers/getTrustedUsers.php",
                        data: {
                            user: "<?= $dashboardEditorName ?>"
                        },
                        type: "POST",
                        async: true,
                        dataType: 'json',
                        success: function (data) {
                            if (data['detail'] == "Ok") {
                                trustedUser = true;
                                $("#link_start_editor").show();
                            }
                        },
                        error: function (err) {
                            console.log('Error in retrieving Trusted User. ' + err.Message);
                        }
                    });
                    
                    function checkJson(str) {
                        try {
                            JSON.parse(str);
                        } catch (e) {
                            return false;
                        }
                        return true;
                    }
                    
                    function buildIconsBox(suggestedIconsList, i, allIcons, newTableRow, newTableCell, widgetId) {
                        var iconPoolDataset = '{"SUGGESTED Icons": ["';
                        var iconPoolString = '<select name="Selector_poolBtn_' + i + '" id="Selector_poolBtn_poolBtn_' + i + '"><optgroup label="SUGGESTED Icons">';
                        var resultingSuggested = "";
                        if(suggestedIconsList.suggestedIconList) {
                            if (suggestedIconsList.suggestedIconList instanceof Array === false) {
                                resultingSuggested = Object.keys(suggestedIconsList.suggestedIconList).map(function(key) {
                                    return suggestedIconsList.suggestedIconList[key];
                                });

                            } else {
                                resultingSuggested = suggestedIconsList.suggestedIconList;
                            }
                            for (k = 0; k < resultingSuggested.length; k++) {
                                if (UrlExists("../img/widgetSelectorIconsPool" + resultingSuggested[k] + ".svg")) {
                                    iconPoolString = iconPoolString + '<option value="' + resultingSuggested[k] + '">' + resultingSuggested[k] + '</option>';
                                    if (k == 0) {
                                        iconPoolDataset = iconPoolDataset + resultingSuggested[k];
                                    } else {
                                        iconPoolDataset = iconPoolDataset + '", "' + resultingSuggested[k];
                                    }
                                }
                            }
                        }

                        iconPoolDataset = iconPoolDataset + '"], "ALL Icons": ["';
                        iconPoolString = iconPoolString + '</optgroup><optgroup label="ALL Icons">';

                        for(k=0; k < allIcons.allIconList.length; k++) {
                            iconPoolString = iconPoolString + '<option value="' + allIcons.allIconList[k] + '">' + allIcons.allIconList[k] + '</option>';
                            if (k == 0) {
                                iconPoolDataset = iconPoolDataset + allIcons.allIconList[k];
                            } else {
                                iconPoolDataset = iconPoolDataset + '", "' + allIcons.allIconList[k];
                            }
                        }

                        iconPoolDataset = iconPoolDataset + '"]}';
                        var iconPoolDatasetJSON = JSON.parse(iconPoolDataset);
                        iconPoolString = iconPoolString + '</optgroup></select>';

                        var newControl2 = $('<input data-param="iconPoolImg" id="Selector_poolBtn_' + i + '" class="poolBtn" title="Choose Image from Our Icons Pool !"><input type="hidden" name="iconPoolSelected" id="' + widgetId + '_poolInput_' + i + '"></input>');

                        newTableCell.append(newControl2);
                        newTableRow.append(newTableCell);
                        newTableCell.find('input').change(editGisUpdateParams);
                        return iconPoolDatasetJSON;
                    }   

                    $('#orgMenu').hide();
                    $('#orgMenuCnt a.mainMenuLink').attr('data-submenuVisible', 'false');
                    $('#orgMenuCnt a.orgMenuSubItemLink').hide();
                    $('.linkgen').css('text-decoration', 'none');

                    // $('#orgMenuButton').off('click');
                    $('#orgMenuButton').click(function(){
                        // alert("Organization Menu Coming Soon !");
                        if($('#orgMenu').attr('data-shown') === 'true')
                        {
                            $('#orgMenu').hide();
                            $('#orgMenu').attr('data-shown', 'false');
                        }
                        else
                        {
                            $('#orgMenu').show();
                            $('#orgMenu').attr('data-shown', 'true');
                        }
                    });

                    $('#orgMenu .quitRow').off('click');
                    $('#orgMenu .quitRow').click(function()
                    {
                        $('#orgMenu .fullCtxSubmenu').each(function(i){
                            $(this).attr('data-clicked', 'false');
                        });
                        $('.widgetSubmenu').hide();
                        $('.fullCtxMenu').hide();
                        $('.applicationCtxMenu').hide();
                        $('.fullCtxSubmenu').hide();
                        $('#orgMenu').hide();
                        $(".fullCtxMenuRow").css('color', 'rgb(51, 64, 69)');
                        $(".fullCtxMenuRow").css('background-color', 'transparent');
                        $(".fullCtxMenuRow").attr("data-selected", "false");
                        $('#orgMenu').attr('data-shown', 'false');

                        // Close Org Sub-Menus
                        $('#orgMenu a.mainMenuLink').attr('data-submenuVisible', 'false');
                        $('.orgMenuSubItemCnt a.orgMenuSubItemLink').hide();
                        $('.orgMenuSubItemCnt').css( "display", "none" );
                        $('.submenuIndicator').removeClass('fa-caret-up');
                        $('.submenuIndicator').addClass('fa-caret-down');
                    });

                    /*    $('#orgMenu .fullCtxMenuRow').hover(function(){
                            if($(this).attr("data-selected") === "false")
                            {
                                $(this).css('color', 'white');
                                $(this).css('background-color', 'rgba(0, 162, 211, 1)');
                            }
                        }, function(){
                            if($(this).attr("data-selected") === "false")
                            {
                                $(this).css('color', 'rgb(51, 64, 69)');
                                $(this).css('background-color', 'transparent');
                            }
                        });*/

                    //  $('#orgMenuCnt .mainMenuLink').click(function(event){
                    $('.mainMenuLink').click(function(event){
                        //  $('.linkgen').click(function(event){
                        event.preventDefault();
                        var pageTitle = $(this).attr('data-pageTitle');
                        var linkId = $(this).attr('id');
                        var linkUrl = $(this).attr('data-linkUrl');

                        if($(this).attr('data-linkUrl') === 'submenu')
                        {
                            $('#orgMenuCnt .orgMenuItemCnt').each(function(i){
                                $(this).removeClass('orgMenuItemCntActive');
                            });
                            $(this).find('div.orgMenuItemCnt').addClass("orgMenuItemCntActive");
                            if($(this).attr('data-submenuVisible') === 'false')
                            {
                                $(this).attr('data-submenuVisible', 'true');
                                //   $('.orgMenuSubItemCnt').css( "display", "block" );
                                $('.orgMenuSubItemCnt[data-fatherMenuIdDiv='+ $(this).attr('id') + ']').css( "display", "block" );
                                //    $(this).find('.orgMenuSubItemCnt').css( "display", "block" ); // data-fatherMenuIdDiv
                                $('.orgMenuSubItemCnt a.orgMenuSubItemLink[data-fatherMenuId=' + $(this).attr('id') + ']').show();
                                $(this).find('.submenuIndicator').removeClass('fa-caret-down');
                                $(this).find('.submenuIndicator').addClass('fa-caret-up');
                            }
                            else
                            {
                                $(this).attr('data-submenuVisible', 'false');
                                $('.orgMenuSubItemCnt a.orgMenuSubItemLink[data-fatherMenuId=' + $(this).attr('id') + ']').hide();
                                //    $('.orgMenuSubItemCnt').css( "display", "none" );
                                $('.orgMenuSubItemCnt[data-fatherMenuIdDiv='+ $(this).attr('id') + ']').css( "display", "none" );
                                //   $(this).find('.orgMenuSubItemCnt').css( "display", "none" );
                                $(this).find('.submenuIndicator').removeClass('fa-caret-up');
                                $(this).find('.submenuIndicator').addClass('fa-caret-down');
                            }
                        }
                        else
                        {
                            $('#orgMenuCnt a.orgMenuSubItemLink').hide();

                            $('#orgMenuCnt a.orgMenuSubItemLink').each(function(i){
                                $(this).attr('data-submenuVisible', 'false');
                            });
                            switch($(this).attr('data-openMode'))
                            {
                                case "iframe":
                                    $('#orgMenuCnt .orgMenuItemCnt').each(function(i){
                                        $(this).removeClass('orgMenuItemCntActive');
                                    });
                                    $(this).find('div.orgMenuItemCnt').addClass("orgMenuItemCntActive");
                                    if($(this).attr('data-externalApp') === 'yes')
                                    {
                                     //   location.href = "iframeApp.php?linkUrl=" + encodeURIComponent(linkUrl) + "&linkId=" + linkId + "&pageTitle=" + pageTitle + "&fromSubmenu=false";
                                        location.href = "iframeApp.php?linkUrl=" + encodeURIComponent(linkUrl);
                                    }
                                    break;

                                case "newTab":
                                  //  var newTab = window.open($(this).attr('data-linkurl') + "?linkId=" + linkId + "&fromSubmenu=false", '_blank');
                                    var newTab = window.open($(this).attr('data-linkurl'));
                                    if(newTab)
                                    {
                                        newTab.focus();
                                    }
                                    else
                                    {
                                        alert('<?= _("Please allow popups for this website") ?>');
                                    }
                                    break;

                                case "samePage":
                                    $('#orgMenuCnt .orgMenuItemCnt').each(function(i){
                                        $(this).removeClass('orgMenuItemCntActive');
                                    });
                                    $(this).find('div.orgMenuItemCnt').addClass("orgMenuItemCntActive");
                                //    location.href = $(this).attr('data-linkurl') + "?linkId=" + linkId + "&fromSubmenu=false&pageTitle=" + pageTitle;
                                    location.href = $(this).attr('data-linkurl');
                                    break;
                            }
                        }

                        var mainMenuScrollableCntHeight = parseInt($('#orgMenuCnt').outerHeight() - $('#headerClaimCnt').outerHeight() - $('#orgMenuCnt .mainMenuUsrCnt').outerHeight() - 30);
                        $('#mainMenuScrollableCnt').css("height", parseInt(mainMenuScrollableCntHeight + 0) + "px");
                        $('#mainMenuScrollableCnt').css("overflow-y", "auto");
                    });

                    $('#dashBckCnt').css("height", ($(window).height() - $('#dashboardViewHeaderContainer').height()) + "px");
                    var changeMetricSelectedRows = {};
                    var firstRowId = null;
                    var changeMetricTableAlreadyLoaded = 0;
                    if (<?= isset($dashboardTitle)?>) {
                        var dashTitle = "<?= addslashes($dashboardTitle)?>";
                    }
                    dashTitleEscaped = dashTitle.replace(/\'/g, "%27");

                    CKEDITOR.replace('widgetInfoEditor', {
                        allowedContent: true,
                        language: 'en',
                        width: '100%'
                    });
                    
                    $("#chatContainer").css("top", $('#dashboardViewHeaderContainer').height());
                    $("#chatContainer").css("left", $(window).width() - $('#chatContainer').width());
                   //$("#BtnContainerChat").css("top", $('#dashboardViewHeaderContainer').height());
                    //$("#BtnContainerChat").css("left", $(window).width() - $('#BtnContainerChat').width());

               
                    $('#chatBtn').click(function(){
                        if($(this).attr("data-status") === 'closed')
                        {
                            $(this).attr("data-status", 'open');
                            $('#chatContainer').show();
                            $('#BtnContainerChat').show();
                        }
                        else
                        {
                            $(this).attr("data-status", 'closed');
                            $('#chatContainer').hide();
                            $('#BtnContainerChat').hide();
                        }
                    });
                    $('#chatBtnNew').click(function(){
                        if($(this).attr("data-status") === 'closed')
                        {
                            $(this).attr("data-status", 'open');
                            $('#chatContainer').show();
                            console.log("Show");
                        }
                        else
                        {
                            $(this).attr("data-status", 'closed');
                            $('#chatContainer').hide();
                            console.log("Hide");
                        }
                    });
                    $('#chatBtnError').click(function(){
                        if($(this).attr("data-status") === 'closed')
                        {
                            $(this).attr("data-status", 'open');
                            $('#chatContainer').show();
                            $('#BtnContainerChat').show();
                        }
                        else
                        {
                            $(this).attr("data-status", 'closed');
                            $('#chatContainer').hide();
                            $('#BtnContainerChat').hide();
                        }
                    });
            
                    $('#fullscreenBtnContainer .contextMenuQuitBtn').off('click');
                    $('#fullscreenBtnContainer .contextMenuQuitBtn').click(function(){
                       //Ripristino eventuale titolo dashboard lasciato a mezzo
                        if($("#dashboardTitle span").html().trim() === '')
                        {
                            $("#dashboardSubtitle span").html("No subtitle");
                        }
                        else
                        {
                            $("#dashboardTitle span").html($("#dashboardTitle").attr('data-currentTitle'));
                        }

                        $("#dashboardTitle span").attr('data-underEdit', 'false');
                        $("#dashboardTitle span").attr('contenteditable', false);

                        //Ripristino eventuale sottotitolo dashboard lasciato a mezzo
                        if($("#dashboardSubtitle span").html().trim() === '')
                        {
                            $("#dashboardSubtitle span").html("No subtitle");
                        }
                        else
                        {
                            $("#dashboardSubtitle span").html($("#dashboardSubtitle").attr('data-currentSubtitle'));
                        }

                        $("#dashboardSubtitle span").attr('data-underEdit', 'false');
                        $("#dashboardSubtitle span").attr('contenteditable', false);

                        //Ripristino eventuali titoli widgets
                        $('div.titleDiv').each(function(i)
                        {
                            $(this).attr("contenteditable", false);
                            $(this).attr("data-underEdit", false);
                            $(this).html($(this).attr('data-currentTitle'));
                            var currentTitle = $(this).attr('data-currentTitle');
                            currentTitle = currentTitle.replace(/\\\\/g, "&bsol;");
                            $(this).html(currentTitle);
                        });
                        
                        $('#fullscreenBtnContainer .fullCtxSubmenu').hide();
                        
                        $('.widgetSubmenu').each(function(i){
                            $(this).attr('data-clicked', 'false');	
                        });

                        $('.widgetSubmenu').hide();
                        $('.fullCtxMenu').hide();
                        $('.applicationCtxMenu').hide();
                        
                        if($('#dashboardEditHeaderMenu').attr('data-shown') === 'true')
                        {
                            $('#dashboardEditHeaderMenu').hide();
                            $('#dashboardEditHeaderMenu').attr('data-shown', 'false');
                        }
                        else
                        {
                            $('#dashboardEditHeaderMenu').show();
                            $('#dashboardEditHeaderMenu').attr('data-shown', 'true');
                        }
                        
                        $(".fullCtxMenuRow").css('color', 'rgb(51, 64, 69)');
                        $(".fullCtxMenuRow").css('background-color', 'transparent');
                        $(".fullCtxMenuRow").attr("data-selected", "false");
                    });
                    
                    $('#link_add_separator').click(function(){
                        $.ajax({
                            url: "../controllers/updateDashboard.php",
                            data: {
                                action: "addSeparator",
                                dashboardId: <?= escapeForJS($_REQUEST['dashboardId']) ?>,
                            },
                            type: "POST",
                            async: true,
                            dataType: 'json',
                            success: function(data) 
                            {
                                if(data.detail !== 'Ok')
                                {
                                    alert('<?= _("Error while adding new separator") ?>');
                                }
                                else
                                {
                                    var widgetSeparator = ['<li data-widgetType="' + data['type_w'] + '" data-widgetId="' + data['widgetId'] + '" id="' + data['name_w'] + '"></li>', data['size_columns'], data['size_rows'], data['n_column'], data['n_row']];
                                    var widgetInstance = gridster.add_widget.apply(gridster, widgetSeparator);
                                    
                                    data['time'] = 6000;
                                    data['embedWidget'] = false;
                                    data['embedWidgetPolicy'] = 'auto';
                                    data['hostFile'] = 'config';
                                    
                                    $("#gridsterUl").find("li#" + data['name_w']).load("../widgets/" + encodeURIComponent(data['type_w']) + ".php", data, function () {
                                        $(this).find(".icons-modify-widget").css("display", "inline");
                                        $(this).find(".modifyWidgetGenContent").css("display", "block");
                                        $(this).find(".pcCountdownContainer").css("display", "none");
                                        $(this).find(".iconsModifyPcWidget").css("display", "flex");
                                        $(this).find(".iconsModifyPcWidget").css("align-items", "center");
                                        $(this).find(".iconsModifyPcWidget").css("justify-content", "flex-end");
                                    });
                                }
                            },
                            error: function(errorData)
                            {
                                alert('<?= _("Error while adding new separator") ?>');
                            }
                        });
                    });
                    
                    $('#widgetInfoModalConfirmBtn').click(function(){
                        var button = $(this);
                        $('#widgetInfoModalFooter div.compactMenuMsg').show();
                        $('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');

                        var newInfo = CKEDITOR.instances['widgetInfoEditor'].getData();
                        if(newInfo.trim() === '')
                        {
                            newInfo = null;
                        }

                        $.ajax({
                            url: "../controllers/updateWidget.php",
                            data: {
                                action: "updateInfo",
                                widgetName: $('#widgetInfoModalWidgetName').val(),
                                newInfo: newInfo,
                            },
                            type: "POST",
                            async: true,
                            dataType: 'json',
                            success: function(data) 
                            {
                                if(data.detail === 'Ok')
                                {
                                    $('#widgetInfoModalFooter div.compactMenuMsg').html('Saved&nbsp;<i class="fa fa-thumbs-up" style="font-size:14px"></i>');

                                    setTimeout(function(){
                                        $('#widgetInfoModalFooter div.compactMenuMsg').hide();
                                        $('#widgetInfoModal').modal('hide');
                                        $('#widgetInfoModalWidgetName').val("");
                                    }, 1000);
                                }
                                else
                                {
                                    $('#widgetInfoModalFooter div.compactMenuMsg').html('Error&nbsp;<i class="fa fa-thumbs-down" style="font-size:14px"></i>');
                                    setTimeout(function(){
                                        $('#widgetInfoModalFooter div.compactMenuMsg').hide();
                                    }, 1000);
                                }
                            },
                            error: function(errorData)
                            {
                                $('#widgetInfoModalFooter div.compactMenuMsg').html('Error&nbsp;<i class="fa fa-thumbs-down" style="font-size:14px"></i>');
                                setTimeout(function(){
                                    $('#widgetInfoModalFooter div.compactMenuMsg').hide();
                                }, 1000);
                            }
                        });
                    });
        
                    //Menu di contesto della dashboard
                    $('.ctxMenuPaletteColor').each(function(i){
                        $(this).css('background-color', $(this).attr('data-color'));
                    });
                    
                    //Chiusura menu contestuali se si preme ESC
                    $(document).keyup(function(e) {
                        if(e.keyCode == 27) 
                        { 
                           $('.fullCtxMenu').hide();
                           $('.fullCtxSubmenu').hide();
                           $('.editTxtMenu').hide();
                        }
                   });
                   
                   //Chiusura menu contestuali quando clicchi fuori da essi
                    /*$("body").click(function(e) 
                    {
                        if(!($(e.target).hasClass('countdown') || $(e.target).hasClass('inplaceEditable') || $(e.target).hasClass('widgetCtxMenuBtn') || ($(e.target).attr('id') === 'dashboardCtxMenuBtn') || $(e.target).parents(".dashboardCtxMenu").length || $(e.target).parents(".widgetCtxMenu").length || $(e.target).parents(".widgetSubmenu").length))
                        {
                            $('.applicationCtxMenu').hide();
                            $('.widgetSubmenu').hide();
                            $('.widgetCtxMenu').hide();
                            $('.widgetCtxMenu .widgetSubmenu').each(function(i)
                            {
                               $(this).attr('data-clicked', 'false');	
                               $(this).attr('data-shown', false);
                            });
                            
                            $('.widgetCtxMenu').each(function(i)
                            {
                               	$(this).attr('data-shown', false);
                            });
                            
                            $('#dashboardEditHeaderMenu').attr('data-shown', false);
                            
                            $(".fullCtxMenuRow").css('color', 'rgb(51, 64, 69)');
                            $(".fullCtxMenuRow").css('background-color', 'transparent');
                            $(".fullCtxMenuRow").attr("data-selected", "false");
                            $('#draggingWidget').val('false');
                        } 
                    });*/
                   
                   $('#dashboardTitle span').hover(function(){
                       $(this).html('Click to edit title');
                   }, function(){
                       $(this).html($('#dashboardTitle').attr('data-currenttitle'));
                   });
                   
                   $('#dashboardSubtitle span').hover(function(){
                       $(this).html('Click to edit subtitle');
                   }, function(){
                       $(this).html($('#dashboardSubtitle').attr('data-currentsubtitle'));
                   });
    
                    $('#dashboardCtxMenuBtn').click(function()
                    {
                        //Ripristino eventuale titolo dashboard lasciato a mezzo
                        if($("#dashboardTitle span").html().trim() === '')
                        {
                            $("#dashboardSubtitle span").html("No subtitle");
                        }
                        else
                        {
                            $("#dashboardTitle span").html($("#dashboardTitle").attr('data-currentTitle'));
                        }

                        $("#dashboardTitle span").attr('data-underEdit', 'false');
                        $("#dashboardTitle span").attr('contenteditable', false);

                        //Ripristino eventuale sottotitolo dashboard lasciato a mezzo
                        if($("#dashboardSubtitle span").html().trim() === '')
                        {
                            $("#dashboardSubtitle span").html("No subtitle");
                        }
                        else
                        {
                            $("#dashboardSubtitle span").html($("#dashboardSubtitle").attr('data-currentSubtitle'));
                        }

                        $("#dashboardSubtitle span").attr('data-underEdit', 'false');
                        $("#dashboardSubtitle span").attr('contenteditable', false);

                        //Ripristino eventuali titoli widgets
                        $('div.titleDiv').each(function(i)
                        {
                            $(this).attr("contenteditable", false);
                            $(this).attr("data-underEdit", false);
                            var currentTitle = $(this).attr('data-currentTitle');
                            currentTitle = currentTitle.replace(/\\\\/g, "&bsol;");
                            $(this).html(currentTitle);
                        });
                        
                        $('#fullscreenBtnContainer .fullCtxSubmenu').hide();
                        
                        $('.widgetSubmenu').each(function(i){
                            $(this).attr('data-clicked', 'false');	
                        });

                        $('.widgetSubmenu').hide();
                        $('.fullCtxMenu').hide();
                        $('.applicationCtxMenu').hide();
                        
                        if($('#dashboardEditHeaderMenu').attr('data-shown') === 'true')
                        {
                            $('#dashboardEditHeaderMenu').hide();
                            $('#dashboardEditHeaderMenu').attr('data-shown', 'false');
                        }
                        else
                        {
                            $('#dashboardEditHeaderMenu').show();
                            $('#dashboardEditHeaderMenu').attr('data-shown', 'true');
                        }
                    });
                    
                    $('#dashboardEditHeaderMenu .fullCtxMenuRow').eq(0).click(function()
                    {
                        $(".fullCtxMenuRow").css('color', 'rgb(51, 64, 69)');
                        $(".fullCtxMenuRow").css('background-color', 'transparent');
                        $(".fullCtxMenuRow").attr("data-selected", "false");
                        
                        $('#fullscreenBtnContainer .fullCtxSubmenu').each(function(i){
                            if(i !== 0)
                            {
                                $(this).hide();
                            }
                        });
                        
                        if($('#dashboardEditTitleColorSubmenu').is(':visible'))
                        {
                            $('#dashboardEditTitleColorSubmenu').hide();
                            $(this).css('background-color', 'transparent');
                            $(this).css('color', 'rgba(51, 64, 69, 1)');
                            $(this).attr("data-selected", "false");
                        }
                        else
                        {
                            $('#dashboardEditTitleColorSubmenu').show();
                            $(this).css('background-color', 'rgba(0, 162, 211, 1)');
                            $(this).css('color', 'white');
                            $(this).attr("data-selected", "true");
                            $('#dashboardEditTitleColorSubmenu').css('left', parseInt($('#dashboardCtxMenuBtn').offset().left + $('#dashboardEditHeaderMenu').outerWidth() + 2) + 'px');
                        }
                    });
                    
                    $('#dashHeaderColorPicker').colorpicker({
                        horizontal: false,
                        customClass: 'dashHeaderColorPicker',
                        inline: true,
                        format: "rgba",
                        container: true
                    }).on('changeColor', function(e){
                        var newColor = $("#dashHeaderColorPicker").colorpicker('getValue');
                        $('#dashboardViewHeaderContainer').css('background-color', newColor);
                        $('#dashboardViewHeaderContainer').attr('data-newBackgroundColor', newColor);
                    });
                    
                    $('#dashboardEditTitleColorSubmenu div.ctxMenuPaletteColor').click(function(){
                        $('#dashboardViewHeaderContainer').css('background-color', $(this).attr('data-color'));
                        $('#dashboardViewHeaderContainer').attr('data-newBackgroundColor', $(this).attr('data-color'));
                        $("#dashHeaderColorPicker").colorpicker('setValue', $(this).attr('data-color'));
                    });

                    $('#dashHeaderColorCancelBtn').click(function(){
                        $("#dashHeaderColorPicker").colorpicker('setValue', $('#dashboardViewHeaderContainer').attr('data-currentbackgroundcolor'));
                        $('#dashboardViewHeaderContainer').css('background-color', $('#dashboardViewHeaderContainer').attr('data-currentbackgroundcolor'));
                        $('#dashboardViewHeaderContainer').attr('data-newBackgroundColor', $('#dashboardViewHeaderContainer').attr('data-currentbackgroundcolor'));
                    });

                    $('#dashHeaderColorConfirmBtn').click(function(){
                        $(this).parents('div.container-fluid').find('div.contextMenuMsgRow div.col-xs-12').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');
                        $(this).parents('div.container-fluid').find('div.contextMenuMsgRow').show();

                        var button = $(this);

                        $.ajax({
                            url: "../controllers/updateDashboard.php",
                            data: {
                                action: "updateHeaderColor",
                                dashboardId: <?= escapeForJS($_REQUEST['dashboardId']) ?>,
                                newColor: $('#dashboardViewHeaderContainer').attr('data-newBackgroundColor'),
                            },
                            type: "POST",
                            async: true,
                            dataType: 'json',
                            success: function(data) 
                            {
                                if(data.detail === 'Ok')
                                {
                                    updateLastUsedColors($('#dashboardViewHeaderContainer').attr('data-newBackgroundColor'));
                                    button.parents('div.container-fluid').find('div.contextMenuMsgRow div.col-xs-12').html('Saved&nbsp;<i class="fa fa-thumbs-up" style="font-size:14px"></i>');
                                    $('#dashboardViewHeaderContainer').attr('data-currentbackgroundcolor', $('#dashboardViewHeaderContainer').attr('data-newBackgroundColor'));
                                    setTimeout(function(){
                                        button.parents('div.container-fluid').find('div.contextMenuMsgRow').hide();
                                        button.parents('div.widgetSubmenu').hide();
                                        $(".fullCtxMenuRow").css('color', 'rgb(51, 64, 69)');
                                        $(".fullCtxMenuRow").css('background-color', 'transparent');
                                        $(".fullCtxMenuRow").attr("data-selected", "false");
                                    }, 750);
                                }
                                else
                                {
                                    button.parents('div.container-fluid').find('div.contextMenuMsgRow div.col-xs-12').html('Error&nbsp;<i class="fa fa-thumbs-down" style="font-size:14px"></i>');
                                    setTimeout(function(){
                                        button.parents('div.container-fluid').find('div.contextMenuMsgRow').hide();
                                    }, 1000);
                                }
                            },
                            error: function(errorData)
                            {
                                button.parents('div.container-fluid').find('div.contextMenuMsgRow div.col-xs-12').html('Error&nbsp;<i class="fa fa-thumbs-down" style="font-size:14px"></i>');
                                setTimeout(function(){
                                    button.parents('div.container-fluid').find('div.contextMenuMsgRow').hide();
                                }, 1000);
                            }
                        });
                    });
                    
                    $('#dashboardEditHeaderMenu .fullCtxMenuRow').eq(1).click(function(){
                        $(".fullCtxMenuRow").css('color', 'rgb(51, 64, 69)');
                        $(".fullCtxMenuRow").css('background-color', 'transparent');
                        $(".fullCtxMenuRow").attr("data-selected", "false");
                        
                        $('#fullscreenBtnContainer .fullCtxSubmenu').each(function(i){
                            if(i !== 1)
                            {
                                $(this).hide();
                            }
                        });
                    
                        if($('#dashboardEditTitleFontColorSubmenu').is(':visible'))
                        {
                            $('#dashboardEditTitleFontColorSubmenu').hide();
                            $(this).css('background-color', 'transparent');
                            $(this).css('color', 'rgba(51, 64, 69, 1)');
                            $(this).attr("data-selected", "false");
                        }
                        else
                        {
                            $('#dashboardEditTitleFontColorSubmenu').show();
                            $(this).css('background-color', 'rgba(0, 162, 211, 1)');
                            $(this).css('color', 'white');
                            $(this).attr("data-selected", "true");
                            $('#dashboardEditTitleFontColorSubmenu').css('left', parseInt($('#dashboardCtxMenuBtn').offset().left + $('#dashboardEditHeaderMenu').outerWidth() + 2) + 'px');
                            $('#dashboardEditTitleFontColorSubmenu').css('top', parseInt($(this).offset().top) + 'px');
                        }
                    });
					
                    $('#dashboardEditHeaderMenu .quitRow').off('click');
                    $('#dashboardEditHeaderMenu .quitRow').click(function()
                    { 
                        $('#dashboardEditHeaderMenu .fullCtxSubmenu').each(function(i){
                            $(this).attr('data-clicked', 'false');	
                        });
                        $('.widgetSubmenu').hide();
                        $('.fullCtxMenu').hide();
                        $('.applicationCtxMenu').hide();
                        $('.fullCtxSubmenu').hide();
                        $('#dashboardEditHeaderMenu').hide();
                        $(".fullCtxMenuRow").css('color', 'rgb(51, 64, 69)');
                        $(".fullCtxMenuRow").css('background-color', 'transparent');
                        $(".fullCtxMenuRow").attr("data-selected", "false");
                        $('#dashboardEditHeaderMenu').attr('data-shown', 'false');
                    });
                    
                    $('#dashHeaderFontColorPicker').colorpicker({
                        horizontal: false,
                        customClass: 'dashHeaderColorPicker',
                        inline: true,
                        format: "rgba",
                        container: true
                    }).on('changeColor', function(e){
                        var newColor = $("#dashHeaderFontColorPicker").colorpicker('getValue');
                        $('#dashboardTitle').css('color', newColor);
                        $('#dashboardSubtitle').css('color', newColor);
                        $('#dashboardViewHeaderContainer').attr('data-newFontColor', newColor);
                    });
                    
                    $('#dashboardEditTitleFontColorSubmenu div.ctxMenuPaletteColor').click(function(){
                        $('#dashboardTitle').css('color', $(this).attr('data-color'));
                        $('#dashboardSubtitle').css('color', $(this).attr('data-color'));
                        $('#dashboardViewHeaderContainer').attr('data-newFontColor', $(this).attr('data-color'));
                        $("#dashHeaderFontColorPicker").colorpicker('setValue', $(this).attr('data-color'));
                    });
                    
                    $('#dashHeaderFontColorCancelBtn').click(function(){
                        $("#dashHeaderFontColorPicker").colorpicker('setValue', $('#dashboardViewHeaderContainer').attr('data-currentFontColor'));
                        $('#dashboardTitle').css('color', $('#dashboardViewHeaderContainer').attr('data-currentFontColor'));
                        $('#dashboardSubtitle').css('color', $('#dashboardViewHeaderContainer').attr('data-currentFontColor'));
                        $('#dashboardViewHeaderContainer').attr('data-newFontColor', $('#dashboardViewHeaderContainer').attr('data-currentFontColor'));
                    });
                    
                    $('#dashHeaderFontColorConfirmBtn').click(function(){
                        $(this).parents('div.container-fluid').find('div.contextMenuMsgRow div.col-xs-12').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');
                        $(this).parents('div.container-fluid').find('div.contextMenuMsgRow').show();

                        var button = $(this);

                        $.ajax({
                            url: "../controllers/updateDashboard.php",
                            data: {
                                action: "updateHeaderFontColor",
                                dashboardId: <?= escapeForJS($_REQUEST['dashboardId']) ?>,
                                newColor: $('#dashboardViewHeaderContainer').attr('data-newFontColor'),
                            },
                            type: "POST",
                            async: true,
                            dataType: 'json',
                            success: function(data) 
                            {
                                if(data.detail === 'Ok')
                                {
                                    updateLastUsedColors($('#dashboardViewHeaderContainer').attr('data-newFontColor'));
                                    button.parents('div.container-fluid').find('div.contextMenuMsgRow div.col-xs-12').html('Saved&nbsp;<i class="fa fa-thumbs-up" style="font-size:14px"></i>');
                                    $('#dashboardViewHeaderContainer').attr('data-currentFontColor', $('#dashboardViewHeaderContainer').attr('data-newFontColor'));
                                    setTimeout(function(){
                                        button.parents('div.container-fluid').find('div.contextMenuMsgRow').hide();
                                        button.parents('div.widgetSubmenu').hide();
                                        $(".fullCtxMenuRow").css('color', 'rgb(51, 64, 69)');
                                        $(".fullCtxMenuRow").css('background-color', 'transparent');
                                        $(".fullCtxMenuRow").attr("data-selected", "false");
                                    }, 750);
                                }
                                else
                                {
                                    button.parents('div.container-fluid').find('div.contextMenuMsgRow div.col-xs-12').html('Error&nbsp;<i class="fa fa-thumbs-down" style="font-size:14px"></i>');
                                    setTimeout(function(){
                                        button.parents('div.container-fluid').find('div.contextMenuMsgRow').hide();
                                    }, 1000);
                                }
                            },
                            error: function(errorData)
                            {
                                button.parents('div.container-fluid').find('div.contextMenuMsgRow div.col-xs-12').html('Error&nbsp;<i class="fa fa-thumbs-down" style="font-size:14px"></i>');
                                setTimeout(function(){
                                    button.parents('div.container-fluid').find('div.contextMenuMsgRow').hide();
                                }, 1000);
                            }
                        });
                    });
                    
                    //Edit colore area widgets
                    $('#dashboardEditHeaderMenu .fullCtxMenuRow').eq(2).click(function(){
                        $(".fullCtxMenuRow").css('color', 'rgb(51, 64, 69)');
                        $(".fullCtxMenuRow").css('background-color', 'transparent');
                        $(".fullCtxMenuRow").attr("data-selected", "false");
                    
                        $('#fullscreenBtnContainer .fullCtxSubmenu').each(function(i){
                            if(i !== 2)
                            {
                                $(this).hide();
                            }
                        });
                    
                        if($('#dashboardEditAreaColorSubmenu').is(':visible'))
                        {
                            $('#dashboardEditAreaColorSubmenu').hide();
                            $(this).css('background-color', 'transparent');
                            $(this).css('color', 'rgba(51, 64, 69, 1)');
                            $(this).attr("data-selected", "false");
                        }
                        else
                        {
                            $('#dashboardEditAreaColorSubmenu').show();
                            $(this).css('background-color', 'rgba(0, 162, 211, 1)');
                            $(this).css('color', 'white');
                            $(this).attr("data-selected", "true");
                            $('#dashboardEditAreaColorSubmenu').css('left', parseInt($('#dashboardCtxMenuBtn').offset().left + $('#dashboardEditHeaderMenu').outerWidth() + 2) + 'px');
                            $('#dashboardEditAreaColorSubmenu').css('top', parseInt($(this).offset().top) + 'px');
                        }
                    });
                    
                    $('#dashAreaColorPicker').colorpicker({
                        horizontal: false,
                        customClass: 'dashHeaderColorPicker',
                        inline: true,
                        format: "rgba",
                        container: true
                    }).on('changeColor', function(e){
                        var newColor = $("#dashAreaColorPicker").colorpicker('getValue');
                        $('#gridTable').css('background-color', newColor);
                        $('#dashboardViewHeaderContainer').attr('data-newAreaColor', newColor);
                    });
                    
                    $('#dashboardEditAreaColorSubmenu div.ctxMenuPaletteColor').click(function(){
                        $('#gridTable').css('background-color', $(this).attr('data-color'));
                        $('#dashboardViewHeaderContainer').attr('data-newAreaColor', $(this).attr('data-color'));
                        $("#dashAreaColorPicker").colorpicker('setValue', $(this).attr('data-color'));
                    });
                    
                    $('#dashAreaColorCancelBtn').click(function(){
                        $("#dashAreaColorPicker").colorpicker('setValue', $('#dashboardViewHeaderContainer').attr('data-currenAreaColor'));
                        $('#gridsterUl').css('background-color', $('#dashboardViewHeaderContainer').attr('data-currentAreaColor'));
                        $('#dashboardViewHeaderContainer').attr('data-newAreaColor', $('#dashboardViewHeaderContainer').attr('data-currentAreaColor'));
                    });
                    
                    $('#dashAreaColorConfirmBtn').click(function(){
                        $(this).parents('div.container-fluid').find('div.contextMenuMsgRow div.col-xs-12').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');
                        $(this).parents('div.container-fluid').find('div.contextMenuMsgRow').show();

                        var button = $(this);

                        $.ajax({
                            url: "../controllers/updateDashboard.php",
                            data: {
                                action: "updateAreaColor",
                                dashboardId: <?= escapeForJS($_REQUEST['dashboardId']) ?>,
                                newColor: $('#dashboardViewHeaderContainer').attr('data-newAreaColor'),
                            },
                            type: "POST",
                            async: true,
                            dataType: 'json',
                            success: function(data) 
                            {
                                if(data.detail === 'Ok')
                                {
                                    updateLastUsedColors($('#dashboardViewHeaderContainer').attr('data-newAreaColor'));
                                    button.parents('div.container-fluid').find('div.contextMenuMsgRow div.col-xs-12').html('Saved&nbsp;<i class="fa fa-thumbs-up" style="font-size:14px"></i>');
                                    $('#dashboardViewHeaderContainer').attr('data-currentAreaColor', $('#dashboardViewHeaderContainer').attr('data-newAreaColor'));
                                    setTimeout(function(){
                                        button.parents('div.container-fluid').find('div.contextMenuMsgRow').hide();
                                        button.parents('div.widgetSubmenu').hide();
                                        $(".fullCtxMenuRow").css('color', 'rgb(51, 64, 69)');
                                        $(".fullCtxMenuRow").css('background-color', 'transparent');
                                        $(".fullCtxMenuRow").attr("data-selected", "false");
                                    }, 750);
                                }
                                else
                                {
                                    button.parents('div.container-fluid').find('div.contextMenuMsgRow div.col-xs-12').html('Error&nbsp;<i class="fa fa-thumbs-down" style="font-size:14px"></i>');
                                    setTimeout(function(){
                                        button.parents('div.container-fluid').find('div.contextMenuMsgRow').hide();
                                    }, 1000);
                                }
                            },
                            error: function(errorData)
                            {
                                button.parents('div.container-fluid').find('div.contextMenuMsgRow div.col-xs-12').html('Error&nbsp;<i class="fa fa-thumbs-down" style="font-size:14px"></i>');
                                setTimeout(function(){
                                    button.parents('div.container-fluid').find('div.contextMenuMsgRow').hide();
                                }, 1000);
                            }
                        });
                    });
                    //Fine edit colore area widgets
                    
                    //Edit colore area esterna widgets
                    $('#dashboardEditHeaderMenu .fullCtxMenuRow').eq(3).click(function(){
                        $(".fullCtxMenuRow").css('color', 'rgb(51, 64, 69)');
                        $(".fullCtxMenuRow").css('background-color', 'transparent');
                        $(".fullCtxMenuRow").attr("data-selected", "false");
                        
                        $('#fullscreenBtnContainer .fullCtxSubmenu').each(function(i){
                            if(i !== 3)
                            {
                                $(this).hide();
                            }
                        });
                    
                        if($('#dashboardEditFrameColorSubmenu').is(':visible'))
                        {
                            $('#dashboardEditFrameColorSubmenu').hide();
                            $(this).css('background-color', 'transparent');
                            $(this).css('color', 'rgba(51, 64, 69, 1)');
                            $(this).attr("data-selected", "false");
                        }
                        else
                        {
                            $('#dashboardEditFrameColorSubmenu').show();
                            $(this).css('background-color', 'rgba(0, 162, 211, 1)');
                            $(this).css('color', 'white');
                            $(this).attr("data-selected", "true");
                            $('#dashboardEditFrameColorSubmenu').css('left', parseInt($('#dashboardCtxMenuBtn').offset().left + $('#dashboardEditHeaderMenu').outerWidth() + 2) + 'px');
                            $('#dashboardEditFrameColorSubmenu').css('top', parseInt($(this).offset().top) + 'px');
                        }
                    });
                    
                    $('#dashFrameColorPicker').colorpicker({
                        horizontal: false,
                        customClass: 'dashHeaderColorPicker',
                        inline: true,
                        format: "rgba",
                        container: true
                    }).on('changeColor', function(e){
                        var newColor = $("#dashFrameColorPicker").colorpicker('getValue');
                        $('body').css('background-color', newColor);
                        $('#dashboardViewHeaderContainer').attr('data-newFrameColor', newColor);
                    });
                    
                    $('#dashboardEditFrameColorSubmenu div.ctxMenuPaletteColor').click(function(){
                        $('body').css('background-color', $(this).attr('data-color'));
                        $('#dashboardViewHeaderContainer').attr('data-newFrameColor', $(this).attr('data-color'));
                        $("#dashFrameColorPicker").colorpicker('setValue', $(this).attr('data-color'));
                    });
                    
                    $('#dashFrameColorCancelBtn').click(function(){
                        $("#dashFrameColorPicker").colorpicker('setValue', $('#dashboardViewHeaderContainer').attr('data-currenFrameColor'));
                        $('body').css('background-color', $('#dashboardViewHeaderContainer').attr('data-currentFrameColor'));
                        $('#dashboardViewHeaderContainer').attr('data-newFrameColor', $('#dashboardViewHeaderContainer').attr('data-currentFrameColor'));
                    });
                    
                    $('#dashFrameColorConfirmBtn').click(function(){
                        $(this).parents('div.container-fluid').find('div.contextMenuMsgRow div.col-xs-12').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');
                        $(this).parents('div.container-fluid').find('div.contextMenuMsgRow').show();

                        var button = $(this);

                        $.ajax({
                            url: "../controllers/updateDashboard.php",
                            data: {
                                action: "updateFrameColor",
                                dashboardId: <?= escapeForJS($_REQUEST['dashboardId']) ?>,
                                newColor: $('#dashboardViewHeaderContainer').attr('data-newFrameColor'),
                            },
                            type: "POST",
                            async: true,
                            dataType: 'json',
                            success: function(data) 
                            {
                                if(data.detail === 'Ok')
                                {
                                    updateLastUsedColors($('#dashboardViewHeaderContainer').attr('data-newFrameColor'));
                                    button.parents('div.container-fluid').find('div.contextMenuMsgRow div.col-xs-12').html('Saved&nbsp;<i class="fa fa-thumbs-up" style="font-size:14px"></i>');
                                    $('#dashboardViewHeaderContainer').attr('data-currentFrameColor', $('#dashboardViewHeaderContainer').attr('data-newFrameColor'));
                                    setTimeout(function(){
                                        button.parents('div.container-fluid').find('div.contextMenuMsgRow').hide();
                                        button.parents('div.widgetSubmenu').hide();
                                        $(".fullCtxMenuRow").css('color', 'rgb(51, 64, 69)');
                                        $(".fullCtxMenuRow").css('background-color', 'transparent');
                                        $(".fullCtxMenuRow").attr("data-selected", "false");
                                    }, 750);
                                }
                                else
                                {
                                    button.parents('div.container-fluid').find('div.contextMenuMsgRow div.col-xs-12').html('Error&nbsp;<i class="fa fa-thumbs-down" style="font-size:14px"></i>');
                                    setTimeout(function(){
                                        button.parents('div.container-fluid').find('div.contextMenuMsgRow').hide();
                                    }, 1000);
                                }
                            },
                            error: function(errorData)
                            {
                                button.parents('div.container-fluid').find('div.contextMenuMsgRow div.col-xs-12').html('Error&nbsp;<i class="fa fa-thumbs-down" style="font-size:14px"></i>');
                                setTimeout(function(){
                                    button.parents('div.container-fluid').find('div.contextMenuMsgRow').hide();
                                }, 1000);
                            }
                        });
                    });
                    //Fine edit colore area esterna widgets
                    
                    $('#dashboardBckDarknessMenuRow').click(function()
                    {
                        $(".fullCtxMenuRow").css('color', 'rgb(51, 64, 69)');
                        $(".fullCtxMenuRow").css('background-color', 'transparent');
                        $(".fullCtxMenuRow").attr("data-selected", "false");
                        
                        $('#fullscreenBtnContainer .fullCtxSubmenu').each(function(i){
                            if(i !== 4)
                            {
                                $(this).hide();
                            }
                        });
                        
                        if($('#dashboardBckDarknessSubmenu').is(':visible'))
                        {
                            $('#dashboardBckDarknessSubmenu').hide();
                            $(this).css('background-color', 'transparent');
                            $(this).css('color', 'rgba(51, 64, 69, 1)');
                            $(this).attr("data-selected", "false");
                        }
                        else
                        {
                            $('#dashboardBckDarknessSubmenu').show();
                            $(this).css('background-color', 'rgba(0, 162, 211, 1)');
                            $(this).css('color', 'white');
                            $(this).attr("data-selected", "true");
                            $('#dashboardBckDarknessSubmenu').css('left', parseInt($('#dashboardCtxMenuBtn').offset().left + $('#dashboardEditHeaderMenu').outerWidth() + 2) + 'px');
                        }
                    });

                    $('#dashboardEditHeaderMenu .fullCtxMenuRow').eq(5).click(function(){
                        var contentHeight, showTitle, showHeader = null;

                        // MS> Slightly edited to manage with super-container redim at content collapse

                        if($('#dashboardEditHeaderMenu .menuVisibility').attr('data-menushown') == "true")
                        {
                            $('#dashboardEditHeaderMenu .menuVisibility').attr('data-menushown', 'false')
                            $('#orgMenuButton').hide();
                            $('#dashboardEditHeaderMenu .menuVisibility .fullCtxMenuIcon i').removeClass('fa-eye-slash');
                            $('#dashboardEditHeaderMenu .menuVisibility .fullCtxMenuIcon i').addClass('fa-eye');
                            $('#dashboardEditHeaderMenu .menuVisibility .fullCtxMenuTxt').html('Show Links Menu');

                        }
                        else
                        {
                            $('#dashboardEditHeaderMenu .menuVisibility').attr('data-menushown', 'true')
                            $('#orgMenuButton').show();
                            $('#dashboardEditHeaderMenu .menuVisibility .fullCtxMenuIcon i').removeClass('fa-eye');
                            $('#dashboardEditHeaderMenu .menuVisibility .fullCtxMenuIcon i').addClass('fa-eye-slash');
                            $('#dashboardEditHeaderMenu .menuVisibility .fullCtxMenuTxt').html('Hide Links Menu');
                        }

                        //Update parametro su DB
                        $.ajax({
                            url: "../controllers/updateDashboard.php",
                            data: {
                                action: "updateOrgMenuVisibility",
                                dashboardId: <?= escapeForJS($_REQUEST['dashboardId']) ?>,
                                newVisibility: $('#dashboardEditHeaderMenu .menuVisibility').attr('data-menushown'),
                            },
                            type: "POST",
                            async: true,
                            dataType: 'json',
                            success: function(data)
                            {
                                if(data.detail === 'Ok')
                                {
                               /*     updateLastUsedColors($('#dashboardViewHeaderContainer').attr('data-newFontColor'));
                                    button.parents('div.container-fluid').find('div.contextMenuMsgRow div.col-xs-12').html('Saved&nbsp;<i class="fa fa-thumbs-up" style="font-size:14px"></i>');
                                    $('#dashboardViewHeaderContainer').attr('data-currentFontColor', $('#dashboardViewHeaderContainer').attr('data-newFontColor'));
                                    setTimeout(function(){
                                        button.parents('div.container-fluid').find('div.contextMenuMsgRow').hide();
                                        button.parents('div.widgetSubmenu').hide();
                                        $(".fullCtxMenuRow").css('color', 'rgb(51, 64, 69)');
                                        $(".fullCtxMenuRow").css('background-color', 'transparent');
                                        $(".fullCtxMenuRow").attr("data-selected", "false");
                                    }, 750);*/
                                }
                                else
                                {
                                /*    button.parents('div.container-fluid').find('div.contextMenuMsgRow div.col-xs-12').html('Error&nbsp;<i class="fa fa-thumbs-down" style="font-size:14px"></i>');
                                    setTimeout(function(){
                                        button.parents('div.container-fluid').find('div.contextMenuMsgRow').hide();
                                    }, 1000); */
                                }
                            },
                            error: function(errorData)
                            {

                            }
                        });
                    });

                    $('#dashboardEditHeaderMenu .fullCtxMenuRow').hover(function(){
                        if($(this).attr("data-selected") === "false")
                        {
                            $(this).css('color', 'white');
                            $(this).css('background-color', 'rgba(0, 162, 211, 1)');
                        }
                    }, function(){
                        if($(this).attr("data-selected") === "false")
                        {
                            $(this).css('color', 'rgb(51, 64, 69)');
                            $(this).css('background-color', 'transparent');
                        }
                    });   
                    
                    $('#dashboardTitle span').click(function()
                    {
                        if($(this).attr('data-underEdit') === 'false')
                        {
                            //Ripristino eventuale sottotitolo dashboard lasciato a mezzo
                            if($("#dashboardSubtitle span").html().trim() === '')
                            {
                                $("#dashboardSubtitle span").html("No subtitle");
                            }
                            else
                            {
                                $("#dashboardSubtitle span").html($("#dashboardSubtitle").attr('data-currentSubtitle'));
                            }
                            
                            $("#dashboardSubtitle span").attr('data-underEdit', 'false');
                            $("#dashboardSubtitle span").attr('contenteditable', false);
                            
                            //Ripristino eventuali titoli widgets
                            $('div.titleDiv').each(function(i)
                            {
                                $(this).attr("contenteditable", false);
                                $(this).attr("data-underEdit", false);
                                var currentTitle = $(this).attr('data-currentTitle');
                                currentTitle = currentTitle.replace(/\\\\/g, "&bsol;");
                                $(this).html(currentTitle);
                            });
                            
                            $(this).attr('data-underEdit', 'true');
                            $(this).attr('contenteditable', true);
                            $(this).focus();
                            $('.applicationCtxMenu').hide();
                            $('#dashboardTitle span').off('mouseenter');
                            $('#dashboardTitle span').off('mouseleave');
                            $('#dashboardTitle span').html($("#dashboardTitle").attr('data-currentTitle'));
                            $('#dashboardSubtitleMenu').hide();
                            $('#dashboardTitleMenu').show();
                        }
                    });
                    
                    $('#dashHeaderTitleEditCancelBtn').click(function(){
                        $('#dashboardTitle span').attr('data-underEdit', 'false');
                        $('#dashboardTitle span').attr('contenteditable', false);
                        $('#dashboardTitle span').html($("#dashboardTitle").attr('data-currentTitle'));
                        $("#dashboardTitle").attr('data-newTitle', $("#dashboardTitle").attr('data-currentTitle'));
                        $('#dashboardTitleMenu').hide();
                        $('#dashboardTitle span').hover(function(){
                            $(this).html('<? _("Click to edit")?>');
                        }, function(){
                            $(this).html($('#dashboardTitle').attr('data-currenttitle'));
                        });
                    });
                    
                    $('#dashHeaderTitleEditConfirmBtn').click(function(){
                        var button = $(this);
                        button.parents('div.compactMenu').find('div.compactMenuMsg').show();
                        $(this).parents('div.compactMenu').find('div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');

                    //    console.log("Entrato");
                        
                        var oldTitle= "<?= addslashes($dashboardTitle) ?>";
                        var newTitle = $('#dashboardTitle span').html();
                        $.ajax({
                            url: "../controllers/updateDashboard.php",
                            data: {
                                action: "updateTitle",
                                dashboardId: <?= escapeForJS($_REQUEST['dashboardId']) ?>,
                                newTitle: $('#dashboardTitle span').html(),
                                dashboardTitle: "<?= addslashes($dashboardTitle) ?>"
                            //    dashboardTitle: dashTitleEscaped
                            },
                            type: "POST",
                            async: true,
                            dataType: 'json',
                            success: function(data) 
                            {
                                if(data.detail === 'Ok')
                                {
                                    button.parents('div.compactMenu').find('div.compactMenuMsg').html('Saved&nbsp;<i class="fa fa-thumbs-up" style="font-size:14px"></i>');
                                    $("#dashboardTitle").attr('data-currentTitle', $("#dashboardTitle span").html());
                                    $('#modalEditDashboard #currentDashboardTitle').val($("#dashboardTitle span").html());
                                    $('#modal-add-widget #currentDashboardTitle').val($("#dashboardTitle span").html());
                                    $('#modal-modify-widget #currentDashboardTitle').val($("#dashboardTitle span").html());
                                    history.replaceState(null, null, 'dashboard_configdash.php?dashboardId=<?= escapeForJS($_REQUEST['dashboardId']) ?>&dashboardAuthorName=<?= $dashboardAuthorName ?>&dashboardEditorName=<?= $dashboardEditorName ?>&dashboardTitle=' + encodeURI($('#dashboardTitle span').html()));
                                    setTimeout(function(){
                                        $('#dashboardTitle span').attr('data-underEdit', 'false');
                                        $('#dashboardTitle span').attr('contenteditable', false);
                                        $('#dashboardTitleMenu').hide();
                                        button.parents('div.compactMenu').find('div.compactMenuMsg').hide();
                                        $('#dashboardTitle span').hover(function(){
                                            $(this).html('<? _("Click to edit")?>');
                                        }, function(){
                                            $(this).html($('#dashboardTitle').attr('data-currenttitle'));
                                        });
                                    }, 1000);
                            
                                }
                                else if(data.detail === 'queryKo_ampersend')
                                {
                                    button.parents('div.compactMenu').find('div.compactMenuMsg').html('Error, character "&" is not allowed in title&nbsp;<i class="fa fa-thumbs-down" style="font-size:14px"></i>');
                                    setTimeout(function(){
                                        button.parents('div.compactMenu').find('div.compactMenuMsg').hide();
                                    }, 1500);
                                }
                                else if(data.detail === 'queryKo_quotes')
                                {
                                    button.parents('div.compactMenu').find('div.compactMenuMsg').html('Error, quotes are not allowed in title&nbsp;<i class="fa fa-thumbs-down" style="font-size:14px"></i>');
                                    setTimeout(function(){
                                        button.parents('div.compactMenu').find('div.compactMenuMsg').hide();
                                    }, 1500);
                                }
                                else
                                {
                                    button.parents('div.compactMenu').find('div.compactMenuMsg').html('Error&nbsp;<i class="fa fa-thumbs-down" style="font-size:14px"></i>');
                                    setTimeout(function(){
                                        button.parents('div.compactMenu').find('div.compactMenuMsg').hide();
                                    }, 1000);
                                }
                            },
                            error: function(errorData)
                            {
                                button.parents('div.compactMenu').find('div.compactMenuMsg').html('Error&nbsp;<i class="fa fa-thumbs-down" style="font-size:14px"></i>');
                                setTimeout(function(){
                                    button.parents('div.compactMenu').find('div.compactMenuMsg').hide();
                                }, 1000);
                            },
                            complete: function()
                            {
                                
                            }
                        });
                    });
                    
                    $('#dashboardSubtitle span').click(function(){
                        if($(this).attr('data-underEdit') === 'false')
                        {
                            //Ripristino eventuale titolo dashboard lasciato a mezzo
                            if($("#dashboardTitle span").html().trim() === '')
                            {
                                $("#dashboardSubtitle span").html("No subtitle");
                            }
                            else
                            {
                                $("#dashboardTitle span").html($("#dashboardTitle").attr('data-currentTitle'));
                            }
                            
                            $("#dashboardTitle span").attr('data-underEdit', 'false');
                            $("#dashboardTitle span").attr('contenteditable', false);
                            
                            //Ripristino eventuali titoli widgets
                            $('div.titleDiv').each(function(i)
                            {
                                $(this).attr("contenteditable", false);
                                $(this).attr("data-underEdit", false);
                                var currentTitle = $(this).attr('data-currentTitle');
                                currentTitle = currentTitle.replace(/\\\\/g, "&bsol;");
                                $(this).html(currentTitle);
                            });
                            
                            $(this).attr('data-underEdit', 'true');
                            $(this).attr('contenteditable', true);
                            $(this).focus();
                            $('.applicationCtxMenu').hide();
                            $('#dashboardSubtitle span').off('mouseenter');
                            $('#dashboardSubtitle span').off('mouseleave');
                            $(this).html($("#dashboardSubtitle").attr('data-currentSubtitle'));
                            
                            $('#dashboardTitleMenu').hide();
                            $('#dashboardSubtitleMenu').show();
                        }
                    });
                    
                    $('#dashHeaderSubtitleEditCancelBtn').click(function(){
                        $('#dashboardSubtitle span').attr('data-underEdit', 'false');
                        $('#dashboardSubtitle span').attr('contenteditable', false);
                        if($("#dashboardSubtitle").attr('data-currentSubtitle') === "No subtitle")
                        {
                            $('#dashboardSubtitle span').html("No subtitle");
                        }
                        else
                        {
                            $('#dashboardSubtitle span').html($("#dashboardSubtitle").attr('data-currentSubtitle'));
                        }
                        $("#dashboardSubtitle").attr('data-newSubtitle', $("#dashboardSubtitle").attr('data-currentSubtitle'));
                        $('#dashboardSubtitleMenu').hide();
                        $('#dashboardSubtitle span').hover(function(){
                            $(this).html('<? _("Click to edit")?>');
                        }, function(){
                            if($("#dashboardSubtitle").attr('data-currentSubtitle') === "No subtitle")
                            {
                                $("#dashboardSubtitle span").text("No subtitle");
                            }
                            else
                            {
                                $(this).html($('#dashboardSubtitle').attr('data-currentsubtitle'));
                            }
                        });
                    });
                    
                    $('#dashHeaderSubtitleEditConfirmBtn').click(function(){
                        var button = $(this);
                        button.parents('div.compactMenu').find('div.compactMenuMsg').show();
                        $(this).parents('div.compactMenu').find('div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');
                         
                        $.ajax({
                            url: "../controllers/updateDashboard.php",
                            data: {
                                action: "updateSubtitle",
                                dashboardId: <?= escapeForJS($_REQUEST['dashboardId']) ?>,
                                newSubtitle: $('#dashboardSubtitle span').html(),
                            },
                            type: "POST",
                            async: true,
                            dataType: 'json',
                            success: function(data) 
                            {
                                if(data.detail === 'Ok')
                                {
                                    button.parents('div.compactMenu').find('div.compactMenuMsg').html('Saved&nbsp;<i class="fa fa-thumbs-up" style="font-size:14px"></i>');
                                    
                                    if($("#dashboardSubtitle span").html().trim() === '')
                                    {
                                        $("#dashboardSubtitle").attr('data-currentSubtitle', "No subtitle");
                                        $("#dashboardSubtitle span").html("No subtitle");
                                    }
                                    else
                                    {
                                        $("#dashboardSubtitle").attr('data-currentSubtitle', $("#dashboardSubtitle span").html());
                                    }
                                    
                                    setTimeout(function(){
                                        $('#dashboardSubtitle span').attr('data-underEdit', 'false');
                                        $('#dashboardSubtitle span').attr('contenteditable', false);
                                        $('#dashboardSubtitleMenu').hide();
                                        button.parents('div.compactMenu').find('div.compactMenuMsg').hide();
                                        $('#dashboardSubtitle span').hover(function(){
                                            $(this).html('<? _("Click to edit")?>');
                                        }, function(){
                                            if($("#dashboardSubtitle").attr('data-currentSubtitle') === "No subtitle")
                                            {
                                                $("#dashboardSubtitle span").text("No subtitle");
                                            }
                                            else
                                            {
                                                $(this).html($('#dashboardSubtitle').attr('data-currentsubtitle'));
                                            }
                                        });
                                    }, 1000);
                                }
                                else
                                {
                                    button.parents('div.compactMenu').find('div.compactMenuMsg').html('Error&nbsp;<i class="fa fa-thumbs-down" style="font-size:14px"></i>');
                                    setTimeout(function(){
                                        button.parents('div.compactMenu').find('div.compactMenuMsg').hide();
                                    }, 1000);
                                }
                            },
                            error: function(errorData)
                            {
                                button.parents('div.compactMenu').find('div.compactMenuMsg').html('Error&nbsp;<i class="fa fa-thumbs-down" style="font-size:14px"></i>');
                                setTimeout(function(){
                                    button.parents('div.compactMenu').find('div.compactMenuMsg').hide();
                                }, 1000);
                            },
                            complete: function()
                            {
                                
                            }
                        });
                    });
                    
                    /*var sessionEndTime = "<?php echo $_SESSION['sessionEndTime']; ?>";
                    $('#sessionExpiringPopup').css("top", parseInt($(window).height() - $('#sessionExpiringPopup').height()) + "px");
                    $('#sessionExpiringPopup').css("left", parseInt($(window).width() - $('#sessionExpiringPopup').width()) + "px");*/
					
                    $('#editDashboardMenu').css('margin-top', parseInt($('#dashboardViewHeaderContainer').height()) + "px");
                    
                    $('#metricsCategory').parents('div.row').hide();
                    $('#actuatorTarget').parents('div.row').hide();
                    $('#personalAppsInputs').parents('div.row').hide();
                    $('#personalAppsInputsValueType').parents('div.row').hide();
                    $('#personalAppsInputsStartValue').parents('div.row').hide();
                    $('#personalAppsInputsDomainType').parents('div.row').hide();
                    $('#personalAppsInputsMinValue').parents('div.row').hide();
                    $('#personalAppsInputsMaxValue').parents('div.row').hide();
                    $('#personalAppsInputsOffValue').parents('div.row').hide();
                    $('#personalAppsInputsOnValue').parents('div.row').hide();
                    $('#widgetActuatorTypePersonalApps').parents('div.row').hide();
                    
                    $('#actuatorTargetM').parents('div.row').hide();
                    $('#personalAppsInputsM').parents('div.row').hide();
                    $('#personalAppsInputsValueTypeM').parents('div.row').hide();
                    $('#personalAppsInputsStartValueM').parents('div.row').hide();
                    $('#personalAppsInputsDomainTypeM').parents('div.row').hide();
                    $('#personalAppsInputsMinValueM').parents('div.row').hide();
                    $('#personalAppsInputsMaxValueM').parents('div.row').hide();
                    $('#personalAppsInputsOffValueM').parents('div.row').hide();
                    $('#personalAppsInputsOnValueM').parents('div.row').hide();
                    $('#widgetActuatorTypePersonalAppsM').parents('div.row').hide();
                    
                    // Fullscreen: passargli sempre il documentElement 
                    $('#fullscreenBtn').click(function(){
                        if($(this).attr('data-status') === 'normal')
                        {
                            if(document.documentElement.requestFullscreen) 
                            {
                                    document.documentElement.requestFullscreen();
                            } 
                            else if(document.documentElement.mozRequestFullScreen) 
                            {
                                    document.documentElement.mozRequestFullScreen();
                            }
                            else if(document.documentElement.webkitRequestFullScreen) 
                            {
                                    document.documentElement.webkitRequestFullScreen();
                            } 
                            else if(document.documentElement.msRequestFullscreen) 
                            {
                                    document.documentElement.msRequestFullscreen();
                            }
                            $(this).attr('data-status', 'fullscreen');
                            $(this).find('div.dashEditMenuTxtCnt').text('Exit');
                            $(this).find('div.dashEditMenuIconCnt i').removeClass('fa-window-maximize');
                            $(this).find('div.dashEditMenuIconCnt i').addClass('fa-window-restore');
                        }
                        else
                        {
                            if(document.exitFullscreen) 
                            {
                                    document.exitFullscreen();
                            } 
                            else if(document.webkitExitFullscreen) 
                            {
                                    document.webkitExitFullscreen();
                            } 
                            else if(document.mozCancelFullScreen) 
                            {
                                    document.mozCancelFullScreen();
                            } 
                            else if(document.msExitFullscreen) 
                            {
                                    document.msExitFullscreen();
                            }
                            $(this).attr('data-status', 'normal');
                            $(this).find('div.dashEditMenuTxtCnt').text('Fullscreen');
                            $(this).find('div.dashEditMenuIconCnt i').removeClass('fa-window-restore');
                            $(this).find('div.dashEditMenuIconCnt i').addClass('fa-window-maximize');
                        }
                    });
                    
                    $(window).resize(function()
                    {
                            if($('#editDashboardMenu').is(':visible'))
                            {
                                $('#editDashboardMenu').css('margin-top', parseInt($('#dashboardViewHeaderContainer').height()) + "px");
                                $('#dashboardViewWidgetsContainer').css('margin-top', "0px");
                                var gridTableTop = $('#dashboardViewWidgetsContainer').offset().top;
                                $('#gridTable').css('top', parseInt($('#editDashboardMenu').height() + $('#dashboardViewHeaderContainer').height() + 15 + 15) + "px");
                            }
                            else
                            {
                                $('#editDashboardMenu').css('margin-top', "0px");
                                $('#dashboardViewWidgetsContainer').css('margin-top', parseInt($('#dashboardViewHeaderContainer').height() + 15) + "px");
                                $('#gridTable').css('top', parseInt($('#dashboardViewHeaderContainer').height() + 15) + "px");
                            }
                            
                       /*     if(headerVisible === '1')
                            {
                               $('#dashBckCnt').css("height", ($(window).height() - $('#dashboardViewHeaderContainer').height()) + "px");
                               $('#dashBckCnt').css("top", $('#dashboardViewHeaderContainer').height() + "px");
                            }
                            else
                            {
                               $('#dashBckCnt').css("height", $(window).height() + "px");
                               $('#dashBckCnt').css("top", "0px");
                            }   */

                            $('#gridTable').empty();

                            setTimeout(function(){
                                gridWidth = $("#dashboardViewWidgetsContainer").width();
                                gridHeight = $(window).height()*2;
                                if (scaleFactorFlag == 'yes') {
                                    gridRowsNumber = gridHeight / gridsterCellH;
                                    gridColsNumber = gridWidth / gridsterCellW;
                                } else {
                                    gridRowsNumber = gridHeight / (gridsterCellH + 2);
                                    gridColsNumber = gridWidth / (gridsterCellW + 2);
                                }
                                var newRow = null;
                                var gridTableTop = $('#dashboardViewWidgetsContainer').offset().top;
                                var gridTableLeft = $('#dashboardViewWidgetsContainer').offset().left;
                                $('#gridTable').width(gridWidth);
                                $('#gridTable').height(gridHeight);
                                $('#gridTable').css('top', gridTableTop);
                                $('#gridTable').css('left', gridTableLeft);
                                
                                for(var i = 0; i < gridRowsNumber; i++)
                                {
                                    newRow = $('<tr></tr>');
                                    for(var j = 0; j < gridColsNumber; j++)
                                    {
                                        newRow.append('<td></td>');
                                    }
                                    $('#gridTable').append(newRow);
                                }
                                
                                $('#gridTable').css("border", "1px dashed " + gridColor);
                                $('#gridTable td').css("border", "1px dashed " + gridColor);
                            }, 500);
						
                        $('#clock').textfill({
                            maxFontPixels: 24
                        });

                        $('#fullscreenBtnContainer').textfill({
                            maxFontPixels: 32
                        });

                        $('#dashboardTitle').textfill({
                            maxFontPixels: -20
                        });

                        $('#dashboardSubtitle').textfill({
                            maxFontPixels: -20
                        });
                        
                        switch(dashboardViewMode)
                        {
                            case "fixed":
                                gridsterCellW = 76;
                                gridsterCellH = 38;
                                widgetsContainerWidth = num_cols*(gridsterCellW + 2);

                                // MOD GRID
                                gridsterCellW = newScaledGridsterCellW;
                                gridsterCellH = newScaledGridsterCellH;
                                widgetsContainerWidth = dashboardParams.width;

                                break;

                            case "smallResponsive":
                                if($(window).width() > 768)
                                {
                                    gridsterCellW = 76;
                                    gridsterCellH = 38;
                                    widgetsContainerWidth = num_cols*(gridsterCellW + 2);

                                    // MOD GRID
                                    gridsterCellW = newScaledGridsterCellW;
                                    gridsterCellH = newScaledGridsterCellH;
                                    widgetsContainerWidth = dashboardParams.width;
                                }
                                else
                                {
                                    gridsterCellW = Math.floor(parseInt($('body').width()*0.98) / num_cols) - 2;
                                    gridsterCellH = gridsterCellW/2;
                                    widgetsContainerWidth = num_cols*(gridsterCellW + 2);

                                    // MOD GRID
                                    gridsterCellW = Math.floor(parseInt($('body').width()*0.98) / num_cols);
                                    gridsterCellH = gridsterCellW/2;
                                    widgetsContainerWidth = num_cols*(gridsterCellW);
                                }
                                break;

                            case "mediumResponsive":
                                if($(window).width() > 992)
                                {
                                    gridsterCellW = 76;
                                    gridsterCellH = 38;
                                    widgetsContainerWidth = num_cols*(gridsterCellW + 2);

                                    // MOD GRID
                                    gridsterCellW = newScaledGridsterCellW;
                                    gridsterCellH = newScaledGridsterCellH;
                                    widgetsContainerWidth = dashboardParams.width;
                                }
                                else
                                {
                                    gridsterCellW = Math.floor(parseInt($('body').width()*0.98) / num_cols) - 2;
                                    gridsterCellH = gridsterCellW/2;
                                    widgetsContainerWidth = num_cols*(gridsterCellW + 2);

                                    // MOD GRID
                                    gridsterCellW = Math.floor(parseInt($('body').width()*0.98) / num_cols);
                                    gridsterCellH = gridsterCellW/2;
                                    widgetsContainerWidth = num_cols*(gridsterCellW);
                                }
                                break;
                                
                            case "largeResponsive":
                                if($(window).width() > 1200)
                                {
                                    gridsterCellW = 76;
                                    gridsterCellH = 38;
                                    widgetsContainerWidth = num_cols*(gridsterCellW + 2);

                                    // MOD GRID
                                    gridsterCellW = newScaledGridsterCellW;
                                    gridsterCellH = newScaledGridsterCellH;
                                    widgetsContainerWidth = dashboardParams.width;
                                }
                                else
                                {
                                    gridsterCellW = Math.floor(parseInt($('body').width()*0.98) / num_cols) - 2;
                                    gridsterCellH = gridsterCellW/2;
                                    widgetsContainerWidth = num_cols*(gridsterCellW + 2);

                                    // MOD GRID
                                    gridsterCellW = Math.floor(parseInt($('body').width()*0.98) / num_cols);
                                    gridsterCellH = gridsterCellW/2;
                                    widgetsContainerWidth = num_cols*(gridsterCellW);
                                }
                                break;     

                            case "alwaysResponsive":
                                gridsterCellW = Math.floor(parseInt($('body').width()*0.98) / num_cols) - 2;
                                gridsterCellH = gridsterCellW/2;
                                widgetsContainerWidth = num_cols*(gridsterCellW + 2);

                                // MOD GRID
                                gridsterCellW = Math.floor(parseInt($('body').width()*0.98) / num_cols);
                                gridsterCellH = gridsterCellW/2;
                            //    widgetsContainerWidth = dashboardParams.width;
                                widgetsContainerWidth = num_cols*(gridsterCellW);
                                break;

                            default:
                                gridsterCellW = 76;
                                gridsterCellH = 38;
                                widgetsContainerWidth = num_cols*(gridsterCellW + 2);

                                // MOD GRID
                                gridsterCellW = newScaledGridsterCellW;
                                gridsterCellH = newScaledGridsterCellH;
                                widgetsContainerWidth = dashboardParams.width;
                                break;    
                        }

                        $('#dashboardViewWidgetsContainer').css('width', widgetsContainerWidth + "px");
                        $('div.footerLogos').css('margin-right', ($('body').width() - widgetsContainerWidth)/2);

                        gridster.resize_widget_dimensions({
                            widget_base_dimensions: [gridsterCellW, gridsterCellH],
                        //    widget_margins: [1/scaleFactorW, 1/scaleFactorH],
                            widget_margins: [0, 0]
                        });
                        
                        $('li.gs_w').trigger({
                            type: "resizeWidgets"
                        }); 
                        
                        $('#sessionExpiringPopup').css("top", parseInt($(window).height() - $('#sessionExpiringPopup').height()) + "px");
                        $('#sessionExpiringPopup').css("left", parseInt($(window).width() - $('#sessionExpiringPopup').width()) + "px");
                    });
                    
                    $('#widgetCategory').val(-1);
                    $('#actuatorTarget').val(-1);
                    $('#entityAttrType').val(-1);
                    $('#widgetActuatorType').val(-1);
                    $('#metricsCategory').val(-1);
                    
                    $.ajax({
                        url: "get_data.php",
                        data: {
                            action: "getPersonalAppsInputs",
                            notBySession: "true",
                            username: '<?= $dashboardAuthorName ?>',
                            dashboardId: '<?= escapeForJS($_REQUEST['dashboardId']) ?>',
                        },
                        type: "GET",
                        async: true,
                        dataType: 'json',
                        success: function(data) 
                        {
                            if(data.result === 'Ok')
                            {
                                for(var i = 0; i < data.personalAppsInputs.length; i++) 
                                {
                                    $('#personalAppsInputs').append('<option data-id="' + data.personalAppsInputs[i].id + '" data-valueType="' + data.personalAppsInputs[i].valueType + '" data-startValue="' + data.personalAppsInputs[i].startValue + '" data-domainType="' + data.personalAppsInputs[i].domainType + '" data-minValue="' + data.personalAppsInputs[i].minValue + '" data-maxValue="' + data.personalAppsInputs[i].maxValue + '" data-offValue="' + data.personalAppsInputs[i].offValue + '" data-onValue="' + data.personalAppsInputs[i].onValue + '" data-dataPrecision="' + data.personalAppsInputs[i].dataPrecision + '" value="' + data.personalAppsInputs[i].name + '">' + data.personalAppsInputs[i].name + '</option>');
                                }
                            }
                            else
                            {
                                console.log("Error retrieving personal inputs");
                                console.log(JSON.stringify(data));
                            }
                        },
                        error: function(errorData)
                        {
                            console.log("Error retrieving personal inputs");
                            console.log(JSON.stringify(errorData));
                        }
                    });

                    /*setInterval(function(){
                        var now = parseInt(new Date().getTime() / 1000);
                        var difference = sessionEndTime - now;

                        if(difference === 300)
                        {
                            $('#sessionExpiringPopupTime').html("5 minutes");
                            $('#sessionExpiringPopup').show();
                            $('#sessionExpiringPopup').css("opacity", "1");
                            setTimeout(function(){
                                $('#sessionExpiringPopup').css("opacity", "0");
                                setTimeout(function(){
                                    $('#sessionExpiringPopup').hide();
                                }, 1000);
                            }, 4000);
                        }

                        if(difference === 120)
                        {
                            $('#sessionExpiringPopupTime').html("2 minutes");
                            $('#sessionExpiringPopup').show();
                            $('#sessionExpiringPopup').css("opacity", "1");
                            setTimeout(function(){
                                $('#sessionExpiringPopup').css("opacity", "0");
                                setTimeout(function(){
                                    $('#sessionExpiringPopup').hide();
                                }, 1000);
                            }, 4000);
                        }

                        if((difference > 0)&&(difference <= 60))
                        {
                            $('#sessionExpiringPopup').show();
                            $('#sessionExpiringPopup').css("opacity", "1");
                            $('#sessionExpiringPopupTime').html(difference + " seconds");
                        }

                        if(difference <= 0)
                        {
                            location.href = "logout.php?sessionExpired=true";
                        }
                    }, 1000);*/
                    
                    $('#updateAuthorizedPagesBtn').click(function(){
                        $.ajax({
                            url: "../controllers/updateDashboard.php",
                            data: {
                                action: "updateEmbedList",
                                dashboardId: <?= escapeForJS($_REQUEST['dashboardId']) ?>,
                                newList: $('#authorizedPagesJson').val()
                            },
                            type: "POST",
                            async: true,
                            dataType: 'json',
                            success: function(data)
                            {
                                if(data.detail !== "Ok")
                                {
                                    $('#updateAuthorizedPagesKoMsg').show();
                                    setTimeout(function(){
                                        $('#updateAuthorizedPagesKoMsg').hide();
                                    }, 2000);
                                }
                                else
                                {
                                    $('#updateAuthorizedPagesOkMsg').show();
                                    setTimeout(function(){
                                        $('#updateAuthorizedPagesOkMsg').hide();
                                    }, 1000);
                                }
                            },
                            error: function(errorData)
                            {
                                $('#updateAuthorizedPagesKoMsg').show();
                                setTimeout(function(){
                                    $('#updateAuthorizedPagesKoMsg').hide();
                                }, 2000);
                            }
                        });
                    });
                    
                    fontFamilyArray = defaultFontFamilyArray;
                    
                    $.fn.editable.defaults.mode = 'inline';
                    setAddWidgetConditionsArray(addWidgetConditionsArray);
                    
                    $('#saveTxtMarkup').parent().css("padding-top", "15px");
                    $('#saveTxtMarkup').parent().css("padding-bottom", "15px");
                    $('#saveHtmlMarkup').parent().css("padding-top", "15px");
                    $('#saveHtmlMarkup').parent().css("padding-bottom", "15px");
                    
                    var dashboardId = <?= escapeForJS($_REQUEST['dashboardId']) ?>;
                    var dashboardIdEncoded = window.btoa(dashboardId);
                    $.ajax({
                        url: "../controllers/getDashboardTheme.php",
                        data: {
                            dashboardId: dashboardId
                        },
                        type: "GET",
                        async: true,
                        success: function (data)
                        {
                            if (checkJson(data)) {
                                var dataArr = JSON.parse(data);
                                if (dataArr['result'] !== "Ok" || dataArr['details']['theme'] === null) {
                                    console.log("Error getting Dashboard Theme. Loading default Theme.");
                                    console.log(data);
                                    $("#dashboardViewLink").attr("href", "../view/index.php?iddasboard=" + dashboardIdEncoded);
                                } else {
                                    $("#dashboardViewLink").attr("href", "../view/" + dataArr['details']['theme'] + ".php?iddasboard=" + dashboardIdEncoded);
                                }
                            } else {
                                console.log("Error getting Dashboard Theme. Loading default Theme.");
                                console.log(data);
                                $("#dashboardViewLink").attr("href", "../view/index.php?iddasboard=" + dashboardIdEncoded);
                            }
                        },
                        error: function (errorData)
                        {
                            console.log("Error getting Dashboard Theme. Loading default Theme.");
                            console.log(errorData);
                            $("#dashboardViewLink").attr("href", "../view/index.php?iddasboard=" + dashboardIdEncoded);
                        }
                    });
                    // $("#dashboardViewLink").attr("href", "../view/index.php?iddasboard=" + dashboardIdEncoded);
                    
                    var iconH = $("div.mainMenuItemContainer").height();
                    $("div.mainMenuIconContainer").css("height", iconH + "px");
                    
                    $('#inputFontFamilyWidget').attr('autocomplete', 'on');
                            
                    $('#inputFontFamilyWidget').autocomplete({
                        source: fontFamilyArray,
                        autoFocus: true,
                        minLength: 0,
                        create: function( event, ui ) {
                            $(this).val("Auto");
                        }
                    }).data("ui-autocomplete")._renderItem = function(ul, item){
                        return $( "<li>" )
                        .attr("data-value", item.value)
                        .append('<span style="font-family: ' + item.label + '">' + item.label + '</span>')
                        .appendTo(ul);
                    };
                    
                    $('#inputFontFamilyWidget').autocomplete().data("ui-autocomplete")._resizeMenu = function(){
                        var ul = this.menu.element;
                        ul.outerWidth(this.element.outerWidth() + 30);
                        ul.css("max-height", "300px");
                        ul.css("overflow-x", "auto");
                        ul.css("overflow-y", "auto");
                        ul.find('li').off('hover');
                        ul.find('li').hover(function(){
                            $(this).css("cursor", "pointer");
                            $(this).css("background-color", "#b3e0ff");
                        }, function(){
                            $(this).css("cursor", "default");
                            $(this).css("background-color", "transparent");
                        });
                    };
                    
                    $('#inputFontFamilyWidgetM').attr('autocomplete', 'on');
                            
                    $('#inputFontFamilyWidgetM').autocomplete({
                        source: fontFamilyArray,
                        autoFocus: false,
                        minLength: 1,
                        delay: 500,
                        create: function( event, ui ) {
                            $(this).val("Auto");
                        }
                    }).data("ui-autocomplete")._renderItem = function(ul, item){
                        return $( "<li>" )
                        .attr("data-value", item.value)
                        .append('<span style="font-family: ' + item.label + '">' + item.label + '</span>')
                        .appendTo(ul);
                    };
                    
                    $('#inputFontFamilyWidgetM').autocomplete().data("ui-autocomplete")._resizeMenu = function(){
                        var ul = this.menu.element;
                        ul.outerWidth(this.element.outerWidth() + 30);
                        ul.css("max-height", "300px");
                        ul.css("overflow-x", "auto");
                        ul.css("overflow-y", "auto");
                        ul.find('li').off('hover');
                        ul.find('li').hover(function(){
                            $(this).css("cursor", "pointer");
                            $(this).css("background-color", "#b3e0ff");
                        }, function(){
                            $(this).css("cursor", "default");
                            $(this).css("background-color", "transparent");
                        });
                    };
                    
                    $('div[for=embedShowHeader]').hide();
                    $('div[for=embedAutofit]').hide();
                    $('#embedShowHeader').hide();
                    $('#embedAutofit').hide();
                    $('#embedAutofit').val('no');
                    
                    $('#embedCodeBtn').click(function(){
                        embedViewUrl = '<?php echo $appUrl; ?>' + "/view/index.php?iddasboard=" + dashboardIdEncoded + "&embedPolicy=" + $('#embedPolicy').val() + "&embedPreview=true";
                        
                        sampleIframe = '<iframe width="' + $('#embedIframeW').val() + '" height="' + $('#embedIframeH').val() + '" src="' + embedViewUrl + '"></iframe>';
                        $('#embedDashboardCode').val(sampleIframe.replace("&embedPreview=true", ""));
                        $('#embedDashboardModal').modal('show');
                        setTimeout(function(){
                            $('#embedDashboardModal div.well').css('height', $('#embedDashboardModal div.modal-body').height());
                            $('#embedPreviewIframe').attr('width', $('#embedIframeW').val());
                            $('#embedPreviewIframe').attr('height', $('#embedIframeH').val());
                            $('#embedPreviewIframe').attr('src', embedViewUrl);
                            $('#embedPreviewContainer').css('height', $('#embedDashboardModal div.modal-body').height() - 100);
                        }, 250);
                    });
                    
                    $(window).resize(function(){
                        $('#embedDashboardModal div.well').css('height', $('#embedDashboardModal div.modal-body').height());
                        $('#embedPreviewContainer').css('height', $('#embedDashboardModal div.modal-body').height() - 100);
                        
                        //Ricalcolo della posizione della finestra della chat
                        $("#chatContainer").css("top", $('#dashboardViewHeaderContainer').height());
                        $("#chatContainer").css("left", $(window).width() - $('#chatContainer').width());
                        //$("#BtnContainerChat").css("top", $('#dashboardViewHeaderContainer').height());
                        //$("#BtnContainerChat").css("left", $(window).width() - $('#BtnContainerChat').width());
                    });
                    
                    $('#embedPolicy').change(function(){
                        if($(this).val() === 'auto') 
                        {
                            $('div[for=embedShowHeader]').hide();
                            $('div[for=embedAutofit]').hide();
                            $('#embedShowHeader').hide();
                            $('#embedAutofit').hide();
                            embedViewUrl = '<?php echo $appUrl; ?>' + "/view/index.php?iddasboard=" + dashboardIdEncoded + "&embedPolicy=" + $('#embedPolicy').val() +"&embedPreview=true";
                            sampleIframe = '<iframe width="' + $('#embedIframeW').val() + '" height="' + $('#embedIframeH').val() + '" src="' + embedViewUrl + '"></iframe>';
                            $('#embedDashboardCode').val(sampleIframe.replace("&embedPreview=true", ""));
                        }
                        else
                        {
                            $('div[for=embedShowHeader]').show();
                            $('div[for=embedAutofit]').show();
                            $('#embedShowHeader').show();
                            $('#embedAutofit').show();
                            $('#embedAutofit').val('no');
                            embedViewUrl = '<?php echo $appUrl; ?>' + "/view/index.php?iddasboard=" + dashboardIdEncoded + "&embedPolicy=" + $('#embedPolicy').val() + "&showHeader=" + $('#embedShowHeader').val() + "&autofit=" + $('#embedAutofit').val() + "&embedPreview=true";
                            sampleIframe = '<iframe width="' + $('#embedIframeW').val() + '" height="' + $('#embedIframeH').val() + '" src="' + embedViewUrl + '"></iframe>';
                            $('#embedDashboardCode').val(sampleIframe.replace("&embedPreview=true", ""));
                        }
                        $('#embedPreviewIframe').attr('width', $('#embedIframeW').val());
                        $('#embedPreviewIframe').attr('height', $('#embedIframeH').val());
                        $('#embedPreviewIframe').attr('src', embedViewUrl);
                    });
                    
                    $('#embedShowHeader').change(function(){
                        embedViewUrl = '<?php echo $appUrl; ?>' + "/view/index.php?iddasboard=" + dashboardIdEncoded + "&embedPolicy=" + $('#embedPolicy').val() + "&showHeader=" + $('#embedShowHeader').val() + "&autofit=" + $('#embedAutofit').val() + "&embedPreview=true";
                        sampleIframe = '<iframe width="' + $('#embedIframeW').val() + '" height="' + $('#embedIframeH').val() + '" src="' + embedViewUrl + '"></iframe>';
                        $('#embedDashboardCode').val(sampleIframe.replace("&embedPreview=true", ""));
                        
                        $('#embedPreviewIframe').attr('width', $('#embedIframeW').val());
                        $('#embedPreviewIframe').attr('height', $('#embedIframeH').val());
                        $('#embedPreviewIframe').attr('src', embedViewUrl);
                    });
                    
                    $('#embedAutofit').change(function(){
                        embedViewUrl = '<?php echo $appUrl; ?>' + "/view/index.php?iddasboard=" + dashboardIdEncoded + "&embedPolicy=" + $('#embedPolicy').val() + "&showHeader=" + $('#embedShowHeader').val() + "&autofit=" + $('#embedAutofit').val() + "&embedPreview=true";
                        sampleIframe = '<iframe width="' + $('#embedIframeW').val() + '" height="' + $('#embedIframeH').val() + '" src="' + embedViewUrl + '"></iframe>';
                        $('#embedDashboardCode').val(sampleIframe.replace("&embedPreview=true", ""));
                        
                        $('#embedPreviewIframe').attr('width', $('#embedIframeW').val());
                        $('#embedPreviewIframe').attr('height', $('#embedIframeH').val());
                        $('#embedPreviewIframe').attr('src', embedViewUrl);
                    });
                    
                    $('#embedIframeW').on('input', function(){
                        if($('#embedPolicy').val() === 'auto') 
                        {
                            embedViewUrl = '<?php echo $appUrl; ?>' + "/view/index.php?iddasboard=" + dashboardIdEncoded + "&embedPolicy=" + $('#embedPolicy').val() + "&embedPreview=true";
                            sampleIframe = '<iframe width="' + $('#embedIframeW').val() + '" height="' + $('#embedIframeH').val() + '" src="' + embedViewUrl + '"></iframe>';
                            $('#embedDashboardCode').val(sampleIframe.replace("&embedPreview=true", ""));
                        }
                        else
                        {
                            embedViewUrl = '<?php echo $appUrl; ?>' + "/view/index.php?iddasboard=" + dashboardIdEncoded + "&embedPolicy=" + $('#embedPolicy').val() + "&showHeader=" + $('#embedShowHeader').val() + "&autofit=" + $('#embedAutofit').val() + "&embedPreview=true";
                            sampleIframe = '<iframe width="' + $('#embedIframeW').val() + '" height="' + $('#embedIframeH').val() + '" src="' + embedViewUrl + '"></iframe>';
                            $('#embedDashboardCode').val(sampleIframe.replace("&embedPreview=true", ""));
                        }
                        
                        $('#embedPreviewIframe').attr('width', $('#embedIframeW').val());
                        $('#embedPreviewIframe').attr('height', $('#embedIframeH').val());
                        $('#embedPreviewIframe').attr('src', embedViewUrl);
                    });
                    
                    $('#embedIframeH').on('input', function(){
                        if($('#embedPolicy').val() === 'auto') 
                        {
                            embedViewUrl = '<?php echo $appUrl; ?>' + "/view/index.php?iddasboard=" + dashboardIdEncoded + "&embedPolicy=" + $('#embedPolicy').val() + "&embedPreview=true";
                            sampleIframe = '<iframe width="' + $('#embedIframeW').val() + '" height="' + $('#embedIframeH').val() + '" src="' + embedViewUrl + '"></iframe>';
                            $('#embedDashboardCode').val(sampleIframe.replace("&embedPreview=true", ""));
                        }
                        else
                        {
                            embedViewUrl = '<?php echo $appUrl; ?>' + "/view/index.php?iddasboard=" + dashboardIdEncoded + "&embedPolicy=" + $('#embedPolicy').val() + "&showHeader=" + $('#embedShowHeader').val() + "&autofit=" + $('#embedAutofit').val() + "&embedPreview=true";
                            sampleIframe = '<iframe width="' + $('#embedIframeW').val() + '" height="' + $('#embedIframeH').val() + '" src="' + embedViewUrl + '"></iframe>';
                            $('#embedDashboardCode').val(sampleIframe.replace("&embedPreview=true", ""));
                            
                        }
                        
                        $('#embedPreviewIframe').attr('width', $('#embedIframeW').val());
                        $('#embedPreviewIframe').attr('height', $('#embedIframeH').val());
                        $('#embedPreviewIframe').attr('src', embedViewUrl);
                    });
                    
                    $('#saveTxtMarkup').click(function(){
                       var file = new Blob([$('#embedDashboardCode').val()], {type: 'text/plain'});
                       $(this).attr('href', URL.createObjectURL(file));
                       $(this).attr('download', 'embedCode.txt');
                    });
                    
                    $('#saveHtmlMarkup').click(function(){
                       var markup = '<!DOCTYPE html>' +
                                    '<html>' + 
                                        '<head>' +
                                            '<title><?php echo _("Choose page title"); ?></title>' +
                                            '<meta charset="UTF-8">' +
                                            '<meta name="viewport" content="width=device-width, initial-scale=1.0">' +
                                        '</head>' +
                                        '<body>' +
                                            $('#embedDashboardCode').val() +
                                        '</body>' +
                                    '</html>'; 
                        
                       var file = new Blob([markup], {type: 'text/html'});
                       $(this).attr('href', URL.createObjectURL(file));
                       $(this).attr('download', 'embedCode.html');
                    });
                    
                    $('#embedDashboardCloseBtn').click(function(){
                        $('#embedDashboardModal').modal('hide');
                        setTimeout(function(){
                            $('div[for=embedShowHeader]').hide();
                            $('div[for=embedAutofit]').hide();
                            $('div[for=embedShowHeader]').parent().hide();
                            $('#embedShowHeader').hide();
                            $('#embedAutofit').hide();
                            $('#embedShowHeader').parent().parent().hide();
                            $('#embedPolicy').val('auto');
                        }, 250);
                    });
                    
                    $("#link_add_widget").click(function()
                    {
                       $("#modal-add-widget").modal("show");
                       
                       $('#button_add_metric_widget').css("color", "red");
                       addWidgetConditionsArray["title"] = false;
                       $("label[for=inputTitleWidget]").css("color", "red");
                       addWidgetConditionsArrayLocal["thrs"] = true;
                       
                       //Controllo presenza titolo
                       $("#inputTitleWidget").off();
                       $("#inputTitleWidget").on('input', function(){
                           var pattern = /^$/; 
                           
                           if($("#select-widget").val() !== 'widgetProtezioneCivile' && $("#select-widget").val() !== 'widgetProtezioneCivileFirenze')
                           {
                                if(pattern.test($(this).val()))
                                {
                                    addWidgetConditionsArray["title"] = false;
                                    $("label[for=inputTitleWidget]").css("color", "red");
                                }
                                else
                                {
                                   var newTitle = $(this).val();

                                   if($("div.titleDiv").length > 0)
                                   {
                                      $("div.titleDiv").each(function(i)
                                      {
                                         if($(this).html() === newTitle)
                                         {
                                            addWidgetConditionsArray["title"] = false;
                                            $("label[for=inputTitleWidget]").css("color", "red");
                                            return false;
                                         }
                                         else
                                         {
                                            addWidgetConditionsArray["title"] = true;
                                            $("label[for=inputTitleWidget]").css("color", "black");
                                         }
                                      });
                                   }
                                   else
                                   {
                                      addWidgetConditionsArray["title"] = true;
                                      $("label[for=inputTitleWidget]").css("color", "black");
                                   }
                                }
                           }
                           else
                           {
                               addWidgetConditionsArray["title"] = true;
                               $("label[for=inputTitleWidget]").css("color", "black");
                           }
                           
                           checkAddWidgetConditions();
                       });
                    });
                    
                    $("#link_start_wizard").click(function()
                    {
                       $("#addWidgetWizard").modal("show");
                    });

                    $("#link_start_wizardOS").click(function()
                    {
                       $("#addWidgetWizardOS").modal("show");
                    });
                    
                    $("#link_screenshot").click(function()
                    {
                        $('#dashboardIdUnderEdit').val()
                        $("#scrDashboardModal").modal("show");
                    });
                    $("#link_select_theme").click(function()
                    {
                       $("#modal-select-theme").modal("show");
                       getThemeList();
                    });
                    
                    $('#scrDashboardForm').on("submit", function(event)
                    {
                        event.preventDefault();

                        $('#scrDashboardModalContent').hide();
                        $('#scrDashboardCancelBtn').hide();
                        $('#scrDashboardConfirmBtn').hide();
                        $('#scrDashboardModalMsg').html('<? _("Loading new screenshot, please wait")?>');
                        $('#scrDashboardModalMsg').show();

                        $.ajax({
                            url: $(this).attr("action"),
                            type: $(this).attr("method"),
                            dataType: "JSON",
                            data: new FormData(this),
                            processData: false,
                            contentType: false,
                            success: function (data, status)
                            {
                                if(data.result === 'Ok')
                                {
                                    $('#scrDashboardModalMsg').html('<? _("New screenshot loaded correctly")?>');

                                    setTimeout(function(){
                                        $("#scrDashboardModal").modal("hide");
                                        setTimeout(function(){
                                            $('#scrDashboardModalMsg').html("");
                                            $('#scrDashboardModalMsg').hide();
                                            $('#scrDashboardModalContent').show();
                                            $('#scrDashboardCancelBtn').show();
                                            $('#scrDashboardConfirmBtn').show();
                                            $('#scrDashboardForm')[0].reset();
                                        }, 850);
                                    }, 1250);
                                }
                                else
                                {
                                    $('#scrDashboardModalMsg').html('<? _("Error loading new screenshot")?>');

                                    /*setTimeout(function(){
                                        $('#scrDashboardModalMsg').html("");
                                        $('#scrDashboardModalMsg').hide();
                                        $('#scrDashboardModalContent').show();
                                        $('#scrDashboardCancelBtn').show();
                                        $('#scrDashboardConfirmBtn').show();
                                        $('#scrDashboardForm')[0].reset();
                                    }, 1250);*/
                                }
                            },
                            error: function (xhr, desc, err)
                            {
                                $('#scrDashboardModalMsg').html('<? _("Error loading new screenshot")?>');

                                /*setTimeout(function(){
                                    $('#scrDashboardModalMsg').html("");
                                    $('#scrDashboardModalMsg').hide();
                                    $('#scrDashboardModalContent').show();
                                    $('#scrDashboardCancelBtn').show();
                                    $('#scrDashboardConfirmBtn').show();
                                    $('#scrDashboardForm')[0].reset();
                                }, 1250);*/
                            }
                        });       
                    });
                    
                    $.ajax({
                        url: "<?=$serviceMapUrlPrefix?>api/v1/?selection=43.81224123241114;11.25284173812866&categories=First_aid&maxResults=100&maxDists=200&format=json&lang=it",
                        type: "GET",
                        async: true,
                        dataType: 'json',
                        success: function (data) 
                        {
                           hospitalList = data;
                        },
                        error: function (data)
                        {
                           console.log("Error retrieving hospital list");
                           console.log(JSON.stringify(data));
                        }
                     });
                    
                    $('#inputWidthDashboard').on('slide',function(e)
                    {
                        var cols = parseInt(e.value);
                        var px = parseInt(cols*78 + 10);
                        var percent = parseInt(px/screen.width*100);
                        //$('#percentWidth').css("background-color", "white");
                        //$('#percentWidth').val(percent + " %");
                    });
                    
                    $.ajax({
                        url: "https://servicemap.km4city.org/WebAppGrafo/sparql?query=select+distinct+%3Fn+%3Fs+%7B%0D%0A%3Fs+a+km4c%3AMunicipality.%0D%0A%3Fs+foaf%3Aname+%3Fn%0D%0A%7D+order+by+%3Fn&format=json",
                        type: "GET",
                        async: true,
                        dataType: 'json',
                        success: function (data) 
                        {
                            for(var i = 0; i < data.results.bindings.length; i++)
                            {
                                comuniLammaArray.push(data.results.bindings[i].n.value);
                            }
                        },
                        error: function (data) 
                        {
                            console.log("Errore nella chiamata Sparql per reperimento comuni Lamma");
                        }
                    });

                    $('#dashboardLogoInput').change(function ()
                    {
                        $('#dashboardLogoLinkInput').removeAttr('disabled');
                    });
                    
                    $('#link_modifyDash').click(function ()
                    {
                        if($('#headerLogoImg').css("display") !== 'none')
                        {
                            $('#dashboardLogoLinkInput').removeAttr('disabled');
                        }
                    });
                    
                    //Reperimento elenco degli schedulers
                    $.ajax({
                        url: "get_data.php",
                        data: {action: "getSchedulers"},
                        type: "GET",
                        async: true,
                        dataType: 'json',
                        success: function (data) {
                            for(var i = 0; i < data.length; i++) 
                            {
                                elencoScheduler[i] = data[i];
                                $('#inputSchedulerWidget').append('<option>' + elencoScheduler[i].name + '</option>');
                                $('#inputSchedulerWidgetM').append('<option>' + elencoScheduler[i].name + '</option>');
                            }
                        }
                    });
                    
                    $('#modal-add-widget').on('shown.bs.modal', function () {
                        updateSelectedMetric();
                    });

                    //Listener cambio categoria widget (attuatore o data viewer) in aggiunta widget
                   $('#widgetCategory').change(function(){
                        $('#specificWidgetPropertiesDiv .row').remove();
                        $('#inputTitleWidget').val('');
                        $('#metricsCategory').val(-1);
                        $('#actuatorTarget').val(-1);
                        $('#personalAppsInputs').val(-1);
                        $('#metricsCategory').parents('div.row').hide();
                        $('#selectMetricRow').hide();
                        $('#metricDescRow').hide();
                        $('#widgetTypeRow').hide();
                        $('#widgetTypeRow').hide();
                        $('#selectedMetricRow').hide();
                        $('#widgetLinkRow').hide();
                        $('#selectMetricRowNR').hide();
                        $('#metricDescRowNR').hide();
                        $('#widgetTypeRowNR').hide();
                        $('#widgetTypeRowNR').hide();
                        $('#selectedMetricRowNR').hide();
                        $('#widgetLinkRowNR').hide();
                        $('#personalAppsInputs').parents('div.row').hide();
                        $('#entityTypeRow').hide();        
                        $('#entityDescRow').hide();
                        $('#entityAttrNameRow').hide();
                        $('#entityAttrDescRow').hide();
                        $('#entityAttrTypeRow').hide();
                        $('#entityAttrStartValueRow').hide();
                        $('#widgetActuatorTypeRow').hide();
                        $('#actuatorTarget').parents('div.row').hide();
                        $('#personalAppsInputsValueType').parents('div.row').hide();
                        $('#personalAppsInputsStartValue').parents('div.row').hide();
                        $('#personalAppsInputsDomainType').parents('div.row').hide();
                        $('#personalAppsInputsMinValue').parents('div.row').hide();
                        $('#personalAppsInputsMaxValue').parents('div.row').hide();
                        $('#personalAppsInputsOffValue').parents('div.row').hide();
                        $('#personalAppsInputsOnValue').parents('div.row').hide();
                        $('#widgetActuatorTypePersonalApps').parents('div.row').hide();
                        
                        if($(this).val() === 'actuator')
                        {       
                            $('#actuatorTarget').parents('div.row').show();
                        }
                        else
                        {
                            $('label[for=inputFontSize]').html('<? _("Content font size")?>');
                            $('#metricsCategory').parents('div.row').show();
                        }
                    });
                    
                    $('#actuatorTarget').change(function(){
                        $('#entityTypeRow').hide();        
                        $('#entityDescRow').hide();
                        $('#entityAttrNameRow').hide();
                        $('#entityAttrDescRow').hide();
                        $('#entityAttrTypeRow').hide();
                        $('#entityAttrStartValueRow').hide();
                        $('#widgetActuatorTypeRow').hide();
                        $('#personalAppsInputs').parents('div.row').hide();
                        $('#personalAppsInputsValueType').parents('div.row').hide();
                        $('#personalAppsInputsStartValue').parents('div.row').hide();
                        $('#personalAppsInputsDomainType').parents('div.row').hide();
                        $('#personalAppsInputsMinValue').parents('div.row').hide();
                        $('#personalAppsInputsMaxValue').parents('div.row').hide();
                        $('#personalAppsInputsOffValue').parents('div.row').hide();
                        $('#personalAppsInputsOnValue').parents('div.row').hide();
                        $('#widgetActuatorTypePersonalApps').parents('div.row').hide();
                        $('#personalAppsInputs').val(-1);
                        $('#inputTitleWidget').val('');
                        $('#specificWidgetPropertiesDiv .row').remove();
                        
                        switch($(this).val())
                        {
                            case "app":
                                $('#personalAppsInputs').parents('div.row').show();
                                break;
                                
                            case "broker":
                                $('#entityTypeRow').show();        
                                $('#entityDescRow').show();
                                $('#entityAttrNameRow').show();
                                $('#entityAttrDescRow').show();
                                $('#entityAttrTypeRow').show();
                                $('#entityAttrStartValueRow').show();
                                $('#widgetActuatorTypeRow').show();
                                break;
                        }
                    });
                    
                    $('#personalAppsInputs').change(function(){
                        $('#personalAppsInputsValueType').parents('div.row').show();
                        $('#personalAppsInputsStartValue').parents('div.row').show();
                        $('#personalAppsInputsDomainType').parents('div.row').show();
                        $('#widgetActuatorTypePersonalApps').parents('div.row').show();
                        $('#inputTitleWidget').val($('#personalAppsInputs').val());
                        addWidgetConditionsArray["title"] = true;
                        $('#titleLabel').css('color', 'black');
                        checkAddWidgetConditions();
                        $('#specificWidgetPropertiesDiv .row').remove();
                        
                        $.ajax({
                            url: "iframeProxy.php",
                            data: {
                                action: "getActuatorWidgetTypesPersonalApps", 
                                valueType: $('#personalAppsInputs option:selected').attr('data-valueType'),
                                domainType: $('#personalAppsInputs option:selected').attr('data-domainType'),
                            },
                            type: "GET",
                            async: true,
                            dataType: 'json',
                            success: function (data) 
                            {
                                $('#widgetActuatorTypePersonalApps').empty();
                                
                                for(var key in data.list)
                                {
                                    $('#widgetActuatorTypePersonalApps').append('<option value="' + data.list[key].id_type_widget + '" data-min_row="' + data.list[key].min_row + '" + data-max_row="' + data.list[key].max_row + '" data-min_col="' + data.list[key].min_col + '" data-max_col="' + data.list[key].max_col + '">' + data.list[key].id_type_widget + '</option>')
                                }
                                
                                $('#widgetActuatorTypePersonalApps').val(-1);
                            },
                            error: function(data)
                            {
                                console.log("Ko");
                                console.log(data);
                            }
                        });    
                        
                        $('#personalAppsInputsValueType').val($(this).find('option:selected').attr('data-valueType'));
                        $('#personalAppsInputsStartValue').val($(this).find('option:selected').attr('data-startValue'));
                        $('#personalAppsInputsStartValueHidden').val($(this).find('option:selected').attr('data-startValue'));
                        
                        switch($(this).find('option:selected').attr('data-domainType'))
                        {
                            case "contRange":
                                $('#personalAppsInputsDomainType').val("Continuous range");
                                break;
                                
                            case "onOff":
                                $('#personalAppsInputsDomainType').val("Bi-state commutation");
                                break;
                                
                            case "impulse":
                                $('#personalAppsInputsDomainType').val("Impulse");
                                break;    
                                
                            default:
                                $('#personalAppsInputsDomainType').val($(this).find('option:selected').attr('data-domainType'));
                                break;
                        }
                        
                        $('#personalAppsInputsMinValue').parents('div.row').hide();
                        $('#personalAppsInputsMaxValue').parents('div.row').hide();
                        $('#personalAppsInputsOffValue').parents('div.row').hide();
                        $('#personalAppsInputsOnValue').parents('div.row').hide();
                        
                        if($(this).find('option:selected').attr('data-minValue') !== 'null')
                        {
                            $('#personalAppsInputsMinValue').parents('div.row').show();
                            $('#personalAppsInputsMinValue').val($(this).find('option:selected').attr('data-minValue'));
                        }
                        
                        if($(this).find('option:selected').attr('data-maxValue') !== 'null')
                        {
                            $('#personalAppsInputsMaxValue').parents('div.row').show();
                            $('#personalAppsInputsMaxValue').val($(this).find('option:selected').attr('data-maxValue'));
                        }
                        
                        if($(this).find('option:selected').attr('data-offValue') !== 'null')
                        {
                            $('#personalAppsInputsOffValue').parents('div.row').show();
                            $('#personalAppsInputsOffValue').val($(this).find('option:selected').attr('data-offValue'));
                        }
                        
                        if($(this).find('option:selected').attr('data-onValue') !== 'null')
                        {
                            $('#personalAppsInputsOnValue').parents('div.row').show();
                            $('#personalAppsInputsOnValue').val($(this).find('option:selected').attr('data-onValue'));
                        }
                    });
                    
                    //Listener aggiunta widget per cambio widget selezionato per widgets actuator su personal apps
                    $('#widgetActuatorTypePersonalApps').change(function(){
                        $("#inputUdmPosition").val(-1);
                        //Titolo obbligatorio per tutti
                        $('#inputTitleWidget').prop('required', true);
                        
                        var minRow, maxRow, minCol, maxCol = null;
                        minRow = parseInt($('#widgetActuatorTypePersonalApps option:selected').attr("data-min_row"));
                        maxRow = parseInt($('#widgetActuatorTypePersonalApps option:selected').attr("data-max_row"));
                        minCol = parseInt($('#widgetActuatorTypePersonalApps option:selected').attr("data-min_col"));
                        maxCol = parseInt($('#widgetActuatorTypePersonalApps option:selected').attr("data-max_col"));

                        $('#inputSizeRowsWidget').empty();

                        for(var i = minRow; i <= maxRow; i++)
                        {
                            $('#inputSizeRowsWidget').append('<option value="' + i + '">' + i + '</option>');
                        }

                        $('#inputSizeColumnsWidget').empty();

                        for(var i = minCol; i <= maxCol; i++)
                        {
                            $('#inputSizeColumnsWidget').append('<option value="' + i + '">' + i + '</option>');
                        }
                        
                        switch($('#widgetActuatorTypePersonalApps').val())
                        {
                            case "widgetNumericKeyboard":
                                $('#inputUrlWidget').val('none');
                                $('#inputFontSize').val("24");
                                $('#inputFontSize').attr("disabled", true);
                                $('#inputFontSize').prop("required", false);
                                $('#inputFontColor').val("rgba(255,255,255,1)");
                                $('#widgetFontColor').css("background-color", "#ffffff");
                                $('#inputFontColor').attr("disabled", true);
                                $('#inputFontColor').prop("required", false);
                                $("#titleLabel").html("Title");
                                $("#bckColorLabel").html("Background color");
                                $('#link_help_modal-add-widget').css("display", "");
                                $('#inputFrameColorWidget').attr('disabled', false);
                                $('#inputFrameColorWidget').val('#eeeeee');
                                $('#inputFrameColorWidget').prop('required', false);
                                $('#select-IntTemp-Widget').attr('disabled', true);
                                $('#select-IntTemp-Widget').prop('required', false);
                                $('#inputFreqWidget').attr('disabled', false);
                                $('#inputFreqWidget').val(60);
                                $('#inputFreqWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').attr('disabled', false);
                                $('#inputHeaderFontColorWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').val("#000000");
                                $('#widgetHeaderFontColor').css("background-color", "#000000");
                                $('#inputUdmWidget').prop("required", false);
                                $('#inputUdmWidget').attr("disabled", true);
                                $('#inputUdmPosition').prop("required", false);
                                $('#inputUdmPosition').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').prop("required", false);
                                $('#addWidgetFirstAidHospital').val(-1);
                                $('#inputFirstAidRow').hide();
                                $('#inputSizeRowsWidget').val(8 * (78 / newScaledGridsterCellW));     // MOD GRID
                                $('#inputSizeColumnsWidget').val(4 * (39 / newScaledGridsterCellH));    // MOD GRID

                                //Parametri specifici del widget
                                $('#specificWidgetPropertiesDiv .row').remove();
                                $('#inputComuneWidget').attr('disabled', true);

                                //Rimozione eventuali campi del subform general per widget process
                                removeWidgetProcessGeneralFields("addWidget");
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addKeyboardDisplayColor" class="col-md-2 control-label"><?php echo _("Display color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addKeyboardDisplayColor"><input type="text" name="addKeyboardDisplayColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addKeyboardDisplayFontColor" class="col-md-2 control-label"><?php echo _("Display font color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addKeyboardDisplayFontColor"><input type="text" name="addKeyboardDisplayFontColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(0, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);  
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addKeyboardBtnColor" class="col-md-2 control-label"><?php echo _("Buttons color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addKeyboardBtnColor"><input type="text" name="addKeyboardBtnColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(225, 225, 225, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addKeyboardBtnFontColor" class="col-md-2 control-label"><?php echo _("Buttons font color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addKeyboardBtnFontColor"><input type="text" name="addKeyboardBtnFontColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(0, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);  
                                break;
                                
                             case "widgetGeolocator":
                                $('#inputUrlWidget').val('none');
                                $('#inputFontSize').val("24");
                                $('#inputFontSize').attr("disabled", true);
                                $('#inputFontSize').prop("required", false);
                                $('#inputFontColor').val("rgba(255,255,255,1)");
                                $('#widgetFontColor').css("background-color", "#ffffff");
                                $('#inputFontColor').attr("disabled", true);
                                $('#inputFontColor').prop("required", false);
                                $("#titleLabel").html("Title");
                                $("#bckColorLabel").html("Background color");
                                $('#link_help_modal-add-widget').css("display", "");
                                $('#inputFrameColorWidget').attr('disabled', false);
                                $('#inputFrameColorWidget').val('#eeeeee');
                                $('#inputFrameColorWidget').prop('required', false);
                                $('#select-IntTemp-Widget').attr('disabled', true);
                                $('#select-IntTemp-Widget').prop('required', false);
                                $('#inputFreqWidget').attr('disabled', false);
                                $('#inputFreqWidget').val(60);
                                $('#inputFreqWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').attr('disabled', false);
                                $('#inputHeaderFontColorWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').val("#000000");
                                $('#widgetHeaderFontColor').css("background-color", "#000000");
                                $('#inputUdmWidget').prop("required", false);
                                $('#inputUdmWidget').attr("disabled", true);
                                $('#inputUdmPosition').prop("required", false);
                                $('#inputUdmPosition').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').prop("required", false);
                                $('#addWidgetFirstAidHospital').val(-1);
                                $('#inputFirstAidRow').hide();
                                 $('#inputSizeRowsWidget').val(8 * (78 / newScaledGridsterCellW));     // MOD GRID
                                 $('#inputSizeColumnsWidget').val(4 * (39 / newScaledGridsterCellH));    // MOD GRID

                                //Parametri specifici del widget
                                $('#specificWidgetPropertiesDiv .row').remove();
                                $('#inputComuneWidget').attr('disabled', true);

                                //Rimozione eventuali campi del subform general per widget process
                                removeWidgetProcessGeneralFields("addWidget");
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                newLabel = $('<label for="addSwitchButtonViewMode" class="col-md-2 control-label"><?php echo _("View mode"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                var newControl = $('<select id="addSwitchButtonViewMode" name="addSwitchButtonViewMode" class="form-control"></select>');
                                newControl.append('<option value="emptyButton"><?php echo _("Empty button"); ?></option>');
                                newControl.append('<option value="iconOnly"><?php echo _("Icon only"); ?></option>');
                                newControl.append('<option value="textOnly"><?php echo _("Text only"); ?></option>');
                                newControl.append('<option value="displayOnly"><?php echo _("Value display only"); ?></option>');
                                newControl.append('<option value="iconAndText"><?php echo _("Icon and text"); ?></option>');
                                newControl.append('<option value="iconAndDisplay"><?php echo _("Icon and value display"); ?></option>');
                                newControl.append('<option value="displayAndText"><?php echo _("Display and text"); ?></option>');
                                newControl.append('<option value="all"><?php echo _("Icon, text and value display"); ?></option>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addSwitchButtonRadius" class="col-md-2 control-label"><?php echo _("Button radius (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonRadius" name="addSwitchButtonRadius" data-slider-id="addSwitchButtonRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonRadius').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 0    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addGeolocatorMode" class="col-md-2 control-label"><?php echo _("Geolocation mode"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<select id="addGeolocatorMode" name="addGeolocatorMode" class="form-control"></select>');
                                newControl.append('<option value="press"><?php echo _("On press only"); ?></option>');
                                newControl.append('<option value="period"><?php echo _("Periodically"); ?></option>');
                                newControl.append('<option value="both"><?php echo _("Periodically and on press"); ?></option>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonColor" class="col-md-2 control-label"><?php echo _("Button color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonColor"><input type="text" name="addSwitchButtonColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonClickColor" class="col-md-2 control-label"><?php echo _("Button color on click"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonClickColor"><input type="text" name="addSwitchButtonClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(102, 255, 102, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonSymbolColor" class="col-md-2 control-label"><?php echo _("Symbol color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonSymbolColor"><input type="text" name="addSwitchButtonSymbolColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(37, 37, 37, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonSymbolClickColor" class="col-md-2 control-label"><?php echo _("Symbol color on click"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonSymbolClickColor"><input type="text" name="addSwitchButtonSymbolClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonTextColor" class="col-md-2 control-label"><?php echo _("Text color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonTextColor"><input type="text" name="addSwitchButtonTextColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(37, 37, 37, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonTextClickColor" class="col-md-2 control-label"><?php echo _("Text color on click"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonTextClickColor"><input type="text" name="addSwitchButtonTextClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonTextFontSize" class="col-md-2 control-label"><?php echo _("Text font size"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" id="addSwitchButtonTextFontSize" name="addSwitchButtonTextFontSize" class="form-control" value="24"></input>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonDisplayFontSize" class="col-md-2 control-label"><?php echo _("Display font size"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" id="addSwitchButtonDisplayFontSize" name="addSwitchButtonDisplayFontSize" class="form-control" value="24"></input>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonDisplayFontColor" class="col-md-2 control-label"><?php echo _("Display text color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonDisplayFontColor"><input type="text" name="addSwitchButtonDisplayFontColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonDisplayFontClickColor" class="col-md-2 control-label"><?php echo _("On display text color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonDisplayFontClickColor"><input type="text" name="addSwitchButtonDisplayFontClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonDisplayColor" class="col-md-2 control-label"><?php echo _("Display background color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonDisplayColor"><input type="text" name="addSwitchButtonDisplayColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(0, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addSwitchButtonDisplayRadius" class="col-md-2 control-label"><?php echo _("Display radius (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonDisplayRadius" name="addSwitchButtonDisplayRadius" data-slider-id="addSwitchButtonDisplayRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonDisplayRadius').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 0    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonDisplayWidth" class="col-md-2 control-label"><?php echo _("Display width (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonDisplayWidth" name="addSwitchButtonDisplayWidth" data-slider-id="addSwitchButtonDisplayWidthSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonDisplayWidth').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 80    
                                });
                                
                                newLabel = $('<label for="addSwitchButtonDisplayHeight" class="col-md-2 control-label"><?php echo _("Display height (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonDisplayHeight" name="addSwitchButtonDisplayHeight" data-slider-id="addSwitchButtonDisplayHeightSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonDisplayHeight').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 40    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);

                                newLabel = $('<label for="addSwitchButtonNeonEffect" class="col-md-2 control-label"><?php echo _("Neon effect"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<select id="addSwitchButtonNeonEffect" name="addSwitchButtonNeonEffect" class="form-control"></select>');
                                newControl.append('<option value="never"><?php echo _("Never"); ?></option>');
                                newControl.append('<option value="pressedStatus"><?php echo _("When pressed"); ?></option>');
                                newControl.append('<option value="always"><?php echo _("Always"); ?></option>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                var addSwitchParameters = {
                                    baseValue: 'Off',
                                    impulseValue: 'Position',
                                    mode: $('#specificWidgetPropertiesDiv #addGeolocatorMode').val(),
                                };
                                
                                $("#parameters").val(JSON.stringify(addSwitchParameters));
                                
                                $('#specificWidgetPropertiesDiv #addGeolocatorMode').change(function(){
                                    addSwitchParameters.mode = $('#specificWidgetPropertiesDiv #addGeolocatorMode').val();
                                    $("#parameters").val(JSON.stringify(addSwitchParameters));
                                });
                                break;    
                            
                            case "widgetImpulseButton":
                                $('#inputUrlWidget').val('none');
                                $('#inputFontSize').val("24");
                                $('#inputFontSize').attr("disabled", true);
                                $('#inputFontSize').prop("required", false);
                                $('#inputFontColor').val("rgba(255,255,255,1)");
                                $('#widgetFontColor').css("background-color", "#ffffff");
                                $('#inputFontColor').attr("disabled", true);
                                $('#inputFontColor').prop("required", false);
                                $("#titleLabel").html("Title");
                                $("#bckColorLabel").html("Background color");
                                $('#link_help_modal-add-widget').css("display", "");
                                $('#inputFrameColorWidget').attr('disabled', false);
                                $('#inputFrameColorWidget').val('#eeeeee');
                                $('#inputFrameColorWidget').prop('required', false);
                                $('#select-IntTemp-Widget').attr('disabled', true);
                                $('#select-IntTemp-Widget').prop('required', false);
                                $('#inputFreqWidget').attr('disabled', false);
                                $('#inputFreqWidget').val(60);
                                $('#inputFreqWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').attr('disabled', false);
                                $('#inputHeaderFontColorWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').val("#000000");
                                $('#widgetHeaderFontColor').css("background-color", "#000000");
                                $('#inputUdmWidget').prop("required", false);
                                $('#inputUdmWidget').attr("disabled", true);
                                $('#inputUdmPosition').prop("required", false);
                                $('#inputUdmPosition').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').prop("required", false);
                                $('#addWidgetFirstAidHospital').val(-1);
                                $('#inputFirstAidRow').hide();
                                $('#inputSizeRowsWidget').val(8 * (78 / newScaledGridsterCellW));     // MOD GRID
                                $('#inputSizeColumnsWidget').val(4 * (39 / newScaledGridsterCellH));    // MOD GRID

                                //Parametri specifici del widget
                                $('#specificWidgetPropertiesDiv .row').remove();
                                $('#inputComuneWidget').attr('disabled', true);

                                //Rimozione eventuali campi del subform general per widget process
                                removeWidgetProcessGeneralFields("addWidget");
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                newLabel = $('<label for="addSwitchButtonViewMode" class="col-md-2 control-label"><?php echo _("View mode"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                var newControl = $('<select id="addSwitchButtonViewMode" name="addSwitchButtonViewMode" class="form-control"></select>');
                                newControl.append('<option value="emptyButton"><?php echo _("Empty button"); ?></option>');
                                newControl.append('<option value="iconOnly"><?php echo _("Icon only"); ?></option>');
                                newControl.append('<option value="textOnly"><?php echo _("Text only"); ?></option>');
                                newControl.append('<option value="displayOnly"><?php echo _("Value display only"); ?></option>');
                                newControl.append('<option value="iconAndText"><?php echo _("Icon and text"); ?></option>');
                                newControl.append('<option value="iconAndDisplay"><?php echo _("Icon and value display"); ?></option>');
                                newControl.append('<option value="displayAndText"><?php echo _("Display and text"); ?></option>');
                                newControl.append('<option value="all"><?php echo _("Icon, text and value display"); ?></option>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addSwitchButtonRadius" class="col-md-2 control-label"><?php echo _("Button radius (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonRadius" name="addSwitchButtonRadius" data-slider-id="addSwitchButtonRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonRadius').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 0    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonImpulseMode" class="col-md-2 control-label"><?php echo _("Impulse mode"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<select id="addSwitchButtonImpulseMode" name="addSwitchButtonImpulseMode" class="form-control"></select>');
                                newControl.append('<option value="singlePress"><?php echo _("Send impulse on release"); ?></option>');
                                newControl.append('<option value="sequence">Send impulses until pressed</option>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonColor" class="col-md-2 control-label"><?php echo _("Button color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonColor"><input type="text" name="addSwitchButtonColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonClickColor" class="col-md-2 control-label"><?php echo _("Button color on click"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonClickColor"><input type="text" name="addSwitchButtonClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(102, 255, 102, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonSymbolColor" class="col-md-2 control-label"><?php echo _("Symbol color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonSymbolColor"><input type="text" name="addSwitchButtonSymbolColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(37, 37, 37, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonSymbolClickColor" class="col-md-2 control-label"><?php echo _("Symbol color on click"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonSymbolClickColor"><input type="text" name="addSwitchButtonSymbolClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonTextColor" class="col-md-2 control-label"><?php echo _("Text color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonTextColor"><input type="text" name="addSwitchButtonTextColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(37, 37, 37, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonTextClickColor" class="col-md-2 control-label"><?php echo _("Text color on click"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonTextClickColor"><input type="text" name="addSwitchButtonTextClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonTextFontSize" class="col-md-2 control-label"><?php echo _("Text font size"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" id="addSwitchButtonTextFontSize" name="addSwitchButtonTextFontSize" class="form-control" value="24"></input>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonDisplayFontSize" class="col-md-2 control-label"><?php echo _("Display font size"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" id="addSwitchButtonDisplayFontSize" name="addSwitchButtonDisplayFontSize" class="form-control" value="24"></input>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonDisplayFontColor" class="col-md-2 control-label"><?php echo _("Display text color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonDisplayFontColor"><input type="text" name="addSwitchButtonDisplayFontColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonDisplayFontClickColor" class="col-md-2 control-label"><?php echo _("On display text color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonDisplayFontClickColor"><input type="text" name="addSwitchButtonDisplayFontClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonDisplayColor" class="col-md-2 control-label"><?php echo _("Display background color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonDisplayColor"><input type="text" name="addSwitchButtonDisplayColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(0, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addSwitchButtonDisplayRadius" class="col-md-2 control-label"><?php echo _("Display radius (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonDisplayRadius" name="addSwitchButtonDisplayRadius" data-slider-id="addSwitchButtonDisplayRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonDisplayRadius').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 0    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonDisplayWidth" class="col-md-2 control-label"><?php echo _("Display width (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonDisplayWidth" name="addSwitchButtonDisplayWidth" data-slider-id="addSwitchButtonDisplayWidthSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonDisplayWidth').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 80    
                                });
                                
                                newLabel = $('<label for="addSwitchButtonDisplayHeight" class="col-md-2 control-label"><?php echo _("Display height (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonDisplayHeight" name="addSwitchButtonDisplayHeight" data-slider-id="addSwitchButtonDisplayHeightSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonDisplayHeight').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 40    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);

                                newLabel = $('<label for="addSwitchButtonNeonEffect" class="col-md-2 control-label"><?php echo _("Neon effect"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<select id="addSwitchButtonNeonEffect" name="addSwitchButtonNeonEffect" class="form-control"></select>');
                                newControl.append('<option value="never"><?php echo _("Never"); ?></option>');
                                newControl.append('<option value="pressedStatus"><?php echo _("When pressed"); ?></option>');
                                newControl.append('<option value="always"><?php echo _("Always"); ?></option>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                var addSwitchParameters = {
                                    baseValue: $('#modal-add-widget #personalAppsInputsOffValue').val(),
                                    impulseValue: $('#modal-add-widget #personalAppsInputsOnValue').val(),
                                    impulseMode: $('#specificWidgetPropertiesDiv #addSwitchButtonImpulseMode').val(),
                                };
                                
                                $("#parameters").val(JSON.stringify(addSwitchParameters));
                                
                                $('#specificWidgetPropertiesDiv #addSwitchButtonImpulseMode').change(function(){
                                    addSwitchParameters.impulseMode = $('#specificWidgetPropertiesDiv #addSwitchButtonImpulseMode').val();
                                    $("#parameters").val(JSON.stringify(addSwitchParameters));
                                });
                                break;
                            
                            case "widgetOnOffButton":
                                $('#inputUrlWidget').val('none');
                                $('#inputFontSize').val("24");
                                $('#inputFontSize').attr("disabled", true);
                                $('#inputFontSize').prop("required", false);
                                $('#inputFontColor').val("rgba(255,255,255,1)");
                                $('#widgetFontColor').css("background-color", "#ffffff");
                                $('#inputFontColor').attr("disabled", true);
                                $('#inputFontColor').prop("required", false);
                                $("#titleLabel").html("Title");
                                $("#bckColorLabel").html("Background color");
                                $('#link_help_modal-add-widget').css("display", "");
                                $('#inputFrameColorWidget').attr('disabled', false);
                                $('#inputFrameColorWidget').val('#eeeeee');
                                $('#inputFrameColorWidget').prop('required', false);
                                $('#select-IntTemp-Widget').attr('disabled', true);
                                $('#select-IntTemp-Widget').prop('required', false);
                                $('#inputFreqWidget').attr('disabled', false);
                                $('#inputFreqWidget').val(60);
                                $('#inputFreqWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').attr('disabled', false);
                                $('#inputHeaderFontColorWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').val("#000000");
                                $('#widgetHeaderFontColor').css("background-color", "#000000");
                                $('#inputUdmWidget').prop("required", false);
                                $('#inputUdmWidget').attr("disabled", true);
                                $('#inputUdmPosition').prop("required", false);
                                $('#inputUdmPosition').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').prop("required", false);
                                $('#addWidgetFirstAidHospital').val(-1);
                                $('#inputFirstAidRow').hide();
                                $('#inputSizeRowsWidget').val(8 * (78 / newScaledGridsterCellW));     // MOD GRID
                                $('#inputSizeColumnsWidget').val(4 * (39 / newScaledGridsterCellH));    // MOD GRID

                                //Parametri specifici del widget
                                $('#specificWidgetPropertiesDiv .row').remove();
                                $('#inputComuneWidget').attr('disabled', false);

                                //Rimozione eventuali campi del subform general per widget process
                                removeWidgetProcessGeneralFields("addWidget");
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                newLabel = $('<label for="addSwitchButtonViewMode" class="col-md-2 control-label"><?php echo _("View mode"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                var newControl = $('<select id="addSwitchButtonViewMode" name="addSwitchButtonViewMode" class="form-control"></select>');
                                newControl.append('<option value="emptyButton"><?php echo _("Empty button"); ?></option>');
                                newControl.append('<option value="iconOnly"><?php echo _("Icon only"); ?></option>');
                                newControl.append('<option value="textOnly"><?php echo _("Text only"); ?></option>');
                                newControl.append('<option value="displayOnly"><?php echo _("Value display only"); ?></option>');
                                newControl.append('<option value="iconAndText"><?php echo _("Icon and text"); ?></option>');
                                newControl.append('<option value="iconAndDisplay"><?php echo _("Icon and value display"); ?></option>');
                                newControl.append('<option value="displayAndText"><?php echo _("Display and text"); ?></option>');
                                newControl.append('<option value="all"><?php echo _("Icon, text and value display"); ?></option>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addSwitchButtonRadius" class="col-md-2 control-label"><?php echo _("Button radius (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonRadius" name="addSwitchButtonRadius" data-slider-id="addSwitchButtonRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonRadius').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 0    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonOffColor" class="col-md-2 control-label"><?php echo _("Off button color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonOffColor"><input type="text" name="addSwitchButtonOffColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonOnColor" class="col-md-2 control-label"><?php echo _("On button color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonOnColor"><input type="text" name="addSwitchButtonOnColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(102, 255, 102, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonSymbolOffColor" class="col-md-2 control-label"><?php echo _("Off symbol color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonSymbolOffColor"><input type="text" name="addSwitchButtonSymbolOffColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(37, 37, 37, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonSymbolOnColor" class="col-md-2 control-label"><?php echo _("On symbol color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonSymbolOnColor"><input type="text" name="addSwitchButtonSymbolOnColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonTextOffColor" class="col-md-2 control-label"><?php echo _("Off text color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonTextOffColor"><input type="text" name="addSwitchButtonTextOffColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(37, 37, 37, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonTextOnColor" class="col-md-2 control-label"><?php echo _("On text color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonTextOnColor"><input type="text" name="addSwitchButtonTextOnColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonTextFontSize" class="col-md-2 control-label"><?php echo _("Text font size"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" id="addSwitchButtonTextFontSize" name="addSwitchButtonTextFontSize" class="form-control" value="24"></input>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonDisplayFontSize" class="col-md-2 control-label"><?php echo _("Display font size"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" id="addSwitchButtonDisplayFontSize" name="addSwitchButtonDisplayFontSize" class="form-control" value="24"></input>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonDisplayOffColor" class="col-md-2 control-label"><?php echo _("Off display text color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonDisplayOffColor"><input type="text" name="addSwitchButtonDisplayOffColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonDisplayOnColor" class="col-md-2 control-label"><?php echo _("On display text color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonDisplayOnColor"><input type="text" name="addSwitchButtonDisplayOnColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonDisplayColor" class="col-md-2 control-label"><?php echo _("Display background color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonDisplayColor"><input type="text" name="addSwitchButtonDisplayColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(0, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addSwitchButtonDisplayRadius" class="col-md-2 control-label"><?php echo _("Display radius (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonDisplayRadius" name="addSwitchButtonDisplayRadius" data-slider-id="addSwitchButtonDisplayRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonDisplayRadius').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 0    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonDisplayWidth" class="col-md-2 control-label"><?php echo _("Display width (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonDisplayWidth" name="addSwitchButtonDisplayWidth" data-slider-id="addSwitchButtonDisplayWidthSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonDisplayWidth').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 80    
                                });
                                
                                newLabel = $('<label for="addSwitchButtonDisplayHeight" class="col-md-2 control-label"><?php echo _("Display height (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonDisplayHeight" name="addSwitchButtonDisplayHeight" data-slider-id="addSwitchButtonDisplayHeightSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonDisplayHeight').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 40    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonNeonEffect" class="col-md-2 control-label"><?php echo _("Neon effect"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<select id="addSwitchButtonNeonEffect" name="addSwitchButtonNeonEffect" class="form-control"></select>');
                                newControl.append('<option value="never"><?php echo _("Never"); ?></option>');
                                newControl.append('<option value="onStatus"><?php echo _("When on"); ?></option>');
                                newControl.append('<option value="offStatus"><?php echo _("When off"); ?></option>');
                                newControl.append('<option value="always"><?php echo _("Always"); ?></option>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                var addSwitchParameters = {
                                    offValue: $('#modal-add-widget #personalAppsInputsOffValue').val(),
                                    onValue: $('#modal-add-widget #personalAppsInputsOnValue').val(),
                                };
                                
                                $("#parameters").val(JSON.stringify(addSwitchParameters));
                                break;
                            
                            case "widgetKnob":
                                $('#inputUrlWidget').val('none');
                                $('#inputFontSize').val("24");
                                $('#inputFontSize').attr("disabled", false);
                                $('#inputFontSize').prop("required", true);
                                $('label[for=inputFontSize]').html('Display font size');
                                $('#inputFontColor').val("rgba(255,255,255,1)");
                                $('#widgetFontColor').css("background-color", "#ffffff");
                                $("#titleLabel").html("Title");
                                $("#bckColorLabel").html("Background color");
                                $('#link_help_modal-add-widget').css("display", "");
                                $('#inputFrameColorWidget').attr('disabled', false);
                                $('#inputFrameColorWidget').val('#eeeeee');
                                $('#inputFrameColorWidget').prop('required', false);
                                $('#select-IntTemp-Widget').attr('disabled', true);
                                $('#select-IntTemp-Widget').prop('required', false);
                                $('#inputFreqWidget').attr('disabled', false);
                                $('#inputFreqWidget').val(60);
                                $('#inputFreqWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').attr('disabled', false);
                                $('#inputHeaderFontColorWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').val("#000000");
                                $('#widgetHeaderFontColor').css("background-color", "#000000");
                                $('#inputUdmWidget').prop("required", false);
                                $('#inputUdmWidget').attr("disabled", true);
                                $('#inputUdmPosition').prop("required", false);
                                $('#inputUdmPosition').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').prop("required", false);
                                $('#addWidgetFirstAidHospital').val(-1);
                                $('#inputFirstAidRow').hide();
                                $('#inputSizeRowsWidget').val(8 * (78 / newScaledGridsterCellW));     // MOD GRID
                                $('#inputSizeColumnsWidget').val(4 * (39 / newScaledGridsterCellH));    // MOD GRID

                                //Parametri specifici del widget
                                $('#specificWidgetPropertiesDiv .row').remove();
                                $('#inputComuneWidget').attr('disabled', false);

                                //Rimozione eventuali campi del subform general per widget process
                                removeWidgetProcessGeneralFields("addWidget");
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addKnobIndicatorRadius" class="col-md-2 control-label"><?php echo _("Indicator radius (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-3"></div>');
                                var newControl = $('<input id="addKnobIndicatorRadius" name="addKnobIndicatorRadius" data-slider-id="addKnobIndicatorRadiusSlider" type="text" data-slider-min="1" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addKnobDisplayRadius" class="col-md-2 control-label"><?php echo _("Value display radius (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-3"></div>');
                                var newControl = $('<input id="addKnobDisplayRadius" name="addKnobDisplayRadius" data-slider-id="addKnobDisplayRadiusSlider" type="text" data-slider-min="1" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow.find('#addKnobIndicatorRadius').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 15    
                                });
                                
                                newFormRow.find('#addKnobDisplayRadius').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 30    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                newLabel = $('<label for="addKnobStartAngle" class="col-md-2 control-label"><?php echo _("Start angle"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" name="addKnobStartAngle" class="form-control" id="addKnobStartAngle" value="230"/>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addKnobEndAngle" class="col-md-2 control-label"><?php echo _("End angle"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" name="addKnobEndAngle" class="form-control" id="addKnobEndAngle" value="130"/>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addKnobDisplayColor" class="col-md-2 control-label"><?php echo _("Display color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addKnobDisplayColor"><input type="text" name="addKnobDisplayColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(0, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                if($('#entityAttrType').val() === 'Float')
                                {
                                    $('label[for=addKnobDataPrecision]').show();
                                    $('#addKnobDataPrecision').parents('div.col-md-4').show();
                                    $('#addKnobDataPrecision').show();
                                    dataPrecision = parseInt($('#addKnobDataPrecision').val());
                                }
                                else
                                {
                                    $('label[for=addKnobDataPrecision]').hide();
                                    $('#addKnobDataPrecision').parents('div.col-md-4').hide();
                                    $('#addKnobDataPrecision').hide();
                                    dataPrecision = null;
                                }
                                
                                newFormRow = $('<div class="row"></div>');
                                newLabel = $('<label for="addKnobLabelsFontSize" class="col-md-2 control-label"><?php echo _("Labels font size"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" name="addKnobLabelsFontSize" class="form-control" id="addKnobLabelsFontSize" value="10" data-param="addKnobLabelsFontSize"/>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addKnobLabelsFontColor" class="col-md-2 control-label"><?php echo _("Labels font color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addKnobLabelsFontColor"><input type="text" name="addKnobLabelsFontColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(0, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                newLabel = $('<label for="addKnobIncreaseValue" class="col-md-2 control-label"><?php echo _("Increase value"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" name="addKnobIncreaseValue" class="form-control" id="addKnobIncreaseValue" value="10" data-param="addKnobIncreaseValue"/>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                //Contenitore per tabella delle soglie
                                var addKnobColorsTableContainer = $('<div id="addKnobColorsTableContainer" class="row rowCenterContent"></div>');
                                var addKnobColorsTable = $("<table id='addKnobColorsTable' class='table table-bordered table-condensed thrRangeTable'><col style='width:25%'><col style='width:25%'><col style='width:40%'><col style='width:10%'><tr><td>Min</td><td>Max</td><td>Range color</td><td><a href='#'><i class='fa fa-plus' style='font-size:24px;color:#337ab7'></i></a></td></tr></table>");
                                addKnobColorsTableContainer.append(addKnobColorsTable);
                                $("#specificWidgetPropertiesDiv").append(addKnobColorsTableContainer);
                                
                                var addKnobParameters = {
                                    domainType: $('#addKnobDomainType').val(),
                                    
                                    //Parametri per il continuo
                                    minValue: $('#modal-add-widget #personalAppsInputsMinValue').val(),
                                    maxValue: $('#modal-add-widget #personalAppsInputsMaxValue').val(),
                                    continuousRanges: null,
                                    dataPrecision: 2
                                    
                                    //TBD - Parametri per il discreto
                                };
                                
                                $("#parameters").val(JSON.stringify(addKnobParameters));
                                
                                $('#addKnobDataPrecision').on('input', updateAddKnobParams);

                                $("#addKnobColorsTable i.fa-plus").click(function(){
                                    var newRangeObj = {
                                        min: 0,
                                        max: 0,
                                        color: "#009ddc"
                                    };
                                    
                                    if(addKnobParameters.continuousRanges === null)
                                    {
                                        addKnobParameters.continuousRanges = [];
                                    }
                                    
                                    addKnobParameters.continuousRanges.push(newRangeObj);
                                    $('#parameters').val(JSON.stringify(addKnobParameters));
                                    
                                    var newTableRow = $('<tr></tr>');
                                    newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="min">0</a></td>');
                                    newTableCell.find('a').editable();
                                    newTableRow.append(newTableCell);
                                    
                                    newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="max">0</a></td>');
                                    newTableCell.find('a').editable();
                                    newTableRow.append(newTableCell);
                                    
                                    newTableCell = $('<td><div class="input-group colorPicker" data-param="color"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                    newTableRow.append(newTableCell);
                                    newTableRow.find('div.colorPicker').colorpicker({color: "#009ddc", format: "rgba"});
                                    //UPDATE DEI PARAMETRI AL CLOSE PICKER
                                    newTableRow.find('div.colorPicker').on('hidePicker', updateAddKnobParams);
                                    
                                    newTableCell = $('<td><a><i class="fa fa-close" style="font-size:24px;color:red"></i></a></td>');
                                    //ELIMINAZIONE RIGA 
                                    newTableCell.find('i').click(delAddKnobRange);
                                    newTableRow.append(newTableCell);
                                    //UPDATE DEI PARAMETRI AL CHANGE VALUES
                                    newTableRow.find('a.toBeEdited').on('save', updateAddKnobParams);
                                    
                                    $("#addKnobColorsTable").append(newTableRow);
                                });
                                
                                function updateAddKnobParams(e, params)
                                {
                                    var param = $(this).attr('data-param');
                                    var rowIndex = $(this).parents("tr").index() - 1;
                                    var newValue = null;
                                    
                                    switch(param)
                                    {
                                        case "addKnobMinValue":
                                            newValue = $(this).val();
                                            addKnobParameters.minValue = newValue;
                                            break;
                                        
                                        case "addKnobMaxValue":
                                            newValue = $(this).val();
                                            addKnobParameters.maxValue = newValue;
                                            break;
                                            
                                        case "min":
                                            newValue = params.newValue;
                                            addKnobParameters.continuousRanges[rowIndex].min = newValue;
                                            break;
                                            
                                        case "max":
                                            newValue = params.newValue;
                                            addKnobParameters.continuousRanges[rowIndex].max = newValue;
                                            break;
                                            
                                        case "color":
                                            newValue = $(this).colorpicker('getValue');
                                            addKnobParameters.continuousRanges[rowIndex].color = newValue;
                                            break;
                                            
                                        case "addKnobDataPrecision":
                                            newValue = parseInt($(this).val());
                                            addKnobParameters.dataPrecision = newValue;
                                            break;
                                    }
                                    
                                    $('#parameters').val(JSON.stringify(addKnobParameters));
                                    //console.log($('#parameters').val());
                                }
                                
                                function delAddKnobRange(e)
                                {
                                    var delIndex = parseInt($(this).parents('tr').index() - 1);
                                    
                                    //Cancellazione della riga dalla tabella 
                                    $(this).parents('tr').remove();
                                    
                                    //Aggiornamento JSON parametri
                                    addKnobParameters.continuousRanges.splice(delIndex, 1);
                                    if(addKnobParameters.continuousRanges.length === 0)
                                    {
                                        addKnobParameters.continuousRanges = null;
                                    }
                                    
                                    $('#parameters').val(JSON.stringify(addKnobParameters));
                                    //console.log($('#parameters').val());
                                }
                                
                                break;
                                
                            default: 

                                break;
                        }

                        $('#inputSizeRowsWidget').val(6 * (78 / newScaledGridsterCellW));     // MOD GRID
                        $('#inputSizeColumnsWidget').val(3 * (39 / newScaledGridsterCellH));    // MOD GRID
                        $('#inputFreqWidget').val("600");
                    });	
                    
                    $('#metricsCategory').change(function(){
                        switch($(this).val())
                        {
                            case "app":
                                $('#selectMetricRow').hide();
                                $('#metricDescRow').hide();
                                $('#widgetTypeRow').hide();
                                $('#widgetTypeRow').hide();
                                $('#selectedMetricRow').hide();
                                $('#widgetLinkRow').hide();
                                
                                $('#selectMetricRowNR').show();
                                $('#metricDescRowNR').show();
                                $('#widgetTypeRowNR').show();
                                $('#widgetTypeRowNR').show();
                                $('#selectedMetricRowNR').show();
                                $('#widgetLinkRowNR').show();
                                break;
                                
                            case "ds":
                                $('#selectMetricRowNR').hide();
                                $('#metricDescRowNR').hide();
                                $('#widgetTypeRowNR').hide();
                                $('#widgetTypeRowNR').hide();
                                $('#selectedMetricRowNR').hide();
                                $('#widgetLinkRowNR').hide();
                                
                                $('#selectMetricRow').show();
                                $('#metricDescRow').show();
                                $('#widgetTypeRow').show();
                                $('#widgetTypeRow').show();
                                $('#selectedMetricRow').show();
                                $('#widgetLinkRow').show();
                                break;
                        }
                    });
                    
                    $('#widgetEntityM').change(function(){
                        $.ajax({
                                url: "iframeProxy.php",
                                data: {
                                    action: "getOrionEntityAttributes", 
                                    entity: $('#widgetEntityM').val()
                                },
                                type: "GET",
                                async: true,
                                dataType: 'json',
                                success: function (data) 
                                {
                                    $('#widgetAttributeM').empty();
                                    
                                    for(var key in data)
                                    {
                                        $('#widgetAttributeM').append('<option value="' + key + '" data-type="' + data[key].type + '">' + key + '</option>');
                                    }
                                    
                                    $('#widgetAttributeM').val(-1);
                                },
                                error: function(data)
                                {
                                    console.log("Ko");
                                    console.log(data);
                                }
                            });
                    });
                    
                    $('#entityAttrType').change(function(){
                        $.ajax({
                            url: "iframeProxy.php",
                            data: {
                                action: "getActuatorWidgetTypes", 
                                type: $('#entityAttrType option:selected').val()
                            },
                            type: "GET",
                            async: true,
                            dataType: 'json',
                            success: function (data) 
                            {
                                $('#widgetActuatorType').empty();
                                
                                for(var key in data.list)
                                {
                                    $('#widgetActuatorType').append('<option value="' + data.list[key].id_type_widget + '" data-min_row="' + data.list[key].min_row + '" + data-max_row="' + data.list[key].max_row + '" data-min_col="' + data.list[key].min_col + '" data-max_col="' + data.list[key].max_col + '">' + data.list[key].id_type_widget + '</option>')
                                }
                                
                                $('#widgetActuatorType').val(-1);
                            },
                            error: function(data)
                            {
                                console.log("Ko");
                                console.log(data);
                            }
                        });    
                    });
                    
                     //Listener aggiunta widget per cambio widget selezionato per widgets actuator su broker
                    $('#widgetActuatorType').change(function(){
                        $("#inputUdmPosition").val(-1);
                        //Titolo obbligatorio per tutti
                        $('#inputTitleWidget').prop('required', true);
                        
                        switch($('#widgetActuatorType').val())
                        {
                            case "widgetNumericKeyboard":
                                $('#inputUrlWidget').val('none');
                                $('#inputFontSize').val("24");
                                $('#inputFontSize').attr("disabled", true);
                                $('#inputFontSize').prop("required", false);
                                $('#inputFontColor').val("rgba(255,255,255,1)");
                                $('#widgetFontColor').css("background-color", "#ffffff");
                                $('#inputFontColor').attr("disabled", true);
                                $('#inputFontColor').prop("required", false);
                                $("#titleLabel").html("Title");
                                $("#bckColorLabel").html("Background color");
                                $('#link_help_modal-add-widget').css("display", "");
                                $('#inputFrameColorWidget').attr('disabled', false);
                                $('#inputFrameColorWidget').val('#eeeeee');
                                $('#inputFrameColorWidget').prop('required', false);
                                $('#select-IntTemp-Widget').attr('disabled', true);
                                $('#select-IntTemp-Widget').prop('required', false);
                                $('#inputFreqWidget').attr('disabled', false);
                                $('#inputFreqWidget').val(60);
                                $('#inputFreqWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').attr('disabled', false);
                                $('#inputHeaderFontColorWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').val("#000000");
                                $('#widgetHeaderFontColor').css("background-color", "#000000");
                                $('#inputUdmWidget').prop("required", false);
                                $('#inputUdmWidget').attr("disabled", true);
                                $('#inputUdmPosition').prop("required", false);
                                $('#inputUdmPosition').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').prop("required", false);
                                $('#addWidgetFirstAidHospital').val(-1);
                                $('#inputFirstAidRow').hide();
                                $('#inputSizeRowsWidget').val(8 * (78 / newScaledGridsterCellW));     // MOD GRID
                                $('#inputSizeColumnsWidget').val(4 * (39 / newScaledGridsterCellH));    // MOD GRID

                                //Parametri specifici del widget
                                $('#specificWidgetPropertiesDiv .row').remove();
                                $('#inputComuneWidget').attr('disabled', true);

                                //Rimozione eventuali campi del subform general per widget process
                                removeWidgetProcessGeneralFields("addWidget");
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addKeyboardDisplayColor" class="col-md-2 control-label"><?php echo _("Display color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addKeyboardDisplayColor"><input type="text" name="addKeyboardDisplayColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addKeyboardDisplayFontColor" class="col-md-2 control-label"><?php echo _("Display font color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addKeyboardDisplayFontColor"><input type="text" name="addKeyboardDisplayFontColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(0, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addKeyboardBtnColor" class="col-md-2 control-label"><?php echo _("Buttons color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addKeyboardBtnColor"><input type="text" name="addKeyboardBtnColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(225, 225, 225, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addKeyboardBtnFontColor" class="col-md-2 control-label"><?php echo _("Buttons font color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addKeyboardBtnFontColor"><input type="text" name="addKeyboardBtnFontColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(0, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                break;
                                
                            case "widgetGeolocator":
                                $('#inputUrlWidget').val('none');
                                $('#inputFontSize').val("24");
                                $('#inputFontSize').attr("disabled", true);
                                $('#inputFontSize').prop("required", false);
                                $('#inputFontColor').val("rgba(255,255,255,1)");
                                $('#widgetFontColor').css("background-color", "#ffffff");
                                $('#inputFontColor').attr("disabled", true);
                                $('#inputFontColor').prop("required", false);
                                $("#titleLabel").html("Title");
                                $("#bckColorLabel").html("Background color");
                                $('#link_help_modal-add-widget').css("display", "");
                                $('#inputFrameColorWidget').attr('disabled', false);
                                $('#inputFrameColorWidget').val('#eeeeee');
                                $('#inputFrameColorWidget').prop('required', false);
                                $('#select-IntTemp-Widget').attr('disabled', true);
                                $('#select-IntTemp-Widget').prop('required', false);
                                $('#inputFreqWidget').attr('disabled', false);
                                $('#inputFreqWidget').val(60);
                                $('#inputFreqWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').attr('disabled', false);
                                $('#inputHeaderFontColorWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').val("#000000");
                                $('#widgetHeaderFontColor').css("background-color", "#000000");
                                $('#inputUdmWidget').prop("required", false);
                                $('#inputUdmWidget').attr("disabled", true);
                                $('#inputUdmPosition').prop("required", false);
                                $('#inputUdmPosition').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').prop("required", false);
                                $('#addWidgetFirstAidHospital').val(-1);
                                $('#inputFirstAidRow').hide();
                                $('#inputSizeRowsWidget').val(8 * (78 / newScaledGridsterCellW));     // MOD GRID
                                $('#inputSizeColumnsWidget').val(4 * (39 / newScaledGridsterCellH));    // MOD GRID

                                //Parametri specifici del widget
                                $('#specificWidgetPropertiesDiv .row').remove();
                                $('#inputComuneWidget').attr('disabled', true);

                                //Rimozione eventuali campi del subform general per widget process
                                removeWidgetProcessGeneralFields("addWidget");
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                newLabel = $('<label for="addSwitchButtonViewMode" class="col-md-2 control-label"><?php echo _("View mode"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                var newControl = $('<select id="addSwitchButtonViewMode" name="addSwitchButtonViewMode" class="form-control"></select>');
                                newControl.append('<option value="emptyButton"><?php echo _("Empty button"); ?></option>');
                                newControl.append('<option value="iconOnly"><?php echo _("Icon only"); ?></option>');
                                newControl.append('<option value="textOnly"><?php echo _("Text only"); ?></option>');
                                newControl.append('<option value="displayOnly"><?php echo _("Value display only"); ?></option>');
                                newControl.append('<option value="iconAndText"><?php echo _("Icon and text"); ?></option>');
                                newControl.append('<option value="iconAndDisplay"><?php echo _("Icon and value display"); ?></option>');
                                newControl.append('<option value="displayAndText"><?php echo _("Display and text"); ?></option>');
                                newControl.append('<option value="all"><?php echo _("Icon, text and value display"); ?></option>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addSwitchButtonRadius" class="col-md-2 control-label"><?php echo _("Button radius (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonRadius" name="addSwitchButtonRadius" data-slider-id="addSwitchButtonRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonRadius').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 0    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addGeolocatorMode" class="col-md-2 control-label"><?php echo _("Geolocation mode"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<select id="addGeolocatorMode" name="addGeolocatorMode" class="form-control"></select>');
                                newControl.append('<option value="press"><?php echo _("On press only"); ?></option>');
                                newControl.append('<option value="period"><?php echo _("Periodically"); ?></option>');
                                newControl.append('<option value="both"><?php echo _("Periodically and on press"); ?></option>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonColor" class="col-md-2 control-label"><?php echo _("Button color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonColor"><input type="text" name="addSwitchButtonColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonClickColor" class="col-md-2 control-label"><?php echo _("Button color on click"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonClickColor"><input type="text" name="addSwitchButtonClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(102, 255, 102, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonSymbolColor" class="col-md-2 control-label"><?php echo _("Symbol color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonSymbolColor"><input type="text" name="addSwitchButtonSymbolColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(37, 37, 37, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonSymbolClickColor" class="col-md-2 control-label"><?php echo _("Symbol color on click"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonSymbolClickColor"><input type="text" name="addSwitchButtonSymbolClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonTextColor" class="col-md-2 control-label"><?php echo _("Text color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonTextColor"><input type="text" name="addSwitchButtonTextColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(37, 37, 37, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonTextClickColor" class="col-md-2 control-label"><?php echo _("Text color on click"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonTextClickColor"><input type="text" name="addSwitchButtonTextClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonTextFontSize" class="col-md-2 control-label"><?php echo _("Text font size"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" id="addSwitchButtonTextFontSize" name="addSwitchButtonTextFontSize" class="form-control" value="24"></input>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonDisplayFontSize" class="col-md-2 control-label"><?php echo _("Display font size"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" id="addSwitchButtonDisplayFontSize" name="addSwitchButtonDisplayFontSize" class="form-control" value="24"></input>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonDisplayFontColor" class="col-md-2 control-label"><?php echo _("Display text color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonDisplayFontColor"><input type="text" name="addSwitchButtonDisplayFontColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonDisplayFontClickColor" class="col-md-2 control-label"><?php echo _("On display text color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonDisplayFontClickColor"><input type="text" name="addSwitchButtonDisplayFontClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonDisplayColor" class="col-md-2 control-label"><?php echo _("Display background color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonDisplayColor"><input type="text" name="addSwitchButtonDisplayColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(0, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addSwitchButtonDisplayRadius" class="col-md-2 control-label"><?php echo _("Display radius (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonDisplayRadius" name="addSwitchButtonDisplayRadius" data-slider-id="addSwitchButtonDisplayRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonDisplayRadius').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 0    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonDisplayWidth" class="col-md-2 control-label"><?php echo _("Display width (%)"); ?> </label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonDisplayWidth" name="addSwitchButtonDisplayWidth" data-slider-id="addSwitchButtonDisplayWidthSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonDisplayWidth').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 80    
                                });
                                
                                newLabel = $('<label for="addSwitchButtonDisplayHeight" class="col-md-2 control-label"><?php echo _("Display height (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonDisplayHeight" name="addSwitchButtonDisplayHeight" data-slider-id="addSwitchButtonDisplayHeightSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonDisplayHeight').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 40    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);

                                newLabel = $('<label for="addSwitchButtonNeonEffect" class="col-md-2 control-label"><?php echo _("Neon effect"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<select id="addSwitchButtonNeonEffect" name="addSwitchButtonNeonEffect" class="form-control"></select>');
                                newControl.append('<option value="never"><?php echo _("Never"); ?></option>');
                                newControl.append('<option value="pressedStatus"><?php echo _("When pressed"); ?></option>');
                                newControl.append('<option value="always"><?php echo _("Always"); ?></option>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                var addSwitchParameters = {
                                    baseValue: 'Off',
                                    impulseValue: 'Position',
                                    mode: $('#specificWidgetPropertiesDiv #addGeolocatorMode').val(),
                                };
                                
                                $("#parameters").val(JSON.stringify(addSwitchParameters));
                                
                                $('#specificWidgetPropertiesDiv #addGeolocatorMode').change(function(){
                                    addSwitchParameters.mode = $('#specificWidgetPropertiesDiv #addGeolocatorMode').val();
                                    $("#parameters").val(JSON.stringify(addSwitchParameters));
                                });
                                break;        
                            
                            case "widgetImpulseButton":
                                $('#inputUrlWidget').val('none');
                                $('#inputFontSize').val("24");
                                $('#inputFontSize').attr("disabled", true);
                                $('#inputFontSize').prop("required", false);
                                $('#inputFontColor').val("rgba(255,255,255,1)");
                                $('#widgetFontColor').css("background-color", "#ffffff");
                                $('#inputFontColor').attr("disabled", true);
                                $('#inputFontColor').prop("required", false);
                                $("#titleLabel").html("Title");
                                $("#bckColorLabel").html("Background color");
                                $('#link_help_modal-add-widget').css("display", "");
                                $('#inputFrameColorWidget').attr('disabled', false);
                                $('#inputFrameColorWidget').val('#eeeeee');
                                $('#inputFrameColorWidget').prop('required', false);
                                $('#select-IntTemp-Widget').attr('disabled', true);
                                $('#select-IntTemp-Widget').prop('required', false);
                                $('#inputFreqWidget').attr('disabled', false);
                                $('#inputFreqWidget').val(60);
                                $('#inputFreqWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').attr('disabled', false);
                                $('#inputHeaderFontColorWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').val("#000000");
                                $('#widgetHeaderFontColor').css("background-color", "#000000");
                                $('#inputUdmWidget').prop("required", false);
                                $('#inputUdmWidget').attr("disabled", true);
                                $('#inputUdmPosition').prop("required", false);
                                $('#inputUdmPosition').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').prop("required", false);
                                $('#addWidgetFirstAidHospital').val(-1);
                                $('#inputFirstAidRow').hide();
                                $('#inputSizeRowsWidget').val(8 * (78 / newScaledGridsterCellW));     // MOD GRID
                                $('#inputSizeColumnsWidget').val(4 * (39 / newScaledGridsterCellH));    // MOD GRID

                                //Parametri specifici del widget
                                $('#specificWidgetPropertiesDiv .row').remove();
                                $('#inputComuneWidget').attr('disabled', false);

                                //Rimozione eventuali campi del subform general per widget process
                                removeWidgetProcessGeneralFields("addWidget");
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                newLabel = $('<label for="addSwitchButtonTargetEntity" class="col-md-2 control-label"><?php echo _("Target entity"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonTargetEntity" name="addSwitchButtonTargetEntity" class="form-control" type="text" value="self"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addSwitchButtonTargetEntityAttribute" class="col-md-2 control-label"><?php echo _("Target entity attribute"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonTargetEntityAttribute" name="addSwitchButtonTargetEntityAttribute" class="form-control" type="text"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                newLabel = $('<label for="addSwitchButtonViewMode" class="col-md-2 control-label"><?php echo _("View mode"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                var newControl = $('<select id="addSwitchButtonViewMode" name="addSwitchButtonViewMode" class="form-control"></select>');
                                newControl.append('<option value="emptyButton"><?php echo _("Empty button"); ?></option>');
                                newControl.append('<option value="iconOnly"><?php echo _("Icon only"); ?></option>');
                                newControl.append('<option value="textOnly"><?php echo _("Text only"); ?></option>');
                                newControl.append('<option value="displayOnly"><?php echo _("Value display only"); ?></option>');
                                newControl.append('<option value="iconAndText"><?php echo _("Icon and text"); ?></option>');
                                newControl.append('<option value="iconAndDisplay"><?php echo _("Icon and value display"); ?></option>');
                                newControl.append('<option value="displayAndText"><?php echo _("Display and text"); ?></option>');
                                newControl.append('<option value="all"><?php echo _("Icon, text and value display"); ?></option>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addSwitchButtonRadius" class="col-md-2 control-label"><?php echo _("Button radius (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonRadius" name="addSwitchButtonRadius" data-slider-id="addSwitchButtonRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonRadius').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 0    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonBaseValue" class="col-md-2 control-label"><?php echo _("Base value"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonBaseValue" name="addSwitchButtonBaseValue" class="form-control" type="text"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                switch($('#entityAttrType').val())
                                {
                                    case "Integer":
                                        newFormRow.find('#addSwitchButtonBaseValue').val(0);
                                        break;
                                        
                                    case "Float":
                                        newFormRow.find('#addSwitchButtonBaseValue').val(0.0);
                                        break;
                                        
                                    case "String":
                                        newFormRow.find('#addSwitchButtonBaseValue').val("Off");
                                        break;
                                        
                                    case "Boolean":
                                        newFormRow.find('#addSwitchButtonBaseValue').val(false);
                                        break;    
                                }
                                
                                newLabel = $('<label for="addSwitchButtonImpulseValue" class="col-md-2 control-label"><?php echo _("Impulse value"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonImpulseValue" name="addSwitchButtonImpulseValue" class="form-control" type="text"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                switch($('#entityAttrType').val())
                                {
                                    case "Integer":
                                        newFormRow.find('#addSwitchButtonImpulseValue').val(1);
                                        break;
                                        
                                    case "Float":
                                        newFormRow.find('#addSwitchButtonImpulseValue').val(1.0);
                                        break;
                                        
                                    case "String":
                                        newFormRow.find('#addSwitchButtonImpulseValue').val("On");
                                        break;
                                        
                                    case "Boolean":
                                        newFormRow.find('#addSwitchButtonImpulseValue').val(true);
                                        break;    
                                }
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonImpulseMode" class="col-md-2 control-label"><?php echo _("Impulse mode"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<select id="addSwitchButtonImpulseMode" name="addSwitchButtonImpulseMode" class="form-control"></select>');
                                newControl.append('<option value="singlePress"><?php echo _("Send impulse on release"); ?></option>');
                                newControl.append('<option value="sequence"><?php echo _("Send impulses until pressed"); ?></option>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonColor" class="col-md-2 control-label"><?php echo _("Button color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonColor"><input type="text" name="addSwitchButtonColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonClickColor" class="col-md-2 control-label"><?php echo _("Button color on click"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonClickColor"><input type="text" name="addSwitchButtonClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(102, 255, 102, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonSymbolColor" class="col-md-2 control-label"><?php echo _("Symbol color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonSymbolColor"><input type="text" name="addSwitchButtonSymbolColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(37, 37, 37, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonSymbolClickColor" class="col-md-2 control-label"><?php echo _("Symbol color on click"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonSymbolClickColor"><input type="text" name="addSwitchButtonSymbolClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonTextColor" class="col-md-2 control-label"><?php echo _("Text color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonTextColor"><input type="text" name="addSwitchButtonTextColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(37, 37, 37, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonTextClickColor" class="col-md-2 control-label"><?php echo _("Text color on click"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonTextClickColor"><input type="text" name="addSwitchButtonTextClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonTextFontSize" class="col-md-2 control-label"><?php echo _("Text font size"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" id="addSwitchButtonTextFontSize" name="addSwitchButtonTextFontSize" class="form-control" value="24"></input>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonDisplayFontSize" class="col-md-2 control-label"><?php echo _("Display font size"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" id="addSwitchButtonDisplayFontSize" name="addSwitchButtonDisplayFontSize" class="form-control" value="24"></input>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonDisplayFontColor" class="col-md-2 control-label"><?php echo _("Display text color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonDisplayFontColor"><input type="text" name="addSwitchButtonDisplayFontColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonDisplayFontClickColor" class="col-md-2 control-label"><?php echo _("On display text color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonDisplayFontClickColor"><input type="text" name="addSwitchButtonDisplayFontClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonDisplayColor" class="col-md-2 control-label"><?php echo _("Display background color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonDisplayColor"><input type="text" name="addSwitchButtonDisplayColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(0, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addSwitchButtonDisplayRadius" class="col-md-2 control-label"><?php echo _("Display radius (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonDisplayRadius" name="addSwitchButtonDisplayRadius" data-slider-id="addSwitchButtonDisplayRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonDisplayRadius').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 0    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonDisplayWidth" class="col-md-2 control-label"><?php echo _("Display width (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonDisplayWidth" name="addSwitchButtonDisplayWidth" data-slider-id="addSwitchButtonDisplayWidthSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonDisplayWidth').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 80    
                                });
                                
                                newLabel = $('<label for="addSwitchButtonDisplayHeight" class="col-md-2 control-label"><?php echo _("Display height (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonDisplayHeight" name="addSwitchButtonDisplayHeight" data-slider-id="addSwitchButtonDisplayHeightSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonDisplayHeight').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 40    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);

                                newLabel = $('<label for="addSwitchButtonNeonEffect" class="col-md-2 control-label"><?php echo _("Neon effect"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<select id="addSwitchButtonNeonEffect" name="addSwitchButtonNeonEffect" class="form-control"></select>');
                                newControl.append('<option value="never"><?php echo _("Never"); ?></option>');
                                newControl.append('<option value="pressedStatus"><?php echo _("When pressed"); ?></option>');
                                newControl.append('<option value="always"><?php echo _("Always"); ?></option>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                var addSwitchParameters = {
                                    baseValue: $('#specificWidgetPropertiesDiv #addSwitchButtonBaseValue').val(),
                                    impulseValue: $('#specificWidgetPropertiesDiv #addSwitchButtonImpulseValue').val(),
                                    impulseMode: $('#specificWidgetPropertiesDiv #addSwitchButtonImpulseMode').val(),
                                    targetEntity: $('#specificWidgetPropertiesDiv #addSwitchButtonTargetEntity').val(),
                                    targetEntityAttribute: $('#specificWidgetPropertiesDiv #addSwitchButtonTargetEntityAttribute').val(),
                                };
                                
                                $("#parameters").val(JSON.stringify(addSwitchParameters));
                                
                                $('#entityAttrType').change(function(){
                                    switch($('#entityAttrType').val())
                                    {
                                        case "Integer":
                                            $('#specificWidgetPropertiesDiv #addSwitchButtonImpulseValue').val(1);
                                            break;

                                        case "Float":
                                            $('#specificWidgetPropertiesDiv #addSwitchButtonImpulseValue').val(1.0);
                                            break;

                                        case "String":
                                            $('#specificWidgetPropertiesDiv #addSwitchButtonImpulseValue').val("On");
                                            break;

                                        case "Boolean":
                                            $('#specificWidgetPropertiesDiv #addSwitchButtonImpulseValue').val(true);
                                            break;    
                                    }
                                    
                                    addSwitchParameters.impulseValue = $('#specificWidgetPropertiesDiv #addSwitchButtonImpulseValue').val();
                                    
                                    $("#parameters").val(JSON.stringify(addSwitchParameters));
                                });
                                
                                $('#specificWidgetPropertiesDiv #addSwitchButtonImpulseValue').change(function(){
                                    addSwitchParameters.impulseValue = $('#specificWidgetPropertiesDiv #addSwitchButtonImpulseValue').val();
                                    $("#parameters").val(JSON.stringify(addSwitchParameters));
                                });
                                
                                $('#specificWidgetPropertiesDiv #addSwitchButtonBaseValue').change(function(){
                                    addSwitchParameters.baseValue = $('#specificWidgetPropertiesDiv #addSwitchButtonBaseValue').val();
                                    $("#parameters").val(JSON.stringify(addSwitchParameters));
                                });
                                
                                $('#specificWidgetPropertiesDiv #addSwitchButtonImpulseMode').change(function(){
                                    addSwitchParameters.impulseMode = $('#specificWidgetPropertiesDiv #addSwitchButtonImpulseMode').val();
                                    $("#parameters").val(JSON.stringify(addSwitchParameters));
                                });
                                
                                $('#specificWidgetPropertiesDiv #addSwitchButtonTargetEntity').change(function(){
                                    addSwitchParameters.targetEntity = $('#specificWidgetPropertiesDiv #addSwitchButtonTargetEntity').val();
                                    $("#parameters").val(JSON.stringify(addSwitchParameters));
                                });
                                
                                $('#specificWidgetPropertiesDiv #addSwitchButtonTargetEntityAttribute').change(function(){
                                    addSwitchParameters.targetEntityAttribute = $('#specificWidgetPropertiesDiv #addSwitchButtonTargetEntityAttribute').val();
                                    $("#parameters").val(JSON.stringify(addSwitchParameters));
                                });
                                break;
                            
                            case "widgetOnOffButton":
                                $('#inputUrlWidget').val('none');
                                $('#inputFontSize').val("24");
                                $('#inputFontSize').attr("disabled", true);
                                $('#inputFontSize').prop("required", false);
                                $('#inputFontColor').val("rgba(255,255,255,1)");
                                $('#widgetFontColor').css("background-color", "#ffffff");
                                $('#inputFontColor').attr("disabled", true);
                                $('#inputFontColor').prop("required", false);
                                $("#titleLabel").html("Title");
                                $("#bckColorLabel").html("Background color");
                                $('#link_help_modal-add-widget').css("display", "");
                                $('#inputFrameColorWidget').attr('disabled', false);
                                $('#inputFrameColorWidget').val('#eeeeee');
                                $('#inputFrameColorWidget').prop('required', false);
                                $('#select-IntTemp-Widget').attr('disabled', true);
                                $('#select-IntTemp-Widget').prop('required', false);
                                $('#inputFreqWidget').attr('disabled', false);
                                $('#inputFreqWidget').val(60);
                                $('#inputFreqWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').attr('disabled', false);
                                $('#inputHeaderFontColorWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').val("#000000");
                                $('#widgetHeaderFontColor').css("background-color", "#000000");
                                $('#inputUdmWidget').prop("required", false);
                                $('#inputUdmWidget').attr("disabled", true);
                                $('#inputUdmPosition').prop("required", false);
                                $('#inputUdmPosition').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').prop("required", false);
                                $('#addWidgetFirstAidHospital').val(-1);
                                $('#inputFirstAidRow').hide();
                                $('#inputSizeRowsWidget').val(8 * (78 / newScaledGridsterCellW));     // MOD GRID
                                $('#inputSizeColumnsWidget').val(4 * (39 / newScaledGridsterCellH));    // MOD GRID

                                //Parametri specifici del widget
                                $('#specificWidgetPropertiesDiv .row').remove();
                                $('#inputComuneWidget').attr('disabled', false);

                                //Rimozione eventuali campi del subform general per widget process
                                removeWidgetProcessGeneralFields("addWidget");
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                newLabel = $('<label for="addSwitchButtonViewMode" class="col-md-2 control-label"><?php echo _("View mode"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                var newControl = $('<select id="addSwitchButtonViewMode" name="addSwitchButtonViewMode" class="form-control"></select>');
                                newControl.append('<option value="emptyButton"><?php echo _("Empty button"); ?></option>');
                                newControl.append('<option value="iconOnly"><?php echo _("Icon only"); ?></option>');
                                newControl.append('<option value="textOnly"><?php echo _("Text only"); ?></option>');
                                newControl.append('<option value="displayOnly"><?php echo _("Value display only"); ?></option>');
                                newControl.append('<option value="iconAndText"><?php echo _("Icon and text"); ?></option>');
                                newControl.append('<option value="iconAndDisplay"><?php echo _("Icon and value display"); ?></option>');
                                newControl.append('<option value="displayAndText"><?php echo _("Display and text"); ?></option>');
                                newControl.append('<option value="all"><?php echo _("Icon, text and value display"); ?></option>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addSwitchButtonRadius" class="col-md-2 control-label"><?php echo _("Button radius (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonRadius" name="addSwitchButtonRadius" data-slider-id="addSwitchButtonRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonRadius').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 0    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonOffValue" class="col-md-2 control-label"><?php echo _("Off value"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonOffValue" name="addSwitchButtonOffValue" class="form-control" type="text"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addSwitchButtonOnValue" class="col-md-2 control-label"><?php echo _("On value"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonOnValue" name="addSwitchButtonOnValue" class="form-control" type="text"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                switch($('#entityAttrType').val())
                                {
                                    case "Integer":
                                        newFormRow.find('#addSwitchButtonOffValue').val(0);
                                        newFormRow.find('#addSwitchButtonOnValue').val(1);
                                        break;
                                        
                                    case "Float":
                                        newFormRow.find('#addSwitchButtonOffValue').val(0.0);
                                        newFormRow.find('#addSwitchButtonOnValue').val(1.0);
                                        break;
                                        
                                    case "String":
                                        newFormRow.find('#addSwitchButtonOffValue').val("Off");
                                        newFormRow.find('#addSwitchButtonOnValue').val("On");
                                        break;
                                        
                                    case "Boolean":
                                        newFormRow.find('#addSwitchButtonOffValue').val(false);
                                        newFormRow.find('#addSwitchButtonOnValue').val(true);
                                        break;    
                                }
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonOffColor" class="col-md-2 control-label"><?php echo _("Off button color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonOffColor"><input type="text" name="addSwitchButtonOffColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonOnColor" class="col-md-2 control-label"><?php echo _("On button color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonOnColor"><input type="text" name="addSwitchButtonOnColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(102, 255, 102, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonSymbolOffColor" class="col-md-2 control-label"><?php echo _("Off symbol color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonSymbolOffColor"><input type="text" name="addSwitchButtonSymbolOffColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(37, 37, 37, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonSymbolOnColor" class="col-md-2 control-label"><?php echo _("On symbol color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonSymbolOnColor"><input type="text" name="addSwitchButtonSymbolOnColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonTextOffColor" class="col-md-2 control-label">Off text color</label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonTextOffColor"><input type="text" name="addSwitchButtonTextOffColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(37, 37, 37, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonTextOnColor" class="col-md-2 control-label">On text color</label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonTextOnColor"><input type="text" name="addSwitchButtonTextOnColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonTextFontSize" class="col-md-2 control-label"><?php echo _("Text font size"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" id="addSwitchButtonTextFontSize" name="addSwitchButtonTextFontSize" class="form-control" value="24"></input>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonDisplayFontSize" class="col-md-2 control-label"><?php echo _("Display font size"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" id="addSwitchButtonDisplayFontSize" name="addSwitchButtonDisplayFontSize" class="form-control" value="24"></input>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addSwitchButtonDisplayOffColor" class="col-md-2 control-label"><?php echo _("Off display text color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonDisplayOffColor"><input type="text" name="addSwitchButtonDisplayOffColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv); 
                                        
                                newLabel = $('<label for="addSwitchButtonDisplayOnColor" class="col-md-2 control-label"><?php echo _("On display text color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonDisplayOnColor"><input type="text" name="addSwitchButtonDisplayOnColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(255, 255, 255, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);        
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonDisplayColor" class="col-md-2 control-label"><?php echo _("Display background color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addSwitchButtonDisplayColor"><input type="text" name="addSwitchButtonDisplayColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(0, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addSwitchButtonDisplayRadius" class="col-md-2 control-label"><?php echo _("Display radius (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonDisplayRadius" name="addSwitchButtonDisplayRadius" data-slider-id="addSwitchButtonDisplayRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonDisplayRadius').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 0    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonDisplayWidth" class="col-md-2 control-label"><?php echo _("Display width (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonDisplayWidth" name="addSwitchButtonDisplayWidth" data-slider-id="addSwitchButtonDisplayWidthSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonDisplayWidth').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 80    
                                });
                                
                                newLabel = $('<label for="addSwitchButtonDisplayHeight" class="col-md-2 control-label"><?php echo _("Display height (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<input id="addSwitchButtonDisplayHeight" name="addSwitchButtonDisplayHeight" data-slider-id="addSwitchButtonDisplayHeightSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newFormRow.find('#addSwitchButtonDisplayHeight').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 40    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newLabel = $('<label for="addSwitchButtonNeonEffect" class="col-md-2 control-label"><?php echo _("Neon effect"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newControl = $('<select id="addSwitchButtonNeonEffect" name="addSwitchButtonNeonEffect" class="form-control"></select>');
                                newControl.append('<option value="never"><?php echo _("Never"); ?></option>');
                                newControl.append('<option value="onStatus"><?php echo _("When on"); ?></option>');
                                newControl.append('<option value="offStatus"><?php echo _("When off"); ?></option>');
                                newControl.append('<option value="always"><?php echo _("Always"); ?></option>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                var addSwitchParameters = {
                                    offValue: $('#specificWidgetPropertiesDiv #addSwitchButtonOffValue').val(),
                                    onValue: $('#specificWidgetPropertiesDiv #addSwitchButtonOnValue').val(),
                                };
                                
                                $("#parameters").val(JSON.stringify(addSwitchParameters));
                                
                                $('#entityAttrType').change(function(){
                                    switch($('#entityAttrType').val())
                                    {
                                        case "Integer":
                                            $('#specificWidgetPropertiesDiv #addSwitchButtonOffValue').val(0);
                                            $('#specificWidgetPropertiesDiv #addSwitchButtonOnValue').val(1);
                                            break;

                                        case "Float":
                                            $('#specificWidgetPropertiesDiv #addSwitchButtonOffValue').val(0.0);
                                            $('#specificWidgetPropertiesDiv #addSwitchButtonOnValue').val(1.0);
                                            break;

                                        case "String":
                                            $('#specificWidgetPropertiesDiv #addSwitchButtonOffValue').val("Off");
                                            $('#specificWidgetPropertiesDiv #addSwitchButtonOnValue').val("On");
                                            break;

                                        case "Boolean":
                                            $('#specificWidgetPropertiesDiv #addSwitchButtonOffValue').val(false);
                                            $('#specificWidgetPropertiesDiv #addSwitchButtonOnValue').val(true);
                                            break;    
                                    }
                                    
                                    addSwitchParameters.offValue = $('#specificWidgetPropertiesDiv #addSwitchButtonOffValue').val();
                                    addSwitchParameters.onValue = $('#specificWidgetPropertiesDiv #addSwitchButtonOnValue').val();
                                    
                                    $("#parameters").val(JSON.stringify(addSwitchParameters));
                                });
                                
                                $('#specificWidgetPropertiesDiv #addSwitchButtonOffValue').change(function(){
                                    addSwitchParameters.offValue = $('#specificWidgetPropertiesDiv #addSwitchButtonOffValue').val();
                                    $("#parameters").val(JSON.stringify(addSwitchParameters));
                                });
                                
                                $('#specificWidgetPropertiesDiv #addSwitchButtonOnValue').change(function(){
                                    addSwitchParameters.onValue = $('#specificWidgetPropertiesDiv #addSwitchButtonOnValue').val();
                                    $("#parameters").val(JSON.stringify(addSwitchParameters));
                                });
                                break;
                            
                            case "widgetKnob":
                                $('#inputUrlWidget').val('none');
                                $('#inputFontSize').val("24");
                                $('#inputFontSize').attr("disabled", false);
                                $('#inputFontSize').prop("required", true);
                                $('label[for=inputFontSize]').html('Display font size');
                                $('#inputFontColor').val("rgba(255,255,255,1)");
                                $('#widgetFontColor').css("background-color", "#ffffff");
                                $("#titleLabel").html("Title");
                                $("#bckColorLabel").html("Background color");
                                $('#link_help_modal-add-widget').css("display", "");
                                $('#inputFrameColorWidget').attr('disabled', false);
                                $('#inputFrameColorWidget').val('#eeeeee');
                                $('#inputFrameColorWidget').prop('required', false);
                                $('#select-IntTemp-Widget').attr('disabled', true);
                                $('#select-IntTemp-Widget').prop('required', false);
                                $('#inputFreqWidget').attr('disabled', false);
                                $('#inputFreqWidget').val(60);
                                $('#inputFreqWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').attr('disabled', false);
                                $('#inputHeaderFontColorWidget').prop('required', true);
                                $('#inputHeaderFontColorWidget').val("#000000");
                                $('#widgetHeaderFontColor').css("background-color", "#000000");
                                $('#inputUdmWidget').prop("required", false);
                                $('#inputUdmWidget').attr("disabled", true);
                                $('#inputUdmPosition').prop("required", false);
                                $('#inputUdmPosition').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').attr("disabled", true);
                                $('#addWidgetFirstAidHospital').prop("required", false);
                                $('#addWidgetFirstAidHospital').val(-1);
                                $('#inputFirstAidRow').hide();
                                $('#inputSizeRowsWidget').val(8 * (78 / newScaledGridsterCellW));     // MOD GRID
                                $('#inputSizeColumnsWidget').val(4 * (39 / newScaledGridsterCellH));    // MOD GRID

                                //Parametri specifici del widget
                                $('#specificWidgetPropertiesDiv .row').remove();
                                $('#inputComuneWidget').attr('disabled', false);

                                //Rimozione eventuali campi del subform general per widget process
                                removeWidgetProcessGeneralFields("addWidget");
                                
                                newFormRow = $('<div class="row"></div>');
                                
                                newLabel = $('<label for="addKnobIndicatorRadius" class="col-md-2 control-label"><?php echo _("Indicator radius (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-3"></div>');
                                var newControl = $('<input id="addKnobIndicatorRadius" name="addKnobIndicatorRadius" data-slider-id="addKnobIndicatorRadiusSlider" type="text" data-slider-min="1" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addKnobDisplayRadius" class="col-md-2 control-label"><?php echo _("Value display radius (%)"); ?></label>');
                                newInnerDiv = $('<div class="col-md-3"></div>');
                                var newControl = $('<input id="addKnobDisplayRadius" name="addKnobDisplayRadius" data-slider-id="addKnobDisplayRadiusSlider" type="text" data-slider-min="1" data-slider-max="100" data-slider-step="1"/>');
                                newInnerDiv.append(newControl);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow.find('#addKnobIndicatorRadius').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 15    
                                });
                                
                                newFormRow.find('#addKnobDisplayRadius').bootstrapSlider({
                                    formatter: function(value) {
                                       return value + "%";
                                    },
                                    value: 30    
                                });
                                
                                newFormRow = $('<div class="row"></div>');
                                newLabel = $('<label for="addKnobStartAngle" class="col-md-2 control-label"><?php echo _("Start angle"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" name="addKnobStartAngle" class="form-control" id="addKnobStartAngle" value="230"/>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addKnobEndAngle" class="col-md-2 control-label"><?php echo _("End angle"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" name="addKnobEndAngle" class="form-control" id="addKnobEndAngle" value="130"/>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                newLabel = $('<label for="addKnobDomainType" class="col-md-2 control-label">Domain type</label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<select name="addKnobDomainType" id="addKnobDomainType" class="form-control"/>');
                                newInput.append('<option value="continuous">Continuous</option>');
                                //newInput.append('<option value="discreet">Discreet</option>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addKnobDisplayColor" class="col-md-2 control-label"><?php echo _("Display color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addKnobDisplayColor"><input type="text" name="addKnobDisplayColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(0, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                //La precisione la mettiamo fra i parameters, non fra gli style parameters
                                newFormRow = $('<div class="row"></div>');
                                var dataPrecision = null;
                                
                                newLabel = $('<label for="addKnobDataPrecision" class="col-md-2 control-label">Data precision</label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" name="addKnobDataPrecision" class="form-control" id="addKnobDataPrecision" value="2" data-param="addKnobDataPrecision"/>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                $('#entityAttrType').change(function(){
                                    if($('#entityAttrType').val() === 'Float')
                                    {
                                        $('label[for=addKnobDataPrecision]').show();
                                        $('#addKnobDataPrecision').parents('div.col-md-4').show();
                                        $('#addKnobDataPrecision').show();
                                        addKnobParameters.dataPrecision = parseInt($('#addKnobDataPrecision').val());
                                    }
                                    else
                                    {
                                        $('label[for=addKnobDataPrecision]').hide();
                                        $('#addKnobDataPrecision').parents('div.col-md-4').hide();
                                        $('#addKnobDataPrecision').hide();
                                        addKnobParameters.dataPrecision = null;
                                    }
                                    $("#parameters").val(JSON.stringify(addKnobParameters));
                                });
                                
                                newLabel = $('<label for="addKnobTicksColor" class="col-md-2 control-label">Ticks color</label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addKnobTicksColor"><input type="text" name="addKnobTicksColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(191, 191, 191, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                if($('#entityAttrType').val() === 'Float')
                                {
                                    $('label[for=addKnobDataPrecision]').show();
                                    $('#addKnobDataPrecision').parents('div.col-md-4').show();
                                    $('#addKnobDataPrecision').show();
                                    dataPrecision = parseInt($('#addKnobDataPrecision').val());
                                }
                                else
                                {
                                    $('label[for=addKnobDataPrecision]').hide();
                                    $('#addKnobDataPrecision').parents('div.col-md-4').hide();
                                    $('#addKnobDataPrecision').hide();
                                    dataPrecision = null;
                                }
                                
                                newFormRow = $('<div class="row"></div>');
                                newLabel = $('<label for="addKnobMinValue" class="col-md-2 control-label"><?php echo _("Min value"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" name="addKnobMinValue" class="form-control" id="addKnobMinValue" value="0" data-param="addKnobMinValue"/>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addKnobMaxValue" class="col-md-2 control-label"><?php echo _("Max value"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" name="addKnobMaxValue" class="form-control" id="addKnobMaxValue" value="100" data-param="addKnobMaxValue"/>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                newLabel = $('<label for="addKnobLabelsFontSize" class="col-md-2 control-label"><?php echo _("Labels font size"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" name="addKnobLabelsFontSize" class="form-control" id="addKnobLabelsFontSize" value="10" data-param="addKnobLabelsFontSize"/>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                newLabel = $('<label for="addKnobLabelsFontColor" class="col-md-2 control-label"><?php echo _("Labels font color"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<div class="input-group colorPicker" id="addKnobLabelsFontColor"><input type="text" name="addKnobLabelsFontColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                newInput.colorpicker({color: "rgba(0, 0, 0, 1)", format: "rgba"});
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                newFormRow = $('<div class="row"></div>');
                                newLabel = $('<label for="addKnobIncreaseValue" class="col-md-2 control-label"><?php echo _("Increase value"); ?></label>');
                                newInnerDiv = $('<div class="col-md-4"></div>');
                                newInput = $('<input type="text" name="addKnobIncreaseValue" class="form-control" id="addKnobIncreaseValue" value="10" data-param="addKnobIncreaseValue"/>');
                                newInnerDiv.append(newInput);
                                newFormRow.append(newLabel);
                                newFormRow.append(newInnerDiv);
                                $('#specificWidgetPropertiesDiv').append(newFormRow);
                                
                                //Contenitore per tabella delle soglie
                                var addKnobColorsTableContainer = $('<div id="addKnobColorsTableContainer" class="row rowCenterContent"></div>');
                                var addKnobColorsTable = $("<table id='addKnobColorsTable' class='table table-bordered table-condensed thrRangeTable'><col style='width:25%'><col style='width:25%'><col style='width:40%'><col style='width:10%'><tr><td>Min</td><td>Max</td><td>Range color</td><td><a href='#'><i class='fa fa-plus' style='font-size:24px;color:#337ab7'></i></a></td></tr></table>");
                                addKnobColorsTableContainer.append(addKnobColorsTable);
                                $("#specificWidgetPropertiesDiv").append(addKnobColorsTableContainer);
                                
                                var addKnobParameters = {
                                    domainType: $('#addKnobDomainType').val(),
                                    
                                    //Parametri per il continuo
                                    minValue: $('#addKnobMinValue').val(),
                                    maxValue: $('#addKnobMaxValue').val(),
                                    continuousRanges: null,
                                    dataPrecision: dataPrecision
                                    
                                    //TBD - Parametri per il discreto
                                };
                                
                                $("#parameters").val(JSON.stringify(addKnobParameters));
                                
                                $('#addKnobMinValue').on('input', updateAddKnobParams);
                                $('#addKnobMaxValue').on('input', updateAddKnobParams);
                                $('#addKnobDataPrecision').on('input', updateAddKnobParams);

                                $("#addKnobColorsTable i.fa-plus").click(function(){
                                    var newRangeObj = {
                                        min: 0,
                                        max: 0,
                                        color: "#009ddc"
                                    };
                                    
                                    if(addKnobParameters.continuousRanges === null)
                                    {
                                        addKnobParameters.continuousRanges = [];
                                    }
                                    
                                    addKnobParameters.continuousRanges.push(newRangeObj);
                                    $('#parameters').val(JSON.stringify(addKnobParameters));
                                    
                                    var newTableRow = $('<tr></tr>');
                                    newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="min">0</a></td>');
                                    newTableCell.find('a').editable();
                                    newTableRow.append(newTableCell);
                                    
                                    newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="max">0</a></td>');
                                    newTableCell.find('a').editable();
                                    newTableRow.append(newTableCell);
                                    
                                    newTableCell = $('<td><div class="input-group colorPicker" data-param="color"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                    newTableRow.append(newTableCell);
                                    newTableRow.find('div.colorPicker').colorpicker({color: "#009ddc", format: "rgba"});
                                    //UPDATE DEI PARAMETRI AL CLOSE PICKER
                                    newTableRow.find('div.colorPicker').on('hidePicker', updateAddKnobParams);
                                    
                                    newTableCell = $('<td><a><i class="fa fa-close" style="font-size:24px;color:red"></i></a></td>');
                                    //ELIMINAZIONE RIGA 
                                    newTableCell.find('i').click(delAddKnobRange);
                                    newTableRow.append(newTableCell);
                                    //UPDATE DEI PARAMETRI AL CHANGE VALUES
                                    newTableRow.find('a.toBeEdited').on('save', updateAddKnobParams);
                                    
                                    $("#addKnobColorsTable").append(newTableRow);
                                });
                                
                                function updateAddKnobParams(e, params)
                                {
                                    var param = $(this).attr('data-param');
                                    var rowIndex = $(this).parents("tr").index() - 1;
                                    var newValue = null;
                                    
                                    switch(param)
                                    {
                                        case "addKnobMinValue":
                                            newValue = $(this).val();
                                            addKnobParameters.minValue = newValue;
                                            break;
                                        
                                        case "addKnobMaxValue":
                                            newValue = $(this).val();
                                            addKnobParameters.maxValue = newValue;
                                            break;
                                            
                                        case "min":
                                            newValue = params.newValue;
                                            addKnobParameters.continuousRanges[rowIndex].min = newValue;
                                            break;
                                            
                                        case "max":
                                            newValue = params.newValue;
                                            addKnobParameters.continuousRanges[rowIndex].max = newValue;
                                            break;
                                            
                                        case "color":
                                            newValue = $(this).colorpicker('getValue');
                                            addKnobParameters.continuousRanges[rowIndex].color = newValue;
                                            break;
                                            
                                        case "addKnobDataPrecision":
                                            newValue = parseInt($(this).val());
                                            addKnobParameters.dataPrecision = newValue;
                                            break;
                                    }
                                    
                                    $('#parameters').val(JSON.stringify(addKnobParameters));
                                    //console.log($('#parameters').val());
                                }
                                
                                function delAddKnobRange(e)
                                {
                                    var delIndex = parseInt($(this).parents('tr').index() - 1);
                                    
                                    //Cancellazione della riga dalla tabella 
                                    $(this).parents('tr').remove();
                                    
                                    //Aggiornamento JSON parametri
                                    addKnobParameters.continuousRanges.splice(delIndex, 1);
                                    if(addKnobParameters.continuousRanges.length === 0)
                                    {
                                        addKnobParameters.continuousRanges = null;
                                    }
                                    
                                    $('#parameters').val(JSON.stringify(addKnobParameters));
                                    //console.log($('#parameters').val());
                                }
                                
                                break;
                                
                            default: 

                                break;
                        }
                    });
                    
                    $('#widgetAttributeM').change(function(){
                        $.ajax({
                            url: "iframeProxy.php",
                            data: {
                                action: "getActuatorWidgetTypes", 
                                type: $('#widgetAttributeM option:selected').attr('data-type')
                            },
                            type: "GET",
                            async: true,
                            dataType: 'json',
                            success: function (data) 
                            {
                                $('#widgetActuatorTypeM').empty();
                                
                                for(var key in data.list)
                                {
                                    $('#widgetActuatorTypeM').append('<option value="' + data.list[key].id_type_widget + '" data-min_row="' + data.list[key].min_row + '" + data-max_row="' + data.list[key].max_row + '" data-min_col="' + data.list[key].min_col + '" data-max_col="' + data.list[key].max_col + '">' + data.list[key].id_type_widget + '</option>')
                                }
                                
                                $('#widgetActuatorTypeM').val(-1);
                            },
                            error: function(data)
                            {
                                console.log("Ko");
                                console.log(data);
                            }
                        });    
                    });
                    
                    $('#widgetActuatorType').change(function(){
                        var minRow, maxRow, minCol, maxCol = null;
                        minRow = parseInt($('#widgetActuatorType option:selected').attr("data-min_row"));
                        maxRow = parseInt($('#widgetActuatorType option:selected').attr("data-max_row"));
                        minCol = parseInt($('#widgetActuatorType option:selected').attr("data-min_col"));
                        maxCol = parseInt($('#widgetActuatorType option:selected').attr("data-max_col"));
                        
                        $('#inputSizeRowsWidget').empty();
                        
                        for(var i = minRow; i <= maxRow; i++)
                        {
                            $('#inputSizeRowsWidget').append('<option value="' + i + '">' + i + '</option>');
                        }
                        
                        $('#inputSizeColumnsWidget').empty();
                        
                        for(var i = minCol; i <= maxCol; i++)
                        {
                            $('#inputSizeColumnsWidget').append('<option value="' + i + '">' + i + '</option>');
                        }
                    });
                    
                    $('#widgetActuatorTypeM').change(function(){
                        var minRow, maxRow, minCol, maxCol = null;
                        minRow = parseInt($('#widgetActuatorTypeM option:selected').attr("data-min_row"));
                        maxRow = parseInt($('#widgetActuatorTypeM option:selected').attr("data-max_row"));
                        minCol = parseInt($('#widgetActuatorTypeM option:selected').attr("data-min_col"));
                        maxCol = parseInt($('#widgetActuatorTypeM option:selected').attr("data-max_col"));
                        
                        $('#inputRows-m').empty();
                        
                        for(var i = minRow; i <= maxRow; i++)
                        {
                            $('#inputRows-m').append('<option value="' + i + '">' + i + '</option>');
                        }
                        
                        $('#inputColumn-m').empty();
                        
                        for(var i = minCol; i <= maxCol; i++)
                        {
                            $('#inputColumn-m').append('<option value="' + i + '">' + i + '</option>');
                        }
                    });
                    
                   //Listener cambio metrica in aggiunta widget - Metriche node red
                    $('#select-metricNR').change(updateSelectedMetricNR = function () 
                    {
                        var value_text = "";
                        
                        for(var j = 0; j < array_metricsNR.length; j++) 
                        {
                            if(array_metricsNR[j]['metricName'] === $("#select-metricNR").val()) 
                            {
                                value_text += "Description: " + array_metricsNR[j]['descShort'] + ".\n";
                                value_text += "Metric type: " + array_metricsNR[j]['type'] + ".\n";
                                metricType = array_metricsNR[j]['type'];
                                $("#textarea-metric-cNR").val(value_text);
                                
                                if($("#select-widgetNR").is(':enabled')) 
                                {
                                    $("#select-widgetNR").empty();
                                    for (var k = 0; k < array_metricsNR[j]['widgets'].length; k++) 
                                    {
                                        $("#select-widgetNR").append('<option>' + array_metricsNR[j]['widgets'][k]['id_type_widget'] + '</option>');
                                    }
                                    
                                    update_select_widget();
                                }
                            }
                        }
                    }).change();
                    
                    
                   //Listener cambio metrica in aggiunta widget - Metriche tradizionali
                    $('#select-metric').change(updateSelectedMetric = function () 
                    {
                        var str = "";
                        $("#select-metric option:selected").each(function () {
                            str += $(this).text();
                        });
                        var value_text = "";
                        for (var j = 0; j < array_metrics.length; j++) 
                        {
                            if(array_metrics[j]['id'] == str) 
                            {
                                if (str == "Selector") {
                                    $("#specificWidgetPropertiesDiv").css("width", "100%");
                                }
                                value_text += "Description: " + array_metrics[j]['desc'] + ".\n";
                                value_text += "Metric Typology: " + array_metrics[j]['type'] + ".\n";
                                metricType = array_metrics[j]['type'];
                                value_text += "Data Area: " + array_metrics[j]['area'] + ".\n";
                                value_text += "Data Source: " + array_metrics[j]['source'] + ".\n";
                                value_text += "Refresh rate: " + array_metrics[j]['freq'] + " s\n";
                                value_text += "Status: " + array_metrics[j]['status'] + ".";
                                $("#textarea-metric-c").val(value_text);
                                $("#inputFreqWidget").val(array_metrics[j]['freq']);
                                if((array_metrics[j]['type'] === 'isAlive')&&(array_metrics[j]['processType'] === 'checkStatus'))
                                {                        
                                    queryFieldFromDb = JSON.parse(array_metrics[j]['query']).url;                              
                                }

                                if($("#select-widget").is(':enabled')) 
                                {
                                    $("#select-widget").find('option').remove().end();
                                    for (var k = 0; k < array_metrics[j]['widgets'].length; k++) 
                                    {
                                        $("#select-widget").append('<option>' + array_metrics[j]['widgets'][k]['id_type_widget'] + '</option>');
                                    }
                                    
                                    update_select_widget();
                                }
                            }
                        }
                    }).change();
                    
                    $('#inputSchedulerWidget').change(update_select_scheduler = function () 
                    {
                        if($('#inputSchedulerWidget').css("display") !== "none")
                        {
                            var selectedIndex = $('#inputSchedulerWidget').prop('selectedIndex');
                            switch(selectedIndex)
                            {
                                case 0:
                                    $('#inputUrlWidget').val('https://192.168.0.69/sce/');
                                    break;
                                    
                                case 1:
                                    $('#inputUrlWidget').val('https://192.168.0.23/sce/');
                                    break;
                                    
                                case 2:
                                    $('#inputUrlWidget').val('https://192.168.0.71/sce/');
                                    break;
                            }
                            $("#schedulerName").val(elencoScheduler[selectedIndex].name);
                            $("#host").val(elencoScheduler[selectedIndex].ip);
                            $("#user").val(elencoScheduler[selectedIndex].user);
                            $("#pass").val(elencoScheduler[selectedIndex].pass);
                            $.ajax({
                                url: "get_data.php",
                                data: {action: "getJobAreas", schedulerId: elencoScheduler[selectedIndex].id},
                                type: "GET",
                                async: false,
                                dataType: 'json',
                                success: function (data) 
                                {
                                    $('#inputJobsAreasWidget').empty();
                                    $('#inputJobsGroupsWidget').empty();
                                    $('#inputJobsNamesWidget').empty();
                                    if(data[0].id === "none")
                                    {
                                        //Nessuna JOBS AREA
                                        $('#jobsAreasRow').css("display", "none");
                                        $("label[for='inputJobsAreasWidget']").css("display", "none");
                                        $('#inputJobsAreasWidgetDiv').css("display", "none");
                                        $('#inputJobsAreasWidgetGroupDiv').css("display", "none");
                                        $('#inputJobsAreasWidget').css("display", "none");
                                        
                                        //Caricamento dei jobs groups per lo scheduler selezionato.
                                        for(var i = 0; i < elencoJobsGroupsPerScheduler[selectedIndex].length; i++)
                                        {
                                            $('#inputJobsGroupsWidget').append('<option>' + elencoJobsGroupsPerScheduler[selectedIndex][i] + '</option>');
                                        }
                                        
                                        //Viene mostrato il campo per i jobs groups dello scheduler selezionato
                                        $('#jobsGroupsRow').css("display", "");
                                        $('#inputJobsGroupsWidgetGroupDiv').css("display", "");
                                        $('#inputJobsGroupsWidgetDiv').css("display", "");
                                        $("label[for='inputJobsGroupsWidget']").css("display", "");
                                        $('#inputJobsGroupsWidget').css("display", "");
                                        $('#inputJobsGroupsWidget').prop('selectedIndex', -1);
                                        
                                        //Viene mostrato il campo dei jobs names per il group selezionato
                                        $('#jobsNamesRow').css("display", "");
                                        $('#inputJobsNamesWidgetDiv').css("display", "");
                                        $('#inputJobsNamesWidgetGroupDiv').css("display", "");
                                        $("label[for='inputJobsNamesWidget']").css("display", "");
                                        $('#inputJobsNamesWidget').css("display", "");
                                        $('#inputJobsNamesWidget').prop('selectedIndex', -1);
                                    }
                                    else
                                    {
                                        //Ramo con le jobs areas
                                        
                                        //Non mostrare i job groups per scheduler
                                        $('#jobsGroupsRow').css("display", "none");
                                        $('#inputJobsGroupsWidgetGroupDiv').css("display", "none");
                                        $('#inputJobsGroupsWidgetDiv').css("display", "none");
                                        $("label[for='inputJobsGroupsWidget']").css("display", "none");
                                        $('#inputJobsGroupsWidget').css("display", "none");
                                        
                                        //Mostrare le JOBS AREAS
                                        $('#jobsAreasRow').css("display", "");
                                        $("label[for='inputJobsAreasWidget']").css("display", "");
                                        $('#inputJobsAreasWidgetDiv').css("display", "");
                                        $('#inputJobsAreasWidgetGroupDiv').css("display", "");
                                        $('#inputJobsAreasWidget').css("display", "");
                                        for(var i = 0; i < data.length; i++)
                                        {
                                            $('#inputJobsAreasWidget').append('<option>' + data[i]['name'] + '</option>');
                                        }
                                        $('#inputJobsAreasWidget').prop("selectedIndex", -1);
                                        
                                        //Viene mostrato il campo per i jobs groups della job area selezionata
                                        $('#jobsGroupsRow').css("display", "");
                                        $('#inputJobsGroupsWidgetGroupDiv').css("display", "");
                                        $('#inputJobsGroupsWidgetDiv').css("display", "");
                                        $("label[for='inputJobsGroupsWidget']").css("display", "");
                                        $('#inputJobsGroupsWidget').css("display", "");
                                        $('#inputJobsGroupsWidget').prop('selectedIndex', -1);
                                    }

                                },
                                error: function(errorMsg) 
                                {
                                   console.log("Error calling get_data.php --> getJobAreas");
                                   console.log(errorMsg);
                                }
                            });    
                        }
                    }).change();
                    
                    
                    $('#inputJobsAreasWidget').change(update_select_scheduler = function ()
                    {
                       if($('#inputJobsAreasWidget').css("display") !== "none")
                       {
                           $("#jobArea").val($('#inputJobsAreasWidget').val());
                           $('#inputJobsGroupsWidget').empty();
                           var selectedSchedulerIndex = $('#inputSchedulerWidget').prop('selectedIndex');
                           var areaSelected = $('#inputJobsAreasWidget').val();
                           var keyword = null;
                           switch(areaSelected)
                           {
                                case "Stato linee ATAF":
                                   keyword = "linea";
                                   break;
                                   
                                case "Check RT":
                                   keyword = "check";
                                   break;
                                   
                                case "Eventi a Firenze":
                                   keyword = "Eventi";
                                   break;
                                   
                                case "Parcheggi":
                                   keyword = "parcheggi";
                                   break;
                                   
                                case "Previsioni meteo":
                                   keyword = "meteo";
                                   break;
                                   
                                case "Sensori":
                                   keyword = "sensori";
                                   break;   
                           }
                           $.ajax({
                                url: "getJobs.php",
                                data: {action: "getJobGroupsForJobArea", 
                                       host: elencoScheduler[selectedSchedulerIndex].ip, 
                                       user: elencoScheduler[selectedSchedulerIndex].user, 
                                       pass: elencoScheduler[selectedSchedulerIndex].pass,
                                       keyword: keyword
                                   },
                                type: "POST",
                                async: false,
                                dataType: 'json',
                                success: function (data) 
                                {
                                    for(var j = 0; j < data.length; j++) 
                                    {
                                        $('#inputJobsGroupsWidget').append('<option>' + data[j].jobGroup + '</option>');
                                    }
                                    $('#inputJobsGroupsWidget').prop('selectedIndex', -1);
                                    //Viene mostrato il campo dei jobs names per il group selezionato
                                    $('#jobsNamesRow').css("display", "");
                                    $('#inputJobsNamesWidgetDiv').css("display", "");
                                    $('#inputJobsNamesWidgetGroupDiv').css("display", "");
                                    $("label[for='inputJobsNamesWidget']").css("display", "");
                                    $('#inputJobsNamesWidget').css("display", "");
                                    $('#inputJobsNamesWidget').prop('selectedIndex', -1);
                                }
                            });
                           
                       }
                    }).change();
                    
                    
                    $('#inputJobsGroupsWidget').change(update_select_scheduler = function () 
                    {
                        if($('#inputJobsGroupsWidget').css("display") !== "none")
                        {
                            $('#inputJobsNamesWidget').empty();
                            var selectedScheduler = $('#inputSchedulerWidget').prop('selectedIndex');
                            var selectedGroup = $('#inputJobsGroupsWidget').val();
                            $("#jobGroup").val(selectedGroup);
                            
                            //Reperimento elenco dei jobs names per il job group selezionato
                            $.ajax({
                                url: "getJobs.php",
                                data: {
                                    action: "getJobNamesForJobGroup", 
                                    host: elencoScheduler[selectedScheduler].ip, 
                                    user: elencoScheduler[selectedScheduler].user, 
                                    pass: elencoScheduler[selectedScheduler].pass,
                                    jobGroup: selectedGroup
                                },
                                type: "POST",
                                async: false,
                                dataType: 'json',
                                success: function (data) 
                                {
                                    for(var j = 0; j < data.length; j++) 
                                    {
                                        $('#inputJobsNamesWidget').append('<option>' + data[j].jobName + '</option>');
                                    }
                                    $('#inputJobsNamesWidget').prop('selectedIndex', -1);
                                },
                                error: function (errorMsg) 
                                {
                                   console.log("Error calling get_data.php --> getJobNamesForJobGroup");
                                   console.log(errorMsg);
                                }
                            });
                        }
                    }).change();
                    
                   
                    $('#inputJobsNamesWidget').change(update_select_scheduler = function () 
                    {
                        if($('#inputJobsNamesWidget').css("display") !== "none")
                        {
                            $('#jobName').val($('#inputJobsNamesWidget').val());
                        }
                    }).change();
                    
                    update_select_widget = function(evt)
                    {
                        var dimMapRaw, dimMap, metricSelectElement, widgetSelectElement, metricsArray, metricNameField = null;
                        
                        if($('#select-metric').is(':visible'))
                        {
                            metricSelectElement = $('#select-metric');
                            widgetSelectElement = $('#select-widget');
                            metricsArray = array_metrics;
                            metricNameField = 'id';
                        }
                        else
                        {
                            if($('#select-metricNR').is(':visible'))
                            {
                                metricSelectElement = $('#select-metricNR');
                                widgetSelectElement = $('#select-widgetNR');
                                metricsArray = array_metricsNR;
                                metricNameField = 'metricName';
                            }
                        }
                        
                            //Quando si cambia il widget selezionato di default le righe delle dimensioni devono essere vuote per impedire che si accumulino valori. Tanto si rimepie ad ogni change
                            $("#inputSizeRowsWidget").empty();
                            $("#inputSizeColumnsWidget").empty();
                            
                            $("#inputComuneRow").hide();
                            $("#inputUdmPosition").val(-1);
                            
                            $("#inputFirstAidRow").hide();
                            $("#inputFirstAidRow").val(-1);
                            
                            $('label[for=inputFontSize]').html('Content font size');
                            
                            for(var i = 0; i < metricsArray.length; i++) 
                            {
                                if(decodeURIComponent(metricsArray[i][metricNameField]) === metricSelectElement.find('option:selected').text()) 
                                {
                                    for(var k = 0; k < metricsArray[i]['widgets'].length; k++) 
                                    {
                                        if(metricsArray[i]['widgets'][k]['id_type_widget'] === widgetSelectElement.find('option:selected').text()) 
                                        {
                                            //creare un elenco di dimensioni minime e massime di colonne dei widget
                                            var minR = parseInt(metricsArray[i]['widgets'][k]['size_rows_widget']);
                                            var maxR = parseInt(metricsArray[i]['widgets'][k]['max_rows_widget']);
                                            var minC = parseInt(metricsArray[i]['widgets'][k]['size_columns_widget']);
                                            var maxC = parseInt(metricsArray[i]['widgets'][k]['max_columns_widget']);
                                            
                                            var range_value = parseInt(metricsArray[i]['widgets'][k]['numeric_range']);
                                            dimMapRaw = (metricsArray[i]['widgets'][k]['dimMap']);
                                            if((dimMapRaw !== null) && (dimMapRaw !== "null") && (typeof dimMapRaw !== "undefined") && (dimMapRaw !== ""))
                                            {
                                                dimMap = JSON.parse(dimMapRaw);
                                            }

                                            
                                            //Per ora lasciamo così, dà un bug il ramo dell'else
                                            if(/*dimMap === null*/true)
                                            {
                                                $("#inputSizeRowsWidget").off();
                                                if (minR === maxR)
                                                {
                                                    $("#inputSizeRowsWidget").append('<option>' + minR + '</option>');
                                                } 
                                                else
                                                {
                                                    for(var n = minR; n <= maxR; n++)
                                                    {
                                                        $("#inputSizeRowsWidget").append('<option>' + n + '</option>');
                                                    }

                                                }
                                                if (minC === maxC)
                                                {
                                                    $("#inputSizeColumnsWidget").append('<option>' + minC + '</option>');
                                                } 
                                                else
                                                {
                                                    for (var p = minC; p <= maxC; p++)
                                                    {
                                                        $("#inputSizeColumnsWidget").append('<option>' + p + '</option>');
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                var z;
                                                var selectedIndex = null;
                                                $("#inputSizeRowsWidget").empty();
                                                $("#inputSizeColumnsWidget").empty();
                                                for(z = 0; z < dimMap.dimMap.length; z++)
                                                {
                                                    $("#inputSizeRowsWidget").append('<option>' + dimMap.dimMap[z].rows + '</option>');
                                                }

                                                $("#inputSizeColumnsWidget").append('<option>' + dimMap.dimMap[0].cols + '</option>');

                                                $("#inputSizeRowsWidget").off();

                                                $("#inputSizeRowsWidget").change(function() {
                                                    selectedIndex = $("#inputSizeRowsWidget").prop("selectedIndex");
                                                    $("#inputSizeColumnsWidget").empty();
                                                    $("#inputSizeColumnsWidget").append('<option>' + dimMap.dimMap[selectedIndex].cols + '</option>');
                                                });

                                            }

                                            //$("#add-n-metrcis-widget").text("max " + metricsArray[i]['widgets'][k]['number_metrics_widget'] + " metrics");

                                            if((widgetSelectElement.find('option:selected').text() === "widgetTimeTrend") || (widgetSelectElement.find('option:selected').text() === "widgetTimeTrendCompare")) 
                                            {
                                                $('#select-IntTemp-Widget').empty();
                                                $('#select-IntTemp-Widget').append('<option value="4 Ore">4 Hours</option>');
                                                $('#select-IntTemp-Widget').append('<option value="12 Ore">12 Hours</option>');
                                                $('#select-IntTemp-Widget').append('<option value="Giornaliera">Daily</option>');
                                                $('#select-IntTemp-Widget').append('<option value="Settimanale">Weekly</option>');
                                                $('#select-IntTemp-Widget').append('<option value="Mensile">Monthly</option>');
                                                $('#select-IntTemp-Widget').append('<option value="Semestrale">6 Months</option>');
                                                $('#select-IntTemp-Widget').append('<option value="Annuale">Yearly</option>');
                                                $('#select-IntTemp-Widget').append('<option value="2 Anni">2 Years</option>');
                                                $('#select-IntTemp-Widget').append('<option value="10 Anni">10 Years</option>');
                                            } 
                                            else 
                                            {
                                                $('#select-IntTemp-Widget').empty();
                                                $('#select-IntTemp-Widget').append('<option value="Nessuno"><?php echo _("No"); ?></option>');
                                            }
                                        }
                                    }
                                }
                            }//Fine del for

                            //Nuovo codice per form personalizzato: espanderlo con altri case via via che si implementa il form personalizzato.
                            //Titolo obbligatorio per tutti
                            $('#inputTitleWidget').prop('required', true);
                            
                            //Opzioni menu aggiunta widget
                            switch(widgetSelectElement.val()) {
                                case "widgetSpeedLimit":
                                    $("label[for='inputComuneWidget']").css("display", "");
                                    $("#bckColorLabel").html("Background color");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputUrlWidget').attr('disabled', true);
                                    $('#inputUrlWidget').prop('required', false);
                                    $('#inputFontSize').val("24");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $("#schedulerRow").hide();
                                    $("label[for='inputSchedulerWidget']").hide();
                                    $('#inputSchedulerWidgetDiv').hide();
                                    $('#inputSchedulerWidgetGroupDiv').hide();
                                    $('#inputSchedulerWidget').hide();
                                    $('#inputSchedulerWidget').prop('selectedIndex', -1);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    newLabel = $('<label for="speedLimitEntityId" class="col-md-2 control-label"><?php echo _("Entity ID"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-4"></div>');
                                    newControl = $('<input type="text" name="speedLimitEntityId" class="form-control" id="speedLimitEntityId"/>');
                                    newInnerDiv.append(newControl);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    newLabel = $('<label for="speedLimitAttributeName" class="col-md-2 control-label"><?php echo _("Attribute name"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-4"></div>');
                                    newControl = $('<input type="text" name="speedLimitAttributeName" class="form-control" id="speedLimitAttributeName"/>');
                                    newInnerDiv.append(newControl);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    newLabel = $('<label for="speedLimitUpdateTime" class="col-md-2 control-label"><?php echo _("Update time(s)"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-4"></div>');
                                    newControl = $('<input type="text" name="speedLimitUpdateTime" class="form-control" id="speedLimitUpdateTime" value="2"/>');
                                    newInnerDiv.append(newControl);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    var currentParams = {
                                        entityId: null,
                                        attributeName: null,
                                        updateTime: 2
                                    };

                                    $("#parameters").val(JSON.stringify(currentParams));

                                    $('#specificWidgetPropertiesDiv #speedLimitEntityId').on('input', function (e) {
                                        currentParams.entityId = $('#specificWidgetPropertiesDiv #speedLimitEntityId').val()
                                        $("#parameters").val(JSON.stringify(currentParams));
                                    });

                                    $('#specificWidgetPropertiesDiv #speedLimitAttributeName').on('input', function (e) {
                                        currentParams.attributeName = $('#specificWidgetPropertiesDiv #speedLimitAttributeName').val()
                                        $("#parameters").val(JSON.stringify(currentParams));
                                    });

                                    $('#specificWidgetPropertiesDiv #speedLimitUpdateTime').on('input', function (e) {
                                        currentParams.updateTime = $('#specificWidgetPropertiesDiv #speedLimitUpdateTime').val()
                                        $("#parameters").val(JSON.stringify(currentParams));
                                    });
                                    break;

                                case "widgetLightBulb":
                                    $("label[for='inputComuneWidget']").css("display", "");
                                    $("#bckColorLabel").html("Background color");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputUrlWidget').attr('disabled', true);
                                    $('#inputUrlWidget').prop('required', false);
                                    $('#inputFontSize').val("");
                                    $('#inputFontSize').attr('disabled', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $("#schedulerRow").hide();
                                    $("label[for='inputSchedulerWidget']").hide();
                                    $('#inputSchedulerWidgetDiv').hide();
                                    $('#inputSchedulerWidgetGroupDiv').hide();
                                    $('#inputSchedulerWidget').hide();
                                    $('#inputSchedulerWidget').prop('selectedIndex', -1);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFontSize').val("");
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    newFormRow = $('<div class="row"></div>');
                                    newLabel = $('<label for="trafficLightEntityId" class="col-md-2 control-label"><?php echo _("Entity ID"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-4"></div>');
                                    newControl = $('<input type="text" name="trafficLightEntityId" class="form-control" id="trafficLightEntityId"/>');
                                    var currentParams = {
                                        entityId: null
                                    };
                                    $("#parameters").val(JSON.stringify(currentParams));
                                    newControl.on('input', function (e) {
                                        currentParams.entityId = newControl.val()
                                        $("#parameters").val(JSON.stringify(currentParams));
                                    });
                                    newInnerDiv.append(newControl);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    break;

                                case "widgetTrafficLight":
                                    $("label[for='inputComuneWidget']").css("display", "");
                                    $("#bckColorLabel").html("Background color");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputUrlWidget').attr('disabled', true);
                                    $('#inputUrlWidget').prop('required', false);
                                    $('#inputFontSize').val("");
                                    $('#inputFontSize').attr('disabled', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $("#schedulerRow").hide();
                                    $("label[for='inputSchedulerWidget']").hide();
                                    $('#inputSchedulerWidgetDiv').hide();
                                    $('#inputSchedulerWidgetGroupDiv').hide();
                                    $('#inputSchedulerWidget').hide();
                                    $('#inputSchedulerWidget').prop('selectedIndex', -1);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFontSize').val("");
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="trafficLightEntityId" class="col-md-2 control-label"><?php echo _("Entity ID"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-4"></div>');
                                    newControl = $('<input type="text" name="trafficLightEntityId" class="form-control" id="trafficLightEntityId"/>');
                                    newInnerDiv.append(newControl);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    newLabel = $('<label for="trafficLightAttributeName" class="col-md-2 control-label"><?php echo _("Attribute name"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-4"></div>');
                                    newControl = $('<input type="text" name="trafficLightAttributeName" class="form-control" id="trafficLightAttributeName"/>');
                                    newInnerDiv.append(newControl);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="trafficLightUpdateTime" class="col-md-2 control-label"><?php echo _("Update time(s)"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-4"></div>');
                                    newControl = $('<input type="text" name="trafficLightUpdateTime" class="form-control" id="trafficLightUpdateTime" value="2"/>');
                                    newInnerDiv.append(newControl);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    var currentParams = {
                                        entityId: null,
                                        attributeName: null,
                                        updateTime: 2
                                    };
                                    $("#parameters").val(JSON.stringify(currentParams));

                                    $('#specificWidgetPropertiesDiv #trafficLightEntityId').on('input', function (e) {
                                        currentParams.entityId = $('#specificWidgetPropertiesDiv #trafficLightEntityId').val();
                                        $("#parameters").val(JSON.stringify(currentParams));
                                    });

                                    $('#specificWidgetPropertiesDiv #trafficLightAttributeName').on('input', function (e) {
                                        currentParams.attributeName = $('#specificWidgetPropertiesDiv #trafficLightAttributeName').val();
                                        $("#parameters").val(JSON.stringify(currentParams));
                                    });

                                    $('#specificWidgetPropertiesDiv #trafficLightUpdateTime').on('input', function (e) {
                                        currentParams.updateTime = $('#specificWidgetPropertiesDiv #trafficLightUpdateTime').val();
                                        $("#parameters").val(JSON.stringify(currentParams));
                                    });
                                    break;

                                case "widgetServerStatus":
                                    $("label[for='inputComuneWidget']").css("display", "");
                                    $("#bckColorLabel").html("Background color");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputUrlWidget').attr('disabled', false);
                                    $('#inputUrlWidget').prop('required', true);
                                    $('#inputUrlWidget').val(queryFieldFromDb);
                                    $('#inputFontSize').val("");
                                    $('#inputFontSize').attr('disabled', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $("#schedulerRow").show();
                                    $("label[for='inputSchedulerWidget']").hide();
                                    $('#inputSchedulerWidgetDiv').hide();
                                    $('#inputSchedulerWidgetGroupDiv').hide();
                                    $('#inputSchedulerWidget').hide();
                                    $('#inputSchedulerWidget').prop('selectedIndex', -1);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFontSize').val("");
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    addWidgetServerStatusNotificatorAndThresholdFields();
                                    break;

                                case "widgetSelectorWeb":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("16");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("#000000");
                                    $('#inputFontColor').attr('disabled', false);
                                    $('#inputFontColor').prop('required', true);
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', true);
                                    $('#inputFreqWidget').val("");
                                    $('#inputFreqWidget').prop('required', false);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    var addGisParameters = {
                                        queries: [],
                                        targets: []
                                    };
                                    setAddGisParameters(addGisParameters);
                                    $("#parameters").val(JSON.stringify(addGisParameters));

                                    //Target widgets geolocation
                                    newFormRow = $('<div class="row"></div>');
                                    newLabel = $('<label for="addGisGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Map widgets"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-4"></div>');
                                    newSelect = $('<select name="addGisGeolocationWidgets" class="form-control" id="addGisGeolocationWidgets" multiple></select>');

                                    var widgetId, widgetTitle = null;
                                    var widgetsNumber = 0;
                                    var targetsJson = [];

                                    $("li.gs_w").each(function () {
                                        //if($(this).attr("id").includes("ExternalContent")&&($(this).find("div.widget").attr("data-role") === "selectorWebTarget"))
                                        if ($(this).hasAttribute("id")) {
                                            if (($(this).attr("id").includes("ExternalContent") && ($(this).find("div.widget").attr("data-role") === "selectorWebTarget")) || ($(this).attr("id").includes("GisWFS") && ($(this).find("div.widget").attr("data-role") === "selectorWebTarget"))) {
                                                widgetId = $(this).attr("id");
                                                widgetTitle = $(this).find("div.titleDiv").html();
                                                newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                widgetsNumber++;
                                            }
                                        }
                                    });

                                    if (widgetsNumber > 0) {
                                        newInnerDiv.append(newSelect);
                                    } else {
                                        newInnerDiv.append("None");
                                    }

                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    if (widgetsNumber > 0) {
                                        $('#addGisGeolocationWidgets').selectpicker({
                                            actionsBox: true,
                                            width: "auto"
                                        });

                                        $('#addGisGeolocationWidgets').on('changed.bs.select', function (e) {
                                            if ($(this).val() === null) {
                                                addGisParameters.targets = [];
                                            } else {
                                                addGisParameters.targets = $(this).val();
                                            }
                                            $("#parameters").val(JSON.stringify(addGisParameters));
                                        });
                                    }

                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="addGisRectDim" class="col-md-2 control-label">Rows height</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    var newControl = $('<input id="addGisRectDim" name="addGisRectDim" data-slider-ticks="[1, 2, 3, 4]" data-slider-id="addGisRectDimSlider" type="text" data-slider-min="1" data-slider-max="4" data-slider-step="1" data-slider-value="1"/>');
                                    newInnerDiv.append(newControl);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    $('#addGisRectDim').bootstrapSlider({
                                        ticks_labels: ["small", "mid", "large", "fit"],
                                        value: 4,
                                        tooltip: 'hide',
                                        formatter: function (value) {
                                            switch (value) {
                                                case 1:
                                                    return "25px";
                                                    break;

                                                case 2:
                                                    return "50px";
                                                    break;

                                                case 3:
                                                    return "75px";
                                                    break;

                                                case 4:
                                                    return "Rectangles fit widget's height";
                                                    break;
                                            }
                                        }
                                    });

                                    //Colore testo quando picker attivo
                                    newLabel = $('<label for="addGisActiveQueriesFontColor" class="col-md-2 control-label"><?php echo _("Active rows font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-4"></div>');
                                    var newColorPicker = $('<div id="addGisActiveQueriesFontColorContainer" class="input-group colorpicker-component"><input id="addGisActiveQueriesFontColor" name="addGisActiveQueriesFontColor" type="text" class="form-control input"/><span class="input-group-addon"><i></i></span></div>');
                                    newInnerDiv.append(newColorPicker);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    $('#addGisActiveQueriesFontColorContainer').colorpicker({
                                        format: "rgba",
                                        color: "#000000"
                                    });

                                    //Modalità Icon/Text
                                /*    newLabel = $('<label for="iconTextMode" class="col-md-2 control-label">Icon/Text Mode</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select name="iconTextMode" class="form-control" id="iconTextMode"></select>');
                                    newSelect.append('<option value="yes">Icon Only</option>');
                                    newSelect.append('<option value="no">Text Description</option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newSelect.val(styleParameters.iconText);
                                    $("#specificParamsM").append(newFormRow);
                                    newLabel.show();
                                    newInnerDiv.show();*/

                                    //Nuova riga
                                    //Contenitore per tabella delle query
                                    var addGisQueryTableContainer = $('<div id="addGisQueryTableContainer" class="row rowCenterContent"></div>');
                                    var addGisQueryTable = $("<table id='addGisQueryTable' data-widgetType='selectorWeb' class='table table-bordered table-condensed thrRangeTable'><col style='width:64px'><col style='width:64px'><col style='width:64px'><col style='width:64px'><col style='width:128px'><col style='width:76px'><col style='width:128px'><col style='width:128px'><col style='width:50px'><col style='width:50px'><tr><td><?php echo _("Default"); ?></td><td><?php echo _("Symbol mode"); ?></td><td><?php echo _("Symbol choice"); ?></td><td><?php echo _("Symbol preview"); ?></td><td><?php echo _("Description"); ?></td><td><?php echo _("Link"); ?></td><td><?php echo _("Color1"); ?></td><td><?php echo _("Color2"); ?></td><td><?php echo _("Order"); ?></td><td><a href='#'><i class='fa fa-plus' style='font-size:24px;color:#337ab7'></i></a></td></tr></table>");
                                    addGisQueryTableContainer.append(addGisQueryTable);
                                    $("#specificWidgetPropertiesDiv").append(addGisQueryTableContainer);
                                    $("#addGisQueryTable i.fa-plus").click(addGisQuery);
                                    break;


                                case "widgetSelector":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("16");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("#000000");
                                    $('#inputFontColor').attr('disabled', false);
                                    $('#inputFontColor').prop('required', true);
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', true);
                                    $('#inputFreqWidget').val("");
                                    $('#inputFreqWidget').prop('required', false);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    var addGisParameters = {
                                        queries: [],
                                        targets: []
                                    };
                                    setAddGisParameters(addGisParameters);
                                    $("#parameters").val(JSON.stringify(addGisParameters));

                                    //Target widgets geolocation
                                    newFormRow = $('<div class="row"></div>');
                                    newLabel = $('<label for="addGisGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Map widgets"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-4"></div>');
                                    newSelect = $('<select name="addGisGeolocationWidgets" class="form-control" id="addGisGeolocationWidgets" multiple></select>');

                                    var widgetId, widgetTitle = null;
                                    var widgetsNumber = 0;
                                    var targetsJson = [];

                                    $("li.gs_w").each(function () {
                                        if ($(this).attr("id") != null) {
                                            //if($(this).attr("id").includes("ExternalContent")&&($(this).find("div.widget").attr("data-role") === "gisTarget"))
                                            if (($(this).attr("id").includes("ExternalContent") && ($(this).find("div.widget").attr("data-role") === "gisTarget")) || ($(this).attr("id").includes("GisWFS") && ($(this).find("div.widget").attr("data-role") === "gisTarget"))) {
                                                widgetId = $(this).attr("id");
                                                widgetTitle = $(this).find("div.titleDiv").html();
                                                newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                widgetsNumber++;
                                            }
                                        }
                                    });

                                    if (widgetsNumber > 0) {
                                        newInnerDiv.append(newSelect);
                                    } else {
                                        newInnerDiv.append("None");
                                    }

                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    if (widgetsNumber > 0) {
                                        $('#addGisGeolocationWidgets').selectpicker({
                                            actionsBox: true,
                                            width: "auto"
                                        });

                                        $('#addGisGeolocationWidgets').on('changed.bs.select', function (e) {
                                            if ($(this).val() === null) {
                                                addGisParameters.targets = [];
                                            } else {
                                                addGisParameters.targets = $(this).val();
                                            }
                                            $("#parameters").val(JSON.stringify(addGisParameters));
                                        });
                                    }

                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    //Colore testo quando picker attivo
                                    newLabel = $('<label for="addGisActiveQueriesFontColor" class="col-md-2 control-label"><?php echo _("Active rows font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-4"></div>');
                                    var newColorPicker = $('<div id="addGisActiveQueriesFontColorContainer" class="input-group colorpicker-component"><input id="addGisActiveQueriesFontColor" name="addGisActiveQueriesFontColor" type="text" class="form-control input"/><span class="input-group-addon"><i></i></span></div>');
                                    newInnerDiv.append(newColorPicker);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    $('#addGisActiveQueriesFontColorContainer').colorpicker({
                                        format: "rgba",
                                        color: "#000000"
                                    });

                                    //Modalità Icon/Text
                                 /*   newLabel = $('<label for="iconTextMode" class="col-md-2 control-label">Icon/Text Mode</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select name="iconTextMode" class="form-control" id="iconTextMode"></select>');
                                    newSelect.append('<option value="yes">Icon Only</option>');
                                    newSelect.append('<option value="no">Text Description</option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newSelect.val(styleParameters.iconText);
                                    $("#specificParamsM").append(newFormRow);
                                    newLabel.show();
                                    newInnerDiv.show();*/

                                    //Nuova riga
                                    //Contenitore per tabella delle query
                                    var addGisQueryTableContainer = $('<div id="addGisQueryTableContainer" class="row rowCenterContent"></div>');
                                    var addGisQueryTable = $("<table id='addGisQueryTable' data-widgetType='selector' class='table table-bordered table-condensed thrRangeTable'><col style='width:64px'><col style='width:64px'><col style='width:64px'><col style='width:64px'><col style='width:128px'><col style='width:76px'><col style='width:128px'><col style='width:128px'><col style='width:128px'><col style='width:128px'><col style='width:50px'><col style='width:50px'><tr><td><?php echo _("Default"); ?></td><td><?php echo _("Symbol mode"); ?></td><td><?php echo _("Symbol choice"); ?></td><td><?php echo _("Symbol preview"); ?></td><td><?php echo _("Description"); ?></td><td><?php echo _("Query"); ?></td><td><?php echo _("Color1"); ?></td><td><?php echo _("Color2"); ?></td><td><?php echo _("Data widgets"); ?></td><td><?php echo _("Display"); ?></td><td><?php echo _("Order"); ?></td><td><a href='#'><i class='fa fa-plus' style='font-size:24px;color:#337ab7'></i></a></td></tr></table>");
                                    addGisQueryTableContainer.append(addGisQueryTable);
                                    $("#specificWidgetPropertiesDiv").append(addGisQueryTableContainer);
                                    $("#addGisQueryTable i.fa-plus").click(addGisQuery);
                                    break;

                                case "widgetSelectorNew":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("16");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("#000000");
                                    $('#inputFontColor').attr('disabled', false);
                                    $('#inputFontColor').prop('required', true);
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', true);
                                    $('#inputFreqWidget').val("");
                                    $('#inputFreqWidget').prop('required', false);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    var addGisParameters = {
                                        queries: [],
                                        targets: []
                                    };
                                    setAddGisParameters(addGisParameters);
                                    $("#parameters").val(JSON.stringify(addGisParameters));

                                    //Target widgets geolocation
                                    newFormRow = $('<div class="row"></div>');
                                    newLabel = $('<label for="addGisGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Map widgets"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-4"></div>');
                                    newSelect = $('<select name="addGisGeolocationWidgets" class="form-control" id="addGisGeolocationWidgets" multiple></select>');

                                    var widgetId, widgetTitle = null;
                                    var widgetsNumber = 0;
                                    var targetsJson = [];

                                    $("li.gs_w").each(function () {
                                        if ($(this).attr("id") != null) {
                                            if ($(this).attr("id").includes("widgetMap")) {
                                                widgetId = $(this).attr("id");
                                                widgetTitle = $(this).find("div.titleDiv").html();
                                                newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                widgetsNumber++;
                                            }
                                        }
                                    });

                                    if (widgetsNumber > 0) {
                                        newInnerDiv.append(newSelect);
                                    } else {
                                        newInnerDiv.append("None");
                                    }

                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    if (widgetsNumber > 0) {
                                        $('#addGisGeolocationWidgets').selectpicker({
                                            actionsBox: true,
                                            width: "auto",
                                            size: "auto"
                                        });

                                        $('#addGisGeolocationWidgets').on('changed.bs.select', function (e) {
                                            if ($(this).val() === null) {
                                                addGisParameters.targets = [];
                                            } else {
                                                addGisParameters.targets = $(this).val();
                                            }
                                            $("#parameters").val(JSON.stringify(addGisParameters));
                                        });
                                    }

                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    //Colore testo quando picker attivo
                                    newLabel = $('<label for="addGisActiveQueriesFontColor" class="col-md-2 control-label"><?php echo _("Active rows font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-4"></div>');
                                    var newColorPicker = $('<div id="addGisActiveQueriesFontColorContainer" class="input-group colorpicker-component"><input id="addGisActiveQueriesFontColor" name="addGisActiveQueriesFontColor" type="text" class="form-control input"/><span class="input-group-addon"><i></i></span></div>');
                                    newInnerDiv.append(newColorPicker);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    $('#addGisActiveQueriesFontColorContainer').colorpicker({
                                        format: "rgba",
                                        color: "#000000"
                                    });

                                    //Modalità Icon/Text SelectorNew
                                    newLabel = $('<label for="iconTextMode" class="col-md-2 control-label"><?php echo _("Icon/Text Mode"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select name="iconTextMode" class="form-control" id="iconTextMode"></select>');
                                    newSelect.append('<option value="yes"><?php echo _("Icon Only"); ?></option>');
                                    newSelect.append('<option value="no"><?php echo _("Text Description"); ?></option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newSelect.val(styleParameters.iconText);
                                    $("#specificParamsM").append(newFormRow);
                                    newLabel.show();
                                    newInnerDiv.show();

                                    //Nuova riga
                                    //Contenitore per tabella delle query
                                    var addGisQueryTableContainer = $('<div id="addGisQueryTableContainer" class="row rowCenterContent"></div>');
                                    var addGisQueryTable = $("<table id='addGisQueryTable' data-widgetType='selectorNew' class='table table-bordered table-condensed thrRangeTable'><col style='width:64px'><col style='width:64px'><col style='width:64px'><col style='width:64px'><col style='width:128px'><col style='width:76px'><col style='width:128px'><col style='width:128px'><col style='width:128px'><col style='width:128px'><col style='width:50px'><col style='width:50px'><tr><td><?php echo _("Default"); ?></td><td><?php echo _("Symbol mode"); ?></td><td><?php echo _("Symbol choice"); ?></td><td><?php echo _("Symbol preview"); ?></td><td><?php echo _("Description"); ?></td><td><?php echo _("Query"); ?></td><td><?php echo _("Color1"); ?></td><td><?php echo _("Color2"); ?></td><td><?php echo _("Data widgets"); ?></td><td><?php echo _("Display"); ?></td><td><?php echo _("Order"); ?></td><td><a href='#'><i class='fa fa-plus' style='font-size:24px;color:#337ab7'></i></a></td></tr></table>");
                                    addGisQueryTableContainer.append(addGisQueryTable);
                                    $("#specificWidgetPropertiesDiv").append(addGisQueryTableContainer);
                                    $("#addGisQueryTable i.fa-plus").click(addGisQuery);
                                    break;

                                case "widgetSelectorTech":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("16");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("#000000");
                                    $('#inputFontColor').attr('disabled', false);
                                    $('#inputFontColor').prop('required', true);
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', true);
                                    $('#inputFreqWidget').val("");
                                    $('#inputFreqWidget').prop('required', false);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    var addGisParameters = {
                                        queries: [],
                                        targets: []
                                    };
                                    setAddGisParameters(addGisParameters);
                                    $("#parameters").val(JSON.stringify(addGisParameters));

                                    //Target widgets geolocation
                                    newFormRow = $('<div class="row"></div>');
                                    newLabel = $('<label for="addGisGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Map widgets"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-4"></div>');
                                    newSelect = $('<select name="addGisGeolocationWidgets" class="form-control" id="addGisGeolocationWidgets" multiple></select>');

                                    var widgetId, widgetTitle = null;
                                    var widgetsNumber = 0;
                                    var targetsJson = [];

                                    $("li.gs_w").each(function () {
                                        if ($(this).attr("id") != null) {
                                            if ($(this).attr("id").includes("widgetMap")) {
                                                widgetId = $(this).attr("id");
                                                widgetTitle = $(this).find("div.titleDiv").html();
                                                newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                widgetsNumber++;
                                            }
                                        }
                                    });

                                    if (widgetsNumber > 0) {
                                        newInnerDiv.append(newSelect);
                                    } else {
                                        newInnerDiv.append("None");
                                    }

                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    if (widgetsNumber > 0) {
                                        $('#addGisGeolocationWidgets').selectpicker({
                                            actionsBox: true,
                                            width: "auto",
                                            size: "auto"
                                        });

                                        $('#addGisGeolocationWidgets').on('changed.bs.select', function (e) {
                                            if ($(this).val() === null) {
                                                addGisParameters.targets = [];
                                            } else {
                                                addGisParameters.targets = $(this).val();
                                            }
                                            $("#parameters").val(JSON.stringify(addGisParameters));
                                        });
                                    }

                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    //Colore testo quando picker attivo
                                    newLabel = $('<label for="addGisActiveQueriesFontColor" class="col-md-2 control-label"><?php echo _("Active rows font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-4"></div>');
                                    var newColorPicker = $('<div id="addGisActiveQueriesFontColorContainer" class="input-group colorpicker-component"><input id="addGisActiveQueriesFontColor" name="addGisActiveQueriesFontColor" type="text" class="form-control input"/><span class="input-group-addon"><i></i></span></div>');
                                    newInnerDiv.append(newColorPicker);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    $('#addGisActiveQueriesFontColorContainer').colorpicker({
                                        format: "rgba",
                                        color: "#000000"
                                    });

                                    //Nuova riga
                                    //Contenitore per tabella delle query
                                    var addGisQueryTableContainer = $('<div id="addGisQueryTableContainer" class="row rowCenterContent"></div>');
                                    var addGisQueryTable = $("<table id='addGisQueryTable' data-widgetType='selectorTech' class='table table-bordered table-condensed thrRangeTable'><col style='width:64px'><col style='width:64px'><col style='width:64px'><col style='width:64px'><col style='width:128px'><col style='width:76px'><col style='width:128px'><col style='width:128px'><col style='width:128px'><col style='width:128px'><col style='width:50px'><col style='width:50px'><tr><td><?php echo _("Default"); ?></td><td><?php echo _("Symbol mode"); ?></td><td><?php echo _("Symbol choice"); ?></td><td><?php echo _("Symbol preview"); ?></td><td><?php echo _("Description"); ?></td><td><?php echo _("Query"); ?></td><td><?php echo _("Color1"); ?></td><td><?php echo _("Color2"); ?></td><td><?php echo _("Data widgets"); ?></td><td><?php echo _("Display"); ?></td><td><?php echo _("Order"); ?></td><td><a href='#'><i class='fa fa-plus' style='font-size:24px;color:#337ab7'></i></a></td></tr></table>");
                                    addGisQueryTableContainer.append(addGisQueryTable);
                                    $("#specificWidgetPropertiesDiv").append(addGisQueryTableContainer);
                                    $("#addGisQueryTable i.fa-plus").click(addGisQuery);
                                    break;

                                case "widgetClock":
                                    $('#inputUrlWidget').val('none');
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val(16);
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("#000000");
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', true);
                                    $('#inputFreqWidget').val('');
                                    $('#inputFreqWidget').prop('required', false);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#inputUdmWidget').val("");
                                    $("#inputUdmPosition").val(-1);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
                                    var newFormRow, newLabel, newInnerDiv, newSelect, newInput = null;

                                    //Nuova riga
                                    //Clock data e clock font type
                                    newFormRow = $('<div class="row"></div>');
                                    newLabel = $('<label for="addWidgetClockData" class="col-md-2 control-label"><?php echo _("Shown data"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select name="addWidgetClockData" class="form-control" id="addWidgetClockData"></select>');
                                    newSelect.append('<option value="date"><?php echo _("Date"); ?></option>');
                                    newSelect.append('<option value="time"><?php echo _("Time"); ?></option>');
                                    newSelect.append('<option value="dateTime"><?php echo _("Date and time"); ?></option>');
                                    newSelect.val("dateTime");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    newLabel = $('<label for="addWidgetClockFont" class="col-md-2 control-label"><?php echo _("Font type"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select name="addWidgetClockFont" class="form-control" id="addWidgetClockFont"></select>');
                                    newSelect.append('<option value="normal"><?php echo _("Normal"); ?></option>');
                                    newSelect.append('<option value="lcd"><?php echo _("LCD like"); ?></option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    break;

                                case "widgetNetworkAnalysis":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').attr('disabled', true);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("12");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Visualizzazione campi specifici per questo widget
                                    $('#specificWidgetPropertiesDiv .row').remove();
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                        addWidgetRangeTableContainer = null;

                                    //Nuova riga
                                    //Target widgets geolocation
                                    newFormRow = $('<div class="row"></div>');
                                    newLabel = $('<label for="addWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select name="addWidgetGeolocationWidgets" class="form-control" id="addWidgetGeolocationWidgets" multiple></select>');

                                    var widgetId, widgetTitle = null;
                                    var widgetsNumber = 0;
                                    var targetsJson = [];

                                    $("li.gs_w").each(function () {
                                        if ($(this).attr("id") != null) {
                                            if ($(this).attr("id").includes("ExternalContent") && ($(this).find("div.widget").attr("data-role") === "map")) {
                                                widgetId = $(this).attr("id");
                                                widgetTitle = $(this).find("div.titleDiv").html();
                                                newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                widgetsNumber++;
                                            }
                                        }
                                    });

                                    if (widgetsNumber > 0) {
                                        newInnerDiv.append(newSelect);
                                    } else {
                                        newInnerDiv.append("None");
                                    }

                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel.show();
                                    newInnerDiv.show();

                                    if (widgetsNumber > 0) {
                                        $('#addWidgetGeolocationWidgets').selectpicker({
                                            actionsBox: true,
                                            width: "auto"
                                        });

                                        $('#addWidgetGeolocationWidgets').on('changed.bs.select', function (e) {
                                            if ($(this).val() === null) {
                                                targetsJson = [];
                                            } else {
                                                targetsJson = $(this).val();
                                            }
                                            $("#parameters").val(JSON.stringify(targetsJson));
                                        });
                                    }
                                    break;

                                case "widgetResources":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').attr('disabled', true);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("12");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Visualizzazione campi specifici per questo widget
                                    $('#specificWidgetPropertiesDiv .row').remove();
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                        addWidgetRangeTableContainer = null;

                                    //Nuova riga
                                    //Target widgets geolocation
                                    newFormRow = $('<div class="row"></div>');
                                    newLabel = $('<label for="addWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select name="addWidgetGeolocationWidgets" class="form-control" id="addWidgetGeolocationWidgets" multiple></select>');

                                    var widgetId, widgetTitle = null;
                                    var widgetsNumber = 0;
                                    var targetsJson = [];

                                    $("li.gs_w").each(function () {
                                        if ($(this).attr("id") != null) {
                                            if ($(this).attr("id").includes("ExternalContent") && ($(this).find("div.widget").attr("data-role") === "map")) {
                                                widgetId = $(this).attr("id");
                                                widgetTitle = $(this).find("div.titleDiv").html();
                                                newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                widgetsNumber++;
                                            }
                                        }
                                    });

                                    if (widgetsNumber > 0) {
                                        newInnerDiv.append(newSelect);
                                    } else {
                                        newInnerDiv.append("None");
                                    }

                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel.show();
                                    newInnerDiv.show();

                                    if (widgetsNumber > 0) {
                                        $('#addWidgetGeolocationWidgets').selectpicker({
                                            actionsBox: true,
                                            width: "auto"
                                        });

                                        $('#addWidgetGeolocationWidgets').on('changed.bs.select', function (e) {
                                            if ($(this).val() === null) {
                                                targetsJson = [];
                                            } else {
                                                targetsJson = $(this).val();
                                            }
                                            $("#parameters").val(JSON.stringify(targetsJson));
                                        });
                                    }
                                    break;

                                case "widgetResourcesNew":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').attr('disabled', true);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("12");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Visualizzazione campi specifici per questo widget
                                    $('#specificWidgetPropertiesDiv .row').remove();
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                        addWidgetRangeTableContainer = null;

                                    //Nuova riga
                                    //Target widgets geolocation
                                    newFormRow = $('<div class="row"></div>');
                                    newLabel = $('<label for="addWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select name="addWidgetGeolocationWidgets" class="form-control" id="addWidgetGeolocationWidgets" multiple></select>');

                                    var widgetId, widgetTitle = null;
                                    var widgetsNumber = 0;
                                    var targetsJson = [];

                                    $("li.gs_w").each(function () {
                                        if ($(this).attr("id") != null) {
                                            if ($(this).attr("id").includes("widgetMap")) {
                                                widgetId = $(this).attr("id");
                                                widgetTitle = $(this).find("div.titleDiv").html();
                                                newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                widgetsNumber++;
                                            }
                                        }
                                    });

                                    if (widgetsNumber > 0) {
                                        newInnerDiv.append(newSelect);
                                    } else {
                                        newInnerDiv.append("None");
                                    }

                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel.show();
                                    newInnerDiv.show();

                                    if (widgetsNumber > 0) {
                                        $('#addWidgetGeolocationWidgets').selectpicker({
                                            actionsBox: true,
                                            width: "auto",
                                            size: "auto"
                                        });

                                        $('#addWidgetGeolocationWidgets').on('changed.bs.select', function (e) {
                                            if ($(this).val() === null) {
                                                targetsJson = [];
                                            } else {
                                                targetsJson = $(this).val();
                                            }
                                            $("#parameters").val(JSON.stringify(targetsJson));
                                        });
                                    }
                                    break;

                                case "widgetEvacuationPlans":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').attr('disabled', true);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("12");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Visualizzazione campi specifici per questo widget
                                    $('#specificWidgetPropertiesDiv .row').remove();
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                        addWidgetRangeTableContainer = null;

                                    //Nuova riga
                                    //Target widgets geolocation
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    newLabel = $('<label for="addWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="addWidgetGeolocationWidgets" name="addWidgetGeolocationWidgets"></select>');

                                    var widgetId, widgetTitle = null;
                                    var widgetsNumber = 0;
                                    //JSON degli eventi da mostrare su ogni widget target di questo widget events: privo di eventi all'inizio
                                    var targetEventsJson = {};

                                    $("li.gs_w").each(function () {
                                        if ($(this).attr("id") != null) {
                                            if ($(this).attr("id").includes("ExternalContent") && ($(this).find("div.widget").attr("data-role") === "map")) {
                                                widgetId = $(this).attr("id");
                                                widgetTitle = $(this).find("div.titleDiv").html();
                                                newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                targetEventsJson[widgetId] = new Array();
                                                widgetsNumber++;
                                            }
                                        }
                                    });

                                    $("#parameters").val(JSON.stringify(targetEventsJson));

                                    if (widgetsNumber > 0) {
                                        newInnerDiv.append(newSelect);
                                    } else {
                                        newInnerDiv.append("None");
                                    }

                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel.show();
                                    newInnerDiv.show();

                                    if (widgetsNumber > 0) {
                                        newSelect.show();
                                        newSelect.val(-1);
                                        newLabel = $('<label for="addWidgetEventTypes" class="col-md-2 control-label"><?php echo _("Events to show on selected map"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        var eventTypeSelect = $('<select name="addWidgetEventTypes" class="form-control" id="addWidgetEventTypes" multiple></select>');

                                        eventTypeSelect.append('<option value="approved"><?php echo _("Approved"); ?></option>');
                                        eventTypeSelect.append('<option value="closed"><?php echo _("Closed"); ?></option>');
                                        eventTypeSelect.append('<option value="in_progress"><?php echo _("In progress"); ?></option>');
                                        eventTypeSelect.append('<option value="proposed"><?php echo _("Proposed"); ?></option>');
                                        eventTypeSelect.append('<option value="rejected"><?php echo _("Rejected"); ?></option>');

                                        eventTypeSelect.val(-1);
                                        newFormRow.append(newLabel);
                                        newInnerDiv.append(eventTypeSelect);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();

                                        $('#addWidgetEventTypes').selectpicker({
                                            actionsBox: true,
                                            width: "auto"
                                        });

                                        $('#addWidgetEventTypes').on('changed.bs.select', function (e) {
                                            if ($(this).val() === null) {
                                                targetEventsJson[$("#addWidgetGeolocationWidgets").val()] = [];
                                            } else {
                                                targetEventsJson[$("#addWidgetGeolocationWidgets").val()] = $(this).val();
                                            }
                                            $("#parameters").val(JSON.stringify(targetEventsJson));
                                        });

                                        $("#addWidgetGeolocationWidgets").change(function () {
                                            newLabel.show();
                                            newInnerDiv.show();
                                            $('#addWidgetEventTypes').selectpicker('val', targetEventsJson[$("#addWidgetGeolocationWidgets").val()]);
                                        });
                                    }
                                    break;

                                case "widgetEvacuationPlansNew":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').attr('disabled', true);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("12");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Visualizzazione campi specifici per questo widget
                                    $('#specificWidgetPropertiesDiv .row').remove();
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                        addWidgetRangeTableContainer = null;

                                    //Nuova riga
                                    //Target widgets geolocation
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    newLabel = $('<label for="addWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="addWidgetGeolocationWidgets" name="addWidgetGeolocationWidgets"></select>');

                                    var widgetId, widgetTitle = null;
                                    var widgetsNumber = 0;
                                    //JSON degli eventi da mostrare su ogni widget target di questo widget events: privo di eventi all'inizio
                                    var targetEventsJson = {};

                                    $("li.gs_w").each(function () {
                                        if ($(this).attr("id") != null) {
                                            if ($(this).attr("id").includes("widgetMap")) {
                                                widgetId = $(this).attr("id");
                                                widgetTitle = $(this).find("div.titleDiv").html();
                                                newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                targetEventsJson[widgetId] = new Array();
                                                widgetsNumber++;
                                            }
                                        }
                                    });

                                    $("#parameters").val(JSON.stringify(targetEventsJson));

                                    if (widgetsNumber > 0) {
                                        newInnerDiv.append(newSelect);
                                    } else {
                                        newInnerDiv.append("None");
                                    }

                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel.show();
                                    newInnerDiv.show();

                                    if (widgetsNumber > 0) {
                                        newSelect.show();
                                        newSelect.val(-1);
                                        newLabel = $('<label for="addWidgetEventTypes" class="col-md-2 control-label"><?php echo _("Events to show on selected map"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        var eventTypeSelect = $('<select name="addWidgetEventTypes" class="form-control" id="addWidgetEventTypes" multiple></select>');

                                        eventTypeSelect.append('<option value="approved"><?php echo _("Approved"); ?></option>');
                                        eventTypeSelect.append('<option value="closed"><?php echo _("Closed"); ?></option>');
                                        eventTypeSelect.append('<option value="in_progress"><?php echo _("In progress"); ?></option>');
                                        eventTypeSelect.append('<option value="proposed"><?php echo _("Proposed"); ?></option>');
                                        eventTypeSelect.append('<option value="rejected"><?php echo _("Rejected"); ?></option>');

                                        eventTypeSelect.val(-1);
                                        newFormRow.append(newLabel);
                                        newInnerDiv.append(eventTypeSelect);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();

                                        $('#addWidgetEventTypes').selectpicker({
                                            actionsBox: true,
                                            width: "auto",
                                            size: "auto"
                                        });

                                        $('#addWidgetEventTypes').on('changed.bs.select', function (e) {
                                            if ($(this).val() === null) {
                                                targetEventsJson[$("#addWidgetGeolocationWidgets").val()] = [];
                                            } else {
                                                targetEventsJson[$("#addWidgetGeolocationWidgets").val()] = $(this).val();
                                            }
                                            $("#parameters").val(JSON.stringify(targetEventsJson));
                                        });

                                        $("#addWidgetGeolocationWidgets").change(function () {
                                            newLabel.show();
                                            newInnerDiv.show();
                                            $('#addWidgetEventTypes').selectpicker('val', targetEventsJson[$("#addWidgetGeolocationWidgets").val()]);
                                        });
                                    }
                                    break;

                                case "widgetOperatorEventsList":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').attr('disabled', true);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("12");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Visualizzazione campi specifici per questo widget
                                    $('#specificWidgetPropertiesDiv .row').remove();
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                        addWidgetRangeTableContainer = null;

                                    //Nuova riga
                                    //Target widgets geolocation
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    newLabel = $('<label for="addWidgetGeolocationWidgets" class="col-md-3 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-5"></div>');
                                    newSelect = $('<select class="selectpicker form-control" id="addWidgetGeolocationWidgets" name="addWidgetGeolocationWidgets" multiple></select>');
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    newLabel = $('<label for="addWidgetPanToWidgets" class="col-md-3 control-label"><?php echo _("Available autopan widgets"); ?></label>');
                                    var newInnerDiv2 = $('<div class="col-md-5"></div>');
                                    var newSelect2 = $('<select class="selectpicker form-control" id="addWidgetPanToWidgets" name="addWidgetPanToWidgets" multiple></select>');
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv2);

                                    var widgetId, widgetTitle = null;
                                    var widgetsNumber = 0, panToWidgetsNumber = 0;
                                    var operatorEventsParameters = {
                                        targetEventsJson: [],
                                        targetPanToJson: []
                                    };

                                    $("li.gs_w").each(function () {
                                        if ($(this).attr("id") != null) {
                                            if ($(this).attr("id").includes("ExternalContent") && ($(this).find("div.widget").attr("data-role") === "map")) {
                                                widgetId = $(this).attr("id");
                                                widgetTitle = $(this).find("div.titleDiv").html();
                                                newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                widgetsNumber++;
                                            }

                                            if ($(this).attr("id").includes("ExternalContent") && ($(this).find("div.widget").attr("data-role") !== "link") && ($(this).find("div.widget").attr("data-role") !== "selectorWebTarget")) {
                                                widgetId = $(this).attr("id");
                                                widgetTitle = $(this).find("div.titleDiv").html();
                                                newSelect2.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                panToWidgetsNumber++;
                                            }
                                        }
                                    });

                                    $("#parameters").val(JSON.stringify(operatorEventsParameters));

                                    if (widgetsNumber > 0) {
                                        newInnerDiv.append(newSelect);
                                    } else {
                                        newInnerDiv.append("None");
                                    }

                                    if (panToWidgetsNumber > 0) {
                                        newInnerDiv2.append(newSelect2);
                                    } else {
                                        newInnerDiv2.append("None");
                                    }

                                    if (widgetsNumber > 0) {
                                        $('#addWidgetGeolocationWidgets').selectpicker({
                                            actionsBox: true,
                                            width: "auto"
                                        });

                                        $('#addWidgetGeolocationWidgets').on('changed.bs.select', function (e) {
                                            if ($(this).val() === null) {
                                                operatorEventsParameters.targetEventsJson = [];
                                            } else {
                                                operatorEventsParameters.targetEventsJson = $(this).val();
                                            }
                                            $("#parameters").val(JSON.stringify(operatorEventsParameters));
                                        });
                                    }

                                    if (panToWidgetsNumber > 0) {
                                        $('#addWidgetPanToWidgets').selectpicker({
                                            actionsBox: true,
                                            width: "auto"
                                        });

                                        $('#addWidgetPanToWidgets').on('changed.bs.select', function (e) {
                                            if ($(this).val() === null) {
                                                operatorEventsParameters.targetPanToJson = [];
                                            } else {
                                                operatorEventsParameters.targetPanToJson = $(this).val();
                                            }
                                            $("#parameters").val(JSON.stringify(operatorEventsParameters));
                                        });
                                    }
                                    break;

                                case "widgetOperatorEventsListNew":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').attr('disabled', true);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("12");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Visualizzazione campi specifici per questo widget
                                    $('#specificWidgetPropertiesDiv .row').remove();
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                        addWidgetRangeTableContainer = null;

                                    //Nuova riga
                                    //Target widgets geolocation
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    newLabel = $('<label for="addWidgetGeolocationWidgets" class="col-md-3 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-5"></div>');
                                    newSelect = $('<select class="selectpicker form-control" id="addWidgetGeolocationWidgets" name="addWidgetGeolocationWidgets" multiple></select>');
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    newLabel = $('<label for="addWidgetPanToWidgets" class="col-md-3 control-label"><?php echo _("Available autopan widgets"); ?></label>');
                                    var newInnerDiv2 = $('<div class="col-md-5"></div>');
                                    var newSelect2 = $('<select class="selectpicker form-control" id="addWidgetPanToWidgets" name="addWidgetPanToWidgets" multiple></select>');
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv2);

                                    var widgetId, widgetTitle = null;
                                    var widgetsNumber = 0, panToWidgetsNumber = 0;
                                    var operatorEventsParameters = {
                                        targetEventsJson: [],
                                        targetPanToJson: []
                                    };

                                    $("li.gs_w").each(function () {
                                        if ($(this).attr("id") != null) {
                                            if ($(this).attr("id").includes("widgetMap")) {
                                                widgetId = $(this).attr("id");
                                                widgetTitle = $(this).find("div.titleDiv").html();
                                                newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                widgetsNumber++;
                                            }

                                            if ($(this).attr("id").includes("widgetMap")) {
                                                widgetId = $(this).attr("id");
                                                widgetTitle = $(this).find("div.titleDiv").html();
                                                newSelect2.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                panToWidgetsNumber++;
                                            }
                                        }
                                    });

                                    $("#parameters").val(JSON.stringify(operatorEventsParameters));

                                    if (widgetsNumber > 0) {
                                        newInnerDiv.append(newSelect);
                                    } else {
                                        newInnerDiv.append("None");
                                    }

                                    if (panToWidgetsNumber > 0) {
                                        newInnerDiv2.append(newSelect2);
                                    } else {
                                        newInnerDiv2.append("None");
                                    }

                                    if (widgetsNumber > 0) {
                                        $('#addWidgetGeolocationWidgets').selectpicker({
                                            actionsBox: true,
                                            width: "auto",
                                            size: "auto"
                                        });

                                        $('#addWidgetGeolocationWidgets').on('changed.bs.select', function (e) {
                                            if ($(this).val() === null) {
                                                operatorEventsParameters.targetEventsJson = [];
                                            } else {
                                                operatorEventsParameters.targetEventsJson = $(this).val();
                                            }
                                            $("#parameters").val(JSON.stringify(operatorEventsParameters));
                                        });
                                    }

                                    if (panToWidgetsNumber > 0) {
                                        $('#addWidgetPanToWidgets').selectpicker({
                                            actionsBox: true,
                                            width: "auto",
                                            size: "auto"
                                        });

                                        $('#addWidgetPanToWidgets').on('changed.bs.select', function (e) {
                                            if ($(this).val() === null) {
                                                operatorEventsParameters.targetPanToJson = [];
                                            } else {
                                                operatorEventsParameters.targetPanToJson = $(this).val();
                                            }
                                            $("#parameters").val(JSON.stringify(operatorEventsParameters));
                                        });
                                    }
                                    break;

                                case "widgetAlarms":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').attr('disabled', true);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("12");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Visualizzazione campi specifici per questo widget
                                    $('#specificWidgetPropertiesDiv .row').remove();
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                        addWidgetRangeTableContainer = null;

                                    //Nuova riga
                                    //Target widgets geolocation
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    newLabel = $('<label for="addWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="addWidgetGeolocationWidgets" name="addWidgetGeolocationWidgets"></select>');

                                    var widgetId, widgetTitle = null;
                                    var widgetsNumber = 0;
                                    //JSON degli eventi da mostrare su ogni widget target di questo widget events: privo di eventi all'inizio
                                    var targetEventsJson = {};

                                    $("li.gs_w").each(function () {
                                        if ($(this).attr("id") != null) {
                                            if ($(this).attr("id").includes("ExternalContent") && ($(this).find("div.widget").attr("data-role") === "map")) {
                                                widgetId = $(this).attr("id");
                                                widgetTitle = $(this).find("div.titleDiv").html();
                                                newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                targetEventsJson[widgetId] = new Array();
                                                widgetsNumber++;
                                            }
                                        }
                                    });

                                    $("#parameters").val(JSON.stringify(targetEventsJson));

                                    if (widgetsNumber > 0) {
                                        newInnerDiv.append(newSelect);
                                    } else {
                                        newInnerDiv.append("None");
                                    }

                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel.show();
                                    newInnerDiv.show();

                                    if (widgetsNumber > 0) {
                                        newSelect.show();
                                        newSelect.val(-1);
                                        newLabel = $('<label for="addWidgetEventTypes" class="col-md-2 control-label"><?php echo _("Events to show on selected map"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        var eventTypeSelect = $('<select name="addWidgetEventTypes" class="form-control" id="addWidgetEventTypes" multiple></select>');
                                        for (var key in alarmTypes) {
                                            eventTypeSelect.append('<option value="' + key + '">' + alarmTypes[key].desc + '</option>');
                                        }

                                        eventTypeSelect.val(-1);
                                        newFormRow.append(newLabel);
                                        newInnerDiv.append(eventTypeSelect);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();

                                        $('#addWidgetEventTypes').selectpicker({
                                            actionsBox: true,
                                            width: "auto"
                                        });

                                        $('#addWidgetEventTypes').on('changed.bs.select', function (e) {
                                            if ($(this).val() === null) {
                                                targetEventsJson[$("#addWidgetGeolocationWidgets").val()] = [];
                                            } else {
                                                targetEventsJson[$("#addWidgetGeolocationWidgets").val()] = $(this).val();
                                            }
                                            $("#parameters").val(JSON.stringify(targetEventsJson));
                                        });

                                        $("#addWidgetGeolocationWidgets").change(function () {
                                            newLabel.show();
                                            newInnerDiv.show();
                                            $('#addWidgetEventTypes').selectpicker('val', targetEventsJson[$("#addWidgetGeolocationWidgets").val()]);
                                        });
                                    }
                                    break;

                                case "widgetAlarmsNew":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').attr('disabled', true);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("12");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Visualizzazione campi specifici per questo widget
                                    $('#specificWidgetPropertiesDiv .row').remove();
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                        addWidgetRangeTableContainer = null;

                                    //Nuova riga
                                    //Target widgets geolocation
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    newLabel = $('<label for="addWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="addWidgetGeolocationWidgets" name="addWidgetGeolocationWidgets"></select>');

                                    var widgetId, widgetTitle = null;
                                    var widgetsNumber = 0;
                                    //JSON degli eventi da mostrare su ogni widget target di questo widget events: privo di eventi all'inizio
                                    var targetEventsJson = {};

                                    $("li.gs_w").each(function () {
                                        if ($(this).attr("id") != null) {
                                            if ($(this).attr("id").includes("widgetMap")) {
                                                widgetId = $(this).attr("id");
                                                widgetTitle = $(this).find("div.titleDiv").html();
                                                newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                targetEventsJson[widgetId] = new Array();
                                                widgetsNumber++;
                                            }
                                        }
                                    });

                                    $("#parameters").val(JSON.stringify(targetEventsJson));

                                    if (widgetsNumber > 0) {
                                        newInnerDiv.append(newSelect);
                                    } else {
                                        newInnerDiv.append("None");
                                    }

                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel.show();
                                    newInnerDiv.show();

                                    if (widgetsNumber > 0) {
                                        newSelect.show();
                                        newSelect.val(-1);
                                        newLabel = $('<label for="addWidgetEventTypes" class="col-md-2 control-label"><?php echo _("Events to show on selected map"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        var eventTypeSelect = $('<select name="addWidgetEventTypes" class="form-control" id="addWidgetEventTypes" multiple></select>');
                                        for (var key in alarmTypes) {
                                            eventTypeSelect.append('<option value="' + key + '">' + alarmTypes[key].desc + '</option>');
                                        }

                                        eventTypeSelect.val(-1);
                                        newFormRow.append(newLabel);
                                        newInnerDiv.append(eventTypeSelect);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();

                                        $('#addWidgetEventTypes').selectpicker({
                                            actionsBox: true,
                                            width: "auto",
                                            size: "auto"
                                        });

                                        $('#addWidgetEventTypes').on('changed.bs.select', function (e) {
                                            if ($(this).val() === null) {
                                                targetEventsJson[$("#addWidgetGeolocationWidgets").val()] = [];
                                            } else {
                                                targetEventsJson[$("#addWidgetGeolocationWidgets").val()] = $(this).val();
                                            }
                                            $("#parameters").val(JSON.stringify(targetEventsJson));
                                        });

                                        $("#addWidgetGeolocationWidgets").change(function () {
                                            newLabel.show();
                                            newInnerDiv.show();
                                            $('#addWidgetEventTypes').selectpicker('val', targetEventsJson[$("#addWidgetGeolocationWidgets").val()]);
                                        });
                                    }
                                    break;

                                case "widgetTrafficEvents":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').attr('disabled', true);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("12");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Visualizzazione campi specifici per questo widget
                                    $('#specificWidgetPropertiesDiv .row').remove();
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                        addWidgetRangeTableContainer = null;

                                    //Nuova riga
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    newLabel = $('<label for="addWidgetDefaultCategory" class="col-md-2 control-label"><?php echo _("Default category"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="addWidgetDefaultCategory" name="addWidgetDefaultCategory"></select>');
                                    newSelect.append('<option value="none"><?php echo _("None"); ?></option>');
                                    newSelect.append('<option value="incident"><?php echo _("Incidents"); ?></option>');
                                    newSelect.append('<option value="roadWorks"><?php echo _("Road works"); ?></option>');
                                    newSelect.append('<option value="snow"><?php echo _("Snow"); ?></option>');
                                    newSelect.append('<option value="weatherData"><?php echo _("Weather data"); ?></option>');
                                    newSelect.append('<option value="wind"><?php echo _("Wind"); ?></option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    //Nuova riga
                                    //Target widgets geolocation
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    newLabel = $('<label for="addWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="addWidgetGeolocationWidgets" name="addWidgetGeolocationWidgets"></select>');

                                    var widgetId, widgetTitle = null;
                                    var widgetsNumber = 0;
                                    //JSON degli eventi da mostrare su ogni widget target di questo widget events: privo di eventi all'inizio
                                    var targetEventsJson = {};

                                    $("li.gs_w").each(function () {
                                        if ($(this).attr("id") != null) {
                                            if ($(this).attr("id").includes("ExternalContent") && ($(this).find("div.widget").attr("data-role") === "map")) {
                                                widgetId = $(this).attr("id");
                                                widgetTitle = $(this).find("div.titleDiv").html();
                                                newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                targetEventsJson[widgetId] = new Array();
                                                widgetsNumber++;
                                            }
                                        }
                                    });

                                    $("#parameters").val(JSON.stringify(targetEventsJson));

                                    if (widgetsNumber > 0) {
                                        newInnerDiv.append(newSelect);
                                    } else {
                                        newInnerDiv.append("None");
                                    }

                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel.show();
                                    newInnerDiv.show();

                                    if (widgetsNumber > 0) {
                                        newSelect.show();
                                        newSelect.val(-1);
                                        newLabel = $('<label for="addWidgetEventTypes" class="col-md-2 control-label"><?php echo _("Events to show on selected map"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        var eventTypeSelect = $('<select name="addWidgetEventTypes" class="form-control" id="addWidgetEventTypes" multiple></select>');
                                        var eventTypeNum = null;
                                        for (var key in trafficEventTypes) {
                                            eventTypeNum = key.replace("type", "");
                                            eventTypeSelect.append('<option value="' + eventTypeNum + '">' + trafficEventTypes[key].desc + '</option>');
                                        }
                                        eventTypeSelect.val(-1);
                                        newFormRow.append(newLabel);
                                        newInnerDiv.append(eventTypeSelect);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();

                                        $('#addWidgetEventTypes').selectpicker({
                                            actionsBox: true,
                                            width: "auto"
                                        });

                                        $('#addWidgetEventTypes').on('changed.bs.select', function (e) {
                                            if ($(this).val() === null) {
                                                targetEventsJson[$("#addWidgetGeolocationWidgets").val()] = [];
                                            } else {
                                                targetEventsJson[$("#addWidgetGeolocationWidgets").val()] = $(this).val();
                                            }
                                            $("#parameters").val(JSON.stringify(targetEventsJson));
                                        });

                                        $("#addWidgetGeolocationWidgets").change(function () {
                                            newLabel.show();
                                            newInnerDiv.show();
                                            $('#addWidgetEventTypes').selectpicker('val', targetEventsJson[$("#addWidgetGeolocationWidgets").val()]);
                                        });
                                    }
                                    break;

                                case "widgetTrafficEventsNew":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').attr('disabled', true);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("12");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Visualizzazione campi specifici per questo widget
                                    $('#specificWidgetPropertiesDiv .row').remove();
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                        addWidgetRangeTableContainer = null;

                                    //Nuova riga
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    newLabel = $('<label for="addWidgetDefaultCategory" class="col-md-2 control-label">Default category</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="addWidgetDefaultCategory" name="addWidgetDefaultCategory"></select>');
                                    newSelect.append('<option value="none"><?php echo _("None"); ?></option>');
                                    newSelect.append('<option value="incident"><?php echo _("Incidents"); ?></option>');
                                    newSelect.append('<option value="roadWorks"><?php echo _("Road works"); ?></option>');
                                    newSelect.append('<option value="snow"><?php echo _("Snow"); ?></option>');
                                    newSelect.append('<option value="weatherData"><?php echo _("Weather data"); ?></option>');
                                    newSelect.append('<option value="wind"><?php echo _("Wind"); ?></option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    //Nuova riga
                                    //Target widgets geolocation
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    newLabel = $('<label for="addWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="addWidgetGeolocationWidgets" name="addWidgetGeolocationWidgets"></select>');

                                    var widgetId, widgetTitle = null;
                                    var widgetsNumber = 0;
                                    //JSON degli eventi da mostrare su ogni widget target di questo widget events: privo di eventi all'inizio
                                    var targetEventsJson = {};

                                    $("li.gs_w").each(function () {
                                        if ($(this).attr("id") != null) {
                                            if ($(this).attr("id").includes("widgetMap")) {
                                                widgetId = $(this).attr("id");
                                                widgetTitle = $(this).find("div.titleDiv").html();
                                                newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                targetEventsJson[widgetId] = new Array();
                                                widgetsNumber++;
                                            }
                                        }
                                    });

                                    $("#parameters").val(JSON.stringify(targetEventsJson));

                                    if (widgetsNumber > 0) {
                                        newInnerDiv.append(newSelect);
                                    } else {
                                        newInnerDiv.append("None");
                                    }

                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel.show();
                                    newInnerDiv.show();

                                    if (widgetsNumber > 0) {
                                        newSelect.show();
                                        newSelect.val(-1);
                                        newLabel = $('<label for="addWidgetEventTypes" class="col-md-2 control-label"><?php echo _("Events to show on selected map"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        var eventTypeSelect = $('<select name="addWidgetEventTypes" class="form-control" id="addWidgetEventTypes" multiple></select>');
                                        var eventTypeNum = null;
                                        for (var key in trafficEventTypes) {
                                            eventTypeNum = key.replace("type", "");
                                            eventTypeSelect.append('<option value="' + eventTypeNum + '">' + trafficEventTypes[key].desc + '</option>');
                                        }
                                        eventTypeSelect.val(-1);
                                        newFormRow.append(newLabel);
                                        newInnerDiv.append(eventTypeSelect);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();

                                        $('#addWidgetEventTypes').selectpicker({
                                            actionsBox: true,
                                            width: "auto",
                                            size: "auto"
                                        });

                                        $('#addWidgetEventTypes').on('changed.bs.select', function (e) {
                                            if ($(this).val() === null) {
                                                targetEventsJson[$("#addWidgetGeolocationWidgets").val()] = [];
                                            } else {
                                                targetEventsJson[$("#addWidgetGeolocationWidgets").val()] = $(this).val();
                                            }
                                            $("#parameters").val(JSON.stringify(targetEventsJson));
                                        });

                                        $("#addWidgetGeolocationWidgets").change(function () {
                                            newLabel.show();
                                            newInnerDiv.show();
                                            $('#addWidgetEventTypes').selectpicker('val', targetEventsJson[$("#addWidgetGeolocationWidgets").val()]);
                                        });
                                    }
                                    break;

                                case "widgetFirstAid":
                                    var currentParams, i, k, currentFieldIndex, currentSeriesIndex = null;
                                    var thrTables1 = new Array();
                                    var thrTables2 = new Array();

                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("10");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("#000000");
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputUdmWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#inputFirstAidRow').show();
                                    $('#addWidgetFirstAidHospital').attr("disabled", false);
                                    $('#addWidgetFirstAidHospital').prop("required", true);
                                    $('#addWidgetFirstAidHospital').val(-1);

                                    //Proprietà specifiche del widget
                                    //RIMOZIONE CAMPI PER TUTTI GLI ALTRI WIDGET
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Visualizzazione campi specifici per questo widget
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                        addWidgetRangeTableContainer = null;

                                    //Nuova riga
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    newLabel = $('<label for="addWidgetFirstAidMode" class="col-md-2 control-label"><?php echo _("Visualization mode"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="addWidgetFirstAidMode" name="addWidgetFirstAidMode" required></select>');
                                    newSelect.append('<option value="singleSummary"><?php echo _("Single hospital - Totals only"); ?></option>');
                                    newSelect.append('<option value="singleDetails"><?php echo _("Single hospital - Details"); ?></option>');
                                    newSelect.append('<option value="hospitalsOverview"><?php echo _("Multiple hospitals overview"); ?></option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    var hospitalSelect = '<label for="addWidgetFirstAidHospital" class="col-md-2 control-label"><?php echo _("First aid"); ?></label>' +
                                        '<div class="col-md-3">' +
                                        '<div class="input-group">' +
                                        '<select name="addWidgetFirstAidHospital" class="form-control" id="addWidgetFirstAidHospital">' +
                                        '</select>' +
                                        '</div>' +
                                        '</div>';

                                    var multipleHospitalSelect = '<label for="addWidgetFirstAidHospitals" class="col-md-2 control-label"><?php echo _("First aids"); ?></label>' +
                                        '<div class="col-md-3">' +
                                        '<div class="input-group">' +
                                        '<select name="addWidgetFirstAidHospitals" class="form-control" id="addWidgetFirstAidHospitals" multiple>' +
                                        '</select>' +
                                        '</div>' +
                                        '</div>';

                                    newFormRow.append(hospitalSelect);
                                    $('label[for=addWidgetFirstAidHospital]').show();
                                    $('#addWidgetFirstAidHospital').parent().parent().show();

                                    newFormRow.append(multipleHospitalSelect);
                                    $('label[for=addWidgetFirstAidHospitals]').hide();
                                    $('#addWidgetFirstAidHospitals').parent().parent().hide();

                                    var hospitalName, hospitalUrl = null;

                                    for (var i = 0; i < hospitalList.Services.features.length; i++) {
                                        hospitalName = hospitalList.Services.features[i].properties.name;
                                        hospitalUrl = hospitalList.Services.features[i].properties.serviceUri;

                                        hospitalName = hospitalName.replace("PRONTO SOCCORSO", "PS");
                                        hospitalName = hospitalName.replace("PRIMO INTERVENTO", "PI");
                                        hospitalName = hospitalName.replace("AZIENDA OSPEDALIERA", "AO");
                                        hospitalName = hospitalName.replace("PRESIDIO OSPEDALIERO", "PO");
                                        hospitalName = hospitalName.replace("ISTITUTO DI PUBBLICA ASSISTENZA", "IPA");
                                        hospitalName = hospitalName.replace("ASSOCIAZIONE DI PUBBLICA ASSISTENZA", "APA");
                                        hospitalName = hospitalName.replace("OSPEDALE DI", "");
                                        hospitalName = hospitalName.replace("OSPEDALE DEL", "");
                                        hospitalName = hospitalName.replace("OSPEDALE DELL'", "");
                                        hospitalName = hospitalName.replace("OSPEDALE DELLA", "");
                                        hospitalName = hospitalName.replace("DELL'OSPEDALE", "");
                                        hospitalName = hospitalName.replace("OSPEDALE", "");
                                        hospitalName = hospitalName.replace("ITALIANA", "");

                                        if ($("#addWidgetFirstAidHospital").find('option[value="' + hospitalUrl + '"]').length <= 0) {
                                            $("#addWidgetFirstAidHospital").append('<option value="' + hospitalUrl + '">' + hospitalName + '</option>');
                                        }

                                        if ($("#addWidgetFirstAidHospitals").find('option[value="' + hospitalUrl + '"]').length <= 0) {
                                            $("#addWidgetFirstAidHospitals").append('<option value="' + hospitalUrl + '">' + hospitalName + '</option>');
                                        }
                                    }

                                    $("#serviceUri").val($("#addWidgetFirstAidHospital").val());

                                    var series = {
                                        "firstAxis": {
                                            "desc": "Priority",
                                            "labels": [
                                                "Red code",
                                                "Yellow code",
                                                "Green code",
                                                "Blue code",
                                                "White code"
                                            ]
                                        },
                                        "secondAxis": {
                                            "desc": "Status",
                                            "labels": [
                                                "Totals"
                                            ],
                                            "series": []
                                        }
                                    };

                                    $("#addWidgetFirstAidMode").change(function () {
                                        $("#infoMainSelect").val(-1);

                                        switch ($(this).val()) {
                                            case "singleSummary":
                                                $("#serviceUri").val($("#addWidgetFirstAidHospital").val());
                                                $('label[for=addWidgetFirstAidHospitals]').hide();
                                                $('#addWidgetFirstAidHospitals').parent().parent().hide();
                                                $('label[for=addWidgetFirstAidHospital]').show();
                                                $('#addWidgetFirstAidHospital').parent().parent().show();
                                                series = {
                                                    "firstAxis": {
                                                        "desc": "Priority",
                                                        "labels": [
                                                            "Red code",
                                                            "Yellow code",
                                                            "Green code",
                                                            "Blue code",
                                                            "White code"
                                                        ]
                                                    },
                                                    "secondAxis": {
                                                        "desc": "Status",
                                                        "labels": [
                                                            "Totals"
                                                        ],
                                                        "series": []
                                                    }
                                                };

                                                $('label[for="alrAxisSel"]').hide();
                                                $("#alrAxisSel").hide();
                                                $('label[for="alrFieldSel"]').hide();
                                                $("#alrFieldSel").hide();
                                                $("#alrAxisSel").empty();
                                                $("#alrAxisSel").append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                                $("#alrAxisSel").val(-1);
                                                $("#addWidgetRangeTableContainer").hide();
                                                $("#alrThrSel").val("no");
                                                $("#alrThrSel").attr("disabled", false);
                                                $("#alrThrSel").prop("required", true);

                                                $("#showTableFirstCell").val(-1);
                                                $("#showTableFirstCell").prop("required", false);
                                                $("#showTableFirstCell").attr("disabled", true);

                                                $("#tableFirstCellFontSize").val("");
                                                $("#tableFirstCellFontSize").prop("required", false);
                                                $("#tableFirstCellFontSize").attr("disabled", true);

                                                $("#widgetFirstCellFontColor").parent().parent().parent().colorpicker("setValue", "#eeeeee");
                                                $("#tableFirstCellFontColor").val("");
                                                $("#tableFirstCellFontColor").prop("required", false);
                                                $("#tableFirstCellFontColor").attr("disabled", true);

                                                $("#rowsLabelsFontSize").val("");
                                                $("#rowsLabelsFontSize").prop("required", false);
                                                $("#rowsLabelsFontSize").attr("disabled", true);

                                                $("#widgetRowsLabelsFontColor").parent().parent().parent().colorpicker("setValue", "#eeeeee");
                                                $("#rowsLabelsFontColor").val("");
                                                $("#rowsLabelsFontColor").prop("required", false);
                                                $("#rowsLabelsFontColor").attr("disabled", true);

                                                $("#widgetRowsLabelsBckColor").parent().parent().parent().colorpicker("setValue", "#eeeeee");
                                                $("#rowsLabelsBckColor").val("");
                                                $("#rowsLabelsBckColor").prop("required", false);
                                                $("#rowsLabelsBckColor").attr("disabled", true);
                                                break;

                                            case "singleDetails":
                                                $("#serviceUri").val($("#addWidgetFirstAidHospital").val());
                                                $('label[for=addWidgetFirstAidHospitals]').hide();
                                                $('#addWidgetFirstAidHospitals').parent().parent().hide();
                                                $('label[for=addWidgetFirstAidHospital]').show();
                                                $('#addWidgetFirstAidHospital').parent().parent().show();
                                                series = {
                                                    "firstAxis": {
                                                        "desc": "Priority",
                                                        "labels": [
                                                            "Red code",
                                                            "Yellow code",
                                                            "Green code",
                                                            "Blue code",
                                                            "White code"
                                                        ]
                                                    },
                                                    "secondAxis": {
                                                        "desc": "Status",
                                                        "labels": [
                                                            "Addressed",
                                                            "Waiting",
                                                            "In visit",
                                                            "In observation",
                                                            "Totals"
                                                        ],
                                                        "series": []
                                                    }
                                                };

                                                $('label[for="alrAxisSel"]').hide();
                                                $("#alrAxisSel").hide();
                                                $('label[for="alrFieldSel"]').hide();
                                                $("#alrFieldSel").hide();
                                                $("#alrAxisSel").empty();
                                                $("#alrAxisSel").append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                                //$("#alrAxisSel").append("<option value='" + series.secondAxis.desc + "'>" + series.secondAxis.desc + "</option>");
                                                $("#alrAxisSel").val(-1);
                                                $("#addWidgetRangeTableContainer").hide();
                                                $("#alrThrSel").val("no");
                                                $("#alrThrSel").attr("disabled", false);
                                                $("#alrThrSel").prop("required", true);

                                                $("#showTableFirstCell").val("yes");
                                                $("#showTableFirstCell").prop("required", true);
                                                $("#showTableFirstCell").attr("disabled", false);

                                                $("#tableFirstCellFontSize").val("10");
                                                $("#tableFirstCellFontSize").prop("required", true);
                                                $("#tableFirstCellFontSize").attr("disabled", false);

                                                $("#widgetFirstCellFontColor").parent().parent().parent().colorpicker("setValue", "#000000");
                                                $("#tableFirstCellFontColor").val("#000000");
                                                $("#tableFirstCellFontColor").prop("required", true);
                                                $("#tableFirstCellFontColor").attr("disabled", false);

                                                $("#rowsLabelsFontSize").val("10");
                                                $("#rowsLabelsFontSize").prop("required", true);
                                                $("#rowsLabelsFontSize").attr("disabled", false);

                                                $("#widgetRowsLabelsFontColor").parent().parent().parent().colorpicker("setValue", "#000000");
                                                $("#rowsLabelsFontColor").val("#000000");
                                                $("#rowsLabelsFontColor").prop("required", true);
                                                $("#rowsLabelsFontColor").attr("disabled", false);

                                                $("#widgetRowsLabelsBckColor").parent().parent().parent().colorpicker("setValue", "#FFFFFF");
                                                $("#rowsLabelsBckColor").val("#FFFFFF");
                                                $("#rowsLabelsBckColor").prop("required", true);
                                                $("#rowsLabelsBckColor").attr("disabled", false);
                                                break;

                                            case "hospitalsOverview":
                                                $("#serviceUri").val("");
                                                $('label[for=addWidgetFirstAidHospital]').hide();
                                                $('#addWidgetFirstAidHospital').parent().parent().hide();
                                                $('label[for=addWidgetFirstAidHospitals]').show();
                                                $('#addWidgetFirstAidHospitals').parent().parent().show();
                                                $('#addWidgetFirstAidHospitals').selectpicker({
                                                    actionsBox: true,
                                                    width: "auto"
                                                });

                                                series = {
                                                    "firstAxis": {
                                                        "desc": "Priority",
                                                        "labels": [
                                                            "Red code",
                                                            "Yellow code",
                                                            "Green code",
                                                            "Blue code",
                                                            "White code"
                                                        ]
                                                    },
                                                    "secondAxis": {
                                                        "desc": "Hospital",
                                                        "labels": [],
                                                        "series": []
                                                    }
                                                };

                                                $('#addWidgetFirstAidHospitals').on('changed.bs.select', function (e) {
                                                    $("#hospitalList").val(JSON.stringify($(this).val()));

                                                    var labelsString = $('button[data-id="addWidgetFirstAidHospitals"] span').eq(0).html().replace(/  /g, " ");
                                                    var labels = labelsString.split(", ");
                                                    series.secondAxis.labels = labels;
                                                });

                                                $('label[for="alrAxisSel"]').hide();
                                                $("#alrAxisSel").hide();
                                                $('label[for="alrFieldSel"]').hide();
                                                $("#alrFieldSel").hide();
                                                $("#alrAxisSel").empty();
                                                $("#alrAxisSel").append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                                $("#alrAxisSel").append("<option value='" + series.secondAxis.desc + "'>" + series.secondAxis.desc + "</option>");
                                                $("#alrAxisSel").val(-1);
                                                $("#addWidgetRangeTableContainer").hide();
                                                $("#alrThrSel").val("no");
                                                $("#alrThrSel").attr("disabled", true);

                                                $("#showTableFirstCell").val("yes");
                                                $("#showTableFirstCell").prop("required", true);
                                                $("#showTableFirstCell").attr("disabled", false);

                                                $("#tableFirstCellFontSize").val("10");
                                                $("#tableFirstCellFontSize").prop("required", true);
                                                $("#tableFirstCellFontSize").attr("disabled", false);

                                                $("#widgetFirstCellFontColor").parent().parent().parent().colorpicker("setValue", "#000000");
                                                $("#tableFirstCellFontColor").val("#000000");
                                                $("#tableFirstCellFontColor").prop("required", true);
                                                $("#tableFirstCellFontColor").attr("disabled", false);

                                                $("#rowsLabelsFontSize").val("10");
                                                $("#rowsLabelsFontSize").prop("required", true);
                                                $("#rowsLabelsFontSize").attr("disabled", false);

                                                $("#widgetRowsLabelsFontColor").parent().parent().parent().colorpicker("setValue", "#000000");
                                                $("#rowsLabelsFontColor").val("#000000");
                                                $("#rowsLabelsFontColor").prop("required", true);
                                                $("#rowsLabelsFontColor").attr("disabled", false);

                                                $("#widgetRowsLabelsBckColor").parent().parent().parent().colorpicker("setValue", "#FFFFFF");
                                                $("#rowsLabelsBckColor").val("#FFFFFF");
                                                $("#rowsLabelsBckColor").prop("required", true);
                                                $("#rowsLabelsBckColor").attr("disabled", false);

                                                break;
                                        }

                                        //Distruzione thr tables
                                        thrTables1 = new Array();
                                        thrTables2 = new Array();

                                        //Funzione di settaggio dei globals per il file dashboard_configdash.js
                                        setGlobals(null, thrTables1, thrTables2, series, $('#select-widget').val());

                                        //Costruzione THRTables vuote
                                        buildEmptyThrTables();
                                    });

                                    $("#addWidgetFirstAidHospital").change(function () {
                                        $("#serviceUri").val($(this).val());
                                    });

                                    //Funzione di settaggio dei globals per il file dashboard_configdash.js
                                    setGlobals(null, thrTables1, thrTables2, series, $('#select-widget').val());

                                    //Costruzione THRTables vuote
                                    buildEmptyThrTables();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Nuova riga
                                    //Target widgets geolocation
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    //Select show first cell
                                    newLabel = $('<label for="showTableFirstCell" class="col-md-2 control-label"><?php echo _("Show first cell"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="showTableFirstCell" name="showTableFirstCell" required></select>');
                                    newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                    newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();
                                    $("#showTableFirstCell").val(-1);
                                    $("#showTableFirstCell").prop("required", false);
                                    $("#showTableFirstCell").attr("disabled", true);

                                    //Nuova riga
                                    //First cell font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="tableFirstCellFontSize" class="col-md-2 control-label"><?php echo _("First cell font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="tableFirstCellFontSize" name="tableFirstCellFontSize" value="10" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();
                                    $("#tableFirstCellFontSize").val("");
                                    $("#tableFirstCellFontSize").prop("required", false);
                                    $("#tableFirstCellFontSize").attr("disabled", true);

                                    //First cell font color
                                    newLabel = $('<label for="tableFirstCellFontColor" class="col-md-2 control-label"><?php echo _("First cell font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="tableFirstCellFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="tableFirstCellFontColor" name="tableFirstCellFontColor" required><span class="input-group-addon"><i id="widgetFirstCellFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#tableFirstCellFontColorContainer').show();
                                    $('#tableFirstCellFontColor').show();
                                    $("#widgetFirstCellFontColor").css('display', 'block');
                                    $("#widgetFirstCellFontColor").parent().parent().parent().colorpicker({
                                        color: "#eeeeee",
                                        format: "rgba"
                                    });
                                    $("#tableFirstCellFontColor").val("");
                                    $("#tableFirstCellFontColor").prop("required", false);
                                    $("#tableFirstCellFontColor").attr("disabled", true);


                                    //Nuova riga
                                    //Rows labels font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="rowsLabelsFontSize" class="col-md-2 control-label"><?php echo _("Rows labels font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="rowsLabelsFontSize" name="rowsLabelsFontSize" value="10" required> ');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();
                                    $("#rowsLabelsFontSize").val("");
                                    $("#rowsLabelsFontSize").prop("required", false);
                                    $("#rowsLabelsFontSize").attr("disabled", true);

                                    //Rows labels font color
                                    newLabel = $('<label for="rowsLabelsFontColor" class="col-md-2 control-label"><?php echo _("Rows labels font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="rowsLabelsFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="rowsLabelsFontColor" name="rowsLabelsFontColor" required><span class="input-group-addon"><i id="widgetRowsLabelsFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#rowsLabelsFontColorContainer').show();
                                    $('#rowsLabelsFontColor').show();
                                    $("#widgetRowsLabelsFontColor").css('display', 'block');
                                    $("#widgetRowsLabelsFontColor").parent().parent().parent().colorpicker({
                                        color: "#eeeeee",
                                        format: "rgba"
                                    });
                                    $("#widgetRowsLabelsFontColor").parent().parent().parent().colorpicker("setValue", "#eeeeee");
                                    $("#rowsLabelsFontColor").val("");
                                    $("#rowsLabelsFontColor").prop("required", false);
                                    $("#rowsLabelsFontColor").attr("disabled", true);

                                    //Nuova riga
                                    //Cols labels font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="colsLabelsFontSize" class="col-md-2 control-label"><?php echo _("Cols labels font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="colsLabelsFontSize" name="colsLabelsFontSize" value="10" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Cols labels font color
                                    newLabel = $('<label for="colsLabelsFontColor" class="col-md-2 control-label"><?php echo _("Cols labels font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="colsLabelsFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="colsLabelsFontColor" name="colsLabelsFontColor" required><span class="input-group-addon"><i id="widgetColsLabelsFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#colsLabelsFontColorContainer').show();
                                    $('#colsLabelsFontColor').show();
                                    $("#widgetColsLabelsFontColor").css('display', 'block');
                                    $("#widgetColsLabelsFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });

                                    //Nuova riga
                                    //Rows labels background color
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="rowsLabelsBckColor" class="col-md-2 control-label">Rows labels background color</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="rowsLabelsBckColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="rowsLabelsBckColor" name="rowsLabelsBckColor" required><span class="input-group-addon"><i id="widgetRowsLabelsBckColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#rowsLabelsBckColorContainer').show();
                                    $('#rowsLabelsBckColor').show();
                                    $("#widgetRowsLabelsBckColor").css('display', 'block');
                                    $("#widgetRowsLabelsBckColor").parent().parent().parent().colorpicker({
                                        color: "#FFFFFF",
                                        format: "rgba"
                                    });
                                    $("#rowsLabelsBckColor").val("");
                                    $("#widgetRowsLabelsFontColor").parent().parent().parent().colorpicker("setValue", "#eeeeee");
                                    $("#rowsLabelsFontColor").val("");
                                    $("#rowsLabelsBckColor").prop("required", false);
                                    $("#rowsLabelsBckColor").attr("disabled", true);

                                    //Nuova riga
                                    //Table borders
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="tableBorders" class="col-md-2 control-label"><?php echo _("Table borders"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="tableBorders" name="tableBorders"></select>');
                                    newSelect.append('<option value="no">No borders</option>');
                                    newSelect.append('<option value="horizontal">Horizontal borders only</option>');
                                    newSelect.append('<option value="all">All borders</option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Table borders color
                                    newLabel = $('<label for="tableBordersColor" class="col-md-2 control-label"><?php echo _("Table borders color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="tableBordersColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="tableBordersColor" name="tableBordersColor" required><span class="input-group-addon"><i id="widgetTableBordersColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#tableBordersColorContainer').show();
                                    $('#tableBordersColor').show();
                                    $("#widgetTableBordersColor").css('display', 'block');
                                    $("#widgetTableBordersColor").parent().parent().parent().colorpicker({
                                        color: "#EEEEEE",
                                        format: "rgba"
                                    });

                                    //Nuova riga
                                    //Set thresholds
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="alrThrSel" class="col-md-2 control-label"><?php echo _("Set thresholds"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="alrThrSel" name="alrThrSel" required>');
                                    newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                    newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                    newSelect.val('no');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Listener per settaggio/desettaggio soglie relativo alla select "Set thresholds"
                                    $('#alrThrSel').change(alrThrSelListener);

                                    //Threshold target select - Questa select viene nascosta o mostrata a seconda che nella "Set thresholds" si selezioni yes o no.
                                    newLabel = $('<label for="alrAxisSel" class="col-md-2 control-label"><?php echo _("Thresholds target set"); ?></label>');
                                    newSelect = $('<select class="form-control" id="alrAxisSel" name="alrAxisSel"></select>');
                                    newSelect.append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                    //newSelect.append("<option value='" + series.secondAxis.desc + "'>" + series.secondAxis.desc + "</option>");
                                    newSelect.val(-1);
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.hide();
                                    newInnerDiv.hide();
                                    newSelect.hide();

                                    //Nuova riga
                                    //Threshold field select
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="alrFieldSel" class="col-md-2 control-label"><?php echo _("Thresholds target field"); ?></label>');
                                    newSelect = $('<select class="form-control" id="alrFieldSel" name="alrFieldSel">');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.hide();
                                    newInnerDiv.hide();
                                    newSelect.hide();

                                    //Contenitore per tabella delle soglie
                                    addWidgetRangeTableContainer = $('<div id="addWidgetRangeTableContainer" class="row rowCenterContent"></div>');
                                    $("#specificWidgetPropertiesDiv").append(addWidgetRangeTableContainer);
                                    addWidgetRangeTableContainer.hide();

                                    removeWidgetProcessGeneralFields("addWidget");
                                    break;


                                case "widgetRadarSeries":
                                    var currentParams, i, k, currentFieldIndex, currentSeriesIndex, row, cell,
                                        descName = null;
                                    var metricId = $('#select-metric').val();
                                    var metricData = getMetricData(metricId);
                                    var seriesString = metricData.data[0].commit.author.series;
                                    var series = jQuery.parseJSON(seriesString);

                                    //Costruzione THRTable vuota
                                    var thrTable = $("<table class='thrRangeTableRadar table table-bordered'></table>");
                                    row = $('<tr></tr>');
                                    cell = $('<td><a href="#"><i class="fa fa-plus" style="font-size:24px;color:#337ab7"></i></a></td>');
                                    row.append(cell);
                                    cell = $('<td>Color</td>');
                                    row.append(cell);
                                    cell = $('<td>Short description</td>');
                                    row.append(cell);

                                    //Colonne per i limiti sup di ogni campo
                                    for (var i in series.firstAxis.labels) {
                                        if (series.firstAxis.labels[i].length > 8) {
                                            descName = series.firstAxis.labels[i].substr(0, 8) + "...";
                                        } else {
                                            descName = series.firstAxis.labels[i];
                                        }

                                        cell = $('<td class="boundDesc"><b>' + descName + '</b><br/><?php echo _("limit"); ?></td>');
                                        row.append(cell);
                                    }

                                    thrTable.append(row);

                                    //Funzione di settaggio dei globals per il file dashboard_configdash.js
                                    setGlobalsRadar(null, thrTable, series, $('#select-widget').val());

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').prop("required", false);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("10");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("#000000");
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputUdmWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();


                                    //Proprietà specifiche del widget
                                    //RIMOZIONE CAMPI PER TUTTI GLI ALTRI WIDGET
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Proprietà specifiche
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Visualizzazione campi specifici per questo widget
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                        addWidgetRangeTableContainer = null;

                                    //Nuova riga
                                    //Rows labels font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="rowsLabelsFontSize" class="col-md-2 control-label"><?php echo _("X-Axis labels font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="rowsLabelsFontSize" name="rowsLabelsFontSize" value="10" required> ');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Rows labels font color
                                    newLabel = $('<label for="rowsLabelsFontColor" class="col-md-2 control-label"><?php echo _("X-Axis labels font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="rowsLabelsFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="rowsLabelsFontColor" name="rowsLabelsFontColor" required><span class="input-group-addon"><i id="widgetRowsLabelsFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#rowsLabelsFontColorContainer').show();
                                    $('#rowsLabelsFontColor').show();
                                    $("#widgetRowsLabelsFontColor").css('display', 'block');
                                    $("#widgetRowsLabelsFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });

                                    //Nuova riga
                                    //Cols labels font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="colsLabelsFontSize" class="col-md-2 control-label"><?php echo _("Y-Axis labels font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="colsLabelsFontSize" name="colsLabelsFontSize" value="10" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Cols labels font color
                                    newLabel = $('<label for="colsLabelsFontColor" class="col-md-2 control-label"><?php echo _("Y-Axis labels font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="colsLabelsFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="colsLabelsFontColor" name="colsLabelsFontColor" required><span class="input-group-addon"><i id="widgetColsLabelsFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#colsLabelsFontColorContainer').show();
                                    $('#colsLabelsFontColor').show();
                                    $("#widgetColsLabelsFontColor").css('display', 'block');
                                    $("#widgetColsLabelsFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });

                                    //Nuova riga
                                    //Data labels font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="dataLabelsFontSize" class="col-md-2 control-label"><?php echo _("Data labels font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="dataLabelsFontSize" name="dataLabelsFontSize" value="10" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Data labels font color
                                    newLabel = $('<label for="dataLabelsFontColor" class="col-md-2 control-label"><?php echo _("Data labels font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="dataLabelsFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="dataLabelsFontColor" name="dataLabelsFontColor" required><span class="input-group-addon"><i id="widgetDataLabelsFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#dataLabelsFontColorContainer').show();
                                    $('#dataLabelsFontColor').show();
                                    $("#widgetDataLabelsFontColor").css('display', 'block');
                                    $("#widgetDataLabelsFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });

                                    //Nuova riga
                                    //Legend font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="legendFontSize" class="col-md-2 control-label"><?php echo _("Legend font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="legendFontSize" name="legendFontSize" value="10" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Legend font color
                                    newLabel = $('<label for="legendFontColor" class="col-md-2 control-label">Legend font color</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="legendFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="legendFontColor" name="legendFontColor" required><span class="input-group-addon"><i id="widgetLegendFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#legendFontColorContainer').show();
                                    $('#legendFontColor').show();
                                    $("#widgetLegendFontColor").css('display', 'block');
                                    $("#widgetLegendFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });

                                    //Nuova riga
                                    //Grid lines width
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="gridLinesWidth" class="col-md-2 control-label">Grid lines width</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="gridLinesWidth" name="gridLinesWidth" value="1" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Grid lines color
                                    newLabel = $('<label for="gridLinesColor" class="col-md-2 control-label">Grid lines color</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="gridLinesColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="gridLinesColor" name="gridLinesColor" required><span class="input-group-addon"><i id="widgetGridLinesColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#gridLinesColorContainer').show();
                                    $('#gridLinesColor').show();
                                    $("#widgetGridLinesColor").css('display', 'block');
                                    $("#widgetGridLinesColor").parent().parent().parent().colorpicker({
                                        color: "#e6e6e6",
                                        format: "rgba"
                                    });

                                    //Nuova riga
                                    //Lines width
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="linesWidth" class="col-md-2 control-label">Lines width</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="linesWidth" name="linesWidth" value="1" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Lines colors
                                    newLabel = $('<label for="barsColorsSelect" class="col-md-2 control-label">Lines colors</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="barsColorsSelect" name="barsColorsSelect"></select>');
                                    newSelect.append('<option value="auto">Automatic</option>');
                                    newSelect.append('<option value="manual">Manual</option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Contenitore per tabella dei colori
                                    barsColorsTableContainer = $('<div id="barsColorsTableContainer" class="row rowCenterContent"></div>');
                                    $("#specificWidgetPropertiesDiv").append(barsColorsTableContainer);
                                    barsColorsTableContainer.hide();

                                    //Costruiamo la tabella dei colori e il corrispondente JSON una tantum e mostriamola/nascondiamola a seconda di cosa sceglie l'utente, per non perdere eventuali colori immessi in precedenza.
                                    var colorsTable, newRow, newCell = null;
                                    var defaultColorsArray = ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'];
                                    var colorsArray = new Array();

                                function updateWidgetBarSeriesColors(e, params) {
                                    var newColor = $(this).colorpicker('getValue');
                                    var index = parseInt($(this).parents('tr').index() - 1);
                                    colorsArray[index] = newColor;
                                    $("#barsColors").val(JSON.stringify(colorsArray));
                                }

                                    colorsTable = $("<table id ='colorsTable' class='table table-bordered table-condensed thrRangeTable'><tr><td>Series</td><td>Color</td></tr></table>");
                                    for (var i in series.secondAxis.labels) {
                                        newRow = $('<tr></tr>');
                                        newCell = $('<td>' + series.secondAxis.labels[i] + '</td>');
                                        newRow.append(newCell);
                                        newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                        newRow.append(newCell);
                                        newRow.find('div.colorPicker').colorpicker({
                                            color: defaultColorsArray[i % 10],
                                            format: "rgba"
                                        });
                                        newRow.find('div.colorPicker').on('changeColor', updateWidgetBarSeriesColors);
                                        colorsArray.push(defaultColorsArray[i % 10]);
                                        colorsTable.append(newRow);
                                    }

                                    $("#barsColors").val(JSON.stringify(colorsArray));
                                    $('#barsColorsTableContainer').append(colorsTable);

                                    $('#barsColorsSelect').change(function () {
                                        if ($('#barsColorsSelect').val() === "manual") {
                                            $('#barsColorsTableContainer').show();
                                        } else {
                                            $('#barsColorsTableContainer').hide();
                                        }
                                    });


                                    //Codice di creazione soglie
                                    //Nuova riga
                                    //Set thresholds
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="alrThrSel" class="col-md-2 control-label"><?php echo _("Set thresholds"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="alrThrSel" name="alrThrSel" required>');
                                    newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                    newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                    newSelect.val('no');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Thresholds lines width
                                    newLabel = $('<label for="alrThrLinesWidth" class="col-md-2 control-label">Thresholds lines width</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="alrThrLinesWidth" name="alrThrLinesWidth" value="1" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.hide();
                                    newInnerDiv.hide();
                                    newInput.hide();

                                    //Listener per settaggio/desettaggio soglie relativo alla select "Set thresholds"
                                    $('#alrThrSel').change(alrThrSelListenerRadar);

                                    //Contenitore per tabella delle soglie
                                    addWidgetRangeTableContainer = $('<div id="addWidgetRangeTableContainer" class="row  thrRangeTableRadarContainer"></div>');  //rowCenterContent
                                    $("#specificWidgetPropertiesDiv").append(addWidgetRangeTableContainer);
                                    addWidgetRangeTableContainer.hide();
                                    break;

                                case "widgetLineSeries":
                                case "widgetCurvedLineSeries":
                                    var currentParams, i, k, currentFieldIndex, currentSeriesIndex = null;
                                    var metricId = $('#select-metric').val();
                                    var metricData = getMetricData(metricId);
                                    var seriesString = metricData.data[0].commit.author.series;
                                    var series = jQuery.parseJSON(seriesString);
                                    var thrTables1 = new Array();
                                    var thrTables2 = new Array();

                                    //Funzione di settaggio dei globals per il file dashboard_configdash.js
                                    setGlobals(null, thrTables1, thrTables2, series, $('#select-widget').val());

                                    //Costruzione THRTables vuote
                                    buildEmptyThrTables();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').prop("required", false);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("10");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("#000000");
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputUdmWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Proprietà specifiche del widget
                                    //RIMOZIONE CAMPI PER TUTTI GLI ALTRI WIDGET
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Proprietà specifiche
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Visualizzazione campi specifici per questo widget
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                        addWidgetRangeTableContainer = null;

                                    //Nuova riga
                                    //X-Axis dataset
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="xAxisDataset" class="col-md-2 control-label">X-Axis dataset</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="xAxisDataset" name="xAxisDataset" required>');
                                    newSelect.append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                    newSelect.append("<option value='" + series.secondAxis.desc + "'>" + series.secondAxis.desc + "</option>");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Line width
                                    newLabel = $('<label for="lineWidth" class="col-md-2 control-label">Line width</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="lineWidth" name="lineWidth" value="2" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Nuova Riga
                                    //X-Axis Format
                                    // Rimuovere commento solo dopo aver testato su vecchie curvedLineSeries !
                                /*    newFormRow = $('<div class="row"></div>');
                                    $("#specificParamsM").append(newFormRow);
                                    newLabel = $('<label for="xAxisFormat" class="col-md-2 control-label">X-Axis format</label>');
                                    newInnerDiv = $('<div class="col-md-3" id="chartTypeDiv"></div>');
                                    newSelect = $('<select class="form-control" id="xAxisFormat" name="xAxisFormat"></select>');
                                    newSelect.append("<option value='lines'>Timestamp</option>");
                                    newSelect.append("<option value='area'>Numeric</option>");
                                    newSelect.val(styleParameters.chartType);
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Y-Axis Type
                                    newLabel = $('<label for="yAxisType" class="col-md-2 control-label">Y-Axis type</label>');
                                    newInnerDiv = $('<div class="col-md-3" id="chartTypeDiv"></div>');
                                    newSelect = $('<select class="form-control" id="yAxisType" name="yAxisType"></select>');
                                    newSelect.append("<option value='lines'>Linear</option>");
                                    newSelect.append("<option value='area'>Logarithmic</option>");
                                    newSelect.val(styleParameters.chartType);
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();   */

                                    //Nuova riga
                                    //X-Axis labels font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="rowsLabelsFontSize" class="col-md-2 control-label"><?php echo _("X-Axis labels font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="rowsLabelsFontSize" name="rowsLabelsFontSize" value="10" required> ');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //X-Axis labels font color
                                    newLabel = $('<label for="rowsLabelsFontColor" class="col-md-2 control-label"><?php echo _("X-Axis labels font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="rowsLabelsFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="rowsLabelsFontColor" name="rowsLabelsFontColor" required><span class="input-group-addon"><i id="widgetRowsLabelsFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#rowsLabelsFontColorContainer').show();
                                    $('#rowsLabelsFontColor').show();
                                    $("#widgetRowsLabelsFontColor").css('display', 'block');
                                    $("#widgetRowsLabelsFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });

                                    //Nuova riga
                                    //Y-Axis labels font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="colsLabelsFontSize" class="col-md-2 control-label"><?php echo _("Y-Axis labels font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="colsLabelsFontSize" name="colsLabelsFontSize" value="10" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Y-Axis labels font color
                                    newLabel = $('<label for="colsLabelsFontColor" class="col-md-2 control-label"><?php echo _("Y-Axis labels font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="colsLabelsFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="colsLabelsFontColor" name="colsLabelsFontColor" required><span class="input-group-addon"><i id="widgetColsLabelsFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#colsLabelsFontColorContainer').show();
                                    $('#colsLabelsFontColor').show();
                                    $("#widgetColsLabelsFontColor").css('display', 'block');
                                    $("#widgetColsLabelsFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });

                                    //Nuova riga
                                    //Data labels font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="dataLabelsFontSize" class="col-md-2 control-label"><?php echo _("Data labels font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="dataLabelsFontSize" name="dataLabelsFontSize" value="10" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Data labels font color
                                    newLabel = $('<label for="dataLabelsFontColor" class="col-md-2 control-label"><?php echo _("Data labels font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="dataLabelsFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="dataLabelsFontColor" name="dataLabelsFontColor" required><span class="input-group-addon"><i id="widgetDataLabelsFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#dataLabelsFontColorContainer').show();
                                    $('#dataLabelsFontColor').show();
                                    $("#widgetDataLabelsFontColor").css('display', 'block');
                                    $("#widgetDataLabelsFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });

                                    //Nuova riga
                                    //Legend font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="legendFontSize" class="col-md-2 control-label"><?php echo _("Legend font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="legendFontSize" name="legendFontSize" value="10" required>  ');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Legend font color
                                    newLabel = $('<label for="legendFontColor" class="col-md-2 control-label">Legend font color</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="legendFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="legendFontColor" name="legendFontColor" required><span class="input-group-addon"><i id="widgetLegendFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#legendFontColorContainer').show();
                                    $('#legendFontColor').show();
                                    $("#widgetLegendFontColor").css('display', 'block');
                                    $("#widgetLegendFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });

                                    //Nuova riga
                                    //Lines colors
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="barsColorsSelect" class="col-md-2 control-label">Lines colors</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="barsColorsSelect" name="barsColorsSelect"></select>');
                                    newSelect.append('<option value="auto">Automatic</option>');
                                    newSelect.append('<option value="manual">Manual</option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Chart type
                                    newLabel = $('<label for="chartType" class="col-md-2 control-label">Chart type</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="chartType" name="chartType"></select>');
                                    newSelect.append("<option value='lines'>Simple lines</option>");
                                    newSelect.append("<option value='area'>Area lines</option>");
                                    newSelect.append("<option value='stacked'>Stacked area lines</option>");
                                    newSelect.val("lines");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Nuova riga
                                    //Data labels
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="dataLabels" class="col-md-2 control-label">Data labels</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="dataLabels" name="dataLabels"> ');
                                    newSelect.append('<option value="no">No data labels</option>');
                                    newSelect.append('<option value="value">Value only</option>');
                                    newSelect.append('<option value="full">Field name and value</option>');
                                    newSelect.val("value");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Contenitore per tabella dei colori
                                    barsColorsTableContainer = $('<div id="barsColorsTableContainer" class="row rowCenterContent"></div>');
                                    $("#specificWidgetPropertiesDiv").append(barsColorsTableContainer);
                                    barsColorsTableContainer.hide();

                                    //Costruiamo la tabella dei colori e il corrispondente JSON una tantum e mostriamola/nascondiamola a seconda di cosa sceglie l'utente, per non perdere eventuali colori immessi in precedenza.
                                    var colorsTable, newRow, newCell = null;
                                    var defaultColorsArray = ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'];
                                    var colorsArray = new Array();

                                function updateXAxisSelect() {
                                    var colorsTarget = null;
                                    colorsTable.find('tr').remove();
                                    colorsTable.append("<tr><td>Series</td><td>Color</td></tr>");

                                    $('#alrAxisSel').empty();

                                    if ($("#xAxisDataset").val() === series.firstAxis.desc) {
                                        //Grafico non trasposto
                                        colorsTarget = series.secondAxis.labels;
                                        $('#alrAxisSel').append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                    } else {
                                        //Grafico trasposto
                                        colorsTarget = series.firstAxis.labels;
                                        $('#alrAxisSel').append("<option value='" + series.secondAxis.desc + "'>" + series.secondAxis.desc + "</option>");
                                    }

                                    alrAxisSelListener();

                                    for (var i in colorsTarget) {
                                        newRow = $('<tr></tr>');
                                        newCell = $('<td>' + colorsTarget[i] + '</td>');
                                        newRow.append(newCell);
                                        newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                        newRow.append(newCell);
                                        newRow.find('div.colorPicker').colorpicker({
                                            color: defaultColorsArray[i % 10],
                                            format: "rgba"
                                        });
                                        newRow.find('div.colorPicker').on('changeColor', updateWidgetBarSeriesColors);
                                        colorsArray.push(defaultColorsArray[i % 10]);
                                        colorsTable.append(newRow);
                                    }
                                    $('label[for="alrFieldSel"]').hide();
                                    $('#alrFieldSel').hide();
                                    $('#alrFieldSel').parent().hide();
                                    $('label[for="alrAxisSel"]').hide();
                                    $('#alrAxisSel').hide();
                                    $('#alrAxisSel').parent().hide();
                                    $('#alrThrSel').val("no");
                                }

                                function updateWidgetBarSeriesColors(e, params) {
                                    var newColor = $(this).colorpicker('getValue');
                                    var index = parseInt($(this).parents('tr').index() - 1);
                                    colorsArray[index] = newColor;
                                    $("#barsColors").val(JSON.stringify(colorsArray));
                                }

                                    $("#xAxisDataset").off();
                                    $("#xAxisDataset").on("change", updateXAxisSelect);

                                    colorsTable = $("<table id ='colorsTable' class='table table-bordered table-condensed thrRangeTable'><tr><td>Series</td><td>Color</td></tr></table>");

                                    updateXAxisSelect();

                                    $("#barsColors").val(JSON.stringify(colorsArray));
                                    $('#barsColorsTableContainer').append(colorsTable);

                                    $('#barsColorsSelect').change(function () {
                                        if ($('#barsColorsSelect').val() === "manual") {
                                            $('#barsColorsTableContainer').show();
                                        } else {
                                            $('#barsColorsTableContainer').hide();
                                        }
                                    });

                                    //Codice costruzione soglie
                                    //Nuova riga
                                    //Set thresholds
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="alrThrSel" class="col-md-2 control-label"><?php echo _("Set thresholds"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="alrThrSel" name="alrThrSel" required>');
                                    newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                    newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                    newSelect.val('no');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();
									

                                    //Listener per settaggio/desettaggio soglie relativo alla select "Set thresholds"
                                    $('#alrThrSel').change(alrThrSelListener);

                                    //Threshold target select - Questa select viene nascosta o mostrata a seconda che nella "Set thresholds" si selezioni yes o no.
                                    newLabel = $('<label for="alrAxisSel" class="col-md-2 control-label">Thresholds target set</label>');
                                    newSelect = $('<select class="form-control" id="alrAxisSel" name="alrAxisSel"></select>');
                                    if ($("#xAxisDataset").val() === series.firstAxis.desc) {
                                        //No trasposizione
                                        newSelect.append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                    } else {
                                        //Trasposizione
                                        newSelect.append("<option value='" + series.secondAxis.desc + "'>" + series.secondAxis.desc + "</option>");
                                    }
                                    alrAxisSelListener();
                                    newSelect.val(-1);
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.hide();
                                    newInnerDiv.hide();
                                    newSelect.hide();

                                    //Nuova riga
                                    //Threshold field select
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="alrFieldSel" class="col-md-2 control-label"><?php echo _("Thresholds target field"); ?></label>');
                                    newSelect = $('<select class="form-control" id="alrFieldSel" name="alrFieldSel">');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.hide();
                                    newInnerDiv.hide();
                                    newSelect.hide();

                                    //Threshold look&feel
                                    newLabel = $('<label for="alrLook" class="col-md-2 control-label">Thresholds look&feel</label>');
                                    newSelect = $('<select class="form-control" id="alrLook" name="alrLook">');
                                    newSelect.append('<option value="none">Tooltip only</option>');
                                    newSelect.append('<option value="lines">Lines</option>');
                                    newSelect.append('<option value="areas">Background areas</option>');
                                    newSelect.val("lines");
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.hide();
                                    newInnerDiv.hide();
                                    newSelect.hide();

                                    //Contenitore per tabella delle soglie
                                    addWidgetRangeTableContainer = $('<div id="addWidgetRangeTableContainer" class="row rowCenterContent"></div>');
                                    $("#specificWidgetPropertiesDiv").append(addWidgetRangeTableContainer);
                                    addWidgetRangeTableContainer.hide();
                                    break;

                                case "widgetCalendar":
                                    var currentParams, i, k, currentFieldIndex, currentSeriesIndex = null;
                                    var metricId = $('#select-metric').val();
                                    var metricData = getMetricData(metricId);
                                    var seriesString = metricData.data[0].commit.author.series;
                                    var series = jQuery.parseJSON(seriesString);
                                    var thrTables1 = new Array();
                                    var thrTables2 = new Array();

                                    //Funzione di settaggio dei globals per il file dashboard_configdash.js
                                    setGlobals(null, thrTables1, thrTables2, series, $('#select-widget').val());

                                    //Costruzione THRTables vuote
                                    buildEmptyThrTables();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').prop("required", false);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("10");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("#000000");
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputUdmWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Proprietà specifiche del widget
                                    //RIMOZIONE CAMPI PER TUTTI GLI ALTRI WIDGET
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Proprietà specifiche
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Visualizzazione campi specifici per questo widget
                                    /*var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                        addWidgetRangeTableContainer = null;

                                    //Nuova riga
                                    //X-Axis dataset
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="xAxisDataset" class="col-md-2 control-label">X-Axis dataset</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="xAxisDataset" name="xAxisDataset" required>');
                                    newSelect.append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                    newSelect.append("<option value='" + series.secondAxis.desc + "'>" + series.secondAxis.desc + "</option>");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Line width
                                    newLabel = $('<label for="lineWidth" class="col-md-2 control-label">Line width</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="lineWidth" name="lineWidth" value="2" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Nuova riga
                                    //X-Axis labels font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="rowsLabelsFontSize" class="col-md-2 control-label"><?php echo _("X-Axis labels font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="rowsLabelsFontSize" name="rowsLabelsFontSize" value="10" required> ');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //X-Axis labels font color
                                    newLabel = $('<label for="rowsLabelsFontColor" class="col-md-2 control-label"><?php echo _("X-Axis labels font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="rowsLabelsFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="rowsLabelsFontColor" name="rowsLabelsFontColor" required><span class="input-group-addon"><i id="widgetRowsLabelsFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#rowsLabelsFontColorContainer').show();
                                    $('#rowsLabelsFontColor').show();
                                    $("#widgetRowsLabelsFontColor").css('display', 'block');
                                    $("#widgetRowsLabelsFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });

                                    //Nuova riga
                                    //Y-Axis labels font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="colsLabelsFontSize" class="col-md-2 control-label"><?php echo _("Y-Axis labels font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="colsLabelsFontSize" name="colsLabelsFontSize" value="10" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Y-Axis labels font color
                                    newLabel = $('<label for="colsLabelsFontColor" class="col-md-2 control-label"><?php echo _("Y-Axis labels font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="colsLabelsFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="colsLabelsFontColor" name="colsLabelsFontColor" required><span class="input-group-addon"><i id="widgetColsLabelsFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#colsLabelsFontColorContainer').show();
                                    $('#colsLabelsFontColor').show();
                                    $("#widgetColsLabelsFontColor").css('display', 'block');
                                    $("#widgetColsLabelsFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });

                                    //Nuova riga
                                    //Data labels font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="dataLabelsFontSize" class="col-md-2 control-label"><?php echo _("Data labels font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="dataLabelsFontSize" name="dataLabelsFontSize" value="10" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Data labels font color
                                    newLabel = $('<label for="dataLabelsFontColor" class="col-md-2 control-label"><?php echo _("Data labels font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="dataLabelsFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="dataLabelsFontColor" name="dataLabelsFontColor" required><span class="input-group-addon"><i id="widgetDataLabelsFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#dataLabelsFontColorContainer').show();
                                    $('#dataLabelsFontColor').show();
                                    $("#widgetDataLabelsFontColor").css('display', 'block');
                                    $("#widgetDataLabelsFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });

                                    //Nuova riga
                                    //Legend font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="legendFontSize" class="col-md-2 control-label"><?php echo _("Legend font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="legendFontSize" name="legendFontSize" value="10" required>  ');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Legend font color
                                    newLabel = $('<label for="legendFontColor" class="col-md-2 control-label">Legend font color</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="legendFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="legendFontColor" name="legendFontColor" required><span class="input-group-addon"><i id="widgetLegendFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#legendFontColorContainer').show();
                                    $('#legendFontColor').show();
                                    $("#widgetLegendFontColor").css('display', 'block');
                                    $("#widgetLegendFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });

                                    //Nuova riga
                                    //Lines colors
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="barsColorsSelect" class="col-md-2 control-label">Lines colors</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="barsColorsSelect" name="barsColorsSelect"></select>');
                                    newSelect.append('<option value="auto">Automatic</option>');
                                    newSelect.append('<option value="manual">Manual</option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Chart type
                                    newLabel = $('<label for="chartType" class="col-md-2 control-label">Chart type</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="chartType" name="chartType"></select>');
                                    newSelect.append("<option value='lines'>Simple lines</option>");
                                    newSelect.append("<option value='area'>Area lines</option>");
                                    newSelect.append("<option value='stacked'>Stacked area lines</option>");
                                    newSelect.val("lines");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Nuova riga
                                    //Data labels
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="dataLabels" class="col-md-2 control-label">Data labels</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="dataLabels" name="dataLabels"> ');
                                    newSelect.append('<option value="no">No data labels</option>');
                                    newSelect.append('<option value="value">Value only</option>');
                                    newSelect.append('<option value="full">Field name and value</option>');
                                    newSelect.val("value");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Contenitore per tabella dei colori
                                    barsColorsTableContainer = $('<div id="barsColorsTableContainer" class="row rowCenterContent"></div>');
                                    $("#specificWidgetPropertiesDiv").append(barsColorsTableContainer);
                                    barsColorsTableContainer.hide();

                                    //Costruiamo la tabella dei colori e il corrispondente JSON una tantum e mostriamola/nascondiamola a seconda di cosa sceglie l'utente, per non perdere eventuali colori immessi in precedenza.
                                    var colorsTable, newRow, newCell = null;
                                    var defaultColorsArray = ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'];
                                    var colorsArray = new Array();

                                function updateXAxisSelect() {
                                    var colorsTarget = null;
                                    colorsTable.find('tr').remove();
                                    colorsTable.append("<tr><td>Series</td><td>Color</td></tr>");

                                    $('#alrAxisSel').empty();

                                    if ($("#xAxisDataset").val() === series.firstAxis.desc) {
                                        //Grafico non trasposto
                                        colorsTarget = series.secondAxis.labels;
                                        $('#alrAxisSel').append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                    } else {
                                        //Grafico trasposto
                                        colorsTarget = series.firstAxis.labels;
                                        $('#alrAxisSel').append("<option value='" + series.secondAxis.desc + "'>" + series.secondAxis.desc + "</option>");
                                    }

                                    alrAxisSelListener();

                                    for (var i in colorsTarget) {
                                        newRow = $('<tr></tr>');
                                        newCell = $('<td>' + colorsTarget[i] + '</td>');
                                        newRow.append(newCell);
                                        newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                        newRow.append(newCell);
                                        newRow.find('div.colorPicker').colorpicker({
                                            color: defaultColorsArray[i % 10],
                                            format: "rgba"
                                        });
                                        newRow.find('div.colorPicker').on('changeColor', updateWidgetBarSeriesColors);
                                        colorsArray.push(defaultColorsArray[i % 10]);
                                        colorsTable.append(newRow);
                                    }
                                    $('label[for="alrFieldSel"]').hide();
                                    $('#alrFieldSel').hide();
                                    $('#alrFieldSel').parent().hide();
                                    $('label[for="alrAxisSel"]').hide();
                                    $('#alrAxisSel').hide();
                                    $('#alrAxisSel').parent().hide();
                                    $('#alrThrSel').val("no");
                                }

                                function updateWidgetBarSeriesColors(e, params) {
                                    var newColor = $(this).colorpicker('getValue');
                                    var index = parseInt($(this).parents('tr').index() - 1);
                                    colorsArray[index] = newColor;
                                    $("#barsColors").val(JSON.stringify(colorsArray));
                                }

                                    $("#xAxisDataset").off();
                                    $("#xAxisDataset").on("change", updateXAxisSelect);

                                    colorsTable = $("<table id ='colorsTable' class='table table-bordered table-condensed thrRangeTable'><tr><td>Series</td><td>Color</td></tr></table>");

                                    updateXAxisSelect();

                                    $("#barsColors").val(JSON.stringify(colorsArray));
                                    $('#barsColorsTableContainer').append(colorsTable);

                                    $('#barsColorsSelect').change(function () {
                                        if ($('#barsColorsSelect').val() === "manual") {
                                            $('#barsColorsTableContainer').show();
                                        } else {
                                            $('#barsColorsTableContainer').hide();
                                        }
                                    });

                                    //Codice costruzione soglie
                                    //Nuova riga
                                    //Set thresholds
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="alrThrSel" class="col-md-2 control-label"><?php echo _("Set thresholds"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="alrThrSel" name="alrThrSel" required>');
                                    newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                    newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                    newSelect.val('no');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Listener per settaggio/desettaggio soglie relativo alla select "Set thresholds"
                                    $('#alrThrSel').change(alrThrSelListener);

                                    //Threshold target select - Questa select viene nascosta o mostrata a seconda che nella "Set thresholds" si selezioni yes o no.
                                    newLabel = $('<label for="alrAxisSel" class="col-md-2 control-label"><?php echo _("Thresholds target set"); ?></label>');
                                    newSelect = $('<select class="form-control" id="alrAxisSel" name="alrAxisSel"></select>');
                                    if ($("#xAxisDataset").val() === series.firstAxis.desc) {
                                        //No trasposizione
                                        newSelect.append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                    } else {
                                        //Trasposizione
                                        newSelect.append("<option value='" + series.secondAxis.desc + "'>" + series.secondAxis.desc + "</option>");
                                    }
                                    alrAxisSelListener();
                                    newSelect.val(-1);
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.hide();
                                    newInnerDiv.hide();
                                    newSelect.hide();

                                    //Nuova riga
                                    //Threshold field select
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="alrFieldSel" class="col-md-2 control-label"><?php echo _("Thresholds target field"); ?></label>');
                                    newSelect = $('<select class="form-control" id="alrFieldSel" name="alrFieldSel">');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.hide();
                                    newInnerDiv.hide();
                                    newSelect.hide();

                                    //Threshold look&feel
                                    newLabel = $('<label for="alrLook" class="col-md-2 control-label">Thresholds look&feel</label>');
                                    newSelect = $('<select class="form-control" id="alrLook" name="alrLook">');
                                    newSelect.append('<option value="none">Tooltip only</option>');
                                    newSelect.append('<option value="lines">Lines</option>');
                                    newSelect.append('<option value="areas">Background areas</option>');
                                    newSelect.val("lines");
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.hide();
                                    newInnerDiv.hide();
                                    newSelect.hide();

                                    //Contenitore per tabella delle soglie
                                    addWidgetRangeTableContainer = $('<div id="addWidgetRangeTableContainer" class="row rowCenterContent"></div>');
                                    $("#specificWidgetPropertiesDiv").append(addWidgetRangeTableContainer);
                                    addWidgetRangeTableContainer.hide();*/
                                    break;

                                case "widgetScatterSeries":
                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').prop("required", false);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("10");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("#000000");
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputUdmWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Proprietà specifiche del widget
                                    //RIMOZIONE CAMPI PER TUTTI GLI ALTRI WIDGET
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Proprietà specifiche
                                    var currentParams = null;
                                    var metricId = $('#select-metric').val();
                                    var metricData = getMetricData(metricId);
                                    var seriesString = metricData.data[0].commit.author.series;
                                    var series = jQuery.parseJSON(seriesString);
                                    var thrTables1 = new Array();
                                    var thrTables2 = new Array();
                                    var i, k, currentFieldIndex, currentSeriesIndex = null;

                                    //Funzione di settaggio dei globals per il file dashboard_configdash.js
                                    setGlobals(currentParams, thrTables1, thrTables2, series, $('#select-widget').val());

                                    removeWidgetProcessGeneralFields("addWidget");
                                    removeWidgetTableListeners("addWidget");
                                    removeWidgetBarSeriesListeners("addWidget");

                                    //Visualizzazione campi specifici per questo widget
                                    $("label[for='rowsLabelsFontSize']").parent().show();
                                    $("label[for='rowsLabelsFontSize']").show();
                                    $("#rowsLabelsFontSize").show();

                                    $("label[for='rowsLabelsFontColor']").show();
                                    $("#rowsLabelsFontColor").show();
                                    //Questa falla con css sennò la mostra inline e non viene colorato!
                                    $("#widgetRowsLabelsFontColor").css('display', 'block');
                                    $("#widgetRowsLabelsFontColor").parent().parent().colorpicker({
                                        color: '#000000',
                                        format: "rgba"
                                    });

                                    $("label[for='colsLabelsFontSize']").parent().show();
                                    $("label[for='colsLabelsFontSize']").show();
                                    $("#colsLabelsFontSize").show();

                                    $("label[for='colsLabelsFontColor']").show();
                                    $("#colsLabelsFontColor").show();
                                    //Questa falla con css sennò la mostra inline e non viene colorato!
                                    $("#widgetColsLabelsFontColor").css('display', 'block');
                                    $("#widgetColsLabelsFontColor").parent().parent().colorpicker({
                                        color: '#000000',
                                        format: "rgba"
                                    });

                                    $("label[for='dataLabelsFontSize']").parent().show();
                                    $("label[for='dataLabelsFontSize']").show();
                                    $("#dataLabelsFontSize").show();

                                    $("label[for='dataLabelsFontColor']").show();
                                    $("#dataLabelsFontColor").show();
                                    //Questa falla con css sennò la mostra inline e non viene colorato!
                                    $("#widgetDataLabelsFontColor").css('display', 'block');
                                    $("#widgetDataLabelsFontColor").parent().parent().colorpicker({
                                        color: '#000000',
                                        format: "rgba"
                                    });

                                    $("label[for='legendFontSize']").parent().show();
                                    $("label[for='legendFontSize']").show();
                                    $("#legendFontSize").show();

                                    $("label[for='legendFontColor']").show();
                                    $("#legendFontColor").show();
                                    //Questa falla con css sennò la mostra inline e non viene colorato!
                                    $("#widgetLegendFontColor").css('display', 'block');
                                    $("#widgetLegendFontColor").parent().parent().colorpicker({
                                        color: '#000000',
                                        format: "rgba"
                                    });

                                    $("label[for='barsColorsSelect']").html("Markers colors");
                                    $("label[for='barsColorsSelect']").parent().show();
                                    $("label[for='barsColorsSelect']").show();
                                    $("#barsColorsSelect").val("auto");
                                    $("#barsColorsSelect").show();

                                    $("label[for='chartType']").show();
                                    $("#chartType").val("horizontal");
                                    $("#chartType").show();

                                    $("label[for='dataLabels']").parent().show();
                                    $("label[for='dataLabels']").show();
                                    $("#dataLabels").val("value");
                                    $("#dataLabels").show();

                                    $("label[for='dataLabelsRotation']").show();
                                    $("#dataLabelsRotation").val("horizontal");
                                    $("#dataLabelsRotation").show();

                                    $("#xAxisDataset").off();

                                    $("#xAxisDataset").prop('required', false);
                                    $("#lineWidth").prop('required', false);
                                    $("#alrLook").prop('required', false);

                                    //Costruiamo la tabella dei colori e il corrispondente JSON una tantum e mostriamola/nascondiamola a seconda di cosa sceglie l'utente, per non perdere eventuali colori immessi in precedenza.
                                    var colorsTable, newRow, newCell = null;
                                    var defaultColorsArray = ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'];
                                    var colorsArray = new Array();

                                function updateWidgetBarSeriesColors(e, params) {
                                    var newColor = $(this).colorpicker('getValue');
                                    var index = parseInt($(this).parents('tr').index() - 1);
                                    colorsArray[index] = newColor;
                                    $("#barsColors").val(JSON.stringify(colorsArray));
                                }

                                    colorsTable = $("<table id ='colorsTable' class='table table-bordered table-condensed thrRangeTable'><tr><td>Series</td><td>Color</td></tr></table>");
                                    for (var i in series.secondAxis.labels) {
                                        newRow = $('<tr></tr>');
                                        newCell = $('<td>' + series.secondAxis.labels[i] + '</td>');
                                        newRow.append(newCell);
                                        newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                        newRow.append(newCell);
                                        newRow.find('div.colorPicker').colorpicker({
                                            color: defaultColorsArray[i % 10],
                                            format: "rgba"
                                        });
                                        newRow.find('div.colorPicker').on('changeColor', updateWidgetBarSeriesColors);
                                        colorsArray.push(defaultColorsArray[i % 10]);
                                        colorsTable.append(newRow);
                                    }

                                    $("#barsColors").val(JSON.stringify(colorsArray));

                                    $('#barsColorsTableContainer').append(colorsTable);

                                    $('#barsColorsSelect').change(function () {
                                        if ($('#barsColorsSelect').val() === "manual") {
                                            $('#barsColorsTableContainer').show();
                                        } else {
                                            $('#barsColorsTableContainer').hide();
                                        }
                                    });

                                    $("label[for='alrThrFlag']").parent().show();
                                    $('#alrThrFlag').val("no");
                                    $('#alrThrFlag').show();
                                    $("label[for='alrThrFlag']").show();

                                    //Codice di creazione soglie
                                    //Popolamento del select per gli assi
                                    $('#alrAxisSel').empty();
                                    $('#alrAxisSel').append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");

                                    //Costruzione THRTables vuote
                                    buildEmptyThrTables();

                                    //Listener per settaggio/desettaggio soglie
                                    $('#alrThrFlag').change(alrThrFlagListener);

                                    //Listener per settaggio/desettaggio campi in base ad asse selezionato
                                    $('#alrAxisSel').change(alrAxisSelListener);

                                    //Listener per selezione campo
                                    $('#alrFieldSel').change(alrFieldSelListener);
                                    //Fine proprietà specifiche del widget
                                    break;

                                case "widgetBarSeries":
                                    var currentParams, i, k, currentFieldIndex, currentSeriesIndex = null;
                                    var metricId = $('#select-metric').val();
                                    var metricData = getMetricData(metricId);
                                    if (metricData.data.length != 0 && (serviceUri == null || serviceUri == "")) {
                                        var seriesString = metricData.data[0].commit.author.series;
                                        var series = jQuery.parseJSON(seriesString);
                                    } else {
                                        var seriesString = "";
                                        var series = null;
                                    }

                                    var thrTables1 = new Array();
                                    var thrTables2 = new Array();

                                    //Funzione di settaggio dei globals per il file dashboard_configdash.js
                                    setGlobals(null, thrTables1, thrTables2, series, $('#select-widget').val());

                                    //Costruzione THRTables vuote
                                    buildEmptyThrTables();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').prop("required", false);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("10");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("#000000");
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputUdmWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Proprietà specifiche del widget
                                    //RIMOZIONE CAMPI PER TUTTI GLI ALTRI WIDGET
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Proprietà specifiche
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Visualizzazione campi specifici per questo widget
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                        addWidgetRangeTableContainer = null;

                                    //Nuova riga
                                    //Rows labels font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="rowsLabelsFontSize" class="col-md-2 control-label"><?php echo _("Rows labels font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="rowsLabelsFontSize" name="rowsLabelsFontSize" value="10" required> ');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Rows labels font color
                                    newLabel = $('<label for="rowsLabelsFontColor" class="col-md-2 control-label"><?php echo _("Rows labels font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="rowsLabelsFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="rowsLabelsFontColor" name="rowsLabelsFontColor" required><span class="input-group-addon"><i id="widgetRowsLabelsFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#rowsLabelsFontColorContainer').show();
                                    $('#rowsLabelsFontColor').show();
                                    $("#widgetRowsLabelsFontColor").css('display', 'block');
                                    $("#widgetRowsLabelsFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });

                                    //Nuova riga
                                    //Cols labels font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="colsLabelsFontSize" class="col-md-2 control-label"><?php echo _("Cols labels font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="colsLabelsFontSize" name="colsLabelsFontSize" value="10" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Cols labels font color
                                    newLabel = $('<label for="colsLabelsFontColor" class="col-md-2 control-label"><?php echo _("Cols labels font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="colsLabelsFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="colsLabelsFontColor" name="colsLabelsFontColor" required><span class="input-group-addon"><i id="widgetColsLabelsFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#colsLabelsFontColorContainer').show();
                                    $('#colsLabelsFontColor').show();
                                    $("#widgetColsLabelsFontColor").css('display', 'block');
                                    $("#widgetColsLabelsFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });

                                    //Nuova riga
                                    //Data labels font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="dataLabelsFontSize" class="col-md-2 control-label"><?php echo _("Data labels font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="dataLabelsFontSize" name="dataLabelsFontSize" value="10" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Data labels font color
                                    newLabel = $('<label for="dataLabelsFontColor" class="col-md-2 control-label"><?php echo _("Data labels font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="dataLabelsFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="dataLabelsFontColor" name="dataLabelsFontColor" required><span class="input-group-addon"><i id="widgetDataLabelsFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#dataLabelsFontColorContainer').show();
                                    $('#dataLabelsFontColor').show();
                                    $("#widgetDataLabelsFontColor").css('display', 'block');
                                    $("#widgetDataLabelsFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });

                                    //Nuova riga
                                    //Legend font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="legendFontSize" class="col-md-2 control-label"><?php echo _("Legend font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="legendFontSize" name="legendFontSize" value="10" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Legend font color
                                    newLabel = $('<label for="legendFontColor" class="col-md-2 control-label">Legend font color</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="legendFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="legendFontColor" name="legendFontColor" required><span class="input-group-addon"><i id="widgetLegendFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#legendFontColorContainer').show();
                                    $('#legendFontColor').show();
                                    $("#widgetLegendFontColor").css('display', 'block');
                                    $("#widgetLegendFontColor").parent().parent().parent().colorpicker({
                                        color: "#000000",
                                        format: "rgba"
                                    });

                                    //Nuova riga
                                    //Bars colors
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="barsColorsSelect" class="col-md-2 control-label">Bars colors</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="barsColorsSelect" name="barsColorsSelect"></select>');
                                    newSelect.append('<option value="auto">Automatic</option>');
                                    newSelect.append('<option value="manual">Manual</option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Chart type
                                    newLabel = $('<label for="chartType" class="col-md-2 control-label">Chart type</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="chartType" name="chartType"></select>');
                                    newSelect.append('<option value="horizontal">Horizontal bars</option>');
                                    newSelect.append('<option value="horizontalStacked">Horizontal stacked bars</option>');
                                    newSelect.append('<option value="vertical">Vertical bars</option>');
                                    newSelect.append('<option value="verticalStacked">Vertical stacked bars</option>');
                                    newSelect.val("horizontal");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Nuova riga
                                    //Data labels
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="dataLabels" class="col-md-2 control-label">Data labels</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="dataLabels" name="dataLabels">');
                                    newSelect.append('<option value="no">No data labels</option>');
                                    newSelect.append('<option value="value">Value only</option>');
                                    newSelect.append('<option value="full">Field name and value</option>');
                                    newSelect.val("value");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Data labels rotation
                                    newLabel = $('<label for="dataLabelsRotation" class="col-md-2 control-label">Data labels rotation</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="dataLabelsRotation" name="dataLabelsRotation">');
                                    newSelect.append('<option value="horizontal">Horizontal</option>');
                                    newSelect.append('<option value="verticalAsc">Vertical ascending</option>');
                                    newSelect.append('<option value="verticalDesc">Vertical descending</option>');
                                    newSelect.val("horizontal");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Contenitore per tabella dei colori
                                    barsColorsTableContainer = $('<div id="barsColorsTableContainer" class="row rowCenterContent"></div>');
                                    $("#specificWidgetPropertiesDiv").append(barsColorsTableContainer);
                                    barsColorsTableContainer.hide();

                                    //Costruiamo la tabella dei colori e il corrispondente JSON una tantum e mostriamola/nascondiamola a seconda di cosa sceglie l'utente, per non perdere eventuali colori immessi in precedenza.
                                    var colorsTable, newRow, newCell = null;
                                    var defaultColorsArray = ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'];
                                    var colorsArray = new Array();

                                function updateWidgetBarSeriesColors(e, params) {
                                    var newColor = $(this).colorpicker('getValue');
                                    var index = parseInt($(this).parents('tr').index() - 1);
                                    colorsArray[index] = newColor;
                                    $("#barsColors").val(JSON.stringify(colorsArray));
                                }

                                    colorsTable = $("<table id ='colorsTable' class='table table-bordered table-condensed thrRangeTable'><tr><td>Series</td><td>Color</td></tr></table>");
                                    if (series) {
                                        for (var i in series.secondAxis.labels) {
                                            newRow = $('<tr></tr>');
                                            newCell = $('<td>' + series.secondAxis.labels[i] + '</td>');
                                            newRow.append(newCell);
                                            newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                            newRow.append(newCell);
                                            newRow.find('div.colorPicker').colorpicker({
                                                color: defaultColorsArray[i % 10],
                                                format: "rgba"
                                            });
                                            newRow.find('div.colorPicker').on('changeColor', updateWidgetBarSeriesColors);
                                            colorsArray.push(defaultColorsArray[i % 10]);
                                            colorsTable.append(newRow);
                                        }
                                    }

                                    $("#barsColors").val(JSON.stringify(colorsArray));
                                    $('#barsColorsTableContainer').append(colorsTable);

                                    $('#barsColorsSelect').change(function () 
                                    {
                                        if($('#barsColorsSelect').val() === "manual")
                                        {
                                            $('#barsColorsTableContainer').show();
                                        }
                                        else
                                        {
                                            $('#barsColorsTableContainer').hide();
                                        }
                                    });

                                    //Codice di creazione soglie
                                    //Nuova riga
                                    //Set thresholds
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="alrThrSel" class="col-md-2 control-label"><?php echo _("Set thresholds"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="alrThrSel" name="alrThrSel" required>');
                                    newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                    newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                    newSelect.val('no');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();
                                    
                                    //Listener per settaggio/desettaggio soglie relativo alla select "Set thresholds"
                                    $('#alrThrSel').change(alrThrSelListener);
                                    
                                    //Threshold target select - Questa select viene nascosta o mostrata a seconda che nella "Set thresholds" si selezioni yes o no.
                                    newLabel = $('<label for="alrAxisSel" class="col-md-2 control-label"><?php echo _("Thresholds target set"); ?></label>');
                                    newSelect = $('<select class="form-control" id="alrAxisSel" name="alrAxisSel"></select>');
                                    if (series) {
                                        newSelect.append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                    }
                                    newSelect.val(-1);
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.hide();
                                    newInnerDiv.hide();
                                    newSelect.hide();
                                    
                                    //Nuova riga
                                    //Threshold field select
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="alrFieldSel" class="col-md-2 control-label"><?php echo _("Thresholds target field"); ?></label>');
                                    newSelect = $('<select class="form-control" id="alrFieldSel" name="alrFieldSel">');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.hide();
                                    newInnerDiv.hide();
                                    newSelect.hide();
                                    
                                    //Contenitore per tabella delle soglie
                                    addWidgetRangeTableContainer = $('<div id="addWidgetRangeTableContainer" class="row rowCenterContent"></div>');
                                    $("#specificWidgetPropertiesDiv").append(addWidgetRangeTableContainer);
                                    addWidgetRangeTableContainer.hide();
                                    break;

                                case "widgetTable":
                                    var currentParams, i, k, currentFieldIndex, currentSeriesIndex = null;
                                    var metricId = $('#select-metric').val();
                                    var metricData = getMetricData(metricId);
                                    var seriesString = metricData.data[0].commit.author.series;
                                    var series = jQuery.parseJSON(seriesString);
                                    var thrTables1 = new Array();
                                    var thrTables2 = new Array();
                                    
                                    //Funzione di settaggio dei globals per il file dashboard_configdash.js
                                    setGlobals(null, thrTables1, thrTables2, series, $('#select-widget').val());
                                    
                                    //Costruzione THRTables vuote
                                    buildEmptyThrTables();
                                    
                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
                                    
                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').prop("required", false);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("10");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("#000000");
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({color: "#000000", format: "rgba"});
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputUdmWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Proprietà specifiche del widget
                                    //RIMOZIONE CAMPI PER TUTTI GLI ALTRI WIDGET
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Visualizzazione campi specifici per questo widget
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan, addWidgetRangeTableContainer = null;
                                    
                                    //Nuova riga
                                    //Select show first cell
                                    newFormRow = $('<div class="row"></div>');
                                    newLabel = $('<label for="showTableFirstCell" class="col-md-2 control-label"><?php echo _("Show first cell"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="showTableFirstCell" name="showTableFirstCell" required></select>');
                                    newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                    newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();
                                    
                                    //Nuova riga
                                    //First cell font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="tableFirstCellFontSize" class="col-md-2 control-label"><?php echo _("First cell font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="tableFirstCellFontSize" name="tableFirstCellFontSize" value="10" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();
                                    
                                    //First cell font color
                                    newLabel = $('<label for="tableFirstCellFontColor" class="col-md-2 control-label"><?php echo _("First cell font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="tableFirstCellFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="tableFirstCellFontColor" name="tableFirstCellFontColor" required><span class="input-group-addon"><i id="widgetFirstCellFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#tableFirstCellFontColorContainer').show();
                                    $('#tableFirstCellFontColor').show();
                                    $("#widgetFirstCellFontColor").css('display', 'block');
                                    $("#widgetFirstCellFontColor").parent().parent().parent().colorpicker({color: "#000000", format: "rgba"});
                                    
                                    //Nuova riga
                                    //Rows labels font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="rowsLabelsFontSize" class="col-md-2 control-label"><?php echo _("Rows labels font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="rowsLabelsFontSize" name="rowsLabelsFontSize" value="10" required> ');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();
                                    
                                    //Rows labels font color
                                    newLabel = $('<label for="rowsLabelsFontColor" class="col-md-2 control-label"><?php echo _("Rows labels font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="rowsLabelsFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="rowsLabelsFontColor" name="rowsLabelsFontColor" required><span class="input-group-addon"><i id="widgetRowsLabelsFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#rowsLabelsFontColorContainer').show();
                                    $('#rowsLabelsFontColor').show();
                                    $("#widgetRowsLabelsFontColor").css('display', 'block');
                                    $("#widgetRowsLabelsFontColor").parent().parent().parent().colorpicker({color: "#000000", format: "rgba"});
                                    
                                    //Nuova riga
                                    //Cols labels font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="colsLabelsFontSize" class="col-md-2 control-label"><?php echo _("Cols labels font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="colsLabelsFontSize" name="colsLabelsFontSize" value="10" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();
                                    
                                    //Cols labels font color
                                    newLabel = $('<label for="colsLabelsFontColor" class="col-md-2 control-label"><?php echo _("Cols labels font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="colsLabelsFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="colsLabelsFontColor" name="colsLabelsFontColor" required><span class="input-group-addon"><i id="widgetColsLabelsFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#colsLabelsFontColorContainer').show();
                                    $('#colsLabelsFontColor').show();
                                    $("#widgetColsLabelsFontColor").css('display', 'block');
                                    $("#widgetColsLabelsFontColor").parent().parent().parent().colorpicker({color: "#000000", format: "rgba"});
                                    
                                    //Nuova riga
                                    //Rows labels background color
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="rowsLabelsBckColor" class="col-md-2 control-label">Rows labels background color</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="rowsLabelsBckColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="rowsLabelsBckColor" name="rowsLabelsBckColor" required><span class="input-group-addon"><i id="widgetRowsLabelsBckColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#rowsLabelsBckColorContainer').show();
                                    $('#rowsLabelsBckColor').show();
                                    $("#widgetRowsLabelsBckColor").css('display', 'block');
                                    $("#widgetRowsLabelsBckColor").parent().parent().parent().colorpicker({color: "#FFFFFF", format: "rgba"});
                                    
                                    
                                    //Cols labels background color
                                    newLabel = $('<label for="colsLabelsBckColor" class="col-md-2 control-label">Cols labels background color</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="colsLabelsBckColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="colsLabelsBckColor" name="colsLabelsBckColor" required><span class="input-group-addon"><i id="widgetColsLabelsBckColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#colsLabelsBckColorContainer').show();
                                    $('#colsLabelsBckColor').show();
                                    $("#widgetColsLabelsBckColor").css('display', 'block');
                                    $("#widgetColsLabelsBckColor").parent().parent().parent().colorpicker({color: "#FFFFFF", format: "rgba"});
                                    
                                    //Nuova riga
                                    //Table borders
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="tableBorders" class="col-md-2 control-label"><?php echo _("Table borders"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="tableBorders" name="tableBorders"></select>');
                                    newSelect.append('<option value="no">No borders</option>');
                                    newSelect.append('<option value="horizontal">Horizontal borders only</option>');
                                    newSelect.append('<option value="all">All borders</option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();
                                    
                                    //Table borders color
                                    newLabel = $('<label for="tableBordersColor" class="col-md-2 control-label"><?php echo _("Table borders color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="tableBordersColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="tableBordersColor" name="tableBordersColor" required><span class="input-group-addon"><i id="widgetTableBordersColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#tableBordersColorContainer').show();
                                    $('#tableBordersColor').show();
                                    $("#widgetTableBordersColor").css('display', 'block');
                                    $("#widgetTableBordersColor").parent().parent().parent().colorpicker({color: "#EEEEEE", format: "rgba"});
                                    
                                    //Nuova riga
                                    //Set thresholds
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="alrThrSel" class="col-md-2 control-label"><?php echo _("Set thresholds"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="alrThrSel" name="alrThrSel" required>');
                                    newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                    newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                    newSelect.val('no');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();
                                    
                                    //Listener per settaggio/desettaggio soglie relativo alla select "Set thresholds"
                                    $('#alrThrSel').change(alrThrSelListener);
                                    
                                    //Threshold target select - Questa select viene nascosta o mostrata a seconda che nella "Set thresholds" si selezioni yes o no.
                                    newLabel = $('<label for="alrAxisSel" class="col-md-2 control-label"><?php echo _("Thresholds target set"); ?></label>');
                                    newSelect = $('<select class="form-control" id="alrAxisSel" name="alrAxisSel"></select>');
                                    newSelect.append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                    newSelect.append("<option value='" + series.secondAxis.desc + "'>" + series.secondAxis.desc + "</option>");
                                    newSelect.val(-1);
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.hide();
                                    newInnerDiv.hide();
                                    newSelect.hide();
                                    
                                    //Nuova riga
                                    //Threshold field select
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="alrFieldSel" class="col-md-2 control-label"><?php echo _("Thresholds target field"); ?></label>');
                                    newSelect = $('<select class="form-control" id="alrFieldSel" name="alrFieldSel">');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.hide();
                                    newInnerDiv.hide();
                                    newSelect.hide();
                                    
                                    //Contenitore per tabella delle soglie
                                    addWidgetRangeTableContainer = $('<div id="addWidgetRangeTableContainer" class="row rowCenterContent"></div>');
                                    $("#specificWidgetPropertiesDiv").append(addWidgetRangeTableContainer);
                                    addWidgetRangeTableContainer.hide(); 
                                    
                                    removeWidgetProcessGeneralFields("addWidget");
                                    break;

                                case "widgetProcess":
                                    $("label[for='inputComuneWidget']").css("display", "");
                                    $("#bckColorLabel").html("Background color");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputUrlWidget').attr('disabled', false);
                                    $('#inputUrlWidget').prop('required', true);
                                    $('#inputFontSize').val("");
                                    $('#inputFontSize').attr('disabled', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $("#schedulerRow").show();
                                    $("label[for='inputSchedulerWidget']").show();
                                    $('#inputSchedulerWidgetDiv').show();
                                    $('#inputSchedulerWidgetGroupDiv').show();
                                    $('#inputSchedulerWidget').show();
                                    $('#inputSchedulerWidget').prop('selectedIndex', -1);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFontSize').val("");
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();
                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Reperimento elenco dei jobs groups per scheduler
                                    for(var i = 0; i < elencoScheduler.length; i++)
                                    {
                                        $.ajax({
                                            url: "getJobs.php",
                                            data: {action: "getJobGroupsForScheduler", host: elencoScheduler[i].ip, user: elencoScheduler[i].user, pass: elencoScheduler[i].pass},
                                            type: "POST",
                                            async: false,
                                            dataType: 'json',
                                            success: function (data) 
                                            {
                                                for(var j = 0; j < data.length; j++) 
                                                {
                                                    elencoJobsGroupsPerScheduler[i][j] = data[j].id;
                                                }
                                            }
                                        });
                                    }
                                    break;

                                case "widgetProtezioneCivile":
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan = null;
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputUrlWidget').attr("disabled", "true");
                                    $('#inputUrlWidget').prop("required", "false");
                                    $('#inputUrlWidget').val('none');
                                    $("#titleLabel").html("Title");
                                    $('#inputTitleWidget').val('Protezione Civile');
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputTitleWidget').attr('disabled', true);
                                    $('#inputTitleWidget').prop('required', false);
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val('60');
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputFontSize').val("");
                                    $('#inputFontSize').attr('disabled', true);
                                    $('#inputFontSize').prop('required', false);  
                                    $("#widgetFontColor").parent().parent().colorpicker({color: "#eeeeee", format: "rgba"});
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#inputFontColor').prop('required', false);
                                    $('#inputHeaderFontColorWidget').attr('disabled', true);
                                    $('#inputHeaderFontColorWidget').prop('required', false);
                                    $('#inputHeaderFontColorWidget').val("");
                                    $('#widgetHeaderFontColor').css("background-color", "#eeeeee");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();
                                    
                                    addWidgetConditionsArray["title"] = true;
                                    $("label[for=inputTitleWidget]").css("color", "black");
                                    checkAddWidgetConditions();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();
                                    
                                    //Nuova riga
                                    //Default tab
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="inputDefaultTab" class="col-md-2 control-label"><?php echo _("Default tab"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="inputDefaultTab" name="inputDefaultTab"></select>');
                                    newSelect.append('<option value="0">General</option>');
                                    newSelect.append('<option value="1">Meteo</option>');
                                    newSelect.append('<option value="-1">None (automatic switch)</option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();
                                    
                                    //Meteo tab font size
                                    newLabel = $('<label for="meteoTabFontSize" class="col-md-2 control-label"><?php echo _("Meteo tab font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="meteoTabFontSize" name="meteoTabFontSize"></input>');
                                    newInput.val("10");
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();
                                    
                                    //Nuova riga
                                    //General tab font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="genTabFontSize" class="col-md-2 control-label"><?php echo _("General tab font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="genTabFontSize" name="genTabFontSize"></input>');
                                    newInput.val("12");
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();
                                    
                                    //General tab font color
                                    newLabel = $('<label for="genTabFontColor" class="col-md-2 control-label"><?php echo _("General tab font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="genTabFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="genTabFontColor" name="genTabFontColor" required><span class="input-group-addon"><i id="widgetGenTabFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#genTabFontColorContainer').show();
                                    $('#genTabFontColor').show();
                                    $("#genTabFontColor").css('display', 'block');
                                    $("#widgetGenTabFontColor").parent().parent().colorpicker({color: "#000000", format: "rgba"});
                                    $("#genTabFontColor").prop("required", true);
                                    $("#genTabFontColor").attr("disabled", false);
                                    
                                    $('#inputComuneWidget').attr('disabled', true);
                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
                                    break;

                                case "widgetProtezioneCivileFirenze":
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan = null;
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputUrlWidget').attr("disabled", "true");
                                    $('#inputUrlWidget').prop("required", "false");
                                    $('#inputUrlWidget').val('none');
                                    $("#titleLabel").html("Title");
                                    $('#inputTitleWidget').val('Protezione Civile Firenze');
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputTitleWidget').attr('disabled', true);
                                    $('#inputTitleWidget').prop('required', false);
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val('60');
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputFontSize').val("");
                                    $('#inputFontSize').attr('disabled', true);
                                    $('#inputFontSize').prop('required', false);
                                    $("#widgetFontColor").parent().parent().colorpicker({color: "#eeeeee", format: "rgba"});
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#inputFontColor').prop('required', false);
                                    $('#inputHeaderFontColorWidget').attr('disabled', true);
                                    $('#inputHeaderFontColorWidget').prop('required', false);
                                    $('#inputHeaderFontColorWidget').val("");
                                    $('#widgetHeaderFontColor').css("background-color", "#eeeeee");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    addWidgetConditionsArray["title"] = true;
                                    $("label[for=inputTitleWidget]").css("color", "black");
                                    checkAddWidgetConditions();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Nuova riga
                                    //Default tab
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="inputDefaultTab" class="col-md-2 control-label"><?php echo _("Default tab"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="inputDefaultTab" name="inputDefaultTab"></select>');
                                    newSelect.append('<option value="0">General</option>');
                                    newSelect.append('<option value="1">Meteo</option>');
                                    newSelect.append('<option value="-1">None (automatic switch)</option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Meteo tab font size
                                    newLabel = $('<label for="meteoTabFontSize" class="col-md-2 control-label"><?php echo _("Meteo tab font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="meteoTabFontSize" name="meteoTabFontSize"></input>');
                                    newInput.val("10");
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //Nuova riga
                                    //General tab font size
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="genTabFontSize" class="col-md-2 control-label"><?php echo _("General tab font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="genTabFontSize" name="genTabFontSize"></input>');
                                    newInput.val("12");
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newInput.show();

                                    //General tab font color
                                    newLabel = $('<label for="genTabFontColor" class="col-md-2 control-label"><?php echo _("General tab font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="genTabFontColorContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="genTabFontColor" name="genTabFontColor" required><span class="input-group-addon"><i id="widgetGenTabFontColor"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    $('#genTabFontColorContainer').show();
                                    $('#genTabFontColor').show();
                                    $("#genTabFontColor").css('display', 'block');
                                    $("#widgetGenTabFontColor").parent().parent().colorpicker({color: "#000000", format: "rgba"});
                                    $("#genTabFontColor").prop("required", true);
                                    $("#genTabFontColor").attr("disabled", false);

                                    $('#inputComuneWidget').attr('disabled', true);
                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
                                    break;

                                case "widgetButton":
                                    $('#inputUrlWidget').val('none');
                                    $("#titleLabel").html("Button text");
                                    $("#bckColorLabel").html("Button color");
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').val(14);
                                    $('#inputFontColor').val("#000000");
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({color: "#000000", format: "rgba"});
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputUdmWidget').attr('disabled', true);
                                    $('#inputFrameColorWidget').attr('disabled', true);
                                    $('#inputFrameColorWidget').val('');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', true);
                                    $('#inputFreqWidget').val('');
                                    $('#inputFreqWidget').prop('required', false);
                                    $('#inputHeaderFontColorWidget').attr('disabled', true);
                                    $('#inputHeaderFontColorWidget').prop('required', false);
                                    $('#inputHeaderFontColorWidget').val("");
                                    $('#widgetHeaderFontColor').css("background-color", "#eeeeee");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();
                                    $('#inputComuneWidget').attr('disabled', true);
                                    
                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();
                                    
                                    //Nuova riga
                                    //Border radius and button image yes/no
                                    newFormRow = $('<div class="row"></div>');
                                    newLabel = $('<label for="addWidgetBtnRadius" class="col-md-2 control-label"><?php echo _("Border radius"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    var newControl = $('<input id="addWidgetBtnRadius" name="addWidgetBtnRadius" data-slider-id="addWidgetBtnRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1" data-slider-value="0"/>');
                                    newInnerDiv.append(newControl);
                                    newInnerDiv.find('#addWidgetBtnRadius').bootstrapSlider({
                                       formatter: function(value) {
                                          return value + "%";
                                       }
                                    });
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    newLabel = $('<label for="addWidgetBtnImgSelect" class="col-md-2 control-label"><?php echo _("Button image"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select id="addWidgetBtnImgSelect" name="addWidgetBtnImgSelect" class="form-control"></select>');
                                    newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                    newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                    newSelect.val("no");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    
                                    //Nuova riga
                                    //Button image file chooser
                                    newFormRow = $('<div class="row"></div>');
                                    newFormRow.hide();
                                    newLabel = $('<label for="addWidgetBtnFile" class="col-md-2 control-label"><?php echo _("Image file"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-8"></div>');
                                    var btnImgMaxSize = $('<input type="hidden" name="MAX_FILE_SIZE" value="1000000" />');
                                    newInnerDiv.append(btnImgMaxSize);
                                    var newControl = $('<div class="input-group"><label class="input-group-btn"><span class="btn btn-primary">Browse<input id="addWidgetBtnFile" name="addWidgetBtnFile" type="file" style="display: none;" accept="image/*"></span></label><input id="addWidgetBtnFilename" type="text" class="form-control" readonly=""></div>');
                                    
                                    newInnerDiv.append(newControl);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    
                                    newControl.find("input[type=file]").change(function() 
                                    {
                                        var filename = $(this).val().replace(/\\/g, '/').replace(/.*\//, '');
                                        $("#addWidgetBtnFilename").val(filename);
                                    });
                                    
                                    //Nuova riga
                                    //Button image width and height
                                    newFormRow = $('<div class="row"></div>');
                                    newFormRow.hide();
                                    newLabel = $('<label for="addWidgetBtnImgWidth" class="col-md-2 control-label"><?php echo _("Image width"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    var newControl = $('<input id="addWidgetBtnImgWidth" name="addWidgetBtnImgWidth" data-slider-id="addWidgetBtnImgWidthSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1" data-slider-value="100"/>');
                                    newInnerDiv.append(newControl);
                                    newInnerDiv.find('#addWidgetBtnImgWidth').bootstrapSlider({
                                       formatter: function(value) {
                                          return value + "%";
                                       }
                                    });
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    
                                    newLabel = $('<label for="addWidgetBtnImgHeight" class="col-md-2 control-label"><?php echo _("Image height"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    var newControl = $('<input id="addWidgetBtnImgHeight" name="addWidgetBtnImgHeight" data-slider-id="addWidgetBtnImgHeightSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1" data-slider-value="100"/>');
                                    newInnerDiv.append(newControl);
                                    newInnerDiv.find('#addWidgetBtnImgHeight').bootstrapSlider({
                                       formatter: function(value) {
                                          return value + "%";
                                       }
                                    });
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    
                                    $("#addWidgetBtnImgSelect").off();
                                    $("#addWidgetBtnImgSelect").change(function(){
                                       if($(this).val() === 'yes')
                                       {
                                          $("#specificWidgetPropertiesDiv div.row").eq(1).show();
                                          $("#specificWidgetPropertiesDiv div.row").eq(2).show();
                                       }
                                       else
                                       {
                                          $("#specificWidgetPropertiesDiv div.row").eq(1).hide();
                                          $("#specificWidgetPropertiesDiv div.row").eq(2).hide();
                                       }
                                    });
                                    
                                    //Nuova riga
                                    //Target widgets per cambio metrica
                                    newFormRow = $('<div class="row"></div>');
                                    newLabel = $('<label for="addWidgetChangeMetricWidgets" class="col-md-2 control-label">Available widgets for metric change</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select name="addWidgetChangeMetricWidgets" class="form-control" id="addWidgetChangeMetricWidgets"></select>');

                                    var widgetId, widgetTitle = null;
                                    var widgetsNumber = 0;
                                    var targetsJson = {
                                        changeMetricTargetsJson: {},
                                        geoTargetsJson: []
                                    };
                                    
                                    $("#parameters").val(JSON.stringify(targetsJson));

                                    $("li.gs_w").each(function(){
                                       if((!$(this).attr("id").includes("Alarms"))&&(!$(this).attr("id").includes("Button"))&&(!$(this).attr("id").includes("Clock"))&&(!$(this).attr("id").includes("EvacuationPlans"))&&(!$(this).attr("id").includes("Events"))&&(!$(this).attr("id").includes("ExternalContent"))&&(!$(this).attr("id").includes("FirstAid"))&&(!$(this).attr("id").includes("GenericContent"))&&(!$(this).attr("id").includes("MapBusPosition"))&&(!$(this).attr("id").includes("NetworkAnalysis"))&&(!$(this).attr("id").includes("PrevMeteo"))&&(!$(this).attr("id").includes("Process"))&&(!$(this).attr("id").includes("ProtezioneCivile"))&&(!$(this).attr("id").includes("ProtezioneCivileFirenze"))&&(!$(this).attr("id").includes("Resources"))&&(!$(this).attr("id").includes("Sce"))&&(!$(this).attr("id").includes("Separator"))&&(!$(this).attr("id").includes("ServiceMap"))&&(!$(this).attr("id").includes("SmartDS"))&&(!$(this).attr("id").includes("StateRideAtaf"))&&(!$(this).attr("id").includes("TrafficEvents"))&&(!$(this).attr("id").includes("TrendMentions"))&&(!$(this).attr("id").includes("Twitter")))
                                       {
                                          widgetId = $(this).attr("id");
                                          widgetTitle = $(this).find("div.titleDiv").html();
                                          newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                          targetsJson.changeMetricTargetsJson[widgetId] = "noMetricChange";
                                          widgetsNumber++;
                                       }
                                    });
                                    
                                    newSelect.val(-1);

                                    if(widgetsNumber > 0)
                                    {
                                       newInnerDiv.append(newSelect);
                                    }
                                    else
                                    {
                                       newInnerDiv.append('<span id="addWidgetChangeMetricWidgetsNoneMsg"><? _("None")?></span>');
                                    }
                                    
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    newLabel = $('<label for="addWidgetChangeMetricMetrics" class="col-md-2 control-label"><? _("Available metrics for selected widget")?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select name="addWidgetChangeMetricMetrics" class="form-control" id="addWidgetChangeMetricMetrics"></select>');
                                    newInnerDiv.append(newSelect);
                                    newInnerDiv.append('<span id="addWidgetChangeMetricMetricsNoneMsg">None</span>');
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    
                                    $("#addWidgetChangeMetricMetricsNoneMsg").hide();
                                    $("#addWidgetChangeMetricMetrics").hide();
                                    
                                    if(widgetsNumber > 0)
                                    {
                                       $("#addWidgetChangeMetricWidgets").change(function(){
                                           if($(this).val() !== -1)
                                           {
                                               //Repere delle metriche applicabili a quel widget
                                               $.ajax({
                                                    url: "process-form.php",
                                                    type: "GET",
                                                    data: {
                                                        getMetricsForWidgetType: true,
                                                        widgetId: $("#addWidgetChangeMetricWidgets").val()
                                                    },
                                                    async: true,
                                                    //dataType: 'json',
                                                    success: function(metricsList) 
                                                    {
                                                        metricsList = JSON.parse(metricsList);
                                                        $("#addWidgetChangeMetricMetrics").empty();
                                                        
                                                        if(metricsList.length === 0)
                                                        {
                                                            $("#addWidgetChangeMetricMetrics").hide();
                                                            $("#addWidgetChangeMetricMetricsNoneMsg").show();
                                                        }
                                                        else
                                                        {
                                                            $("#addWidgetChangeMetricMetrics").append('<option value="noMetricChange"><? _("No metric change")?></option>');
                                                            for(var i = 0; i < metricsList.length; i++)
                                                            {
                                                                $("#addWidgetChangeMetricMetrics").append('<option value="' + metricsList[i] + '">' + metricsList[i] + '</option>');
                                                            }
                                                            
                                                            $("#addWidgetChangeMetricMetrics").val(targetsJson.changeMetricTargetsJson[$("#addWidgetChangeMetricWidgets").val()]);
                                                            $("#addWidgetChangeMetricMetricsNoneMsg").hide();
                                                            $("#addWidgetChangeMetricMetrics").show();
                                                        }
                                                    },
                                                    error: function(errorData)
                                                    {
                                                       $("#addWidgetChangeMetricMetrics").hide(); 
                                                       $("#addWidgetChangeMetricMetricsNoneMsg").show();
                                                       console.log("Errore in caricamento metriche caricabili per widget target");
                                                       console.log(JSON.stringify(errorData));
                                                    }
                                                });
                                           }
                                           else
                                           {
                                               $("#addWidgetChangeMetricMetrics").hide();
                                               $("#addWidgetChangeMetricMetricsNoneMsg").show();
                                           }
                                       }); 
                                       
                                       $("#addWidgetChangeMetricMetrics").change(function(){
                                           targetsJson.changeMetricTargetsJson[$("#addWidgetChangeMetricWidgets").val()] = $(this).val();
                                           $("#parameters").val(JSON.stringify(targetsJson));
                                       });
                                    }
                                    else
                                    {
                                        $("#addWidgetChangeMetricMetrics").hide();
                                        $("#addWidgetChangeMetricMetricsNoneMsg").show();
                                    }
                                    
                                    //Nuova riga
                                    //Show/hide text + target widgets per geolocation
                                    newFormRow = $('<div class="row"></div>');
                                    
                                    newLabel = $('<label for="addWidgetShowButtonText" class="col-md-2 control-label"><? _("Show button text")?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select name="addWidgetShowButtonText" class="form-control" id="addWidgetShowButtonText"></select>');
                                    newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                    newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    newLabel = $('<label for="addWidgetGeolocationWidgets" class="col-md-2 control-label"><? _("Available widgets to show link content")?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select name="addWidgetGeolocationWidgets" class="form-control" id="addWidgetGeolocationWidgets" multiple></select>');

                                    var widgetId, widgetTitle = null;
                                    widgetsNumber = 0;

                                    $("li.gs_w").each(function(){
                                       if($(this).attr("id").includes("ExternalContent")&&($(this).find("div.widget").attr("data-role") !== "gisTarget")&&($(this).find("div.widget").attr("data-role") !== "map"))
                                       {
                                          widgetId = $(this).attr("id");
                                          widgetTitle = $(this).find("div.titleDiv").html();
                                          newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                          widgetsNumber++;
                                       }
                                    });

                                    if(widgetsNumber > 0)
                                    {
                                       newInnerDiv.append(newSelect);
                                    }
                                    else
                                    {
                                       newInnerDiv.append("None");
                                    }
                                    
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    
                                    if(widgetsNumber > 0)
                                    {
                                       $('#addWidgetGeolocationWidgets').selectpicker({
                                          actionsBox: true, 
                                          width: "auto"
                                       });
                                       
                                       $('#addWidgetGeolocationWidgets').on('changed.bs.select', function (e) 
                                       {
                                          if($(this).val() === null)
                                          {
                                             targetsJson.geoTargetsJson = [];
                                          }
                                          else
                                          {
                                             targetsJson.geoTargetsJson = $(this).val();
                                          }
                                          $("#parameters").val(JSON.stringify(targetsJson));
                                       });
                                    }
                                    
                                    
                                    
                                    break;

                                case "widgetSingleContent":
                                    $('#inputUrlWidget').val('none');
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("24");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("#000000");
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({color: "#000000", format: "rgba"});
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", true);
                                    $('#inputUdmWidget').attr("disabled", false);
                                    $('#inputUdmPosition').prop("required", true);
                                    $('#inputUdmPosition').attr("disabled", false);
                                    $('#inputUdmWidget').val("");
                                    $("#inputUdmPosition").val("next");
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
                                    
                                    //Aggiunta campo per registrare il widget presso il notificatore
                                    addWidgetNotificatorAndThresholdFields();
                                    break;

                                case "widgetGenericContent":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("");
                                    $('#inputFontSize').attr('disabled', true);
                                    $('#inputFontColor').val("#000000");
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({color: "#000000", format: "rgba"});
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
                                    break;

                                case "widgetBarContent":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("16");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontColor').val("#000000");
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({color: "#000000", format: "rgba"});
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
                                    
                                    //Aggiunta campo per registrare il widget presso il notificatore
                                    addWidgetNotificatorAndThresholdFields();
                                    break;

                                case "widgetColumnContent":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("20");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontColor').val("#000000");
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({color: "#000000", format: "rgba"});
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
                                    
                                    //Aggiunta campo per registrare il widget presso il notificatore
                                    addWidgetNotificatorAndThresholdFields();
                                    break;

                                case "widgetGaugeChart":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("24");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("#000000");
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({color: "#000000", format: "rgba"});
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
                                    
                                    //Aggiunta campo per registrare il widget presso il notificatore
                                    addWidgetNotificatorAndThresholdFields();
                                    break;

                                case "widgetPieChart":
                                    var metricId = $('#select-metric').val();
                                    var metricData = getMetricData(metricId);
                                    var series, seriesString, table1Shown, table2Shown, valuePerc, newHiddenColors, colorsTable1, colorsTable2, colorsArray1, colorsArray2, descriptions, defaultColorsArray, newColorsTableContainer, newColorsTable1Container, newColorsTable2Container, newRow, newCell, valuesNum, newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan, addWidgetRangeTableContainer, thrSimpleTables, thrTables1, thrTables2, currentParams, i, k, currentFieldIndex, currentSeriesIndex = null;
                                    
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("");
                                    $('#inputFontSize').attr('disabled', true);
                                    $('#inputFontSize').prop('required', false);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#EEEEEE");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    if(metricType.indexOf('Percentuale') >= 0)
                                    {
                                        
                                    }
                                    else
                                    {
                                        seriesString = metricData.data[0].commit.author.series;
                                        series = jQuery.parseJSON(seriesString);
                                    }
                                
                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();
                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Legend font size e font color
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="legendFontSize" class="col-md-2 control-label"><?php echo _("Legend font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="legendFontSize" name="legendFontSize" value="10" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    newLabel = $('<label for="legendFontColor" class="col-md-2 control-label">Legend font color</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<div id="legendFontColorPickerContainer" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="legendFontColorPicker" name="legendFontColorPicker" required><span class="input-group-addon"><i id="widgetLegendFontColorPicker"></i></span></div>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#widgetLegendFontColorPicker").css('display', 'block');
                                    $("#widgetLegendFontColorPicker").parent().parent().parent().colorpicker({color: "#000000", format: "rgba"});
                                    
                                    //Nuova riga
                                    //Datalabels distance (se Percentuale) oppure Datalabels (se Series)
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    if(metricType.indexOf('Percentuale') >= 0)
                                    {
                                        newLabel = $('<label for="dataLabelsDistance" class="col-md-2 control-label">Data labels distance</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="dataLabelsDistance" name="dataLabelsDistance" value="15" required>');
                                        newInnerDiv.append(newInput);
                                    }
                                    else if(metricType === 'Series')
                                    {
                                        newLabel = $('<label for="dataLabels" class="col-md-2 control-label">Data labels for <i>' + series.firstAxis.desc + '</i></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="dataLabels" name="dataLabels"></select>');
                                        newSelect.append('<option value="no">No data labels</option>');
                                        newSelect.append('<option value="value">Value only</option>');
                                        newSelect.append('<option value="full">Field name and value</option>');
                                        newSelect.val("value");
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                    }
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    //Data labels font size
                                    newLabel = $('<label for="dataLabelsFontSize" class="col-md-2 control-label"><?php echo _("Data labels font size"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="dataLabelsFontSize" name="dataLabelsFontSize" value="10" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    //Nuova riga
                                    //Data labels distances per widget series
                                    if(metricType === 'Series')
                                    {
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificWidgetPropertiesDiv").append(newFormRow);
                                        //Data labels distance per anello più interno
                                        newLabel = $('<label for="dataLabelsDistance1" class="col-md-2 control-label">Data labels distance for <i>' + series.secondAxis.desc + '</i></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="dataLabelsDistance1" name="dataLabelsDistance1" value="-30" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        //Data labels distance per anello più esterno
                                        newLabel = $('<label for="dataLabelsDistance2" class="col-md-2 control-label">Data labels distance for <i>' + series.firstAxis.desc + '</i></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="dataLabelsDistance2" name="dataLabelsDistance2" value="-30" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                    }
                                    
                                    //Nuova riga
                                    //Data labels font color
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="dataLabelsFontColor" class="col-md-2 control-label"><?php echo _("Data labels font color"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInputGroup = $('<div class="input-group color-choice">');
                                    newInput = $('<input type="text" class="form-control" id="dataLabelsFontColor" name="dataLabelsFontColor" value="#000000" required>');
                                    newSpan = $('<span class="input-group-addon"><i id="widgetDataLabelsFontColor"></i></span>');
                                    newInputGroup.append(newInput);
                                    newInputGroup.append(newSpan);
                                    newInnerDiv.append(newInputGroup);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newInnerDiv.colorpicker({color: '#000000', format: "rgba"});
                                    
                                    //Inner radius 1
                                    if(metricType.indexOf('Percentuale') >= 0)
                                    {
                                        newLabel = $('<label for="innerRadius1" class="col-md-2 control-label"><?php echo _("Inner radius (%)"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="innerRadius1" name="innerRadius1" value="0" required>');
                                    }
                                    else if(metricType === 'Series')
                                    {
                                        newLabel = $('<label for="innerRadius1" class="col-md-2 control-label">Inner radius for <i>' + series.secondAxis.desc + '</i> (%)</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="innerRadius1" name="innerRadius1" value="15" required>');
                                    }
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    //Nuova riga
                                    //Questi raggi sono solo per la versione series
                                    if(metricType === 'Series')
                                    {
                                       //Outer radius 1
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificWidgetPropertiesDiv").append(newFormRow);
                                        newLabel = $('<label for="outerRadius1" class="col-md-2 control-label">Outer radius for <i>' + series.secondAxis.desc + '</i> (%)</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="outerRadius1" name="outerRadius1" value="50" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);

                                        //Inner radius 2
                                        newLabel = $('<label for="innerRadius2" class="col-md-2 control-label">Inner radius for <i>' + series.firstAxis.desc + '</i> (%)</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="innerRadius2" name="innerRadius2" value="50" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv); 
                                    }
                                    
                                    //Nuova riga
                                    //Start angle
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="startAngle" class="col-md-2 control-label"><?php echo _("Start angle (°)"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="startAngle" name="startAngle" value="0" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    //End angle
                                    newLabel = $('<label for="endAngle" class="col-md-2 control-label"><?php echo _("End angle (°)"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="endAngle" name="endAngle" value="360" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    //Nuova riga
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    //Center Y
                                    newLabel = $('<label for="centerY" class="col-md-2 control-label"><?php echo _("Diagram center Y(%)"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="centerY" name="centerY" value="50" required>');
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    //Select per colori automatici/manuali
                                    if(metricType.indexOf('Percentuale') >= 0)
                                    {
                                        newLabel = $('<label for="colorsSelect1" class="col-md-2 control-label"><?php echo _("Slices colors"); ?></label>');
                                    }
                                    else if(metricType === 'Series')
                                    {
                                        newLabel = $('<label for="colorsSelect1" class="col-md-2 control-label">Slices colors for <i>' + series.secondAxis.desc + '</i></label>');
                                    }
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="colorsSelect1" name="colorsSelect1"></select>');
                                    newSelect.append('<option value="auto">Automatic</option>');
                                    newSelect.append('<option value="manual">Manual</option>');
                                    newSelect.val("auto");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    //Campi hidden per i colori
                                    newHiddenColors = $('<input type="hidden" id="colors1" name="colors1">');
                                    $("#specificWidgetPropertiesDiv").append(newHiddenColors);
                                    newHiddenColors = $('<input type="hidden" id="colors2" name="colors2">');
                                    $("#specificWidgetPropertiesDiv").append(newHiddenColors);

                                    //Div contenitore per la tabella dei colori
                                    newColorsTableContainer = $('<div id="colorsTableContainer" class="row rowCenterContent" style="width: 100%; margin-left: 0px"></div>');
                                    newColorsTable1Container = $('<div id="colorsTable1Container" style="width: 100%; float: left"></div>');
                                    newColorsTable2Container = $('<div id="colorsTable2Container" style="width: 100%; float: left"></div>');
                                    newColorsTableContainer.append(newColorsTable1Container);
                                    
                                    function updateWidgetPieChartColors1(e, params)
                                    {
                                        var newColor = $(this).colorpicker('getValue');
                                        var index = parseInt($(this).parents('tr').index() - 1);
                                        colorsArray1[index] = newColor;
                                        $("#colors1").val(JSON.stringify(colorsArray1));
                                    }
                                    
                                    function updateWidgetPieChartColors2(e, params)
                                    {
                                        var newColor = $(this).colorpicker('getValue');
                                        var index = parseInt($(this).parents('tr').index() - 1);
                                        colorsArray2[index] = newColor;
                                        $("#colors2").val(JSON.stringify(colorsArray2));
                                    }
                                    
                                    defaultColorsArray = ['#ffcc00', '#33ccff', '#00ff00', '#ff99ff', '#cc6600', '#0066ff', '#ff3300', '#cc9900', '#9900cc', '#003300'];
                                    colorsArray1 = [];
                                    colorsArray2 = [];
                                    
                                    //Aggiunta al form dei campi per parametri specifici
                                    if(metricType.indexOf('Percentuale') >= 0)
                                    {
                                        //Form per dati tradizionali percentuali
                                        colorsTable1 = $("<table id='colorsTable1' class='table table-bordered table-condensed thrRangeTable' style='float:left'><tr><td>Field</td><td>Color</td></tr></table>");
                                        
                                        valuePerc = [];
                                        descriptions = [];
                                        valuePerc[0] = metricData.data[0].commit.author.value_perc1;
                                        valuePerc[1] = metricData.data[0].commit.author.value_perc2;
                                        valuePerc[2] = metricData.data[0].commit.author.value_perc3;
                                        
                                        //Costruiamo la tabella dei colori e il corrispondente JSON una tantum e mostriamola/nascondiamola a seconda di cosa sceglie l'utente, per non perdere eventuali colori immessi in precedenza.
                                        if((valuePerc[0] !== null) && (valuePerc[1] !== null) && (valuePerc[2] !== null))
                                        {
                                            valuesNum = 3;
                                            descriptions[0] = metricData.data[0].commit.author.field1Desc;
                                            descriptions[1] = metricData.data[0].commit.author.field2Desc;
                                            descriptions[2] = metricData.data[0].commit.author.field3Desc;
                                        }
                                        else if((valuePerc[0] !== null) && (valuePerc[1] !== null) && (valuePerc[2] === null))
                                        {
                                            valuesNum = 2;
                                            descriptions[0] = metricData.data[0].commit.author.field1Desc;
                                            descriptions[1] = metricData.data[0].commit.author.field2Desc;
                                        }
                                        else if((valuePerc[0] !== null) && (valuePerc[1] === null) && (valuePerc[2] === null))
                                        {
                                            valuesNum = 1;
                                            descriptions[0] = metricData.data[0].commit.author.field1Desc;
                                        }
                                        
                                        //Costruzione tabella dei colori iniziale
                                        for(var i = 0; i < valuesNum; i++)
                                        {
                                            colorsArray1[i] = defaultColorsArray[i];
                                            newRow = $('<tr></tr>');
                                            newCell = $('<td>' + descriptions[i] + '</td>');
                                            newRow.append(newCell);
                                            newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                            newRow.append(newCell);
                                            newRow.find('div.colorPicker').colorpicker({color: colorsArray1[i], format: "rgba"});
                                            newRow.find('div.colorPicker').on('changeColor', updateWidgetPieChartColors1);
                                            colorsTable1.append(newRow);
                                        }
                                        
                                        if(valuesNum === 1)
                                        {
                                            colorsArray1[1] = defaultColorsArray[1];
                                            newRow = $('<tr></tr>');
                                            newCell = $('<td>Complementary</td>');
                                            newRow.append(newCell);
                                            newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                            newRow.append(newCell);
                                            newRow.find('div.colorPicker').colorpicker({color: colorsArray1[1], format: "rgba"});
                                            newRow.find('div.colorPicker').on('changeColor', updateWidgetPieChartColors1);
                                            colorsTable1.append(newRow);
                                        }
                                        
                                        $("#colors1").val(JSON.stringify(colorsArray1));    
                                        newColorsTable1Container.append(colorsTable1);
                                        colorsTable1.hide();
                                        newColorsTable1Container.hide();
                                        newColorsTableContainer.hide();
                                    }
                                    else if(metricType === 'Series')
                                    {
                                        //Nuova riga
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificWidgetPropertiesDiv").append(newFormRow);
                                        newLabel = $('<label for="colorsSelect2" class="col-md-2 control-label">Slices colors for <i>' + series.firstAxis.desc + '</i></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="colorsSelect2" name="colorsSelect2"></select>');
                                        newSelect.append('<option value="auto">Automatic</option>');
                                        newSelect.append('<option value="manual">Manual</option>');
                                        newSelect.val("auto");
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newColorsTableContainer.append(newColorsTable2Container);
                                        
                                        //Costruiamo la tabella dei colori e il corrispondente JSON una tantum e mostriamola/nascondiamola a seconda di cosa sceglie l'utente, per non perdere eventuali colori immessi in precedenza.
                                        colorsTable1 = $("<table id='colorsTable1' class='table table-bordered table-condensed thrRangeTable' style='width: 100%;'><tr><td>Fields of set <b>" + series.secondAxis.desc + "</b></td><td>Color</td></tr></table>");
                                        for(var i = 0; i < series.secondAxis.labels.length; i++)
                                        {
                                            colorsArray1[i] = defaultColorsArray[i];
                                            newRow = $('<tr></tr>');
                                            newCell = $('<td>' + series.secondAxis.labels[i] + '</td>');
                                            newRow.append(newCell);
                                            newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                            newRow.append(newCell);
                                            newRow.find('div.colorPicker').colorpicker({color: colorsArray1[i], format: "rgba"});
                                            newRow.find('div.colorPicker').on('changeColor', updateWidgetPieChartColors1);
                                            colorsTable1.append(newRow);
                                        }
                                        
                                        //Costruiamo la tabella dei colori e il corrispondente JSON una tantum e mostriamola/nascondiamola a seconda di cosa sceglie l'utente, per non perdere eventuali colori immessi in precedenza.
                                        colorsTable2 = $("<table id='colorsTable2' class='table table-bordered table-condensed thrRangeTable' style='width: 100%;'><tr><td>Fields of set <b>" + series.firstAxis.desc + "</b></td><td>Color</td></tr></table>");
                                        for(var i = 0; i < series.firstAxis.labels.length; i++)
                                        {
                                            colorsArray2[i] = defaultColorsArray[i];
                                            newRow = $('<tr></tr>');
                                            newCell = $('<td>' + series.firstAxis.labels[i] + '</td>');
                                            newRow.append(newCell);
                                            newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                            newRow.append(newCell);
                                            newRow.find('div.colorPicker').colorpicker({color: colorsArray2[i], format: "rgba"});
                                            newRow.find('div.colorPicker').on('changeColor', updateWidgetPieChartColors2);
                                            colorsTable2.append(newRow);
                                        }
                                        
                                        $("#colors1").val(JSON.stringify(colorsArray1));    
                                        newColorsTable1Container.append(colorsTable1);
                                        $("#colors2").val(JSON.stringify(colorsArray2));    
                                        newColorsTable2Container.append(colorsTable2);
                                        colorsTable1.hide();
                                        colorsTable2.hide();
                                        newColorsTable1Container.hide();
                                        newColorsTable2Container.hide();
                                        newColorsTableContainer.hide();
                                    }
                                    
                                    $("#specificWidgetPropertiesDiv").append(newColorsTableContainer);
                                    
                                    table1Shown = false;
                                    table2Shown = false;

                                    $('#colorsSelect1').change(function () 
                                    {
                                        if($('#colorsSelect1').val() === "manual")
                                        {
                                            $('#colorsTableContainer').css("display", "block");
                                            $('#colorsTable1Container').css("display", "block");
                                            colorsTable1.css("display", "");//CRASH
                                            table1Shown = true;
                                        }
                                        else
                                        {
                                            colorsTable1.css("display", "none");
                                            $('#colorsTable1Container').css("display", "none");
                                            table1Shown = false;
                                            if(table2Shown === false)
                                            {
                                                $('#colorsTableContainer').css("display", "none");
                                            }
                                        }
                                    });
                                    
                                    if(metricType === 'Series')
                                    {
                                        $('#colorsSelect2').change(function () 
                                        {
                                            if($('#colorsSelect2').val() === "manual")
                                            {
                                                $('#colorsTableContainer').css("display", "block");
                                                $('#colorsTable2Container').css("display", "block");
                                                colorsTable2.css("display", "");
                                                table2Shown = true;
                                            }
                                            else
                                            {
                                                colorsTable2.css("display", "none");
                                                $('#colorsTable2Container').css("display", "none");
                                                table2Shown = false;
                                                if(table1Shown === false)
                                                {
                                                    $('#colorsTableContainer').css("display", "none");
                                                }
                                            }
                                        });
                                    }
                                    
                                    //Codice costruzione soglie
                                    if(metricType.indexOf('Percentuale') >= 0)
                                    {
                                        //Tabelle editabili delle soglie
                                        thrSimpleTables = new Array();
        
                                        setSimpleGlobals(null, thrSimpleTables, valuePerc, descriptions);
                                        
                                        //Costruzione THRTables vuote
                                        buildEmptySimpleThrTables();
        
                                        //Nuova riga
                                        //Set thresholds
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificWidgetPropertiesDiv").append(newFormRow);
                                        newLabel = $('<label for="alrThrSel" class="col-md-2 control-label"><?php echo _("Set thresholds"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="alrThrSel" name="alrThrSel" required>');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newSelect.val("no");
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        
                                        //Listener per settaggio/desettaggio soglie relativo alla select "Set thresholds"
                                        $('#alrThrSel').change(alrThrSelListenerSimple);
                                        
                                        //Threshold field select
                                        newLabel = $('<label for="alrFieldSel" class="col-md-2 control-label"><?php echo _("Thresholds target field"); ?></label>');
                                        newSelect = $('<select class="form-control" id="alrFieldSel" name="alrFieldSel">');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();
                                        newSelect.hide();
                                        
                                        //Contenitore per tabella delle soglie
                                        addWidgetRangeTableContainer = $('<div id="addWidgetRangeTableContainer" class="row rowCenterContent"></div>');
                                        $("#specificWidgetPropertiesDiv").append(addWidgetRangeTableContainer);
                                        addWidgetRangeTableContainer.hide();
                                    }
                                    else if(metricType === 'Series')
                                    {
                                        //Tabelle editabilidelle soglie
                                        thrTables1 = new Array();
                                        thrTables2 = new Array();

                                        //Funzione di settaggio dei globals per il file dashboard_configdash.js
                                        setGlobals(null, thrTables1, thrTables2, series, $('#select-widget').val());

                                        //Costruzione THRTables vuote
                                        buildEmptyThrTables();
                                        //Nuova riga
                                        //Set thresholds
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificWidgetPropertiesDiv").append(newFormRow);
                                        newLabel = $('<label for="alrThrSel" class="col-md-2 control-label"><?php echo _("Set thresholds"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="alrThrSel" name="alrThrSel" required>');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newSelect.val("no");
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        
                                        //Listener per settaggio/desettaggio soglie relativo alla select "Set thresholds"
                                        $('#alrThrSel').change(alrThrSelListener);

                                        //Threshold target select - Questa select viene nascosta o mostrata a seconda che nella "Set thresholds" si selezioni yes o no.
                                        newLabel = $('<label for="alrAxisSel" class="col-md-2 control-label"><?php echo _("Thresholds target set"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="alrAxisSel" name="alrAxisSel"></select>');
                                        newSelect.append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                        newSelect.val(-1);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();
                                        newSelect.hide();

                                        //Nuova riga
                                        //Threshold field select
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificWidgetPropertiesDiv").append(newFormRow);
                                        newLabel = $('<label for="alrFieldSel" class="col-md-2 control-label"><?php echo _("Thresholds target field"); ?></label>');
                                        newSelect = $('<select class="form-control" id="alrFieldSel" name="alrFieldSel">');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();
                                        newSelect.hide();
                                        
                                        //Contenitore per tabella delle soglie
                                        addWidgetRangeTableContainer = $('<div id="addWidgetRangeTableContainer" class="row rowCenterContent"></div>');
                                        $("#specificWidgetPropertiesDiv").append(addWidgetRangeTableContainer);
                                        addWidgetRangeTableContainer.hide();
                                    }
                                    break;

                                case "widgetSce":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("");
                                    $('#inputFontSize').attr('disabled', true);
                                    $('#inputFontSize').prop('required', false);
                                    $('#inputFontColor').val("#000000");
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({color: "#000000", format: "rgba"});
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
                                    break;

                                case "widgetSmartDS":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("16");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontColor').val("#000000");
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({color: "#000000", format: "rgba"});
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
                                    break;

                                case "widgetTimeTrend":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("11");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontColor').val("#666666");
                                    $('#widgetFontColor').css("background-color", "#666666");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').attr('disabled', false);
                                    $('#select-IntTemp-Widget').prop('required', true);
                                    $('#select-IntTemp-Widget').val("4 Ore");
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();
                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
                                    
                                    //Nuova riga
                                    //Threshold field select
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="alrFieldSel" class="col-md-2 control-label">Line color</label>');
                                    var newColorPicker = $('<div id="lineColorpickerContainer" class="input-group">' +
                                            '<input type="text" class="form-control demo-1 demo-auto" id="inputColorWidgetM" name="inputColorWidgetM">' +  
                                            '<span class="input-group-addon"><i id="color_widget_M"></i></span>' + 
                                    '</div>');
                                    
                                    
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    //Aggiunta campo per registrare il widget presso il notificatore
                                    addWidgetNotificatorAndThresholdFields();
                                    break;

                                case "widgetTimeTrendCompare":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("11");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontColor').val("#666666");
                                    $('#widgetFontColor').css("background-color", "#666666");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputUdmWidget').attr('disabled', true);
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', false);
                                    $('#select-IntTemp-Widget').prop('required', true);
                                    $('#select-IntTemp-Widget').val("4 Ore");
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
                                    
                                    //Aggiunta campo per registrare il widget presso il notificatore
                                    addWidgetNotificatorAndThresholdFields();
                                    break;

                                case "widgetEvents":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').attr('disabled', true);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("12");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();
                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Visualizzazione campi specifici per questo widget
                                    $('#specificWidgetPropertiesDiv .row').remove();
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan, addWidgetRangeTableContainer = null;
                                    
                                    //Nuova riga
                                    //Widget mode
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="widgetEventsMode" class="col-md-2 control-label"><?php echo _("Widget mode"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="widgetEventsMode" name="widgetEventsMode"></select>');
                                    newSelect.append('<option value="list">List</option>');
                                    newSelect.append('<option value="searchAndList">Search filter, results on list</option>');
                                    newSelect.append('<option value="searchAndMap">Search filter, results on map</option>');
                                    newSelect.append('<option value="searchAndListAndMap">Search filter, results on list and map</option>');
                                    newFormRow.append(newLabel);
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newInnerDiv);
                                    
                                    //Nuova riga
                                    //Target widgets geolocation
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    
                                    newLabel = $('<label for="addWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="addWidgetGeolocationWidgets" name="addWidgetGeolocationWidgets"></select>');
                                    
                                    var widgetId, widgetTitle = null;
                                    var widgetsNumber = 0;
                                    //JSON degli eventi da mostrare su ogni widget target di questo widget events: privo di eventi all'inizio
                                    var targetEventsJson = {};
                                    
                                    $("li.gs_w").each(function(){
                                       if($(this).attr("id").includes("ExternalContent")&&($(this).find("div.widget").attr("data-role") === "map"))
                                       {
                                          widgetId = $(this).attr("id");
                                          widgetTitle = $(this).find("div.titleDiv").html();
                                          newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                          targetEventsJson[widgetId] = new Array(); 
                                          widgetsNumber++;
                                       }
                                    });
                                    
                                    $("#parameters").val(JSON.stringify(targetEventsJson));
                                    
                                    if(widgetsNumber > 0)
                                    {
                                       newInnerDiv.append(newSelect);
                                    }
                                    else
                                    {
                                       newInnerDiv.append("None");
                                    }
                                    
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    
                                    if(widgetsNumber > 0)
                                    {
                                       newSelect.show();
                                       newSelect.val(-1);
                                       newLabel = $('<label for="addWidgetEventTypes" class="col-md-2 control-label"><?php echo _("Events to show on selected map"); ?></label>');
                                       newInnerDiv = $('<div class="col-md-3"></div>');
                                       var eventTypeSelect = $('<select name="addWidgetEventTypes" class="form-control" id="addWidgetEventTypes" multiple></select>');
                                       eventTypeSelect.append('<option value="Altri eventi">Altri eventi</option>');
                                       eventTypeSelect.append('<option value="Aperture straordinarie, visite guidate">Aperture straordinarie, visite guidate</option>');
                                       eventTypeSelect.append('<option value="Estate Fiorentina">Estate Fiorentina</option>');
                                       eventTypeSelect.append('<option value="Fiere, mercati">Fiere, mercati</option>');
                                       eventTypeSelect.append('<option value="Film festival">Film festival</option>');
                                       eventTypeSelect.append('<option value="Mostre">Mostre</option>');
                                       eventTypeSelect.append('<option value="Musica classica, opera e balletto">Musica classica, opera e balletto</option>');
                                       eventTypeSelect.append('<option value="Musica rock, jazz, pop, contemporanea">Musica rock, jazz, pop, contemporanea</option>');
                                       eventTypeSelect.append('<option value="News">News</option>');
                                       eventTypeSelect.append('<option value="Readings, Conferenze, Convegni">Readings, Conferenze, Convegni</option>');
                                       eventTypeSelect.append('<option value="Readings, incontri letterari, conferenze">Readings, incontri letterari, conferenze</option>');
                                       eventTypeSelect.append('<option value="Sport">Sport</option>');
                                       eventTypeSelect.append('<option value="Teatro">Teatro</option>');
                                       eventTypeSelect.append('<option value="Tradizioni popolari">Tradizioni popolari</option>');
                                       eventTypeSelect.append('<option value="Walking">Walking</option>');
                                       eventTypeSelect.val(-1);
                                       newFormRow.append(newLabel);
                                       newInnerDiv.append(eventTypeSelect);
                                       newFormRow.append(newInnerDiv);
                                       newLabel.hide();
                                       newInnerDiv.hide();
                                       
                                       $('#addWidgetEventTypes').selectpicker({
                                          actionsBox: true, 
                                          width: "auto"
                                       });
                                       
                                       $('#addWidgetEventTypes').on('changed.bs.select', function (e) 
                                       {
                                          if($(this).val() === null)
                                          {
                                             targetEventsJson[$("#addWidgetGeolocationWidgets").val()] = [];
                                          }
                                          else
                                          {
                                             targetEventsJson[$("#addWidgetGeolocationWidgets").val()] = $(this).val();
                                          }
                                          $("#parameters").val(JSON.stringify(targetEventsJson));
                                       });
                                       
                                       $("#addWidgetGeolocationWidgets").change(function(){
                                          newLabel.show();
                                          newInnerDiv.show();
                                          $('#addWidgetEventTypes').selectpicker('val', targetEventsJson[$("#addWidgetGeolocationWidgets").val()]);
                                       });
                                    }
                                    break;

                                case "widgetEventsNew":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').attr('disabled', true);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("12");
                                    $('#inputFontSize').attr('disabled', false);
                                    $('#inputFontSize').prop('required', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();
                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Visualizzazione campi specifici per questo widget
                                    $('#specificWidgetPropertiesDiv .row').remove();
                                    var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                        addWidgetRangeTableContainer = null;

                                    //Nuova riga
                                    //Widget mode
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="widgetEventsMode" class="col-md-2 control-label"><?php echo _("Widget mode"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="widgetEventsMode" name="widgetEventsMode"></select>');
                                    newSelect.append('<option value="list">List</option>');
                                    newSelect.append('<option value="searchAndList">Search filter, results on list</option>');
                                    newSelect.append('<option value="searchAndMap">Search filter, results on map</option>');
                                    newSelect.append('<option value="searchAndListAndMap">Search filter, results on list and map</option>');
                                    newFormRow.append(newLabel);
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newInnerDiv);

                                    //Nuova riga
                                    //Target widgets geolocation
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    newLabel = $('<label for="addWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="addWidgetGeolocationWidgets" name="addWidgetGeolocationWidgets"></select>');

                                    var widgetId, widgetTitle = null;
                                    var widgetsNumber = 0;
                                    //JSON degli eventi da mostrare su ogni widget target di questo widget events: privo di eventi all'inizio
                                    var targetEventsJson = {};

                                    $("li.gs_w").each(function () {
                                        if ($(this).attr("id") != null) {
                                            if ($(this).attr("id").includes("widgetMap")) {
                                                widgetId = $(this).attr("id");
                                                widgetTitle = $(this).find("div.titleDiv").html();
                                                newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                targetEventsJson[widgetId] = new Array();
                                                widgetsNumber++;
                                            }
                                        }
                                    });

                                    $("#parameters").val(JSON.stringify(targetEventsJson));

                                    if (widgetsNumber > 0) {
                                        newInnerDiv.append(newSelect);
                                    }
                                    else {
                                        newInnerDiv.append("None");
                                    }

                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel.show();
                                    newInnerDiv.show();

                                    if (widgetsNumber > 0) {
                                        newSelect.show();
                                        newSelect.val(-1);
                                        newLabel = $('<label for="addWidgetEventTypes" class="col-md-2 control-label"><?php echo _("Events to show on selected map"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        var eventTypeSelect = $('<select name="addWidgetEventTypes" class="form-control" id="addWidgetEventTypes" multiple></select>');
                                        eventTypeSelect.append('<option value="Altri eventi">Altri eventi</option>');
                                        eventTypeSelect.append('<option value="Aperture straordinarie, visite guidate">Aperture straordinarie, visite guidate</option>');
                                        eventTypeSelect.append('<option value="Estate Fiorentina">Estate Fiorentina</option>');
                                        eventTypeSelect.append('<option value="Fiere, mercati">Fiere, mercati</option>');
                                        eventTypeSelect.append('<option value="Film festival">Film festival</option>');
                                        eventTypeSelect.append('<option value="Mostre">Mostre</option>');
                                        eventTypeSelect.append('<option value="Musica classica, opera e balletto">Musica classica, opera e balletto</option>');
                                        eventTypeSelect.append('<option value="Musica rock, jazz, pop, contemporanea">Musica rock, jazz, pop, contemporanea</option>');
                                        eventTypeSelect.append('<option value="News">News</option>');
                                        eventTypeSelect.append('<option value="Readings, Conferenze, Convegni">Readings, Conferenze, Convegni</option>');
                                        eventTypeSelect.append('<option value="Readings, incontri letterari, conferenze">Readings, incontri letterari, conferenze</option>');
                                        eventTypeSelect.append('<option value="Sport">Sport</option>');
                                        eventTypeSelect.append('<option value="Teatro">Teatro</option>');
                                        eventTypeSelect.append('<option value="Tradizioni popolari">Tradizioni popolari</option>');
                                        eventTypeSelect.append('<option value="Walking">Walking</option>');
                                        eventTypeSelect.val(-1);
                                        newFormRow.append(newLabel);
                                        newInnerDiv.append(eventTypeSelect);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();

                                        $('#addWidgetEventTypes').selectpicker({
                                            actionsBox: true,
                                            width: "auto",
                                            size: "auto"
                                        });

                                        $('#addWidgetEventTypes').on('changed.bs.select', function (e) {
                                            if ($(this).val() === null) {
                                                targetEventsJson[$("#addWidgetGeolocationWidgets").val()] = [];
                                            }
                                            else {
                                                targetEventsJson[$("#addWidgetGeolocationWidgets").val()] = $(this).val();
                                            }
                                            $("#parameters").val(JSON.stringify(targetEventsJson));
                                        });

                                        $("#addWidgetGeolocationWidgets").change(function () {
                                            newLabel.show();
                                            newInnerDiv.show();
                                            $('#addWidgetEventTypes').selectpicker('val', targetEventsJson[$("#addWidgetGeolocationWidgets").val()]);
                                        });
                                    }
                                    break;

                                case "widgetTrendMentions":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').attr('disabled', true);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("");
                                    $('#inputFontSize').attr('disabled', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();
                                    
                                    //Nuova riga
                                    //Default tab
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="inputDefaultTab" class="col-md-2 control-label"><?php echo _("Default tab"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="inputDefaultTab" name="inputDefaultTab"></select>');
                                    newSelect.append('<option value="0">Trends</option>');
                                    newSelect.append('<option value="1">Quotes</option>');
                                    newSelect.append('<option value="-1">None (automatic switch)</option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
                                    break;

                                case "widgetPrevMeteo":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $("#inputComuneRow").show();
                                    $('#inputComuneWidget').val("");
                                    $('#inputComuneWidget').attr("placeholder", "Type city name's first letters");
                                    $("label[for='inputComuneWidget']").show();
                                    $("label[for='inputComuneWidget']").text("City (autosuggestion)");
                                    $('#inputComuneWidget').show();
                                    $('#inputComuneWidget').attr('disabled', false);
                                    $('#inputComuneWidget').attr('autocomplete', 'on');
                                    $('#inputComuneWidget').prop('required', true);
                                    
                                    $('#inputComuneWidget').autocomplete({
                                        source: comuniLammaArray,
                                        autoFocus: false,
                                        minLength: 1,
                                        delay: 500,
                                    }).data("ui-autocomplete")._resizeMenu = function(){
                                        var ul = this.menu.element;
                                        ul.outerWidth(this.element.outerWidth() + 30);
                                        ul.css("max-height", "300px");
                                        ul.css("overflow-x", "auto");
                                    };
                                    $('#inputUrlWidget').attr('disabled', false);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("");
                                    $('#inputFontSize').attr('disabled', true);
                                    $('#inputFontColor').val("#000000");
                                    $('#inputFontColor').attr('disabled', false);
                                    $('#inputFontColor').prop('required', true);
                                    $('#widgetFontColor').css("background-color", "#000000");
                                    $("#widgetFontColor").parent().parent().parent().colorpicker({color: "#000000", format: "rgba"});
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    //Nuova riga
                                    //Orientation
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="orientation" class="col-md-2 control-label"><?php echo _("Widget mode"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="orientation" name="orientation"></select>');
                                    newSelect.append('<option value="horizontal">Horizontal</option>');
                                    newSelect.append('<option value="vertical">Vertical</option>');
                                    newSelect.append('<option value="verticalCompact">VerticalCompact</option>');
                                    newSelect.append('<option value="today">Today only</option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    //Language
                                    newLabel = $('<label for="language" class="col-md-2 control-label">Language</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="language" name="language"></select>');
                                    newSelect.append('<option value="english">English</option>');
                                    newSelect.append('<option value="italian">Italian</option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    //Nuova riga
                                    //Space occupation
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="todayDim" class="col-md-2 control-label">Today box dimension</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    var newControl = $('<input id="todayDim" name="todayDim" data-slider-id="todayDimSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1" data-slider-value="60"/>');
                                    newInnerDiv.append(newControl);
                                    newInnerDiv.find('#todayDim').bootstrapSlider({
                                       formatter: function(value) {
                                          return value + "%";
                                       }
                                    });
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    //Background option
                                    newLabel = $('<label for="backgroundMode" class="col-md-2 control-label">Background mode</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="backgroundMode" name="backgroundMode"></select>');
                                    newSelect.append('<option value="color">Color</option>');
                                    newSelect.append('<option value="auto">Automatic picture</option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    //Nuova riga
                                    //Icon type
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="iconSet" class="col-md-2 control-label">Weather symbols</label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="iconSet" name="iconSet"></select>');
                                    newSelect.append('<option value="multiColor">Images</option>');
                                    newSelect.append('<option value="singleColor">Icons</option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    break;

                                case "widgetServiceMap":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').attr('disabled', true);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("");
                                    $('#inputFontSize').attr('disabled', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', true);
                                    $('#inputFreqWidget').val("");
                                    $('#inputFreqWidget').prop('required', false);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
                                    break;

                                case "widgetSpeedometer":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').attr('disabled', false);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("");
                                    $('#inputFontSize').attr('disabled', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputZoomControlsColor').attr('disabled', true);
                                    $('#inputZoomControlsColor').prop('required', false);
                                    $('#widgetZoomControlsColor').css("background-color", "#EEEEEE");
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
                                    
                                    //Aggiunta campo per registrare il widget presso il notificatore
                                    addWidgetNotificatorAndThresholdFields();
                                    break;

                                case "widgetStateRideAtaf":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('none');
                                    $('#inputUrlWidget').attr('disabled', false);
                                    $('#inputUrlWidget').prop('required', false);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputFontSize').val("");
                                    $('#inputFontSize').attr('disabled', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Nuova riga
                                    //Default tab
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="inputDefaultTab" class="col-md-2 control-label"><?php echo _("Default tab"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="inputDefaultTab" name="inputDefaultTab"></select>');
                                    newSelect.append('<option value="0">Stato</option>');
                                    newSelect.append('<option value="1">Linee monitorate</option>');
                                    newSelect.append('<option value="2">Dati</option>');
                                    newSelect.append('<option value="-1">None (automatic switch)</option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newLabel.show();
                                    newInnerDiv.show();
                                    newSelect.show();

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
                                    break;
///WIDGET OPENLAYERS
                    case "widgetGisWFS":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('');
                                    $('#inputUrlWidget').prop("required", false);
                                    $('#inputUrlWidget').attr("disabled", false);
                                    $("#titleLabel").html("Title"); 
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputColorWidget').attr('disabled', false);
                                    $('#inputColorWidget').attr('required', true);
                                    $('#inputColorWidget').val("#eeeeee");
                                    $('#color_widget').css("background-color", "#eeeeee");
                                    $('#inputFontSize').val("");
                                    $('#inputFontSize').attr('disabled', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', true);
                                    $('#inputFreqWidget').val("");
                                    $('#inputFreqWidget').prop('required', false);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();
                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();                                    
                                    //Nuova riga
                                    //Modalità del widget (none, map, gis, link esterno, selector Web)
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="widgetMode" class="col-md-2 control-label"><?php echo _("Widget mode"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="widgetMode" name="widgetMode"></select>');
                                    newSelect.append('<option value="link"><?php echo _("Web link"); ?></option>');
                                    newSelect.append('<option value="map"><?php echo _("Map"); ?></option>');
                                    newSelect.append('<option value="gisTarget"><?php echo _("Selector target"); ?></option>');
                                    newSelect.append('<option value="selectorWebTarget"><?php echo _("Selector Web target"); ?></option>');
                                    newSelect.append('<option value="none"><?php echo _("None"); ?></option>');
                                    newSelect.val("link");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);                                    
                                    //Nuova riga
                                    //Centro della mappa per modalità GIS target
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);                                    
                                    newLabel = $('<label class="col-md-2 control-label"><?php echo _("Start lat"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-2">' +
                                                      '<input type="text" id="gisTargetCenterLat" class="form-control" value="43.769789"/>' +
                                                    +'</div>');
                                    newInnerDiv.css("padding-left", "0px");
                                    newInnerDiv.css("padding-right", "0px");
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);                                    
                                    newLabel = $('<label class="col-md-2 control-label"><?php echo _("Start lng"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-2">' +
                                                      '<input type="text" id="gisTargetCenterLng" class="form-control" value="11.255694"/>' +
                                                    +'</div>');
                                    newInnerDiv.css("padding-left", "0px");
                                    newInnerDiv.css("padding-right", "0px");        
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);                                    
                                    newLabel = $('<label class="col-md-2 control-label"><?php echo _("Start zoom"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-2">' +
                                                      '<input type="text" id="gisTargetCenterZoom" class="form-control" value="11"/>' +
                                                    +'</div>');
                                    newLabel.css("padding-left", "8px");
                                    newLabel.css("padding-right", "8px");        
                                    newInnerDiv.css("padding-left", "0px");
                                    newInnerDiv.css("padding-right", "0px");        
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newFormRow.hide();                                    
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newInnerDiv = $('<div id="gisTargetCenterMapDiv" class="col-md-12"></div>');
                                    newFormRow.append(newInnerDiv);
                                    newFormRow.hide();                                    
                                    //Nuova riga
                                    //Full screen controls
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="enableFullscreenTab" class="col-md-2 control-label"><?php echo _("Enable fullscreen in new tab"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="enableFullscreenTab" name="enableFullscreenTab"></select>');
                                    newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                    newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);                                    
                                    newLabel = $('<label for="enableFullscreenModal" class="col-md-2 control-label"><?php echo _("Enable fullscreen in a popup"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="enableFullscreenModal" name="enableFullscreenModal"></select>');
                                    newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                    newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                    newSelect.val("yes");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);                                    
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="coordsCollectionUri" class="col-md-2 control-label"><?php echo _("Coords collection URI"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-4"></div>');
                                    newSelect = $('<input type="text" class="form-control" id="coordsCollectionUri" name="coordsCollectionUri"/>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $('#coordsCollectionUri').parents("div.row").hide();                                    
                                    //Nuova riga
                                    //Zoom controls visibility
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="inputControlsVisibility" class="col-md-2 control-label"><?php echo _("Zoom controls visibility"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="inputControlsVisibility" name="inputControlsVisibility"></select>');
                                    newSelect.append('<option value="alwaysVisible">Always visible</option>');
                                    newSelect.append('<option value="hidden">Hidden</option>');
                                    newSelect.val("alwaysVisible");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);                                    
                                    //Zoom factor
                                    newLabel = $('<label for="inputZoomFactor" class="col-md-2 control-label"><?php echo _("Zoom factor (%)"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="inputZoomFactor" name="inputZoomFactor" required>');
                                    newInput.val(100);
                                    newInput.attr('disabled', true);
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);                                    
                                    //Nuova riga
                                    //Zoom controls position
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="inputControlsPosition" class="col-md-2 control-label"><?php echo _("Zoom controls position"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="inputControlsPosition" name="inputControlsPosition"></select>');
                                    newSelect.append('<option value="topLeft"><?php echo _("Top left"); ?></option>');
                                    newSelect.append('<option value="topCenter"><?php echo _("Top center"); ?></option>');
                                    newSelect.append('<option value="topRight"><?php echo _("Top right"); ?></option>');
                                    newSelect.append('<option value="middleRight"><?php echo _("Middle right"); ?></option>');
                                    newSelect.append('<option value="bottomRight"><?php echo _("Bottom right"); ?></option>');
                                    newSelect.append('<option value="bottomMiddle"><?php echo _("Bottom middle"); ?></option>');
                                    newSelect.append('<option value="bottomLeft"><?php echo _("Bottom left"); ?></option>');
                                    newSelect.append('<option value="middleLeft"><?php echo _("Middle left"); ?></option>');
                                    newSelect.val("topLeft");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    $("#widgetMode").change(function(){
                                        switch($(this).val())
                                        {
                                            case "link":
                                                $("#inputUrlWidget").val("");
                                                $("#inputUrlWidget").parents("div.row").show();
                                                $("#enableFullscreenTab").val("yes");
                                                $('#enableFullscreenTab').attr('disabled', false);
                                                $("#inputControlsVisibility").val("alwaysVisible");
                                                $("#inputZoomFactor").val("100");
                                                $("#inputControlsPosition").val("topLeft");
                                                $("#inputControlsVisibility").parents("div.row").show();
                                                $("#inputControlsPosition").parents("div.row").show();
                                                $("#gisTargetCenterLat").parents("div.row").hide();
                                                $("#gisTargetCenterMapDiv").parents("div.row").hide();
                                                $('#coordsCollectionUri').parents("div.row").hide();
                                                break;
                                                
                                            case "map":
                                                $("#inputUrlWidget").val("map");
                                                $("#inputUrlWidget").parents("div.row").hide();
                                                $("#enableFullscreenTab").val("no");
                                                $('#enableFullscreenTab').attr('disabled', true);
                                                $("#inputControlsVisibility").val("hidden");
                                                $("#inputZoomFactor").val("100");
                                                $("#inputControlsPosition").val("topLeft");
                                                $("#inputControlsVisibility").parents("div.row").hide();
                                                $("#inputControlsPosition").parents("div.row").hide();
                                                $("#gisTargetCenterLat").parents("div.row").hide();
                                                $("#gisTargetCenterMapDiv").parents("div.row").hide();
                                                $('#coordsCollectionUri').parents("div.row").hide();
                                                break;
                                                
                                            case "selectorWebTarget":
                                                $("#inputUrlWidget").val("");
                                                $("#inputUrlWidget").parents("div.row").show();
                                                $("#enableFullscreenTab").val("yes");
                                                $('#enableFullscreenTab').attr('disabled', false);
                                                $("#inputControlsVisibility").val("alwaysVisible");
                                                $("#inputZoomFactor").val("100");
                                                $("#inputControlsPosition").val("topLeft");
                                                $("#inputControlsVisibility").parents("div.row").show();
                                                $("#inputControlsPosition").parents("div.row").show();
                                                $("#gisTargetCenterLat").parents("div.row").hide();
                                                $("#gisTargetCenterMapDiv").parents("div.row").hide();
                                                $('#coordsCollectionUri').parents("div.row").hide();
                                                break;    
                                                
                                            case "gisTarget":
                                                $("#inputUrlWidget").val("gisTarget");
                                                $("#inputUrlWidget").parents("div.row").hide();
                                                $("#enableFullscreenTab").val("no");
                                                $('#enableFullscreenTab').attr('disabled', true);
                                                $("#inputControlsVisibility").val("hidden");
                                                $("#inputZoomFactor").val("100");
                                                $("#inputControlsPosition").val("topLeft");
                                                $("#inputControlsVisibility").parents("div.row").hide();
                                                $("#inputControlsPosition").parents("div.row").hide();
                                                $("#gisTargetCenterLat").parents("div.row").show();
                                                $("#gisTargetCenterMapDiv").parents("div.row").show();
                                                $('#coordsCollectionUri').parents("div.row").show();
                                                
                                                var gisTargetCenterParameters = {
                                                    latLng: [43.769789, 11.255694],
                                                    zoom: 11,
                                                    coordsCollectionUri: null
                                                };
                                                $("#parameters").val(JSON.stringify(gisTargetCenterParameters));
                                                
                                                $('#coordsCollectionUri').change(function(){
                                                    gisTargetCenterParameters.coordsCollectionUri = $(this).val();
                                                });
                                                
                                                if(gisTargetCenterMapDivRef === null)
                                                {
                                                    gisTargetCenterMapDiv = "gisTargetCenterMapDiv";
                                                    gisTargetCenterMapDivRef = L.map(gisTargetCenterMapDiv).setView([43.769789, 11.255694], 11);

                                                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                                       attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                                                       maxZoom: 18
                                                    }).addTo(gisTargetCenterMapDivRef);
                                                    gisTargetCenterMapDivRef.attributionControl.setPrefix('');

                                                    gisTargetCenterMapDivRef.off("zoom");
                                                    gisTargetCenterMapDivRef.on("zoom", function(){
                                                        $("#gisTargetCenterZoom").val(gisTargetCenterMapDivRef.getZoom());
                                                        gisTargetCenterParameters.zoom = $("#gisTargetCenterZoom").val();
                                                        $("#parameters").val(JSON.stringify(gisTargetCenterParameters));
                                                    });
                                                    
                                                    $("#gisTargetCenterZoom").off("input");
                                                    $("#gisTargetCenterZoom").on("input", function(event){
                                                        gisTargetCenterMapDivRef.setZoom($(this).val());
                                                        gisTargetCenterParameters.zoom = $("#gisTargetCenterZoom").val();
                                                        $("#parameters").val(JSON.stringify(gisTargetCenterParameters));
                                                    });
                                                    
                                                    gisTargetCenterMapDivRef.off("move");
                                                    gisTargetCenterMapDivRef.on("move", function(){
                                                        $("#gisTargetCenterLat").val(gisTargetCenterMapDivRef.getCenter().lat);
                                                        $("#gisTargetCenterLng").val(gisTargetCenterMapDivRef.getCenter().lng);
                                                        //$("#gisTargetCenterLat").val(gisTargetCenterMapDivRef.getCenter().lng);
                                                        //$("#gisTargetCenterLng").val(gisTargetCenterMapDivRef.getCenter().lat);
                                                        //
                                                        gisTargetCenterParameters.latLng[0] = $("#gisTargetCenterLat").val();
                                                        gisTargetCenterParameters.latLng[1] = $("#gisTargetCenterLng").val();
                                                        $("#parameters").val(JSON.stringify(gisTargetCenterParameters));
                                                    });
                                                    
                                                    $("#gisTargetCenterLat").off("input");
                                                    $("#gisTargetCenterLat").on("input", function(event){
                                                        gisTargetCenterParameters.latLng[0] = $("#gisTargetCenterLat").val();
                                                        gisTargetCenterMapDivRef.panTo(gisTargetCenterParameters.latLng);
                                                        $("#parameters").val(JSON.stringify(gisTargetCenterParameters));
                                                    });
                                                    
                                                    $("#gisTargetCenterLng").off("input");
                                                    $("#gisTargetCenterLng").on("input", function(event){
                                                        gisTargetCenterParameters.latLng[1] = $("#gisTargetCenterLng").val();
                                                        gisTargetCenterMapDivRef.panTo(gisTargetCenterParameters.latLng);
                                                        $("#parameters").val(JSON.stringify(gisTargetCenterParameters));
                                                    });
                                                }
                                                break;
                                                
                                            case "none":
                                                $("#inputUrlWidget").val("none");
                                                $("#inputUrlWidget").parents("div.row").hide();
                                                $("#enableFullscreenTab").val("no");
                                                $('#enableFullscreenTab').attr('disabled', true);
                                                $("#inputControlsVisibility").val("hidden");
                                                $("#inputZoomFactor").val("100");
                                                $("#inputControlsPosition").val("topLeft");
                                                $("#inputControlsVisibility").parents("div.row").hide();
                                                $("#inputControlsPosition").parents("div.row").hide();
                                                $("#gisTargetCenterLat").parents("div.row").hide();
                                                $("#gisTargetCenterMapDiv").parents("div.row").hide();
                                                $('#coordsCollectionUri').parents("div.row").hide();
                                                break;    
                                        }
                                    });
                                    
                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
                                        if($('#metricsCategory').val() === 'app'){
                                            $('#widgetMode').attr('disabled', true);
                                            $('#inputUrlWidgetNR').val('about:blank');
					}
                                    break;
///FINE WIdget_OPENLAYERS

                                case "widgetExternalContent":                                
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('');
                                    $('#inputUrlWidget').prop("required", false);
                                    $('#inputUrlWidget').attr("disabled", false);
                                    $("#titleLabel").html("Title"); 
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputColorWidget').attr('disabled', false);
                                    $('#inputColorWidget').attr('required', true);
                                    $('#inputColorWidget').val("#eeeeee");
                                    $('#color_widget').css("background-color", "#eeeeee");
                                    $('#inputFontSize').val("");
                                    $('#inputFontSize').attr('disabled', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', true);
                                    $('#inputFreqWidget').val("");
                                    $('#inputFreqWidget').prop('required', false);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();
                                    
                                    //Nuova riga
                                    //Modalità del widget (none, map, gis, link esterno, selector Web)
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="widgetMode" class="col-md-2 control-label"><?php echo _("Widget mode"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="widgetMode" name="widgetMode"></select>');
                                    newSelect.append('<option value="link"><?php echo _("Web link"); ?></option>');
                                    newSelect.append('<option value="map"><?php echo _("Map"); ?></option>');
                                    newSelect.append('<option value="gisTarget"><?php echo _("Selector target"); ?></option>');
                                    newSelect.append('<option value="selectorWebTarget"><?php echo _("Selector Web target"); ?></option>');
                                    newSelect.append('<option value="none"><?php echo _("None"); ?></option>');
                                    newSelect.val("link");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    //Nuova riga
                                    //Centro della mappa per modalità GIS target
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    
                                    newLabel = $('<label class="col-md-2 control-label"><?php echo _("Start lat"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-2">' +
                                                      '<input type="text" id="gisTargetCenterLat" class="form-control" value="43.769789"/>' +
                                                    +'</div>');
                                    newInnerDiv.css("padding-left", "0px");
                                    newInnerDiv.css("padding-right", "0px");
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    newLabel = $('<label class="col-md-2 control-label"><?php echo _("Start lng"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-2">' +
                                                      '<input type="text" id="gisTargetCenterLng" class="form-control" value="11.255694"/>' +
                                                    +'</div>');
                                    newInnerDiv.css("padding-left", "0px");
                                    newInnerDiv.css("padding-right", "0px");        
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    newLabel = $('<label class="col-md-2 control-label"><?php echo _("Start zoom"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-2">' +
                                                      '<input type="text" id="gisTargetCenterZoom" class="form-control" value="11"/>' +
                                                    +'</div>');
                                    newLabel.css("padding-left", "8px");
                                    newLabel.css("padding-right", "8px");        
                                    newInnerDiv.css("padding-left", "0px");
                                    newInnerDiv.css("padding-right", "0px");        
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    newFormRow.hide();
                                    
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newInnerDiv = $('<div id="gisTargetCenterMapDiv" class="col-md-12"></div>');
                                    newFormRow.append(newInnerDiv);
                                    newFormRow.hide();
                                    
                                    //Nuova riga
                                    //Full screen controls
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="enableFullscreenTab" class="col-md-2 control-label"><?php echo _("Enable fullscreen in new tab"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="enableFullscreenTab" name="enableFullscreenTab"></select>');
                                    newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                    newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    newLabel = $('<label for="enableFullscreenModal" class="col-md-2 control-label"><?php echo _("Enable fullscreen in a popup"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="enableFullscreenModal" name="enableFullscreenModal"></select>');
                                    newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                    newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                    newSelect.val("yes");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="coordsCollectionUri" class="col-md-2 control-label"><?php echo _("Coords collection URI"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-4"></div>');
                                    newSelect = $('<input type="text" class="form-control" id="coordsCollectionUri" name="coordsCollectionUri"/>');
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    $('#coordsCollectionUri').parents("div.row").hide();
                                    
                                    //Nuova riga
                                    //Zoom controls visibility
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="inputControlsVisibility" class="col-md-2 control-label"><?php echo _("Zoom controls visibility"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="inputControlsVisibility" name="inputControlsVisibility"></select>');
                                    newSelect.append('<option value="alwaysVisible">Always visible</option>');
                                    newSelect.append('<option value="hidden">Hidden</option>');
                                    newSelect.val("alwaysVisible");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    //Zoom factor
                                    newLabel = $('<label for="inputZoomFactor" class="col-md-2 control-label"><?php echo _("Zoom factor (%)"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newInput = $('<input type="text" class="form-control" id="inputZoomFactor" name="inputZoomFactor" required>');
                                    newInput.val(100);
                                    newInput.attr('disabled', true);
                                    newInnerDiv.append(newInput);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    //Nuova riga
                                    //Zoom controls position
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="inputControlsPosition" class="col-md-2 control-label"><?php echo _("Zoom controls position"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="inputControlsPosition" name="inputControlsPosition"></select>');
                                    newSelect.append('<option value="topLeft"><?php echo _("Top left"); ?></option>');
                                    newSelect.append('<option value="topCenter"><?php echo _("Top center"); ?></option>');
                                    newSelect.append('<option value="topRight"><?php echo _("Top right"); ?></option>');
                                    newSelect.append('<option value="middleRight"><?php echo _("Middle right"); ?></option>');
                                    newSelect.append('<option value="bottomRight"><?php echo _("Bottom right"); ?></option>');
                                    newSelect.append('<option value="bottomMiddle"><?php echo _("Bottom middle"); ?></option>');
                                    newSelect.append('<option value="bottomLeft"><?php echo _("Bottom left"); ?></option>');
                                    newSelect.append('<option value="middleLeft"><?php echo _("Middle left"); ?></option>');
                                    newSelect.val("topLeft");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);
                                    
                                    $("#widgetMode").change(function(){
                                        switch($(this).val())
                                        {
                                            case "link":
                                                $("#inputUrlWidget").val("");
                                                $("#inputUrlWidget").parents("div.row").show();
                                                $("#enableFullscreenTab").val("yes");
                                                $('#enableFullscreenTab').attr('disabled', false);
                                                $("#inputControlsVisibility").val("alwaysVisible");
                                                $("#inputZoomFactor").val("100");
                                                $("#inputControlsPosition").val("topLeft");
                                                $("#inputControlsVisibility").parents("div.row").show();
                                                $("#inputControlsPosition").parents("div.row").show();
                                                $("#gisTargetCenterLat").parents("div.row").hide();
                                                $("#gisTargetCenterMapDiv").parents("div.row").hide();
                                                $('#coordsCollectionUri').parents("div.row").hide();
                                                break;
                                                
                                            case "map":
                                                $("#inputUrlWidget").val("map");
                                                $("#inputUrlWidget").parents("div.row").hide();
                                                $("#enableFullscreenTab").val("no");
                                                $('#enableFullscreenTab').attr('disabled', true);
                                                $("#inputControlsVisibility").val("hidden");
                                                $("#inputZoomFactor").val("100");
                                                $("#inputControlsPosition").val("topLeft");
                                                $("#inputControlsVisibility").parents("div.row").hide();
                                                $("#inputControlsPosition").parents("div.row").hide();
                                                $("#gisTargetCenterLat").parents("div.row").hide();
                                                $("#gisTargetCenterMapDiv").parents("div.row").hide();
                                                $('#coordsCollectionUri').parents("div.row").hide();
                                                break;
                                                
                                            case "selectorWebTarget":
                                                $("#inputUrlWidget").val("");
                                                $("#inputUrlWidget").parents("div.row").show();
                                                $("#enableFullscreenTab").val("yes");
                                                $('#enableFullscreenTab').attr('disabled', false);
                                                $("#inputControlsVisibility").val("alwaysVisible");
                                                $("#inputZoomFactor").val("100");
                                                $("#inputControlsPosition").val("topLeft");
                                                $("#inputControlsVisibility").parents("div.row").show();
                                                $("#inputControlsPosition").parents("div.row").show();
                                                $("#gisTargetCenterLat").parents("div.row").hide();
                                                $("#gisTargetCenterMapDiv").parents("div.row").hide();
                                                $('#coordsCollectionUri').parents("div.row").hide();
                                                break;    
                                                
                                            case "gisTarget":
                                                $("#inputUrlWidget").val("gisTarget");
                                                $("#inputUrlWidget").parents("div.row").hide();
                                                $("#enableFullscreenTab").val("no");
                                                $('#enableFullscreenTab').attr('disabled', true);
                                                $("#inputControlsVisibility").val("hidden");
                                                $("#inputZoomFactor").val("100");
                                                $("#inputControlsPosition").val("topLeft");
                                                $("#inputControlsVisibility").parents("div.row").hide();
                                                $("#inputControlsPosition").parents("div.row").hide();
                                                $("#gisTargetCenterLat").parents("div.row").show();
                                                $("#gisTargetCenterMapDiv").parents("div.row").show();
                                                $('#coordsCollectionUri').parents("div.row").show();
                                                
                                                var gisTargetCenterParameters = {
                                                    latLng: [43.769789, 11.255694],
                                                    zoom: 11,
                                                    coordsCollectionUri: null
                                                };
                                                $("#parameters").val(JSON.stringify(gisTargetCenterParameters));
                                                
                                                $('#coordsCollectionUri').change(function(){
                                                    gisTargetCenterParameters.coordsCollectionUri = $(this).val();
                                                });
                                                
                                                if(gisTargetCenterMapDivRef === null)
                                                {
                                                    gisTargetCenterMapDiv = "gisTargetCenterMapDiv";
                                                    gisTargetCenterMapDivRef = L.map(gisTargetCenterMapDiv).setView([43.769789, 11.255694], 11);

                                                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                                       attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                                                       maxZoom: 18
                                                    }).addTo(gisTargetCenterMapDivRef);
                                                    gisTargetCenterMapDivRef.attributionControl.setPrefix('');

                                                    gisTargetCenterMapDivRef.off("zoom");
                                                    gisTargetCenterMapDivRef.on("zoom", function(){
                                                        $("#gisTargetCenterZoom").val(gisTargetCenterMapDivRef.getZoom());
                                                        gisTargetCenterParameters.zoom = $("#gisTargetCenterZoom").val();
                                                        $("#parameters").val(JSON.stringify(gisTargetCenterParameters));
                                                    });
                                                    
                                                    $("#gisTargetCenterZoom").off("input");
                                                    $("#gisTargetCenterZoom").on("input", function(event){
                                                        gisTargetCenterMapDivRef.setZoom($(this).val());
                                                        gisTargetCenterParameters.zoom = $("#gisTargetCenterZoom").val();
                                                        $("#parameters").val(JSON.stringify(gisTargetCenterParameters));
                                                    });
                                                    
                                                    gisTargetCenterMapDivRef.off("move");
                                                    gisTargetCenterMapDivRef.on("move", function(){
                                                        $("#gisTargetCenterLat").val(gisTargetCenterMapDivRef.getCenter().lat);
                                                        $("#gisTargetCenterLng").val(gisTargetCenterMapDivRef.getCenter().lng);
                                                        gisTargetCenterParameters.latLng[0] = $("#gisTargetCenterLat").val();
                                                        gisTargetCenterParameters.latLng[1] = $("#gisTargetCenterLng").val();
                                                        $("#parameters").val(JSON.stringify(gisTargetCenterParameters));
                                                    });
                                                    
                                                    $("#gisTargetCenterLat").off("input");
                                                    $("#gisTargetCenterLat").on("input", function(event){
                                                        gisTargetCenterParameters.latLng[0] = $("#gisTargetCenterLat").val();
                                                        gisTargetCenterMapDivRef.panTo(gisTargetCenterParameters.latLng);
                                                        $("#parameters").val(JSON.stringify(gisTargetCenterParameters));
                                                    });
                                                    
                                                    $("#gisTargetCenterLng").off("input");
                                                    $("#gisTargetCenterLng").on("input", function(event){
                                                        gisTargetCenterParameters.latLng[1] = $("#gisTargetCenterLng").val();
                                                        gisTargetCenterMapDivRef.panTo(gisTargetCenterParameters.latLng);
                                                        $("#parameters").val(JSON.stringify(gisTargetCenterParameters));
                                                    });
                                                }
                                                break;
                                                
                                            case "none":
                                                $("#inputUrlWidget").val("none");
                                                $("#inputUrlWidget").parents("div.row").hide();
                                                $("#enableFullscreenTab").val("no");
                                                $('#enableFullscreenTab').attr('disabled', true);
                                                $("#inputControlsVisibility").val("hidden");
                                                $("#inputZoomFactor").val("100");
                                                $("#inputControlsPosition").val("topLeft");
                                                $("#inputControlsVisibility").parents("div.row").hide();
                                                $("#inputControlsPosition").parents("div.row").hide();
                                                $("#gisTargetCenterLat").parents("div.row").hide();
                                                $("#gisTargetCenterMapDiv").parents("div.row").hide();
                                                $('#coordsCollectionUri').parents("div.row").hide();
                                                break;    
                                        }
                                    });
                                    
                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
									
									if($('#metricsCategory').val() === 'app')
									{
										$('#widgetMode').attr('disabled', true);
										$('#inputUrlWidgetNR').val('about:blank');
									}
                                    break;

                                case "widgetMap":
                                    $('#inputTitleWidget').val('');
                                    $('#inputUrlWidget').val('');
                                    $('#inputUrlWidget').prop("required", false);
                                    $('#inputUrlWidget').attr("disabled", false);
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#inputColorWidget').attr('disabled', false);
                                    $('#inputColorWidget').attr('required', true);
                                    $('#inputColorWidget').val("#eeeeee");
                                    $('#color_widget').css("background-color", "#eeeeee");
                                    $('#inputFontSize').val("");
                                    $('#inputFontSize').attr('disabled', true);
                                    $('#inputFontColor').val("");
                                    $('#inputFontColor').attr('disabled', true);
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').val(-1);
                                    $('#select-IntTemp-Widget').attr('disabled', true);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', true);
                                    $('#inputFreqWidget').val("");
                                    $('#inputFreqWidget').prop('required', false);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    //Nuova riga
                                    //Centro della mappa
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);

                                    newLabel = $('<label class="col-md-2 control-label"><?php echo _("Start lat"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-2">' +
                                        '<input type="text" id="gisTargetCenterLat" class="form-control" value="43.769789"/>' +
                                        +'</div>');
                                    newInnerDiv.css("padding-left", "0px");
                                    newInnerDiv.css("padding-right", "0px");
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    newLabel = $('<label class="col-md-2 control-label"><?php echo _("Start lng"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-2">' +
                                        '<input type="text" id="gisTargetCenterLng" class="form-control" value="11.255694"/>' +
                                        +'</div>');
                                    newInnerDiv.css("padding-left", "0px");
                                    newInnerDiv.css("padding-right", "0px");
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    newLabel = $('<label class="col-md-2 control-label"><?php echo _("Start zoom"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-2">' +
                                        '<input type="text" id="gisTargetCenterZoom" class="form-control" value="11"/>' +
                                        +'</div>');
                                    newLabel.css("padding-left", "8px");
                                    newLabel.css("padding-right", "8px");
                                    newInnerDiv.css("padding-left", "0px");
                                    newInnerDiv.css("padding-right", "0px");
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);

                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newInnerDiv = $('<div id="gisTargetCenterMapDiv" class="col-md-12"></div>');
                                    newFormRow.append(newInnerDiv);

                                    //Nuova riga
                                    //Full screen controls
                                    newFormRow = $('<div class="row"></div>');
                                    $("#specificWidgetPropertiesDiv").append(newFormRow);
                                    newLabel = $('<label for="enableFullscreenModal" class="col-md-2 control-label"><?php echo _("Enable fullscreen in a popup"); ?></label>');
                                    newInnerDiv = $('<div class="col-md-3"></div>');
                                    newSelect = $('<select class="form-control" id="enableFullscreenModal" name="enableFullscreenModal"></select>');
                                    newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                    newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                    newSelect.val("yes");
                                    newInnerDiv.append(newSelect);
                                    newFormRow.append(newLabel);
                                    newFormRow.append(newInnerDiv);


                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");

                                    var gisTargetCenterParameters = {
                                        latLng: [43.769789, 11.255694],
                                        zoom: 11,
                                        coordsCollectionUri: null
                                    };
                                    $("#parameters").val(JSON.stringify(gisTargetCenterParameters));

                                    $('#coordsCollectionUri').change(function () {
                                        mapTargetCenterParameters.coordsCollectionUri = $(this).val();
                                    });

                                    if (gisTargetCenterMapDivRef === null) {
                                        gisTargetCenterMapDiv = "gisTargetCenterMapDiv";
                                        gisTargetCenterMapDivRef = L.map(gisTargetCenterMapDiv).setView([43.769789, 11.255694], 11);

                                        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                            attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                                            maxZoom: 18
                                        }).addTo(gisTargetCenterMapDivRef);
                                        gisTargetCenterMapDivRef.attributionControl.setPrefix('');

                                        gisTargetCenterMapDivRef.off("zoom");
                                        gisTargetCenterMapDivRef.on("zoom", function () {
                                            $("#gisTargetCenterZoom").val(gisTargetCenterMapDivRef.getZoom());
                                            gisTargetCenterParameters.zoom = $("#gisTargetCenterZoom").val();
                                            $("#parameters").val(JSON.stringify(gisTargetCenterParameters));
                                        });

                                        $("#gisTargetCenterZoom").off("input");
                                        $("#gisTargetCenterZoom").on("input", function (event) {
                                            gisTargetCenterMapDivRef.setZoom($(this).val());
                                            gisTargetCenterParameters.zoom = $("#gisTargetCenterZoom").val();
                                            $("#parameters").val(JSON.stringify(gisTargetCenterParameters));
                                        });

                                        gisTargetCenterMapDivRef.off("move");
                                        gisTargetCenterMapDivRef.on("move", function () {
                                            $("#gisTargetCenterLat").val(gisTargetCenterMapDivRef.getCenter().lat);
                                            $("#gisTargetCenterLng").val(gisTargetCenterMapDivRef.getCenter().lng);
                                            gisTargetCenterParameters.latLng[0] = $("#gisTargetCenterLat").val();
                                            gisTargetCenterParameters.latLng[1] = $("#gisTargetCenterLng").val();
                                            $("#parameters").val(JSON.stringify(gisTargetCenterParameters));
                                        });

                                        $("#gisTargetCenterLat").off("input");
                                        $("#gisTargetCenterLat").on("input", function (event) {
                                            gisTargetCenterParameters.latLng[0] = $("#gisTargetCenterLat").val();
                                            gisTargetCenterMapDivRef.panTo(gisTargetCenterParameters.latLng);
                                            $("#parameters").val(JSON.stringify(gisTargetCenterParameters));
                                        });

                                        $("#gisTargetCenterLng").off("input");
                                        $("#gisTargetCenterLng").on("input", function (event) {
                                            gisTargetCenterParameters.latLng[1] = $("#gisTargetCenterLng").val();
                                            gisTargetCenterMapDivRef.panTo(gisTargetCenterParameters.latLng);
                                            $("#parameters").val(JSON.stringify(gisTargetCenterParameters));
                                        });
                                    }
                                    break;

                                default:
                                    $('#inputUrlWidget').val('none');
                                    $('#inputFontSize').val("");
                                    $('#inputFontColor').val("");
                                    $('#widgetFontColor').css("background-color", "#eeeeee");
                                    $("#titleLabel").html("Title");
                                    $("#bckColorLabel").html("Background color");
                                    $('#link_help_modal-add-widget').css("display", "");
                                    $('#inputUdmWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').attr('disabled', false);
                                    $('#inputFrameColorWidget').val('#eeeeee');
                                    $('#inputFrameColorWidget').prop('required', false);
                                    $('#select-IntTemp-Widget').attr('disabled', false);
                                    $('#select-IntTemp-Widget').prop('required', false);
                                    $('#inputFreqWidget').attr('disabled', false);
                                    $('#inputFreqWidget').val(60);
                                    $('#inputFreqWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').attr('disabled', false);
                                    $('#inputHeaderFontColorWidget').prop('required', true);
                                    $('#inputHeaderFontColorWidget').val("#000000");
                                    $('#widgetHeaderFontColor').css("background-color", "#000000");
                                    $('#inputUdmWidget').prop("required", false);
                                    $('#inputUdmWidget').attr("disabled", true);
                                    $('#inputUdmPosition').prop("required", false);
                                    $('#inputUdmPosition').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').attr("disabled", true);
                                    $('#addWidgetFirstAidHospital').prop("required", false);
                                    $('#addWidgetFirstAidHospital').val(-1);
                                    $('#inputFirstAidRow').hide();

                                    //Parametri specifici del widget
                                    $('#specificWidgetPropertiesDiv .row').remove();

                                    $('#inputComuneWidget').attr('disabled', false);

                                    //Rimozione eventuali campi del subform general per widget process
                                    removeWidgetProcessGeneralFields("addWidget");
                                    break;
                            }//Fine switch

                        $('#inputSizeRowsWidget').val(6 * (78 / newScaledGridsterCellW));     // MOD GRID
                        $('#inputSizeColumnsWidget').val(3 * (39 / newScaledGridsterCellH));    // MOD GRID
                        $('#inputFreqWidget').val("600");
                    };
                    
                    $("#link_add_widget").click(function()
                    {
                       $("#modal-add-widget").modal("show");
                       addWidgetConditionsArray["title"] = false;
                       $("label[for=inputTitleWidget]").css("color", "red");
                       addWidgetConditionsArrayLocal["thrs"] = true;
                       
                       //Controllo presenza titolo
                       $("#inputTitleWidget").off();
                       $("#inputTitleWidget").on('input', function(){
                           var pattern = /^$/; 
                           
                           if($("#select-widget").val() !== 'widgetProtezioneCivile' && $("#select-widget").val() !== 'widgetProtezioneCivileFirenze')
                           {
                                if(pattern.test($(this).val()))
                                {
                                    addWidgetConditionsArray["title"] = false;
                                    $("label[for=inputTitleWidget]").css("color", "red");
                                }
                                else
                                {
                                   var newTitle = $(this).val();

                                   if($("div.titleDiv").length > 0)
                                   {
                                      $("div.titleDiv").each(function(i)
                                      {
                                         if($(this).html() === newTitle)
                                         {
                                            addWidgetConditionsArray["title"] = false;
                                            $("label[for=inputTitleWidget]").css("color", "red");
                                            return false;
                                         }
                                         else
                                         {
                                            addWidgetConditionsArray["title"] = true;
                                            $("label[for=inputTitleWidget]").css("color", "black");
                                         }
                                      });
                                   }
                                   else
                                   {
                                      addWidgetConditionsArray["title"] = true;
                                      $("label[for=inputTitleWidget]").css("color", "black");
                                   }
                                }
                           }
                           else
                           {
                               addWidgetConditionsArray["title"] = true;
                               $("label[for=inputTitleWidget]").css("color", "black");
                           }
                           
                           checkAddWidgetConditions();
                       });
                    });
                    
                    $('#select-widget').change(update_select_widget);
                    $('#select-widgetNR').change(update_select_widget);
                    
                    $.ajax({
                        url: "get_data.php",
                        data: {
                            action: "getDashboardParamsAndWidgetsNR",
                            notBySession: "true",
                            dashboardId: '<?= escapeForJS($_GET["dashboardId"]) ?>',
                            username: "<?= $dashboardAuthorName ?>"
                        },
                        type: "GET",
                        async: true,
                        cache: false,
                        dataType: 'json',
                        success: function (data)
                        {
                            dashboardParams = data.dashboardParams;
                            dashboardWidgets = data.dashboardWidgets;
                            dashboardId = dashboardParams.Id;
                            dashBckImg = dashboardParams.bckImgFilename;
                            useBckImg = dashboardParams.useBckImg;
                            scaleFactorFlag = dashboardParams.scaleFactor;
                            if (scaleFactorFlag == null) {
                             /*   scaleFactorW = 5;
                                scaleFactorH = 5.4; */
                            /*    scaleFactorW = 4.8125;
                                scaleFactorH = 4.3333;*/
                            /*    scaleFactorW = 5.0666;
                                scaleFactorH = 4.3333;*/
                                scaleFactorW = 78 / newScaledGridsterCellW;
                                scaleFactorH = 39 / newScaledGridsterCellH;
                            //    scaleFactorH = scaleFactorW;
                                dashboardParams.num_columns = Math.round(scaleFactorW * dashboardParams.num_columns);
                             //   dashboardParams.num_columns = Math.round(scaleFactorW * (dashboardParams.num_columns) + scaleFactorW);
                            } else if (scaleFactorFlag == "yes") {
                                scaleFactorW = 1;
                                scaleFactorH = 1;
                            }
                            
                            if((dashBckImg !== null)&&(useBckImg === 'yes'))
                            {
                                backOverlayOpacity = parseFloat(dashboardParams.backOverlayOpacity);
                                var backOverlayOpacityPerc = backOverlayOpacity*100;
                                $('#dashBckCnt').css('background-image', 'url("../img/dashBackgrounds/dashboard' + dashboardId + '/' + dashBckImg + '")');
                                $('#dashBckImgFlag').attr("checked", true);
                                $('#dashBckOverlay').show();
                                $('#dashBckOverlay').css('background-color', 'rgba(0,0,0,' + backOverlayOpacity + ')');
                                $('#dashboardBckDarknessMenuRow').show();
                                
                                $('#dashboardBckDarknessVal').html(backOverlayOpacityPerc + "%");
                                
                                $("#dashboardBckDarknessSlider").bootstrapSlider({
                                    min: 0,
                                    max: 100,
                                    step: 1,
                                    tooltip: null
                                });
                                
                                $("#dashboardBckDarknessSlider").bootstrapSlider('setValue', backOverlayOpacityPerc);
                                
                                $('#dashboardBckDarknessSlider').bootstrapSlider().on('slide', function()
                                {
                                    let newValue = $('#dashboardBckDarknessSlider').bootstrapSlider('getValue');
                                    $('#dashboardBckDarknessVal').html(newValue + "%");
                                    newValue = parseFloat(newValue/100);
                                    $('#dashBckOverlay').css('background-color', 'rgba(0,0,0,' + newValue + ')');
                                });
                                
                                $('#dashboardBckDarknessSlider').bootstrapSlider().on('slideStop', function()
                                {
                                    let newValue = $('#dashboardBckDarknessSlider').bootstrapSlider('getValue');
                                    newValue = parseFloat(newValue/100);
                                    
                                    $.ajax({
                                        url: "../controllers/updateDashboard.php",
                                        type: "POST",
                                        data: 
                                        {
                                            action: "updateBackOverlayOpacity",
                                            dashboardId: dashboardId,
                                            newValue: newValue
                                        },
                                        async: true,
                                        dataType: 'json',
                                        success: function(okData) 
                                        {
                                            //Non facciamo niente di specifico
                                        },
                                        error: function(errorData)
                                        {
                                            //Non facciamo niente di specifico
                                        }
                                    });    
                                });
                            }
                            else
                            {
                                $('#dashBckImgFlag').attr("checked", false);
                                $('#dashBckOverlay').hide();
                                $('#dashboardBckDarknessMenuRow').hide();
                            }
                            
                            $("#headerLogoImg").css("display", "none");
                            
                            $('#modalEditDashboard #dashboardIdUnderEdit').val(dashboardId);
                            $('#scrDashboardModal #dashboardIdUnderEdit').val(dashboardId);
                            $('#modalEditDashboard #dashboardUser').val("<?= $dashboardAuthorName ?>");
                            $('#modalEditDashboard #dashboardEditor').val("<?= $dashboardEditorName ?>");
                            $('#modalEditDashboard #currentDashboardTitle').val(dashboardParams.title_header);
                            $('#modalEditDashboard #currentDashboardSubtitle').val(dashboardParams.subtitle_header);
                            $('#modal-add-widget #dashboardIdUnderEdit').val(dashboardId);
                            $('#modal-add-widget #dashboardUser').val("<?= $dashboardAuthorName ?>");
                            $('#modal-add-widget #dashboardEditor').val("<?= $dashboardEditorName ?>");
                            $('#modal-add-widget #currentDashboardTitle').val(dashboardParams.title_header);
                            $('#modal-add-widget #currentDashboardSubtitle').val(dashboardParams.subtitle_header);
                            $('#modal-modify-widget #dashboardIdUnderEdit').val(dashboardId);
                            $('#modal-modify-widget #dashboardUser').val("<?= $dashboardAuthorName ?>");
                            $('#modal-modify-widget #dashboardEditor').val("<?= $dashboardEditorName ?>");
                            $('#modal-modify-widget #currentDashboardTitle').val(dashboardParams.title_header);
                            $('#modal-modify-widget #currentDashboardSubtitle').val(dashboardParams.subtitle_header);
                            $('#modal-modify-widget #currentDashboardOrg').val(dashboardParams.organizations);
                            dashboardName = dashboardParams.name_dashboard;
                            dashboardOrg = dashboardParams.organizations;
                            logoFilename = dashboardParams.logoFilename;
                            logoLink = dashboardParams.logoLink;
                            headerVisible = dashboardParams.headerVisible;
                            dashboardViewMode = dashboardParams.viewMode;
                            gridColor = dashboardParams.gridColor;

                            $.ajax({
                                url: "../controllers/getOrganizationParameters.php",
                                data: {
                                    action: "getSpecificOrgParameters",
                                    param: dashboardOrg
                                },
                                type: "GET",
                                async: true,
                                dataType: 'json',
                                success: function (data) {
                                    /*   var orgLatLng = data.orgGpsCentreLatLng;
                                       microAppLat = orgLatLng.split(",")[0].trim();
                                       microAppLng = orgLatLng.split(",")[1].trim();
                                       $('#iotApplicationsIframe').attr('src', url + '&coordinates='+microAppLat+';'+microAppLng+'&lang=ita&maxDistance=0.3&maxResults=150');  */
                                    dashboardOrgKbUrl = data.orgKbUrl;
                                },
                                error: function (errorData) {
                                    console.log("Errore in reperimento parametri Org specifica: ");
                                    console.log(JSON.stringify(errorData));
                                }
                            });

                            if((dashboardParams.authorizedPagesJson !== '')&&(dashboardParams.authorizedPagesJson !== null)&&(dashboardParams.authorizedPagesJson !== 'NULL')&&(dashboardParams.authorizedPagesJson !== '[]'))
                            {
                                var row = null;
                                authorizedPages = JSON.parse(dashboardParams.authorizedPagesJson);
                                $('#authorizedPagesJson').val(dashboardParams.authorizedPagesJson);

                                for(var j = 0; j < authorizedPages.length; j++)
                                {
                                   row = $('<tr><td><a href="#" class="toBeEdited" data-type="text" data-mode="popup"></a></td><td><i class="fa fa-minus"></i></td></tr>');
                                   $('#authorizedPagesTable tbody').append(row); 

                                   row.find('a').editable({
                                        emptytext: "Empty",
                                        value: authorizedPages[j],
                                        display: function(value, response){
                                            if(value.length > 35)
                                            {
                                                $(this).html(value.substring(0, 32) + "...");
                                            }
                                            else
                                            {
                                               $(this).html(value); 
                                            }
                                        }
                                    });

                                    row.find('i.fa-minus').click(function(){
                                        var rowIndex = $(this).parents('tr').index();
                                        $('#authorizedPagesTable tbody tr').eq(rowIndex).remove();
                                        authorizedPages.splice(rowIndex, 1);
                                        $('#authorizedPagesJson').val(JSON.stringify(authorizedPages));
                                    });

                                    row.find('a.toBeEdited').on('save', function(e, params){
                                        var rowIndex = $(this).parents('tr').index();
                                        authorizedPages[rowIndex] = params.newValue;
                                        $('#authorizedPagesJson').val(JSON.stringify(authorizedPages));
                                    });
                                }
                            }
                            else
                            {
                                authorizedPages = [];
                                $('#authorizedPagesJson').val(JSON.stringify(authorizedPages));
                            }

                            $('#addAuthorizedPageBtn').click(function(){
                                var row = $('<tr><td><a href="#" class="toBeEdited" data-type="text" data-mode="popup"></a></td><td><i class="fa fa-minus"></i></td></tr>');
                                $('#authorizedPagesTable tbody').append(row);

                                var rowIndex = row.index();

                                row.find('a').editable({
                                   emptytext: "Empty",
                                   display: function(value, response){
                                       if(value.length > 35)
                                       {
                                           $(this).html(value.substring(0, 32) + "...");
                                       }
                                       else
                                       {
                                          $(this).html(value); 
                                       }
                                   }
                               });

                               authorizedPages[rowIndex] = null;
                               $('#authorizedPagesJson').val(JSON.stringify(authorizedPages));

                               row.find('i.fa-minus').click(function(){
                                   var rowIndex = $(this).parents('tr').index();
                                   $('#authorizedPagesTable tbody tr').eq(rowIndex).remove();
                                   authorizedPages.splice(rowIndex, 1);
                                   $('#authorizedPagesJson').val(JSON.stringify(authorizedPages));
                               });

                               row.find('a.toBeEdited').on('save', function(e, params){
                                   var rowIndex = $(this).parents('tr').index();
                                   authorizedPages[rowIndex] = params.newValue;
                                   $('#authorizedPagesJson').val(JSON.stringify(authorizedPages));
                               });
                           });

                            var headerFontColor = dashboardParams.headerFontColor;
                            headerFontSize = dashboardParams.headerFontSize;
                            var areaColor = dashboardParams.color_background;
                            var frameColor = dashboardParams.external_frame_color;

                            $("body").css("background-color", dashboardParams.external_frame_color);
                            $("#dashboardViewHeaderContainer").css("background-color", dashboardParams.color_header);
                            $("#dashboardViewHeaderContainer").attr("data-currentBackgroundColor", dashboardParams.color_header);
                            $("#dashHeaderColorPicker").colorpicker('setValue', dashboardParams.color_header);
                            $("#dashboardTitle").css("color", headerFontColor);
                            $('#chatBtn').css("color", $('#dashboardTitle').css('color'));
                            $('#chatBtnError').css("color", $('#dashboardTitle').css('color'));
                            $("#dashboardViewHeaderContainer").attr("data-currentFontColor", headerFontColor);
                            $("#dashHeaderFontColorPicker").colorpicker('setValue', headerFontColor);
                            $("#dashboardViewHeaderContainer").attr("data-currentAreaColor", areaColor);
                            $("#dashAreaColorPicker").colorpicker('setValue', areaColor);
                            $("#dashboardViewHeaderContainer").attr("data-currentFrameColor", frameColor);
                            $("#dashFrameColorPicker").colorpicker('setValue', frameColor);
                            $("#dashboardTitle span").text(dashboardParams.title_header);
                            $("#dashboardTitle").attr('data-currentTitle', dashboardParams.title_header);
                            $("#dashboardTitle").css("color", headerFontColor);
                            $("#clock").css("color", headerFontColor);
                            $('#fullscreenBtnContainer').css("color", headerFontColor);

                            $('#clock').textfill({
                                maxFontPixels: -20
                            });

                            $('#fullscreenBtnContainer').textfill({
                                maxFontPixels: 32
                            });

                            var whiteSpaceRegex = '^[ t]+';

                            $("#dashboardTitle").css("height", "70%");
                            $("#dashboardSubtitle").css("height", "30%");
                            $("#dashboardSubtitle").css("display", "flex");
                            $("#dashboardSubtitle").css("color", headerFontColor);
                            if(dashboardParams.subtitle_header==null || dashboardParams.subtitle_header.trim() === '')
                            {
                                $("#dashboardSubtitle span").text("No subtitle");
                                $("#dashboardSubtitle").attr('data-currentSubtitle', "No subtitle");
                            }
                            else
                            {
                                $("#dashboardSubtitle span").text(dashboardParams.subtitle_header);
                                $("#dashboardSubtitle").attr('data-currentSubtitle', dashboardParams.subtitle_header);
                            }
                            
                            $('#dashboardTitle').textfill({
                                maxFontPixels: -20
                            });

                            $('#dashboardSubtitle').textfill({
                                maxFontPixels: -20
                            });
                            
                            if(logoFilename !== null)
                            {
                                $("#headerLogoImg").prop("src", "../img/dashLogos/dashboard" + dashboardId + "/" + logoFilename);
                                $("#headerLogoImg").prop("alt", "Dashboard logo");
                                $("#headerLogoImg").show();

                                if((logoLink !== null) && (logoLink !== ''))
                                {
                                   var logoImage = $('#headerLogoImg');
                                   var logoLinkElement = $('<a href="' + logoLink + '" target="_blank" class="pippo">'); 
                                   logoImage.wrap(logoLinkElement);
                                   $('#dashboardLogoLinkInput').val(logoLink);
                                   $('#dashboardLogoLinkInput').removeAttr('disabled');
                                }
                            }

                            if(headerVisible === '1')
                            {
                               $("#dashboardViewHeaderContainer").show();
                            //   $('#dashBckCnt').css("height", ($(window).height() - $('#dashboardViewHeaderContainer').height()) + "px");
                            //   $('#dashBckCnt').css("top", $('#dashboardViewHeaderContainer').height() + "px");
                            }
                            else
                            {
                               $("#dashboardViewHeaderContainer").hide();
                               $('#editDashboardMenu').css("margin-top", "0px");
                            //   $('#dashBckCnt').css("height", $(window).height() + "px");
                            //   $('#dashBckCnt').css("top", "0px");
                            }

                            //Aggiunta delle impostazioni della Dashboard nel Menu Modify

                            if(dashboardParams.headerVisible === "1")
                            {
                                $('#headerVisible').attr("checked", true);
                            }

                            $('#headerVisible').bootstrapToggle({
                                on: 'Yes',
                                off: 'No',
                                onstyle: 'info',
                                offstyle: 'default',
                                size: 'normal'
                            });
                            
                            $('#dashBckImgFlag').bootstrapToggle({
                                on: 'Yes',
                                off: 'No',
                                onstyle: 'info',
                                offstyle: 'default',
                                size: 'normal'
                            });
                            
                            if(dashboardParams.viewMode === "alwaysResponsive")
                            {
                                $('#inputDashboardViewMode').attr("checked", true);
                            }
                            else
                            {
                                $('#inputDashboardViewMode').attr("checked", false);
                            }
                            
                            $('#inputDashboardViewMode').bootstrapToggle({
                                on: 'Yes',
                                off: 'No',
                                onstyle: 'info',
                                offstyle: 'default',
                                size: 'normal'
                            });

                            $("#inputWidthDashboard").val(dashboardParams.num_columns);
                            $('#inputWidthDashboard').bootstrapSlider({
                                tooltip_position: 'top',
                                tooltip: 'always',
                                value: dashboardParams.num_columns
                            });

                            var cols = parseInt($('#inputWidthDashboard').val());
                            var px = parseInt(cols*78 + 10);
                            var percent = parseInt(px/screen.width*100);
                            //$('#percentWidth').val(percent + " %");

                            $("#myModalLabelDas").text("Modify current Dashboard: " + dashboardParams.name_dashboard);
                            $("#inputDashCol").val(dashboardParams.color_header);
                            $("#remainsWidthDashboard").val(dashboardParams.remains_width);
                            //Attribuisci nome dell'attuale Dashboard al menu di duplicazione
                            $('#currentDashboardTitle').val(dashboardParams.title_header);
                            //fine duplicazione

                            datoTitle = dashboardParams.title_header;
                            datoSubtitle = dashboardParams.subtitle_header;
                            datoColor = dashboardParams.color_header;
                            num_cols = dashboardParams.num_columns;
                            dato_back = dashboardParams.color_background;
                            external_color = dashboardParams.external_frame_color;

                            $('#body').css("background-color", external_color);
                            $('#gridTable').css('background-color', areaColor);

                            switch(dashboardViewMode)
                            {
                                case "fixed":
                                    gridsterCellW = 76;
                                    gridsterCellH = 38;
                                    widgetsContainerWidth = num_cols*(gridsterCellW + 2);

                                    // MOD GRID
                                    gridsterCellW = newScaledGridsterCellW;
                                    gridsterCellH = newScaledGridsterCellH;
                                    if (dashboardParams.scaleFactor != 'yes') {
                                    //    widgetsContainerWidth = Math.round(num_cols * (gridsterCellW + 2 / scaleFactorW));
                                        widgetsContainerWidth = Math.round(num_cols * (gridsterCellW));
                                    } else {
                                        widgetsContainerWidth = dashboardParams.width;
                                    }

                                    break;

                                case "smallResponsive":
                                    if($(window).width() > 768)
                                    {
                                        gridsterCellW = 76;
                                        gridsterCellH = 38;
                                        widgetsContainerWidth = num_cols*(gridsterCellW + 2);

                                        // MOD GRID
                                        gridsterCellW = newScaledGridsterCellW;
                                        gridsterCellH = newScaledGridsterCellH;
                                        if (dashboardParams.scaleFactor != 'yes') {
                                            //    widgetsContainerWidth = Math.round(num_cols * (gridsterCellW + 2 / scaleFactorW));
                                            widgetsContainerWidth = Math.round(num_cols * (gridsterCellW));
                                        } else {
                                            widgetsContainerWidth = dashboardParams.width;
                                        }
                                    }
                                    else
                                    {
                                        gridsterCellW = Math.floor(parseInt($('body').width()*0.98) / num_cols) - 2;
                                        gridsterCellH = gridsterCellW/2;
                                        widgetsContainerWidth = num_cols*(gridsterCellW + 2);

                                        // MOD GRID
                                        gridsterCellW = Math.floor(parseInt($('body').width()*0.98) / num_cols);
                                        gridsterCellH = gridsterCellW/2;
                                        widgetsContainerWidth = num_cols*(gridsterCellW);

                                    }
                                    break;

                                case "mediumResponsive":
                                    if($(window).width() > 992)
                                    {
                                        gridsterCellW = 76;
                                        gridsterCellH = 38;
                                        widgetsContainerWidth = num_cols*(gridsterCellW + 2);

                                        // MOD GRID
                                        gridsterCellW = newScaledGridsterCellW;
                                        gridsterCellH = newScaledGridsterCellH;
                                        if (dashboardParams.scaleFactor != 'yes') {
                                            //    widgetsContainerWidth = Math.round(num_cols * (gridsterCellW + 2 / scaleFactorW));
                                            widgetsContainerWidth = Math.round(num_cols * (gridsterCellW));
                                        } else {
                                            widgetsContainerWidth = dashboardParams.width;
                                        }
                                    }
                                    else
                                    {
                                        gridsterCellW = Math.floor(parseInt($('body').width()*0.98) / num_cols) - 2;
                                        gridsterCellH = gridsterCellW/2;
                                        widgetsContainerWidth = num_cols*(gridsterCellW + 2);

                                        // MOD GRID
                                        gridsterCellW = Math.floor(parseInt($('body').width()*0.98) / num_cols);
                                        gridsterCellH = gridsterCellW/2;
                                        widgetsContainerWidth = num_cols*(gridsterCellW);
                                    }
                                    break;
                                    
                                case "largeResponsive":
                                    if($(window).width() > 1200)
                                    {
                                        gridsterCellW = 76;
                                        gridsterCellH = 38;
                                        widgetsContainerWidth = num_cols*(gridsterCellW + 2);

                                        // MOD GRID
                                        gridsterCellW = newScaledGridsterCellW;
                                        gridsterCellH = newScaledGridsterCellH;
                                        if (dashboardParams.scaleFactor != 'yes') {
                                            //    widgetsContainerWidth = Math.round(num_cols * (gridsterCellW + 2 / scaleFactorW));
                                            widgetsContainerWidth = Math.round(num_cols * (gridsterCellW));
                                        } else {
                                            widgetsContainerWidth = dashboardParams.width;
                                        }
                                    }
                                    else
                                    {
                                        gridsterCellW = Math.floor(parseInt($('body').width()*0.98) / num_cols) - 2;
                                        gridsterCellH = gridsterCellW/2;
                                        widgetsContainerWidth = num_cols*(gridsterCellW + 2);

                                        // MOD GRID
                                        gridsterCellW = Math.floor(parseInt($('body').width()*0.98) / num_cols);
                                        gridsterCellH = gridsterCellW/2;
                                        widgetsContainerWidth = num_cols*(gridsterCellW);
                                    }
                                    break;    

                                case "alwaysResponsive":
                                    gridsterCellW = Math.floor(parseInt($('body').width()*0.98) / num_cols) - 2;
                                    gridsterCellH = gridsterCellW/2;
                                    widgetsContainerWidth = num_cols*(gridsterCellW + 2);

                                    // MOD GRID
                                    gridsterCellW = Math.floor(parseInt($('body').width()*0.98) / num_cols);
                                    gridsterCellH = gridsterCellW/2;
                                //    widgetsContainerWidth = dashboardParams.width;
                                    widgetsContainerWidth = num_cols*(gridsterCellW);

                                    break;

                                default:
                                    gridsterCellW = 76;
                                    gridsterCellH = 38;
                                    widgetsContainerWidth = num_cols*(gridsterCellW + 2);

                                    // MOD GRID
                                    gridsterCellW = newScaledGridsterCellW;
                                    gridsterCellH = newScaledGridsterCellH;
                                    if (dashboardParams.scaleFactor != 'yes') {
                                        //    widgetsContainerWidth = Math.round(num_cols * (gridsterCellW + 2 / scaleFactorW));
                                        widgetsContainerWidth = Math.round(num_cols * (gridsterCellW));
                                    } else {
                                        widgetsContainerWidth = dashboardParams.width;
                                    }
                                    break;    
                            }

                            $('#dashboardViewWidgetsContainer').css('width', widgetsContainerWidth + "px");
                            $('div.footerLogos').css('margin-right', ($('body').width() - widgetsContainerWidth)/2);

                            extra_rows_gridster = 100 * (39 / newScaledGridsterCellH);      // force scaling for base gridster
                            max_rows_gridster = 100 * (39 / newScaledGridsterCellH);        // force scaling for base gridster

                            gridster = $("#gridsterUl").gridster({
                                widget_base_dimensions: [gridsterCellW, gridsterCellH],
                            //    avoid_overlapped_widgets: true,
                              //  widget_base_dimensions: [Math.round(gridsterCellW * scaleFactor), Math.round(gridsterCellH * scaleFactor)],
                              //  widget_margins: [1, 1],
                            //    widget_margins: [1/scaleFactorW, 1/scaleFactorH],
                                widget_margins: [0, 0],
                                min_cols: num_cols,
                            //    max_cols: num_cols,
                                max_size_x: 200,
                            /*    max_rows: 100,
                                extra_rows: 100,*/
                                max_rows: max_rows_gridster,
                                extra_rows: extra_rows_gridster,
                                resize: {
                                   enabled: true,
                                   resize: function(e, ui, $widget){
                                       $widget.trigger('customResizeEvent');
                                   },
                                   stop: function(e, ui, $widget){
                                       $widget.trigger('customResizeEvent');
                                   }
                                },
                                draggable: {
                                    start: function(event, ui){
                                        $('#draggingWidget').val('true');
                                        draggedWidgetId = $(event.target).parents('li.gs_w').attr('id');
                                        $('#' + draggedWidgetId + '_widgetCtxMenu').hide();
                                        $('.applicationCtxMenu').hide();
                                        
                                        //Ripristino eventuale titolo dashboard lasciato a mezzo
                                        if($("#dashboardTitle span").html().trim() === '')
                                        {
                                            $("#dashboardSubtitle span").html("No subtitle");
                                        }
                                        else
                                        {
                                            $("#dashboardTitle span").html($("#dashboardTitle").attr('data-currentTitle'));
                                        }

                                        $("#dashboardTitle span").attr('data-underEdit', 'false');
                                        $("#dashboardTitle span").attr('contenteditable', false);


                                        //Ripristino eventuale sottotitolo dashboard lasciato a mezzo
                                        if($("#dashboardSubtitle span").html().trim() === '')
                                        {
                                            $("#dashboardSubtitle span").html("No subtitle");
                                        }
                                        else
                                        {
                                            $("#dashboardSubtitle span").html($("#dashboardSubtitle").attr('data-currentSubtitle'));
                                        }

                                        $("#dashboardSubtitle span").attr('data-underEdit', 'false');
                                        $("#dashboardSubtitle span").attr('contenteditable', false);

                                        //Ripristino eventuali titoli widgets
                                        $('div.titleDiv').each(function(i)
                                        {
                                            $(this).attr("contenteditable", false);
                                            $(this).attr("data-underEdit", false);
                                            var currentTitle = $(this).attr('data-currentTitle');
                                            currentTitle = currentTitle.replace(/\\\\/g, "&bsol;");
                                            $(this).html(currentTitle);
                                        });
                                    },
                                    drag: function(event, ui){
                                        $('.applicationCtxMenu').hide();
                                    },
                                    stop: function(event, ui){
                                        firstFreeRow = 1;
                                        draggedWidgetId = $(event.target).parents('li.gs_w').attr('id');
					                    $('.applicationCtxMenu').hide();
                                        
                                        setTimeout(function(){
                                            $('.applicationCtxMenu').hide();
                                            var widgetDistanceFromRightScreen = parseInt($(window).width() + $(document).scrollLeft() - $('#' + draggedWidgetId + '_widgetCtxMenuBtnCnt').offset().left);
                                            if($('#' + draggedWidgetId + '_widgetCtxMenu').width() > widgetDistanceFromRightScreen)
                                            {
                                                $('#' + draggedWidgetId + '_widgetCtxMenu').css('left', parseInt($('#' + draggedWidgetId + '_widgetCtxMenuBtnCnt').offset().left - $('#' + draggedWidgetId + '_widgetCtxMenu').width() + 12) + 'px');
                                                $('#' + draggedWidgetId + '_widgetCtxMenu').attr('data-side', 'left');
                                            }
                                            else
                                            {
                                                $('#' + draggedWidgetId + '_widgetCtxMenu').css('left', parseInt( $('#' + draggedWidgetId + '_widgetCtxMenuBtnCnt').offset().left) + 'px');
                                                $('#' + draggedWidgetId + '_widgetCtxMenu').attr('data-side', 'right');
                                            }
                                            $('#' + draggedWidgetId + '_widgetCtxMenu').css('top', parseInt($('#' + draggedWidgetId + '_widgetCtxMenuBtn').offset().top + 25) + 'px');
                                            $('#draggingWidget').val('false');
                                        }, 750);
										
                                        $("li.gs_w").each(function() 
                                        {
                                            temp = parseInt(parseInt($(this).attr('data-row')) + parseInt($(this).attr('data-sizey')));
                                            if(temp > firstFreeRow)
                                            {
                                                firstFreeRow = temp;
                                            }
                                        });
										
                                        $('#firstFreeRowInput').val(firstFreeRow);
                                    }
                                },
                                serialize_params: function (w, wgd) 
                                {
                                    return {
                                        id: w.attr('id'),
                                        col: wgd.col,
                                        row: wgd.row,
                                        size_x: wgd.size_x,
                                        size_y: wgd.size_y
                                    };
                                },
                            }).data('gridster');//Fine creazione Gridster
                            
                            for(var i = 0; i < dashboardWidgets.length; i++)
                            {
                                if (dashboardWidgets[i].id_type_widget == "widgetSelectorNew" && customSvgFlag == false) {
                                    customSvgFlag = true;
                                    getSvgSingleVariableTemplates(0, function (extractedMetrics) {
                                        if (extractedMetrics[1]) {
                                            if (extractedMetrics[1].detail == 'Succesful Response.') {
                                                svgSingleReadVariablesObj = extractedMetrics[1].singleReadVars;
                                                svgArray = {};
                                                svgArray.allIconList = [];
                                                for (let n = 0; n < Object.entries(extractedMetrics[1].singleReadVars).length; n++) {
                                                    svgArray.allIconList.push(Object.entries(extractedMetrics[1].singleReadVars)[n][1]);
                                                }
                                            //    iconPoolDatasetJSONCustom = buildIconsBox("", i, svgArray, newTableRow, newTableCell, widgetId);
                                            }
                                        }
                                    });
                                }
                              //  if (i != 0) {
                                dashboardWidgets[i]['n_row'] = Math.round(parseInt(dashboardWidgets[i]['n_row'] - 1) * scaleFactorH) + 1;
                                    dashboardWidgets[i]['n_column'] = Math.round(parseInt(dashboardWidgets[i]['n_column'] - 1) * scaleFactorW) + 1;
                              /*  } else {

                                }   */
                                dashboardWidgets[i]['size_rows'] = Math.round(parseInt(dashboardWidgets[i]['size_rows']) * scaleFactorH);
                                dashboardWidgets[i]['size_columns'] = Math.round(parseInt(dashboardWidgets[i]['size_columns']) * scaleFactorW);
                                temp = parseInt(parseInt(dashboardWidgets[i]['n_row']) + parseInt(dashboardWidgets[i]['size_rows']))
                             //   temp = parseInt(Math.round(parseInt(dashboardWidgets[i]['n_row']) * scaleFactorH) + parseInt(dashboardWidgets[i]['size_rows']));

                                if (dashboardWidgets[i].scaleFactor != 'yes') {

                                    $.ajax({
                                        url: "../controllers/updateWidget.php",
                                        data: {
                                            action: "updateNewGridDims",
                                            widgetName: dashboardWidgets[i]['name_w'],
                                            newWidth: dashboardWidgets[i]['size_columns'],
                                            newHeight: dashboardWidgets[i]['size_rows'],
                                            newNCols: dashboardWidgets[i]['n_column'],
                                            newNRows: dashboardWidgets[i]['n_row']
                                        },
                                        type: "POST",
                                        async: true,
                                        dataType: 'json',
                                        success: function(data)
                                        {
                                            if(data.detail === 'Ok') {
                                                console.log("Succesfully updated new Grid Dimensions for widget: " + $('#widgetInfoModalWidgetName').val());
                                            } else {
                                                console.log("Error while updating new Grid Dimensions for widget: " + $('#widgetInfoModalWidgetName').val());
                                            }
                                        },
                                        error: function(errorData) {
                                            console.log("Error while adding updateing new Grid Dimensions for widget: " + $('#widgetInfoModalWidgetName').val());
                                        }
                                    });

                                }

                                if(temp > firstFreeRow)
                                {
                                    firstFreeRow = temp;
                                }
                                $('#firstFreeRowInput').val(firstFreeRow);
                                
                                var time = 0;
                                if(dashboardWidgets[i]['temporal_range_w'] === "Mensile") 
                                {
                                    time = "30/DAY";
                                }
                                else if (dashboardWidgets[i]['temporal_range_w'] === "10 Anni")
                                {
                                    time = "3650/DAY";
                                }
                                else if (dashboardWidgets[i]['temporal_range_w'] === "2 Anni")
                                {
                                    time = "730/DAY";
                                }
                                else if (dashboardWidgets[i]['temporal_range_w'] === "Semestrale")
                                {
                                    time = "180/DAY";
                                }
                                else if (dashboardWidgets[i]['temporal_range_w'] === "Annuale") 
                                {
                                    time = "365/DAY";
                                } 
                                else if (dashboardWidgets[i]['temporal_range_w'] === "Settimanale") 
                                {
                                    time = "7/DAY";
                                } 
                                else if (dashboardWidgets[i]['temporal_range_w'] === "Giornaliera") 
                                {
                                    time = "1/DAY";
                                } 
                                else if (dashboardWidgets[i]['temporal_range_w'] === "4 Ore") 
                                {
                                    time = "4/HOUR";
                                } 
                                else if (dashboardWidgets[i]['temporal_range_w'] === "12 Ore") 
                                {
                                    time = "12/HOUR";
                                }
                                var widget = ['<li data-widgetType="' + dashboardWidgets[i]['type_w'] + '" data-widgetId="' + dashboardWidgets[i]['Id'] + '" id="' + dashboardWidgets[i]['name_w'] + '"></li>', dashboardWidgets[i]['size_columns'], dashboardWidgets[i]['size_rows'], dashboardWidgets[i]['n_column'], dashboardWidgets[i]['n_row']];

                                var widgetInstance = gridster.add_widget.apply(gridster, widget);

                                embedWidget = false;
                                embedWidgetPolicy = 'auto';

                                dashboardWidgets[i].time = time;
                                dashboardWidgets[i].embedWidget = embedWidget;
                                dashboardWidgets[i].embedWidgetPolicy = embedWidgetPolicy;
                                dashboardWidgets[i].hostFile = 'config';
                                
                                $("li#" + dashboardWidgets[i]['name_w']).css('border', '1px solid ' + dashboardWidgets[i].borderColor);
                                
                                $("li#" + dashboardWidgets[i]['name_w']).attr("data-wizardRowIds", dashboardWidgets[i]['wizardRowIds']);
                                
                                $("#gridsterUl").find("li#" + dashboardWidgets[i]['name_w']).load("../widgets/" + encodeURIComponent(dashboardWidgets[i]['type_w']) + ".php", dashboardWidgets[i], function () {
                                    $(this).find(".icons-modify-widget").css("display", "inline");
                                    $(this).find(".modifyWidgetGenContent").css("display", "block");
                                    $(this).find(".pcCountdownContainer").css("display", "none");
                                    $(this).find(".iconsModifyPcWidget").css("display", "flex");
                                    $(this).find(".iconsModifyPcWidget").css("align-items", "center");
                                    $(this).find(".iconsModifyPcWidget").css("justify-content", "flex-end");
                                });
                            }
                            
                            setTimeout(function(){
                                gridWidth = $("#dashboardViewWidgetsContainer").width();
                                gridHeight = $(window).height()*2;
                            /*    gridRowsNumber = gridHeight / (gridsterCellH + 2/scaleFactorH);
                                gridColsNumber = gridWidth / (gridsterCellW + 2/scaleFactorW);*/
                                gridRowsNumber = gridHeight / (gridsterCellH);
                                gridColsNumber = gridWidth / (gridsterCellW);
                                var newRow = null;
                                var gridTableTop = $('#dashboardViewWidgetsContainer').offset().top;
                                var gridTableLeft = $('#dashboardViewWidgetsContainer').offset().left;
                                $('#gridTable').width(gridWidth);
                                $('#gridTable').height(gridHeight);
                                $('#gridTable').css('top', gridTableTop);
                                $('#gridTable').css('left', gridTableLeft);
                                
                                for(var i = 0; i < gridRowsNumber; i++)
                                {
                                    newRow = $('<tr></tr>');
                                    for(var j = 0; j < gridColsNumber; j++)
                                    {
                                        newRow.append('<td></td>');
                                    }
                                    $('#gridTable').append(newRow);
                                }
                                
                                $('#gridTable').css("border", "1px dashed " + gridColor);
                                $('#gridTable td').css("border", "1px dashed " + gridColor);
                            }, 1000);
                            
                            $('#firstFreeRowInput').val(firstFreeRow);

                            if (dashboardParams.scaleFactor != 'yes') {
                                $.ajax({
                                    url: "../controllers/updateDashboard.php",
                                    data: {
                                        action: "updateNewGrid",
                                        dashboardId: <?= escapeForJS($_REQUEST['dashboardId']) ?>,
                                        newNumColumns: num_cols,
                                        newWidth: widgetsContainerWidth
                                    },
                                    type: "POST",
                                    async: true,
                                    dataType: 'json',
                                    success: function (data) {
                                        if (data.detail !== 'Ok') {
                                            alert('<?= _("Error while updating dashboard scaleFactor") ?>');
                                        } else {
                                            // OK
                                            console.log("Succesfully updated new Grid Dimensions for current dashboard.");
                                        }
                                    },
                                    error: function (errorData) {
                                        alert('<?= _("Error while updating dashboard scaleFactor") ?>');
                                    }
                                });
                            }

                        },
                        error: function(data) 
                        {
                            console.log("Errore in chiamata di get_data.php --> getDashboardParamsAndWidgets.php");
                            console.log(JSON.stringify(data));
                        }
                        
                    });
                    
                    //Reperimento elenco metriche personali NodeRed
                    $.ajax({
                        url: "get_data.php",
                        data: {
                            action: "getAppMetricsNR",
                            notBySession: "true",
                            user: "<?= $dashboardAuthorName ?>"
                        },
                        type: "GET",
                        async: true,
                        dataType: 'json',
                        success: function (data) 
                        {
                            for(var i = 0; i < data.length; i++)
                            {
                                array_metricsNR[i] = {desc: data[i]['fullDesc'],
                                    descShort: data[i]['shortDesc'],
                                    metricName: data[i]['name'],
                                    id: data[i]['id'],
                                    type: data[i]['metricType'],
                                    widgets: data[i]['widgets'],
                                    timeRangeOption: 1};    

                                //24/02/2017 - Workaround per impedire di associare il widget StateRideAtaf a metriche diverse dalla sua e per impedire di associare il widget SmartDS a metriche diverse dalla sua
                                if(array_metricsNR[i].type === 'Percentuale')
                                {
                                    for(var z = array_metricsNR[i].widgets.length - 1; z >= 0; z--)
                                    {
                                        if((array_metricsNR[i].widgets[z].id_type_widget === 'widgetStateRideAtaf')&&(array_metricsNR[i].id !== 'Bus_State_Lines'))
                                        {
                                            array_metricsNR[i].widgets.splice(z, 1);
                                        }
                                    }
                                    
                                    for(var z = array_metricsNR[i].widgets.length - 1; z >= 0; z--)
                                    {
                                        if((array_metricsNR[i].widgets[z].id_type_widget !== 'widgetStateRideAtaf')&&(array_metricsNR[i].widgets[z].id_type_widget !== 'widgetPieChart')&&(array_metricsNR[i].id === 'Bus_State_Lines'))
                                        {
                                            array_metricsNR[i].widgets.splice(z, 1);
                                        } 
                                    }
                                    
                                    for(var z = array_metricsNR[i].widgets.length - 1; z >= 0; z--)
                                    {
                                        if((array_metricsNR[i].widgets[z].id_type_widget === 'widgetSmartDS')&&(array_metricsNR[i].id !== 'SmartDS_Process'))
                                        {
                                            array_metricsNR[i].widgets.splice(z, 1);
                                        } 
                                    }
                                    
                                    for(var z = array_metricsNR[i].widgets.length - 1; z >= 0; z--)
                                    {
                                        if((array_metricsNR[i].widgets[z].id_type_widget !== 'widgetSmartDS')&&(array_metricsNR[i].widgets[z].id_type_widget !== 'widgetPieChart')&&(array_metricsNR[i].id === 'SmartDS_Process'))
                                        {
                                            array_metricsNR[i].widgets.splice(z, 1);
                                        } 
                                    }
                                }
                                    
                                $('#select-metricNR').append('<option value="' + array_metricsNR[i]['metricName'] + '">' + decodeURIComponent(array_metricsNR[i]['metricName']) + '</option>');
                            }
                            $('#select-metricNR').val(-1);

                        },
                        error: function (error) 
                        {
                           console.log("Errore in chiamata di get_data.php --> getAppMetricsNR");
                           console.log(JSON.stringify(error));
                        }
                    });
                    
                    //Reperimento elenco metriche tradizionali
                    $.ajax({
                        url: "get_data.php",
                        data: {
                            action: "getMetricsNR",
                            notBySession: "true"
                        },
                        type: "GET",
                        async: true,
                        dataType: 'json',
                        success: function (data) 
                        {
                            for(var i = 0; i < data.length; i++)
                            {
                                array_metrics[i] = {desc: data[i]['descMetric'],
                                    descShort: data[i]['descShortMetric'],
                                    id: data[i]['idMetric'],
                                    type: data[i]['typeMetric'],
                                    area: data[i]['areaMetric'],
                                    source: data[i]['sourceMetric'],
                                    freq: data[i]['freqMetric'],
                                    status: data[i]['statusMetric'],
                                    widgets: data[i]['widgets'],
                                    municipalityOption: data[i]['municipalityOptionMetric'],
                                    timeRangeOption: data[i]['timeRangeOptionMetric'],
                                    colorDefault: data[i]['colorDefaultMetric'],
                                    processType: data[i]['processTypeMetric'],
                                    query: data[i]['queryMetric']};

                                //24/02/2017 - Workaround per impedire di associare il widget StateRideAtaf a metriche diverse dalla sua e per impedire di associare il widget SmartDS a metriche diverse dalla sua
                                if(array_metrics[i].type === 'Percentuale')
                                {
                                    for(var z = array_metrics[i].widgets.length - 1; z >= 0; z--)
                                    {
                                        if((array_metrics[i].widgets[z].id_type_widget === 'widgetStateRideAtaf')&&(array_metrics[i].id !== 'Bus_State_Lines'))
                                        {
                                            array_metrics[i].widgets.splice(z, 1);
                                        }
                                    }
                                    
                                    for(var z = array_metrics[i].widgets.length - 1; z >= 0; z--)
                                    {
                                        if((array_metrics[i].widgets[z].id_type_widget !== 'widgetStateRideAtaf')&&(array_metrics[i].widgets[z].id_type_widget !== 'widgetPieChart')&&(array_metrics[i].id === 'Bus_State_Lines'))
                                        {
                                            array_metrics[i].widgets.splice(z, 1);
                                        } 
                                    }
                                    
                                    for(var z = array_metrics[i].widgets.length - 1; z >= 0; z--)
                                    {
                                        if((array_metrics[i].widgets[z].id_type_widget === 'widgetSmartDS')&&(array_metrics[i].id !== 'SmartDS_Process'))
                                        {
                                            array_metrics[i].widgets.splice(z, 1);
                                        } 
                                    }
                                    
                                    for(var z = array_metrics[i].widgets.length - 1; z >= 0; z--)
                                    {
                                        if((array_metrics[i].widgets[z].id_type_widget !== 'widgetSmartDS')&&(array_metrics[i].widgets[z].id_type_widget !== 'widgetPieChart')&&(array_metrics[i].id === 'SmartDS_Process'))
                                        {
                                            array_metrics[i].widgets.splice(z, 1);
                                        } 
                                    }
                                }
                                    
                                $('#select-metric').append('<option value="' + array_metrics[i]['id'] + '">' + array_metrics[i]['id'] + '</option>');
                            }
                            $('#select-metric').val(-1);

                        },
                        error: function (error) 
                        {
                           console.log("Errore in chiamata di get_data.php --> get_metrics");
                           console.log(JSON.stringify(error));
                        }
                    });

                    $('#modal-add-widget').on('shown.bs.modal', function () {
                        updateSelectedMetric();
                    });
                    
                    
                    $('.link_help_modal-add-widget').click(function () {
                        $('#modal-info-context').modal('show');
                    });

                    //Salvataggio posizioni widgets
                    $('#link_save_configuration').click(function () {  
                        $('#saveDashboardModal').modal('show');
                        
						var gridster_actual = $(".gridster ul").not(".ui-fancytree ul").gridster().data('gridster');
                        var widgets = JSON.stringify(gridster_actual.serialize());

                        $.ajax({
                            url: "../controllers/saveWidgetsPositions.php",
                            data: {
                                configuration_widgets: widgets,
                                dashboardId: <?= escapeforJS($_REQUEST['dashboardId'])?>
                            },
                            type: "POST",
                            async: true,
                            success: function (data) 
                            {
                                if(data == 1) 
                                {
                                    $('#saveDashboardModalMsg').text("Dashboard saved successfully");
                                    $('#saveDashboardModalRunningIcon').hide();
                                    $('#saveDashboardModalOkIcon').show();
                                }
                                else
                                {
                                    $('#saveDashboardModalMsg').text("Error saving dashboard, please try again");
                                    $('#saveDashboardModalRunningIcon').hide();
                                    $('#saveDashboardModalKoIcon').show();
                                    console.log("Ko: " + data);
                                }
                            },
                            error: function(errorData)
                            {
                                $('#saveDashboardModalMsg').text("Error saving dashboard, please try again");
                                $('#saveDashboardModalRunningIcon').hide();
                                $('#saveDashboardModalKoIcon').show();
                                console.log("Ko: " + errorData);
                            },
                            complete: function()
                            {
                                setTimeout(function(){
                                    $('#saveDashboardModal').modal('hide');
                                    setTimeout(function(){
                                        $('#saveDashboardModalOkIcon').hide();
                                        $('#saveDashboardModalKoIcon').hide();
                                        $('#saveDashboardModalRunningIcon').show();
                                        $('#saveDashboardModalMsg').text("Saving dashboard, please wait");
                                    }, 750);
                                }, 1250);
                            }
                        });
                        
                        
                        //HTML2CANVAS - NON CANCELLARE
                        /*$('li[data-widgettype=widgetExternalContent]').each(function(i){
                            $.event.trigger({
                                type: "showDefaultMapPicDiv_" + $(this).attr('id')
                            }); 
                        });
                        
                        setTimeout(function(){
                            $('.modal-backdrop').attr('data-html2canvas-ignore', true);
                            $('#editDashboardMenu').hide();
                            $('#gridTable').hide();
                            $('#dashboardViewWidgetsContainer').css('margin-top', parseInt($('#dashboardViewHeaderContainer').height() + 15));

                            var gridster_actual = $(".gridster ul").gridster().data('gridster');
                            var widgets = JSON.stringify(gridster_actual.serialize());

                            $.ajax({
                                url: "../controllers/saveWidgetsPositions.php",
                                data: {
                                    configuration_widgets: widgets,
                                    dashboardId: <?= $_REQUEST['dashboardId']?>
                                },
                                type: "POST",
                                async: true,
                                success: function (data) 
                                {
                                    if(data == 1) 
                                    {
                                        html2canvas(document.body, {
                                            async: true,
                                            useCORS: true,
                                            scale: 0.3
                                        }).then(function(canvas) {
                                            canvas.toBlob(function(blob) {
                                                var url = (window.URL || window.webkitURL).createObjectURL(blob);

                                                var blobData = new FormData();
                                                blobData.append('dashboardId', <?php echo $_REQUEST['dashboardId']; ?>);
                                                blobData.append('file', blob);

                                                $.ajax({
                                                    url: "../controllers/genDashScr.php",
                                                    type: "POST",
                                                    data: blobData,
                                                    contentType: false,
                                                    processData: false,
                                                    async: true,
                                                    success: function(successData) 
                                                    {
                                                        $('#saveDashboardModalMsg').text("Dashboard saved successfully");
                                                        $('#saveDashboardModalRunningIcon').hide();
                                                        $('#saveDashboardModalOkIcon').show();
                                                    },
                                                    error: function(errorData)
                                                    {
                                                        $('#saveDashboardModalMsg').text("Error saving dashboard, please try again");
                                                        $('#saveDashboardModalRunningIcon').hide();
                                                        $('#saveDashboardModalKoIcon').show();
                                                        console.log("Ko: " + errorData);
                                                    },
                                                    complete: function()
                                                    {
                                                        $.event.trigger({
                                                            type: "hideDefaultMapPicDiv"
                                                        });
                                                        
                                                        $('li[data-widgettype=widgetExternalContent]').each(function(i){
                                                            $.event.trigger({
                                                                type: "hideDefaultMapPicDiv_" + $(this).attr('id')
                                                            }); 
                                                        });
                                                        
                                                        $('#editDashboardMenu').show();
                                                        $('#gridTable').show();
                                                        $('#dashboardViewWidgetsContainer').css('margin-top', 0);

                                                        setTimeout(function(){
                                                            $('.modal-backdrop').attr('data-html2canvas-ignore', false);
                                                            $('#saveDashboardModal').modal('hide');
                                                            setTimeout(function(){
                                                                $('#saveDashboardModalOkIcon').hide();
                                                                $('#saveDashboardModalKoIcon').hide();
                                                                $('#saveDashboardModalRunningIcon').show();
                                                                $('#saveDashboardModalMsg').text("Saving dashboard, please wait");
                                                            }, 750);
                                                        }, 2000);
                                                    }
                                                });
                                              });
                                        });
                                    } 
                                    else 
                                    {
                                        $('#saveDashboardModalMsg').text("Error saving dashboard, please try again");
                                        $('#saveDashboardModalRunningIcon').hide();
                                        $('#saveDashboardModalKoIcon').show();
                                        
                                        setTimeout(function(){
                                            $('#saveDashboardModal').modal('hide');
                                            setTimeout(function(){
                                                window.location.reload(true);
                                            }, 750);
                                        }, 2000);
                                    }
                                },
                                error: function (errorMsg) 
                                {
                                    $('#saveDashboardModalMsg').text("Error saving dashboard, please try again");
                                    $('#saveDashboardModalRunningIcon').hide();
                                    $('#saveDashboardModalKoIcon').show();

                                    setTimeout(function(){
                                        $('#saveDashboardModal').modal('hide');
                                        setTimeout(function(){
                                            window.location.reload(true);
                                        }, 750);
                                    }, 2000);
                                }
                            });
                        }, 800);*/
                    });

                    $('#export-dashboard').click(function () {
                        $.ajax({
                            url: '../management/export.php',
                            data: {
                                dashboardId: <?= escapeforJS($_REQUEST['dashboardId'])?>
                            },
                            type: 'POST',
                            dataType: 'json',
                            success: function (response) {
                                  // Converti il JSON in una stringa
                                  let jsonString = JSON.stringify(response);

                                  // Crea un oggetto Blob con il contenuto del JSON
                                  let blob = new Blob([jsonString], { type: 'application/json' });

                                  // Crea un URL oggetto dal Blob
                                  let url = URL.createObjectURL(blob);

                                  // Crea un elemento <a> per il download
                                  let a = document.createElement('a');
                                  a.href = url;
                                  a.download = 'export.json';
                                  a.click();

                                  // Rilascia l'URL oggetto
                                  URL.revokeObjectURL(url);
                            },
                            error: function (xhr, status, error) {
                                console.log('Error in Exporting Dashboard', error);
                            },
                        });
                    });
                    
                    $('#import-widget').click(function() {
                        $('#modalImportWidget').modal('show');
                        $('#importWidgetRunningMsg').hide();
                        $('#importWidgetOkMsg').hide();
                        $('#importWidgetKoMsg').hide();
                    });

                    $('#importWidgetConfirmBtn').off("click");
                    $('#importWidgetConfirmBtn').click(function () {
                        let fileInput = $('#jsonFile')[0];
                        let file = fileInput.files[0];

                        let formData = new FormData();
                        formData.append('jsonFile', file);
                        //formData.append('nomeDashboard', $('#dashboardName').val());
                        formData.append('dashboardId', <?= escapeForJS($_REQUEST['dashboardId']) ?>);

                        $.ajax({
                            url: '../management/importWidget.php',
                            type: 'POST',
                            data: formData,
                            processData: false,
                            contentType: false,
                            success: function (response) {
                                //console.log('File JSON inviato con successo!');
                                //console.log('Risposta dal server: ' + response);
                                if (response == 'Ok') {
                                    $('#importWidgetKoMsg').hide();
                                    $('#importWidgetOkMsg').show();
                                    setTimeout(function () {
                                        $('#modalImportDash').modal('hide');
                                        location.reload();
                                    }, 1000);
                                } else {
                                    let errorMsg = "\n\n" + response + "\n\n\n";
                                    $('#importWidgetErrorText').text(errorMsg);
                                    $('#importWidgetKoMsg').show();
                                    //$('#modalImportDash').modal('hide');
                                }
                            },
                            error: function (xhr, status, error) {
                                $('#importWidgetKoMsg').show();
                                //$('#modalImportDash').modal('hide');
                                console.log("Errore nell'invio del file JSON: " + error);
                            },
                        });
                    });


                    //Duplicazione della dashboard
                    $('#duplicateDashboardBtn').click(function () {
                        $('#cloningDashboardFormRow').hide();
                        $('#cloneDashboardModalFooter').hide();
                        $('#duplicateDashboardLoadingRow').show();
                        
                        var dashboardParams = {};
                        dashboardParams['sourceDashboardId'] = <?= escapeForJS($_REQUEST['dashboardId']) ?>;
                        dashboardParams['sourceDashboardTitle'] = $('#currentDashboardTitle').val();
                        dashboardParams['sourceDashboardAuthorName'] = "<?= $dashboardAuthorName ?>";
                        dashboardParams['newDashboardTitle'] = $('#newDashboardTitle').val();
                        
                        $.ajax({
                            url: "duplicate_dash.php",
                            data: {dashboardDuplication: dashboardParams},
                            type: "POST",
                            async: true,
                            success: function(data) 
                            {
                                $('#duplicateDashboardLoadingRow').hide();
                                switch(data)
                                {
                                    case "Ok":
                                        $('#duplicateDashboardOkRow').show();
                                        setTimeout(function(){
                                            $('#cloneDashboardModal').modal('hide');
                                            setTimeout(function(){
                                                $('#duplicateDashboardOkRow').hide();
                                                $('#cloningDashboardFormRow').show();
                                                $('#cloneDashboardModalFooter').show(); 
                                                $('#newDashboardTitle').val("");
                                                $('#cloneDashboardTitleMsg').val("Title can't be less than 4 characters long");
                                                $('#duplicateDashboardBtn').attr("disabled", true);
                                            }, 300);
                                        }, 3000);
                                        break;
                                        
                                    case "logoDirCreationKo": case "logoFileCopyKo":
                                        $('#duplicateDashboardWarningRow').show();
                                        setTimeout(function(){
                                            $('#duplicateDashboardWarningRow').hide();
                                            $('#cloningDashboardFormRow').show();
                                            $('#cloneDashboardModalFooter').show(); 
                                        }, 3000);
                                        console.log(data);
                                        break;

                                    case "Ko":
                                        $('#duplicateDashboardKoRow').show();
                                        setTimeout(function(){
                                            $('#duplicateDashboardKoRow').hide();
                                            $('#cloningDashboardFormRow').show();
                                            $('#cloneDashboardModalFooter').show(); 
                                        }, 3000);
                                        console.log(data);
                                        break;
                                }					
                            },
                            error: function(data)
                            {
                                $('#duplicateDashboardLoadingRow').hide();
                                $('#duplicateDashboardKoRow').show();
                                setTimeout(function(){
                                    $('#duplicateDashboardKoRow').hide();
                                    $('#cloningDashboardFormRow').show();
                                    $('#cloneDashboardModalFooter').show(); 
                                }, 3000);
                                console.log(data);
                            }
                        });
                    });

                    //Listener cancellazione widget
                    //$(document).on('click', '.icon-remove-widget', function () {
					$(document).on('click', '.delWidgetRow', function () {	
                        //var widget = $(this).parents('li');
                        //var widgetTile = $(this).parents('li').find('div.titleDiv').text();
						var name_widget_m = $(this).parents('div.widgetCtxMenu').attr('data-widgetName');
						var widgetId = $('li[id=' + name_widget_m + ']').attr('data-widgetId');
						var widgetTile = $('li[id=' + name_widget_m + ']').find('div.titleDiv').text();
                        //var widgetName = $(this).parents('li').attr('id');
						var widgetName = name_widget_m;
                        
                        $('#widgetToDelNameHidden').val(widgetName);
                        $('#widgetToDelName').html(widgetTile);
                        $('#modalDelWidget').modal('show');
                    });
                    
                    $(document).on('click', '.exportWidgetRow', function () {	
                        var name_widget_m = $(this).parents('div.widgetCtxMenu').attr('data-widgetName');
						var widgetId = $('li[id=' + name_widget_m + ']').attr('data-widgetId');
                        $.ajax({
                            url: '../management/exportWidget.php',
                            data: {
                                widgetId: widgetId
                            },
                            type: 'POST',
                            dataType: 'json',
                            success: function (response) {
                                  // Converti il JSON in una stringa
                                  let jsonString = JSON.stringify(response);

                                  // Crea un oggetto Blob con il contenuto del JSON
                                  let blob = new Blob([jsonString], { type: 'application/json' });

                                  // Crea un URL oggetto dal Blob
                                  let url = URL.createObjectURL(blob);

                                  // Crea un elemento <a> per il download
                                  let a = document.createElement('a');
                                  a.href = url;
                                  a.download = 'exportWidget.json';
                                  a.click();

                                  // Rilascia l'URL oggetto
                                  URL.revokeObjectURL(url);
                            },
                            error: function (xhr, status, error) {
                                console.log('Error in Exporting Dashboard', error);
                            },
                        });
                    });
                    
                    $('#delWidgetConfirmBtn').click(function(){
                        $('#delWidgetNameMsg').parents('div.row').hide();
                        $('#delWidgetCancelBtn').hide();
                        $('#delWidgetConfirmBtn').hide();
                        $('#delWidgetRunningMsg').show();
                        
                        var widgetName = $('#widgetToDelNameHidden').val();
						
                        $.ajax({
                            url: "../controllers/deleteWidget.php",
                            data: {
                                nameWidget: $('#widgetToDelNameHidden').val(),
                                dashboardId: <?= escapeForJS($_REQUEST['dashboardId']) ?>,
                                dashboardTitle: dashboardParams.title_header,
                            //    dashboardTitle: dashTitleEscaped,
                                username: "<?= $dashboardEditorName ?>"
                            },
                            async: true,
                            success: function(successData)
                            {
                                $('#delWidgetRunningMsg').hide();
                                
                                if(successData !== 'Ok')
                                {
                                    $('#delWidgetRunningIcon').hide();
                                    $('#delWidgetKoMsg').show();
                                    console.log("Del widget ko: " + successData);
                                    setTimeout(function(){
                                        $('#modalDelWidget').modal('hide');
                                        setTimeout(function(){
                                            $('#delWidgetKoMsg').hide();
                                            $('#delWidgetNameMsg').parents('div.row').show();
                                            $('#delWidgetCancelBtn').show();
                                            $('#delWidgetConfirmBtn').show();
                                            $('#widgetToDelNameHidden').val('');
                                            $('#widgetToDelName').html('');
                                        }, 750);
                                    }, 2500);
                                }
                                else
                                {
                                    $('#delWidgetRunningIcon').hide();
                                    $('#delWidgetOkMsg').show();
                                    $('#' + widgetName + '_widgetCtxMenu').remove();
                                    gridster.remove_widget($('li[id=' + $('#widgetToDelNameHidden').val() + ']'));
                                    
                                    setTimeout(function(){
                                        var gridster_actual = $(".gridster ul").not(".ui-fancytree ul").gridster().data('gridster');
                                        var widgets = JSON.stringify(gridster_actual.serialize());

                                        $.ajax({
                                            url: "../controllers/saveWidgetsPositions.php",
                                            data: {
                                                configuration_widgets: widgets,
                                                dashboardId: <?= escapeForJS($_REQUEST['dashboardId'])?>
                                            },
                                            type: "POST",
                                            async: true,
                                            success: function (data) 
                                            {
                                                if(data == 1) 
                                                {
                                                    //Non facciamo niente
                                                }
                                                else
                                                {
                                                    //Non facciamo niente
                                                }
                                            },
                                            error: function(errorData)
                                            {
                                                //Non facciamo niente
                                            },
                                            complete: function()
                                            {
                                                $('#modalDelWidget').modal('hide');
                                                setTimeout(function(){
                                                    $('#delWidgetOkMsg').hide();
                                                    $('#delWidgetNameMsg').parents('div.row').show();
                                                    $('#delWidgetCancelBtn').show();
                                                    $('#delWidgetConfirmBtn').show();
                                                    $('#widgetToDelNameHidden').val('');
                                                    $('#widgetToDelName').html('');

                                                    $("li.gs_w").each(function() 
                                                    {
                                                        temp = parseInt(parseInt($(this).attr('data-row')) + parseInt($(this).attr('data-sizey')));
                                                        if(temp > firstFreeRow)
                                                        {
                                                                firstFreeRow = temp;
                                                        }
                                                    });

                                                    $('#firstFreeRowInput').val(firstFreeRow);

                                                }, 750);
                                            }
                                        });
                                    }, 1250);
                                }
                            },
                            error: function(errorData)
                            {
                                $('#delWidgetRunningIcon').hide();
                                $('#delWidgetKoMsg').show();
                                setTimeout(function(){
                                    $('#modalDelWidget').modal('hide');
                                    setTimeout(function(){
                                        $('#delWidgetKoMsg').hide();
                                        $('#delWidgetNameMsg').parents('div.row').show();
                                        $('#delWidgetCancelBtn').show();
                                        $('#delWidgetConfirmBtn').show();
                                        $('#widgetToDelNameHidden').val('');
                                        $('#widgetToDelName').html('');
                                    }, 750);
                                }, 2500);
                                console.log("Del widget ko: " + errorData);
                                console.log(JSON.stringify(errorData));
                            }
                        });
                    });

                    //Listener modifica widget
                    //$(document).on('click', '.icon-cfg-widget', function () 
                    $(document).on('click', '.widgetCtxMenu .advancedOptionsRow', function () 
					{
                        //var name_widget_m = $(this).parents('li').attr('id');
						var name_widget_m = $(this).parents('div.widgetCtxMenu').attr('data-widgetName');
                        //var widgetId = $(this).parents('li').attr('data-widgetId');
						var widgetId = $('li[id=' + name_widget_m + ']').attr('data-widgetId');
                        $('#widgetIdM').val(widgetId);
                        
                        var dimMapRaw = null;
                        var dimMap = null;
                        $("#inputColumn-m").empty();
                        $("#inputRows-m").empty();
                        $("#inputComuneRowM").hide();
                        
                        editWidgetConditionsArray = new Array();
                        setEditWidgetConditionsArray(editWidgetConditionsArray);
                        editWidgetConditionsArray["title"] = true;
                        
                        //Controllo presenza titolo
                        $("#inputTitleWidgetM").off();
                        $("#inputTitleWidgetM").on('input', function(){
                            var pattern = /^$/; 
                            if(pattern.test($(this).val()))
                            {
                                editWidgetConditionsArray["title"] = false;
                                $("label[for=inputTitleWidgetM]").css("color", "red");
                            }
                            else
                            {
                               var newTitle = $(this).val();
                               $("div.titleDiv").each(function(i)
                               {
                                  if($(this).parents("li.gridsterCell").attr("id") !== name_widget_m)
                                  {
                                    if($(this).html() === newTitle)
                                    {
                                       editWidgetConditionsArray["title"] = false;
                                       $("label[for=inputTitleWidgetM]").css("color", "red");
                                       return false;
                                    }
                                    else
                                    {
                                       editWidgetConditionsArray["title"] = true;
                                       $("label[for=inputTitleWidgetM]").css("color", "black");
                                    }
                                  }
                               });
                            }
                        });
                        
                        $.ajax({
                            url: "get_data.php",
                            data: {
                                action: "getWidgetParamsNR",
                                notBySession: "true",
                                username: "<?= $dashboardAuthorName?>",
                                widgetName: name_widget_m, 
                                dashboardId: "<?= escapeForJS($_REQUEST['dashboardId'])?>"
                            },
                            type: "GET",
                            async: true,
                            dataType: 'json',
                            success: function (data) 
                            {
                                
                                var entityJson = JSON.parse(data.entityJson);
                                var attributeName = data.attributeName;
                                var widgetTypeM = data.type_widget;
                                if (widgetTypeM == "widgetSelector" || widgetTypeM == "widgetSelectorNew" || widgetTypeM == "widgetSelectorWeb" || widgetTypeM == "widgetSelectorTech" || widgetTypeM == "widgetCurvedLineSeries" || widgetTypeM == "widgetCalendar" || widgetTypeM == "widgetDataCube" || widgetTypeM == "widgetBarSeries") {
                                    $("#specificParamsM").css("width", "100%");
                                }

                                if (widgetTypeM == "widgetDeviceTable"){
                                    //console.log('get_data:',dat.rowParamsa);
                                    var rowParams = data.rowParams;
                                    var title_td = '<div><h5><b>Configuration properties</b></h5></div>';
                                    $('#deviceTableEditorSM').append(title_td);
                                    var textarea = $('<textarea id="text_dt"></textarea>').addClass('ckeditor');
                                    var buttonDT = ('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceDTSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>');
                                    textarea.val(rowParams);
                                    $('#deviceTableEditorSM').append(textarea);
                                    CKEDITOR.replace(textarea[0], {
                                                            allowedContent: true,
                                                            language: 'en',
                                                            contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
                                                            width: '100%'
                                                        });
                                    $('#deviceTableEditorSM').append(buttonDT);
                                    //
                                                        $('#sourceDTSaveBtn').click(function(){

                                                                    var newInfo = CKEDITOR.instances['text_dt'].getData();
                                                                    var html = newInfo;
                                                                    var tempDiv = document.createElement("div");
                                                                    tempDiv.innerHTML = newInfo;
                                                                    var plainText = tempDiv.textContent || tempDiv.innerText || "";
                                                                    console.log(plainText);
                                                                        try {
                                                                            JSON.parse(plainText);       
                                                                    //
                                                                    $.ajax({
                                                                    url: "../controllers/updateWidget.php",
                                                                data: {
                                                                    action: "updateDTparams",
                                                                    widgetName: name_widget_m,
                                                                    //    newText: newInfoDecoded
                                                                    newText: plainText
                                                                     },
                                                                        type: "POST",
                                                                        async: true,
                                                                        dataType: 'json',
                                                                        success: function (data) {
                                                                            if (data.detail === 'Ok') {
                                                                                alert('Saved!');
                                                                            } else {
                                                                                alert('Error');
                                                                            }
                                                                        },
                                                                        error: function (errorData) {
                                                                            alert('Error');
                                                                        }
                                                                    });

                                                                } catch (e) {
                                                                            console.log('error',e);
                                                                            alert('Uncorrect syntax in Configuration properties');
                                                                        }
                                                            /* */

                                                            
                                                        });
                                    //
                                }else{
                                    $('#deviceTableEditorSM').empty();
                                }
                                var paramsRaw = data['param_w'];
                                var styleParamsRaw = data['styleParameters'];
                                var serviceUri = data['serviceUri'];
                                var viewMode = data['viewMode'];
                                var rowParams = data['rowParams'];
                                var code = data['code'];
                                var connections = data['connections'];
                                
                                var parameters, styleParameters, currentParams, infoJson = null;
                                
                                var infoJsonRaw = data['infoJson'];
                                var info_mess = data['info_mess'];
                                $("#inputShowTitleM").val(data['showTitle']);
                                
                                if(((entityJson !== null)||(data.actuatorTarget === 'app')) && widgetTypeM != "widgetBarSeries" && widgetTypeM != "widgetCurvedLineSeries" && widgetTypeM != "widgetRadarSeries"  && widgetTypeM != "widgetGaugeChart" && widgetTypeM != "widgetSpeedometer" && widgetTypeM != "widgetPieChart" && widgetTypeM != "widgetSingleContent" && widgetTypeM != "widgetTable" && widgetTypeM != "widgetCalendar" && widgetTypeM != "widgetDataCube" && widgetTypeM != "widgetTimeTrend" && widgetTypeM != "widgetExternalContent")
                                {
                                    $('#actuatorTargetM').parents('div.row').show();
                                    if((data.actuatorTarget === 'app'))
                                    {
                                        $('#widgetCategoryM').html("Actuator");
                                        $('#widgetCategoryHiddenM').val("actuator");
                                        $('#actuatorTargetM').text('Personal apps');
                                        $('#widgetActuatorTargetM').val('app');
                                        $('#personalAppsInputsM').parents('div.row').show();
                                        $('#personalAppsInputsM').text(data.nodeRedInputName);
                                        $('#personalAppsInputsValueTypeM').parents('div.row').show();
                                        $('#personalAppsInputsValueTypeM').text(data.nodeRedInputValueType);
                                        $('#personalAppsInputsStartValueM').parents('div.row').show();
                                        $('#personalAppsInputsStartValueM').text(data.nodeRedInputStartValue);
                                        $('#personalAppsInputsDomainTypeM').parents('div.row').show();
                                        switch(data.nodeRedInputDomainType)
                                        {
                                            case "onOff":
                                                $('#personalAppsInputsDomainTypeM').text('Bi-state commutation');
                                                break;
                                                
                                            case "contRange":
                                                $('#personalAppsInputsDomainTypeM').text('Continuous range');
                                                break;  
                                                
                                            case "impulse":
                                                $('#personalAppsInputsDomainTypeM').text('Impulse');
                                                break;     
                                        }
                                        
                                        if(data.nodeRedInputMinValue !== null)
                                        {
                                            $('#personalAppsInputsMinValueM').parents('div.row').show();
                                            $('#personalAppsInputsMinValueM').text(data.nodeRedInputMinValue);
                                        }
                                        
                                        if(data.nodeRedInputMaxValue !== null)
                                        {
                                            $('#personalAppsInputsMaxValueM').parents('div.row').show();
                                            $('#personalAppsInputsMaxValueM').text(data.nodeRedInputMaxValue);
                                        }
                                        
                                        if(data.nodeRedInputOffValue !== null)
                                        {
                                            $('#personalAppsInputsOffValueM').parents('div.row').show();
                                            $('#personalAppsInputsOffValueM').text(data.nodeRedInputOffValue);
                                        }
                                        
                                        if(data.nodeRedInputOnValue !== null)
                                        {
                                            $('#personalAppsInputsOnValueM').parents('div.row').show();
                                            $('#personalAppsInputsOnValueM').text(data.nodeRedInputOnValue);
                                        }
                                        
                                        $('#widgetActuatorTypePersonalAppsM').parents('div.row').show();
                                        $('#widgetActuatorTypePersonalAppsM').text(data.type_widget);
                                        $('#widgetActuatorTypeAppsHiddenM').val(data.type_widget);
                                        
                                        if(styleParamsRaw !== null) 
                                        {
                                            styleParameters = JSON.parse(styleParamsRaw);
                                        }

                                        if(paramsRaw !== null) 
                                        {
                                            currentParams = JSON.parse(paramsRaw);
                                        }
                                        
                                        if((data.title_widget !== null)&&(data.title_widget.trim() !== ''))
                                        {
                                            if(data.title_widget.trim() !== '')
                                            {
                                                var displayedTitle = data.title_widget.replace(/<script[^>]*>([\S\s]*?)<\/script>/gmi, '');
                                                displayedTitle = displayedTitle.replace(/<\/?\w(?:[^"'>]|"[^"]*"|'[^']*')*>/gmi, '');
                                                displayedTitle = displayedTitle.replace(/&deg;/g, "°");
                                                displayedTitle = displayedTitle.replace(/&num;/g, "#");
                                                displayedTitle = displayedTitle.replace(/&dollar;/g, "$");
                                                displayedTitle = displayedTitle.replace(/&percnt;/g, "%");
                                                displayedTitle = displayedTitle.replace(/&pound;/g, "£");
                                                displayedTitle = displayedTitle.replace(/&lt;/g, "<");
                                                displayedTitle = displayedTitle.replace(/&gt;/g, ">");
                                                displayedTitle = displayedTitle.replace(/&agrave;/g, "à");
                                                displayedTitle = displayedTitle.replace(/&egrave;/g, "è");
                                                displayedTitle = displayedTitle.replace(/&eacute;/g, "é");
                                                displayedTitle = displayedTitle.replace(/&igrave;/g, "ì");
                                                displayedTitle = displayedTitle.replace(/&ograve;/g, "ò");
                                                displayedTitle = displayedTitle.replace(/&ugrave;/g, "ù");
                                                displayedTitle = displayedTitle.replace(/&micro;/g, "µ");
                                                displayedTitle = displayedTitle.replace(/&sol;/g, "/");
                                                displayedTitle = displayedTitle.replace(/&bsol;/g, "\\");
                                                displayedTitle = displayedTitle.replace(/&lpar;/g, "(");
                                                displayedTitle = displayedTitle.replace(/&rpar;/g, ")");
                                                displayedTitle = displayedTitle.replace(/&lsqb;/g, "[");
                                                displayedTitle = displayedTitle.replace(/&rsqb;/g, "]");
                                                displayedTitle = displayedTitle.replace(/&lcub;/g, "{");
                                                displayedTitle = displayedTitle.replace(/&rcub;/g, "}");
                                                displayedTitle = displayedTitle.replace(/&Hat;/g, "^");
                                            }
                                            else
                                            {
                                                var displayedTitle = '';
                                            }
                                        }
                                        else
                                        {
                                            var displayedTitle = '';
                                        }
                                        
                                        $('#inputTitleWidgetM').val(displayedTitle);
                                        
                                        switch(data.type_widget)
                                        {
                                            case "widgetNumericKeyboard":
                                                $("#parametersM").val(JSON.stringify(currentParams));
                                                $('#link_help_modal-add-widget-m').css("display", "");
                                                $('#inputTitleWidgetM').attr('disabled', false);
                                                $("label[for='inputTitleWidgetM']").html("Title");
                                                $("label[for='inputColorWidgetM']").html("Background color");
                                                $('#inputColorWidgetM').attr('disabled', false);
                                                $('#inputColorWidgetM').prop('required', true);
                                                $('#inputFontSizeM').attr('disabled', true);
                                                $('#inputFontSizeM').prop('required', false);
                                                $('#inputFontColorM').attr('disabled', true);
                                                $('#inputFontColorM').prop('required', false);
                                                $('#select-frameColor-Widget-m').attr('disabled', false);
                                                $('#select-frameColor-Widget-m').prop('required', true);
                                                $('#select-IntTemp-Widget-m').val(-1);
                                                $('#select-IntTemp-Widget-m').prop('disabled', true);
                                                $('#select-IntTemp-Widget-m').prop('required', false);
                                                $('#inputFreqWidgetM').val('');
                                                $('#inputFreqWidgetM').prop('disabled', true);
                                                $('#inputFreqWidgetM').prop('required', false);
                                                $('#inputComuneWidgetM').attr('disabled', true);
                                                $('#urlWidgetM').attr('disabled', false);
                                                $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                                $('#inputHeaderFontColorWidgetM').prop('required', true);
                                                $('#inputUdmWidgetM').prop("required", false);
                                                $('#inputUdmWidgetM').attr("disabled", true);
                                                $('#inputUdmWidgetM').val("");
                                                $('#inputUdmPositionM').prop("required", false);
                                                $('#inputUdmPositionM').attr("disabled", true);
                                                $('#inputUdmPositionM').val(-1);

                                                //Rimozione eventuali campi del subform general per widget process
                                                removeWidgetProcessGeneralFields("editWidget");

                                                //Parametri specifici del widget
                                                $('#specificParamsM .row').remove();
                                                
                                                newFormRow = $('<div class="row"></div>');
                                                $('#specificParamsM').append(newFormRow);
                                                
                                                newLabel = $('<label for="editKeyboardDisplayColor" class="col-md-2 control-label"><?php echo _("Display color"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editKeyboardDisplayColor"><input type="text" name="editKeyboardDisplayColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.displayColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv); 

                                                newLabel = $('<label for="editKeyboardDisplayFontColor" class="col-md-2 control-label">Display font color</label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editKeyboardDisplayFontColor"><input type="text" name="editKeyboardDisplayFontColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.displayFontColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);
                                                
                                                newFormRow = $('<div class="row"></div>');
                                                $('#specificParamsM').append(newFormRow);

                                                newLabel = $('<label for="editKeyboardBtnColor" class="col-md-2 control-label">Buttons color</label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editKeyboardBtnColor"><input type="text" name="editKeyboardBtnColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.btnColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv); 

                                                newLabel = $('<label for="editKeyboardBtnFontColor" class="col-md-2 control-label">Buttons font color</label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editKeyboardBtnFontColor"><input type="text" name="editKeyboardBtnFontColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.btnFontColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);
												/////////CK EDITOR NumericKeyboard
											$.ajax({
                                                url: "../controllers/getTrustedUsers.php",
                                                data: {

                                                },
                                                type: "POST",
                                                async: true,
                                                dataType: 'json',
                                                success: function (data) {
                                                    if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
                                                        //Nuova riga
														console.log('TRUSTED');
                                                        //Source Selection
                                                        newFormRow = $('<div class="row"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                                        newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
                                                        newSelect.append('<option value="no">no</option>');
                                                        newSelect.append('<option value="ckeditor">yes</option>');
                                                        newInnerDiv.append(newSelect);
                                                        newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        newLabel.show();
                                                        newInnerDiv.show();
                                                        newSelect.show();

                                                        //Nuova riga Tab Destro: CKEDITOR
                                                        //Modalità del widget (none, map, gis, link esterno)
                                                        newFormRow = $('<div class="row" id="ck_editor"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-12"></div>');
                                                        newBox = $('<div id="widgetEditor">');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
                                                        newBox.append('<?= _("Here you can insert Javascript code to be executed in the widget. Please save your script by clicking on the save button on the bottom.")?>');
                                                        newBox.append('</div></div>');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
                                                        newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
                                                        newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
                                                        newBox.append('</div></div></div>');
                                                        newInnerDiv.append(newBox);
                                                        //newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        //newLabel.show();
                                                        newInnerDiv.show();
                                                        //newInput.show();
                                                        $('#ck_editor').hide();

                                                        var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
                                                            allowedContent: true,
                                                            language: 'en',
                                                            contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
                                                            width: '100%'
                                                        });

                                                        let par = (JSON.stringify(currentParams));
                                                        if (par && !par.includes("latLng") && !par.includes("null")) {
                                                            $("#parametersM").val(JSON.stringify(currentParams));
                                                            if (currentParams['mode'] == "ckeditor") {
                                                                $('#ck_editor').show();
                                                                $('#enableCKEditor').val("ckeditor");
                                                                // if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    //    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                            }
                                                        }

                                                        $('#enableCKEditor').change(function () {
                                                            if ($('#enableCKEditor').val() === "ckeditor") {
                                                                $('#ck_editor').show();
                                                                //if (rowParams.substring(0, 8) != "https://" && rowParams.substring(0, 7) != "http://" && rowParams.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                                $("#parametersM").val('{"mode": "ckeditor"}');
                                                            } else {
                                                                $('#ck_editor').hide();
                                                                $("#parametersM").val('');
                                                            }
                                                        });

                                                        $('#sourceSelectionSaveBtn').click(function () {
                                                            var button = $(this);
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').show();
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');

                                                            var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();
                                                            /*if (newInfo.trim() === '') {
                                                                newInfo = null;
                                                            }   */

                                                            $.ajax({
                                                                url: "../controllers/updateWidget.php",
                                                                data: {
                                                                    action: "updateCkEditor",
                                                                    widgetName: name_widget_m,
                                                                    //    newText: newInfoDecoded
                                                                    newText: newInfo
                                                                },
                                                                type: "POST",
                                                                async: true,
                                                                dataType: 'json',
                                                                success: function (data) {
                                                                    if (data.detail === 'Ok') {
                                                                        alert('Saved!');
                                                                    } else {
                                                                        alert('Error');
                                                                    }
                                                                },
                                                                error: function (errorData) {
                                                                    alert('Error');
                                                                }
                                                            });
                                                        });
                                                    }
                                                },
                                                error: function (errorData) {
                                                    console.log('Error in retrieving Trusted Users.');
                                                }
                                            });
										///////////////////////
                                                break;
                                            
                                            case "widgetGeolocator":
                                                $("#parametersM").val(JSON.stringify(currentParams));
                                                $('#link_help_modal-add-widget-m').css("display", "");
                                                $('#inputTitleWidgetM').attr('disabled', false);
                                                $("label[for='inputTitleWidgetM']").html("Title");
                                                $("label[for='inputColorWidgetM']").html("Background color");
                                                $('#inputColorWidgetM').attr('disabled', false);
                                                $('#inputColorWidgetM').prop('required', true);
                                                $('#inputFontSizeM').attr('disabled', true);
                                                $('#inputFontSizeM').prop('required', false);
                                                $('#inputFontColorM').attr('disabled', true);
                                                $('#inputFontColorM').prop('required', false);
                                                $('#select-frameColor-Widget-m').attr('disabled', false);
                                                $('#select-frameColor-Widget-m').prop('required', true);
                                                $('#select-IntTemp-Widget-m').val(-1);
                                                $('#select-IntTemp-Widget-m').prop('disabled', true);
                                                $('#select-IntTemp-Widget-m').prop('required', false);
                                                $('#inputFreqWidgetM').val('');
                                                $('#inputFreqWidgetM').prop('disabled', true);
                                                $('#inputFreqWidgetM').prop('required', false);
                                                $('#inputComuneWidgetM').attr('disabled', true);
                                                $('#urlWidgetM').attr('disabled', false);
                                                $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                                $('#inputHeaderFontColorWidgetM').prop('required', true);
                                                $('#inputUdmWidgetM').prop("required", false);
                                                $('#inputUdmWidgetM').attr("disabled", true);
                                                $('#inputUdmWidgetM').val("");
                                                $('#inputUdmPositionM').prop("required", false);
                                                $('#inputUdmPositionM').attr("disabled", true);
                                                $('#inputUdmPositionM').val(-1);

                                                //Rimozione eventuali campi del subform general per widget process
                                                removeWidgetProcessGeneralFields("editWidget");

                                                //Parametri specifici del widget
                                                $('#specificParamsM .row').remove();

                                                newFormRow = $('<div class="row"></div>');
                                                $('#specificParamsM').append(newFormRow);
                                                newLabel = $('<label for="editSwitchButtonViewMode" class="col-md-2 control-label"><?php echo _("View mode"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                var newControl = $('<select id="editSwitchButtonViewMode" name="editSwitchButtonViewMode" class="form-control"></select>');
                                                newControl.append('<option value="emptyButton"><?php echo _("Empty button"); ?></option>');
                                                newControl.append('<option value="iconOnly"><?php echo _("Icon only"); ?></option>');
                                                newControl.append('<option value="textOnly"><?php echo _("Text only"); ?></option>');
                                                newControl.append('<option value="displayOnly"><?php echo _("Value display only"); ?></option>');
                                                newControl.append('<option value="iconAndText"><?php echo _("Icon and text"); ?></option>');
                                                newControl.append('<option value="iconAndDisplay"><?php echo _("Icon and value display"); ?></option>');
                                                newControl.append('<option value="displayAndText"><?php echo _("Display and text"); ?></option>');
                                                newControl.append('<option value="all"><?php echo _("Icon, text and value display"); ?></option>');
                                                newControl.val(styleParameters.viewMode);
                                                newInnerDiv.append(newControl);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);

                                                newLabel = $('<label for="editSwitchButtonRadius" class="col-md-2 control-label"><?php echo _("Button radius (%)"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                newControl = $('<input id="editSwitchButtonRadius" name="editSwitchButtonRadius" data-slider-id="editSwitchButtonRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                                newInnerDiv.append(newControl);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);

                                                newFormRow.find('#editSwitchButtonRadius').bootstrapSlider({
                                                    formatter: function(value) {
                                                       return value + "%";
                                                    },
                                                    value: styleParameters.buttonRadius    
                                                });

                                                newFormRow = $('<div class="row"></div>');
                                                $('#specificParamsM').append(newFormRow);

                                                newLabel = $('<label for="editGeolocatorMode" class="col-md-2 control-label">Geolocation mode</label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newControl = $('<select id="editGeolocatorMode" name="editGeolocatorMode" class="form-control"></select>');
                                                newControl.append('<option value="press">On press only</option>');
                                                newControl.append('<option value="period">Periodically</option>');
                                                newControl.append('<option value="both">Periodically and on press</option>');
                                                newControl.val(currentParams.mode);
                                                newInnerDiv.append(newControl);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);

                                                newFormRow = $('<div class="row"></div>');
                                                $('#specificParamsM').append(newFormRow);

                                                newLabel = $('<label for="editSwitchButtonColor" class="col-md-2 control-label"><?php echo _("Button color"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editSwitchButtonColor"><input type="text" name="editSwitchButtonColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.color, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv); 

                                                newLabel = $('<label for="editSwitchButtonClickColor" class="col-md-2 control-label"><?php echo _("Button color on click"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editSwitchButtonClickColor"><input type="text" name="editSwitchButtonClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.clickColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);        

                                                newFormRow = $('<div class="row"></div>');

                                                newLabel = $('<label for="editSwitchButtonSymbolColor" class="col-md-2 control-label"><?php echo _("Symbol color"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editSwitchButtonSymbolColor"><input type="text" name="editSwitchButtonSymbolColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.symbolColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv); 

                                                newLabel = $('<label for="editSwitchButtonSymbolClickColor" class="col-md-2 control-label"><?php echo _("Symbol color on click"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editSwitchButtonSymbolClickColor"><input type="text" name="editSwitchButtonSymbolClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.symbolClickColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);        

                                                $('#specificParamsM').append(newFormRow);

                                                newFormRow = $('<div class="row"></div>');

                                                newLabel = $('<label for="editSwitchButtonTextColor" class="col-md-2 control-label"><?php echo _("Text color"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editSwitchButtonTextColor"><input type="text" name="editSwitchButtonTextColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.textColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv); 

                                                newLabel = $('<label for="editSwitchButtonTextClickColor" class="col-md-2 control-label"><?php echo _("Text color on click"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editSwitchButtonTextClickColor"><input type="text" name="editSwitchButtonTextClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.textClickColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);        

                                                $('#specificParamsM').append(newFormRow);

                                                newFormRow = $('<div class="row"></div>');
                                                newLabel = $('<label for="editSwitchButtonTextFontSize" class="col-md-2 control-label"><?php echo _("Text font size"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<input type="text" id="editSwitchButtonTextFontSize" name="editSwitchButtonTextFontSize" class="form-control" value="' + styleParameters.textFontSize + '"></input>');
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv); 

                                                newLabel = $('<label for="editSwitchButtonDisplayFontSize" class="col-md-2 control-label"><?php echo _("Display font size"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<input type="text" id="editSwitchButtonDisplayFontSize" name="editSwitchButtonDisplayFontSize" class="form-control" value="' + styleParameters.displayFontSize +'"></input>');
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);        

                                                $('#specificParamsM').append(newFormRow);

                                                newFormRow = $('<div class="row"></div>');

                                                newLabel = $('<label for="editSwitchButtonDisplayFontColor" class="col-md-2 control-label"><?php echo _("Display text color"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editSwitchButtonDisplayFontColor"><input type="text" name="editSwitchButtonDisplayFontColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.displayFontColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv); 

                                                newLabel = $('<label for="editSwitchButtonDisplayFontClickColor" class="col-md-2 control-label"><?php echo _("Display text color on click"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editSwitchButtonDisplayFontClickColor"><input type="text" name="editSwitchButtonDisplayFontClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.displayFontClickColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);        

                                                $('#specificParamsM').append(newFormRow);

                                                newFormRow = $('<div class="row"></div>');
                                                $('#specificParamsM').append(newFormRow);

                                                newLabel = $('<label for="editSwitchButtonDisplayColor" class="col-md-2 control-label"><?php echo _("Display background color"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editSwitchButtonDisplayColor"><input type="text" name="editSwitchButtonDisplayColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.displayColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv); 

                                                newLabel = $('<label for="editSwitchButtonDisplayRadius" class="col-md-2 control-label"><?php echo _("Display radius (%)"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newControl = $('<input id="editSwitchButtonDisplayRadius" name="editSwitchButtonDisplayRadius" data-slider-id="editSwitchButtonDisplayRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                                newInnerDiv.append(newControl);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);

                                                newFormRow.find('#editSwitchButtonDisplayRadius').bootstrapSlider({
                                                    formatter: function(value) {
                                                       return value + "%";
                                                    },
                                                    value: styleParameters.displayRadius   
                                                });

                                                newFormRow = $('<div class="row"></div>');
                                                $('#specificParamsM').append(newFormRow);

                                                newLabel = $('<label for="editSwitchButtonDisplayWidth" class="col-md-2 control-label"><?php echo _("Display width (%)"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newControl = $('<input id="editSwitchButtonDisplayWidth" name="editSwitchButtonDisplayWidth" data-slider-id="editSwitchButtonDisplayWidthSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                                newInnerDiv.append(newControl);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);

                                                newFormRow.find('#editSwitchButtonDisplayWidth').bootstrapSlider({
                                                    formatter: function(value) {
                                                       return value + "%";
                                                    },
                                                    value: styleParameters.displayWidth   
                                                });

                                                newLabel = $('<label for="editSwitchButtonDisplayHeight" class="col-md-2 control-label"><?php echo _("Display height (%)"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newControl = $('<input id="editSwitchButtonDisplayHeight" name="editSwitchButtonDisplayHeight" data-slider-id="editSwitchButtonDisplayHeightSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                                newInnerDiv.append(newControl);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);

                                                newFormRow.find('#editSwitchButtonDisplayHeight').bootstrapSlider({
                                                    formatter: function(value) {
                                                       return value + "%";
                                                    },
                                                    value: styleParameters.displayHeight    
                                                });

                                                newFormRow = $('<div class="row"></div>');
                                                $('#specificParamsM').append(newFormRow);
                                                newLabel = $('<label for="editSwitchButtonNeonEffect" class="col-md-2 control-label"><?php echo _("Neon effect"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newControl = $('<select id="editSwitchButtonNeonEffect" name="editSwitchButtonNeonEffect" class="form-control"></select>');
                                                newControl.append('<option value="never"><?php echo _("Never"); ?></option>');
                                                newControl.append('<option value="pressedStatus"><?php echo _("When pressed"); ?></option>');
                                                newControl.append('<option value="always"><?php echo _("Always"); ?></option>');
                                                newControl.val(styleParameters.neonEffect);
                                                newInnerDiv.append(newControl);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);

                                                $('#editGeolocatorMode').change(function(){
                                                    currentParams.mode = $('#editGeolocatorMode').val();
                                                    $("#parametersM").val(JSON.stringify(currentParams));
                                                });
                                            break;
                                            
                                            case "widgetImpulseButton":
                                            $("#parametersM").val(JSON.stringify(currentParams));
                                            $('#link_help_modal-add-widget-m').css("display", "");
                                            $('#inputTitleWidgetM').attr('disabled', false);
                                            $("label[for='inputTitleWidgetM']").html("Title");
                                            $("label[for='inputColorWidgetM']").html("Background color");
                                            $('#inputColorWidgetM').attr('disabled', false);
                                            $('#inputColorWidgetM').prop('required', true);
                                            $('#inputFontSizeM').attr('disabled', true);
                                            $('#inputFontSizeM').prop('required', false);
                                            $('#inputFontColorM').attr('disabled', true);
                                            $('#inputFontColorM').prop('required', false);
                                            $('#select-frameColor-Widget-m').attr('disabled', false);
                                            $('#select-frameColor-Widget-m').prop('required', true);
                                            $('#select-IntTemp-Widget-m').val(-1);
                                            $('#select-IntTemp-Widget-m').prop('disabled', true);
                                            $('#select-IntTemp-Widget-m').prop('required', false);
                                            $('#inputFreqWidgetM').val('');
                                            $('#inputFreqWidgetM').prop('disabled', true);
                                            $('#inputFreqWidgetM').prop('required', false);
                                            $('#inputComuneWidgetM').attr('disabled', true);
                                            $('#urlWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').prop('required', true);
                                            $('#inputUdmWidgetM').prop("required", false);
                                            $('#inputUdmWidgetM').attr("disabled", true);
                                            $('#inputUdmWidgetM').val("");
                                            $('#inputUdmPositionM').prop("required", false);
                                            $('#inputUdmPositionM').attr("disabled", true);
                                            $('#inputUdmPositionM').val(-1);

                                            //Rimozione eventuali campi del subform general per widget process
                                            removeWidgetProcessGeneralFields("editWidget");

                                            //Parametri specifici del widget
                                            $('#specificParamsM .row').remove();
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            $('#specificParamsM').append(newFormRow);
                                            newLabel = $('<label for="editSwitchButtonViewMode" class="col-md-2 control-label"><?php echo _("View mode"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            var newControl = $('<select id="editSwitchButtonViewMode" name="editSwitchButtonViewMode" class="form-control"></select>');
                                            newControl.append('<option value="emptyButton"><?php echo _("Empty button"); ?></option>');
                                            newControl.append('<option value="iconOnly"><?php echo _("Icon only"); ?></option>');
                                            newControl.append('<option value="textOnly"><?php echo _("Text only"); ?></option>');
                                            newControl.append('<option value="displayOnly"><?php echo _("Value display only"); ?></option>');
                                            newControl.append('<option value="iconAndText"><?php echo _("Icon and text"); ?></option>');
                                            newControl.append('<option value="iconAndDisplay"><?php echo _("Icon and value display"); ?></option>');
                                            newControl.append('<option value="displayAndText"><?php echo _("Display and text"); ?></option>');
                                            newControl.append('<option value="all"><?php echo _("Icon, text and value display"); ?></option>');
                                            newControl.val(styleParameters.viewMode);
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            
                                            newLabel = $('<label for="editSwitchButtonRadius" class="col-md-2 control-label"><?php echo _("Button radius (%)"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newControl = $('<input id="editSwitchButtonRadius" name="editSwitchButtonRadius" data-slider-id="editSwitchButtonRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newFormRow.find('#editSwitchButtonRadius').bootstrapSlider({
                                                formatter: function(value) {
                                                   return value + "%";
                                                },
                                                value: styleParameters.buttonRadius    
                                            });
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newLabel = $('<label for="editSwitchButtonImpulseMode" class="col-md-2 control-label">Impulse mode</label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<select id="editSwitchButtonImpulseMode" name="editSwitchButtonImpulseMode" class="form-control"></select>');
                                            newControl.append('<option value="singlePress">Send impulse on release</option>');
                                            newControl.append('<option value="sequence">Send impulses until pressed</option>');
                                            newControl.val(currentParams.impulseMode);
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newLabel = $('<label for="editSwitchButtonColor" class="col-md-2 control-label"><?php echo _("Button color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonColor"><input type="text" name="editSwitchButtonColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.color, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv); 

                                            newLabel = $('<label for="editSwitchButtonClickColor" class="col-md-2 control-label"><?php echo _("Button color on click"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonClickColor"><input type="text" name="editSwitchButtonClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.clickColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);        
                                            
                                            newFormRow = $('<div class="row"></div>');
                                
                                            newLabel = $('<label for="editSwitchButtonSymbolColor" class="col-md-2 control-label"><?php echo _("Symbol color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonSymbolColor"><input type="text" name="editSwitchButtonSymbolColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.symbolColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv); 

                                            newLabel = $('<label for="editSwitchButtonSymbolClickColor" class="col-md-2 control-label"><?php echo _("Symbol color on click"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonSymbolClickColor"><input type="text" name="editSwitchButtonSymbolClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.symbolClickColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);        

                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                
                                            newLabel = $('<label for="editSwitchButtonTextColor" class="col-md-2 control-label"><?php echo _("Text color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonTextColor"><input type="text" name="editSwitchButtonTextColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.textColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv); 

                                            newLabel = $('<label for="editSwitchButtonTextClickColor" class="col-md-2 control-label"><?php echo _("Text color on click"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonTextClickColor"><input type="text" name="editSwitchButtonTextClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.textClickColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);        

                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            newLabel = $('<label for="editSwitchButtonTextFontSize" class="col-md-2 control-label"><?php echo _("Text font size"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<input type="text" id="editSwitchButtonTextFontSize" name="editSwitchButtonTextFontSize" class="form-control" value="' + styleParameters.textFontSize + '"></input>');
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv); 

                                            newLabel = $('<label for="editSwitchButtonDisplayFontSize" class="col-md-2 control-label"><?php echo _("Display font size"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<input type="text" id="editSwitchButtonDisplayFontSize" name="editSwitchButtonDisplayFontSize" class="form-control" value="' + styleParameters.displayFontSize +'"></input>');
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);        

                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                
                                            newLabel = $('<label for="editSwitchButtonDisplayFontColor" class="col-md-2 control-label"><?php echo _("Display text color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonDisplayFontColor"><input type="text" name="editSwitchButtonDisplayFontColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.displayFontColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv); 

                                            newLabel = $('<label for="editSwitchButtonDisplayFontClickColor" class="col-md-2 control-label"><?php echo _("Display text color on click"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonDisplayFontClickColor"><input type="text" name="editSwitchButtonDisplayFontClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.displayFontClickColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);        

                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newLabel = $('<label for="editSwitchButtonDisplayColor" class="col-md-2 control-label"><?php echo _("Display background color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonDisplayColor"><input type="text" name="editSwitchButtonDisplayColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.displayColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv); 
                                            
                                            newLabel = $('<label for="editSwitchButtonDisplayRadius" class="col-md-2 control-label"><?php echo _("Display radius (%)"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<input id="editSwitchButtonDisplayRadius" name="editSwitchButtonDisplayRadius" data-slider-id="editSwitchButtonDisplayRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newFormRow.find('#editSwitchButtonDisplayRadius').bootstrapSlider({
                                                formatter: function(value) {
                                                   return value + "%";
                                                },
                                                value: styleParameters.displayRadius   
                                            });
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            $('#specificParamsM').append(newFormRow);

                                            newLabel = $('<label for="editSwitchButtonDisplayWidth" class="col-md-2 control-label"><?php echo _("Display width (%)"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<input id="editSwitchButtonDisplayWidth" name="editSwitchButtonDisplayWidth" data-slider-id="editSwitchButtonDisplayWidthSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newFormRow.find('#editSwitchButtonDisplayWidth').bootstrapSlider({
                                                formatter: function(value) {
                                                   return value + "%";
                                                },
                                                value: styleParameters.displayWidth   
                                            });

                                            newLabel = $('<label for="editSwitchButtonDisplayHeight" class="col-md-2 control-label"><?php echo _("Display height (%)"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<input id="editSwitchButtonDisplayHeight" name="editSwitchButtonDisplayHeight" data-slider-id="editSwitchButtonDisplayHeightSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newFormRow.find('#editSwitchButtonDisplayHeight').bootstrapSlider({
                                                formatter: function(value) {
                                                   return value + "%";
                                                },
                                                value: styleParameters.displayHeight    
                                            });
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            $('#specificParamsM').append(newFormRow);
                                            newLabel = $('<label for="editSwitchButtonNeonEffect" class="col-md-2 control-label"><?php echo _("Neon effect"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<select id="editSwitchButtonNeonEffect" name="editSwitchButtonNeonEffect" class="form-control"></select>');
                                            newControl.append('<option value="never"><?php echo _("Never"); ?></option>');
                                            newControl.append('<option value="pressedStatus"><?php echo _("When pressed"); ?></option>');
                                            newControl.append('<option value="always"><?php echo _("Always"); ?></option>');
                                            newControl.val(styleParameters.neonEffect);
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            
                                            $('#editSwitchButtonImpulseMode').change(function(){
                                                currentParams.impulseMode = $('#editSwitchButtonImpulseMode').val();
                                                $("#parametersM").val(JSON.stringify(currentParams));
                                            });
                                            
                                            $.ajax({
                                                url: "../controllers/getTrustedUsers.php",
                                                data: {

                                                },
                                                type: "POST",
                                                async: true,
                                                dataType: 'json',
                                                success: function (data) {
                                                    if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
                                                        //Nuova riga
                                                        //Source Selection
                                                        newFormRow = $('<div class="row"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                                        newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
                                                        newSelect.append('<option value="no">no</option>');
                                                        newSelect.append('<option value="ckeditor">yes</option>');
                                                        newInnerDiv.append(newSelect);
                                                        newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        newLabel.show();
                                                        newInnerDiv.show();
                                                        newSelect.show();

                                                        //Nuova riga Tab Destro: CKEDITOR
                                                        //Modalità del widget (none, map, gis, link esterno)
                                                        newFormRow = $('<div class="row" id="ck_editor"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-12"></div>');
                                                        newBox = $('<div id="widgetEditor">');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
                                                        newBox.append('<?= _("Here you can insert Javascript code to be executed in the widget. Please save your script by clicking on the save button on the bottom.")?>');
                                                        newBox.append('</div></div>');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
                                                        newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
                                                        newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
                                                        newBox.append('</div></div></div>');
                                                        newInnerDiv.append(newBox);
                                                        //newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        //newLabel.show();
                                                        newInnerDiv.show();
                                                        //newInput.show();
                                                        $('#ck_editor').hide();

                                                        var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
                                                            allowedContent: true,
                                                            language: 'en',
                                                            contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
                                                            width: '100%'
                                                        });

                                                        let par = (JSON.stringify(currentParams));
                                                        if (par && !par.includes("latLng") && !par.includes("null")) {
                                                            $("#parametersM").val(JSON.stringify(currentParams));
                                                            if (currentParams['mode'] == "ckeditor") {
                                                                $('#ck_editor').show();
                                                                $('#enableCKEditor').val("ckeditor");
                                                                // if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    //    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                            }
                                                        }

                                                        $('#enableCKEditor').change(function () {
                                                            if ($('#enableCKEditor').val() === "ckeditor") {
                                                                $('#ck_editor').show();
                                                                //if (rowParams.substring(0, 8) != "https://" && rowParams.substring(0, 7) != "http://" && rowParams.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                                $("#parametersM").val('{"mode": "ckeditor"}');
                                                            } else {
                                                                $('#ck_editor').hide();
                                                                $("#parametersM").val('');
                                                            }
                                                        });

                                                        $('#sourceSelectionSaveBtn').click(function () {
                                                            var button = $(this);
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').show();
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');

                                                            var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();
                                                            /*if (newInfo.trim() === '') {
                                                                newInfo = null;
                                                            }   */

                                                            $.ajax({
                                                                url: "../controllers/updateWidget.php",
                                                                data: {
                                                                    action: "updateCkEditor",
                                                                    widgetName: name_widget_m,
                                                                    //    newText: newInfoDecoded
                                                                    newText: newInfo
                                                                },
                                                                type: "POST",
                                                                async: true,
                                                                dataType: 'json',
                                                                success: function (data) {
                                                                    if (data.detail === 'Ok') {
                                                                        alert('Saved!');
                                                                    } else {
                                                                        alert('Error');
                                                                    }
                                                                },
                                                                error: function (errorData) {
                                                                    alert('Error');
                                                                }
                                                            });
                                                        });
                                                    }
                                                },
                                                error: function (errorData) {
                                                    console.log('Error in retrieving Trusted Users.');
                                                }
                                            });
                                            
                                            break;
                                            
                                            case "widgetOnOffButton":
                                                $("#parametersM").val(JSON.stringify(currentParams));
                                                $('#link_help_modal-add-widget-m').css("display", "");
                                                $('#inputTitleWidgetM').attr('disabled', false);
                                                $("label[for='inputTitleWidgetM']").html("Title");
                                                $("label[for='inputColorWidgetM']").html("Background color");
                                                $('#inputColorWidgetM').attr('disabled', false);
                                                $('#inputColorWidgetM').prop('required', true);
                                                $('#inputFontSizeM').attr('disabled', true);
                                                $('#inputFontSizeM').prop('required', false);
                                                $('#inputFontColorM').attr('disabled', true);
                                                $('#inputFontColorM').prop('required', false);
                                                $('#select-frameColor-Widget-m').attr('disabled', false);
                                                $('#select-frameColor-Widget-m').prop('required', true);
                                                $('#select-IntTemp-Widget-m').val(-1);
                                                $('#select-IntTemp-Widget-m').prop('disabled', true);
                                                $('#select-IntTemp-Widget-m').prop('required', false);
                                                $('#inputFreqWidgetM').val('');
                                                $('#inputFreqWidgetM').prop('disabled', true);
                                                $('#inputFreqWidgetM').prop('required', false);
                                                $('#inputComuneWidgetM').attr('disabled', true);
                                                $('#urlWidgetM').attr('disabled', false);
                                                $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                                $('#inputHeaderFontColorWidgetM').prop('required', true);
                                                $('#inputUdmWidgetM').prop("required", false);
                                                $('#inputUdmWidgetM').attr("disabled", true);
                                                $('#inputUdmWidgetM').val("");
                                                $('#inputUdmPositionM').prop("required", false);
                                                $('#inputUdmPositionM').attr("disabled", true);
                                                $('#inputUdmPositionM').val(-1);

                                                //Rimozione eventuali campi del subform general per widget process
                                                removeWidgetProcessGeneralFields("editWidget");

                                                //Parametri specifici del widget
                                                $('#specificParamsM .row').remove();

                                                newFormRow = $('<div class="row"></div>');
                                                $('#specificParamsM').append(newFormRow);
                                                newLabel = $('<label for="editSwitchButtonViewMode" class="col-md-2 control-label"><?php echo _("View mode"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                var newControl = $('<select id="editSwitchButtonViewMode" name="editSwitchButtonViewMode" class="form-control"></select>');
                                                newControl.append('<option value="emptyButton"><?php echo _("Empty button"); ?></option>');
                                                newControl.append('<option value="iconOnly"><?php echo _("Icon only"); ?></option>');
                                                newControl.append('<option value="textOnly"><?php echo _("Text only"); ?></option>');
                                                newControl.append('<option value="displayOnly"><?php echo _("Value display only"); ?></option>');
                                                newControl.append('<option value="iconAndText"><?php echo _("Icon and text"); ?></option>');
                                                newControl.append('<option value="iconAndDisplay"><?php echo _("Icon and value display"); ?></option>');
                                                newControl.append('<option value="displayAndText"><?php echo _("Display and text"); ?></option>');
                                                newControl.append('<option value="all"><?php echo _("Icon, text and value display"); ?></option>');
                                                newControl.val(styleParameters.viewMode);
                                                newInnerDiv.append(newControl);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);

                                                newLabel = $('<label for="editSwitchButtonRadius" class="col-md-2 control-label"><?php echo _("Button radius (%)"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                newControl = $('<input id="editSwitchButtonRadius" name="editSwitchButtonRadius" data-slider-id="editSwitchButtonRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                                newInnerDiv.append(newControl);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);

                                                newFormRow.find('#editSwitchButtonRadius').bootstrapSlider({
                                                    formatter: function(value) {
                                                       return value + "%";
                                                    },
                                                    value: styleParameters.buttonRadius    
                                                });

                                                newFormRow = $('<div class="row"></div>');

                                                newLabel = $('<label for="editSwitchButtonOffColor" class="col-md-2 control-label"><?php echo _("Off button color"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editSwitchButtonOffColor"><input type="text" name="editSwitchButtonOffColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.offColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv); 

                                                newLabel = $('<label for="editSwitchButtonOnColor" class="col-md-2 control-label"><?php echo _("On button color"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editSwitchButtonOnColor"><input type="text" name="editSwitchButtonOnColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.onColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);        

                                                $('#specificParamsM').append(newFormRow);

                                                newFormRow = $('<div class="row"></div>');

                                                newLabel = $('<label for="editSwitchButtonSymbolOffColor" class="col-md-2 control-label"><?php echo _("Off symbol color"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editSwitchButtonSymbolOffColor"><input type="text" name="editSwitchButtonSymbolOffColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.symbolOffColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv); 

                                                newLabel = $('<label for="editSwitchButtonSymbolOnColor" class="col-md-2 control-label"><?php echo _("On symbol color"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editSwitchButtonSymbolOnColor"><input type="text" name="editSwitchButtonSymbolOnColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.symbolOnColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);        

                                                $('#specificParamsM').append(newFormRow);

                                                newFormRow = $('<div class="row"></div>');

                                                newLabel = $('<label for="editSwitchButtonTextOffColor" class="col-md-2 control-label">Off text color</label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editSwitchButtonTextOffColor"><input type="text" name="editSwitchButtonTextOffColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.textOffColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv); 

                                                newLabel = $('<label for="editSwitchButtonTextOnColor" class="col-md-2 control-label">On text color</label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editSwitchButtonTextOnColor"><input type="text" name="editSwitchButtonTextOnColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.textOnColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);        

                                                $('#specificParamsM').append(newFormRow);

                                                newFormRow = $('<div class="row"></div>');
                                                newLabel = $('<label for="editSwitchButtonTextFontSize" class="col-md-2 control-label"><?php echo _("Text font size"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<input type="text" id="editSwitchButtonTextFontSize" name="editSwitchButtonTextFontSize" class="form-control" value="' + styleParameters.textFontSize + '"></input>');
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv); 

                                                newLabel = $('<label for="editSwitchButtonDisplayFontSize" class="col-md-2 control-label"><?php echo _("Display font size"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<input type="text" id="editSwitchButtonDisplayFontSize" name="editSwitchButtonDisplayFontSize" class="form-control" value="' + styleParameters.displayFontSize +'"></input>');
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);        

                                                $('#specificParamsM').append(newFormRow);

                                                newFormRow = $('<div class="row"></div>');

                                                newLabel = $('<label for="editSwitchButtonDisplayOffColor" class="col-md-2 control-label"><?php echo _("Off display text color"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editSwitchButtonDisplayOffColor"><input type="text" name="editSwitchButtonDisplayOffColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.displayOffColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv); 

                                                newLabel = $('<label for="editSwitchButtonDisplayOnColor" class="col-md-2 control-label"><?php echo _("On display text color"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editSwitchButtonDisplayOnColor"><input type="text" name="editSwitchButtonDisplayOnColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.displayOnColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);        

                                                $('#specificParamsM').append(newFormRow);

                                                newFormRow = $('<div class="row"></div>');
                                                $('#specificParamsM').append(newFormRow);

                                                newLabel = $('<label for="editSwitchButtonDisplayColor" class="col-md-2 control-label"><?php echo _("Display background color"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<div class="input-group colorPicker" id="editSwitchButtonDisplayColor"><input type="text" name="editSwitchButtonDisplayColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                                newInput.colorpicker({color: styleParameters.displayColor, format: "rgba"});
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv); 

                                                newLabel = $('<label for="editSwitchButtonDisplayRadius" class="col-md-2 control-label"><?php echo _("Display radius (%)"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newControl = $('<input id="editSwitchButtonDisplayRadius" name="editSwitchButtonDisplayRadius" data-slider-id="editSwitchButtonDisplayRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                                newInnerDiv.append(newControl);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);

                                                newFormRow.find('#editSwitchButtonDisplayRadius').bootstrapSlider({
                                                    formatter: function(value) {
                                                       return value + "%";
                                                    },
                                                    value: styleParameters.displayRadius   
                                                });

                                                newFormRow = $('<div class="row"></div>');
                                                $('#specificParamsM').append(newFormRow);

                                                newLabel = $('<label for="editSwitchButtonDisplayWidth" class="col-md-2 control-label"><?php echo _("Display width (%)"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newControl = $('<input id="editSwitchButtonDisplayWidth" name="editSwitchButtonDisplayWidth" data-slider-id="editSwitchButtonDisplayWidthSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                                newInnerDiv.append(newControl);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);

                                                newFormRow.find('#editSwitchButtonDisplayWidth').bootstrapSlider({
                                                    formatter: function(value) {
                                                       return value + "%";
                                                    },
                                                    value: styleParameters.displayWidth   
                                                });

                                                newLabel = $('<label for="editSwitchButtonDisplayHeight" class="col-md-2 control-label"><?php echo _("Display height (%)"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newControl = $('<input id="editSwitchButtonDisplayHeight" name="editSwitchButtonDisplayHeight" data-slider-id="editSwitchButtonDisplayHeightSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                                newInnerDiv.append(newControl);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);

                                                newFormRow.find('#editSwitchButtonDisplayHeight').bootstrapSlider({
                                                    formatter: function(value) {
                                                       return value + "%";
                                                    },
                                                    value: styleParameters.displayHeight    
                                                });

                                                newFormRow = $('<div class="row"></div>');
                                                $('#specificParamsM').append(newFormRow);

                                                newLabel = $('<label for="editSwitchButtonNeonEffect" class="col-md-2 control-label"><?php echo _("Neon effect"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newControl = $('<select id="editSwitchButtonNeonEffect" name="editSwitchButtonNeonEffect" class="form-control"></select>');
                                                newControl.append('<option value="never"><?php echo _("Never"); ?></option>');
                                                newControl.append('<option value="onStatus"><?php echo _("When on"); ?></option>');
                                                newControl.append('<option value="offStatus"><?php echo _("When off"); ?></option>');
                                                newControl.append('<option value="always"><?php echo _("Always"); ?></option>');
                                                newControl.val(styleParameters.neonEffect);
                                                newInnerDiv.append(newControl);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);
																							///////////////////INSERIMENTO CKEDITOR KNOB WIDGET////////////////
														$.ajax({
															url: "../controllers/getTrustedUsers.php",
															data: {

															},
															type: "POST",
															async: true,
															dataType: 'json',
															success: function(data) {
																if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
																	//Nuova riga
																	console.log('TRUSTED');
																	//Source Selection
																	newFormRow = $('<div class="row"></div>');
																	$("#specificParamsMRight").append(newFormRow);
																	newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
																	newInnerDiv = $('<div class="col-md-3"></div>');
																	newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
																	newSelect.append('<option value="no">no</option>');
																	newSelect.append('<option value="ckeditor">yes</option>');
																	newInnerDiv.append(newSelect);
																	newFormRow.append(newLabel);
																	newFormRow.append(newInnerDiv);
																	newLabel.show();
																	newInnerDiv.show();
																	newSelect.show();

																	//Nuova riga Tab Destro: CKEDITOR
																	//Modalità del widget (none, map, gis, link esterno)
																	newFormRow = $('<div class="row" id="ck_editor"></div>');
																	$("#specificParamsMRight").append(newFormRow);
																	newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
																	newInnerDiv = $('<div class="col-md-12"></div>');
																	newBox = $('<div id="widgetEditor">');
																	newBox.append('<div class="row">');
																	newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
																	newBox.append('<?= _("Here you can insert Javascript code to be executed in the widget. Please save your script by clicking on the save button on the bottom.")?>');
																	newBox.append('</div></div>');
																	newBox.append('<div class="row">');
																	newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
																	newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
																	newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
																	newBox.append('</div></div></div>');
																	newInnerDiv.append(newBox);
																	//newFormRow.append(newLabel);
																	newFormRow.append(newInnerDiv);
																	//newLabel.show();
																	newInnerDiv.show();
																	//newInput.show();
																	$('#ck_editor').hide();

																	var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
																		allowedContent: true,
																		language: 'en',
																		contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
																		width: '100%'
																	});

																	let par = (JSON.stringify(currentParams));
																	if (par && !par.includes("latLng") && !par.includes("null")) {
																		$("#parametersM").val(JSON.stringify(currentParams));
																		if (currentParams['mode'] == "ckeditor") {
																			$('#ck_editor').show();
																			$('#enableCKEditor').val("ckeditor");
																			// if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
																			if (code != null && code != "null") {
																				var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
																				var text_ck_area = document.createElement("text_ck_area");
																				text_ck_area.innerHTML = codeForCKEditor;
																				var newInfoDecoded = text_ck_area.innerText;
																				//    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
																				CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
																			}
																		}
																	}

																	$('#enableCKEditor').change(function() {
																		if ($('#enableCKEditor').val() === "ckeditor") {
																			$('#ck_editor').show();
																			//if (rowParams.substring(0, 8) != "https://" && rowParams.substring(0, 7) != "http://" && rowParams.substring(0, 3) != "NR_") {
																			if (code != null && code != "null") {
																				var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
																				var text_ck_area = document.createElement("text_ck_area");
																				text_ck_area.innerHTML = codeForCKEditor;
																				var newInfoDecoded = text_ck_area.innerText;
																				CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
																			}
																			currentParams.mode =  "ckeditor";
																			//$("#parametersM").val('{"mode": "ckeditor"}');
																			$("#parametersM").val(JSON.stringify(currentParams));
																		} else {
																			$('#ck_editor').hide();
																			//$("#parametersM").val('');
																			currentParams.mode =  "";
																			$("#parametersM").val(JSON.stringify(currentParams));
																		}
																	});

																	$('#sourceSelectionSaveBtn').click(function() {
																		var button = $(this);
																		$('#widgetInfoModalFooter div.compactMenuMsg').show();
																		$('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');

																		var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();
																		/*if (newInfo.trim() === '') {
																			newInfo = null;
																		}   */

																		$.ajax({
																			url: "../controllers/updateWidget.php",
																			data: {
																				action: "updateCkEditor",
																				widgetName: name_widget_m,
																				//    newText: newInfoDecoded
																				newText: newInfo
																			},
																			type: "POST",
																			async: true,
																			dataType: 'json',
																			success: function(data) {
																				if (data.detail === 'Ok') {
																					alert('Saved!');
																				} else {
																					alert('Error');
																				}
																			},
																			error: function(errorData) {
																				alert('Error');
																			}
																		});
																	});
																}
															},
															error: function(errorData) {
																console.log('Error in retrieving Trusted Users.');
															}
														});
														///////////////////////
                                            break;
                                            
                                            case "widgetKnob":
                                            $("#parametersM").val(JSON.stringify(currentParams));
                                            $('#link_help_modal-add-widget-m').css("display", "");
                                            $('#inputTitleWidgetM').attr('disabled', false);
                                            $("label[for='inputTitleWidgetM']").html("Title");
                                            $("label[for='inputColorWidgetM']").html("Background color");
                                            $('#inputColorWidgetM').attr('disabled', false);
                                            $('#inputColorWidgetM').prop('required', true);
                                            $('#inputFontSizeM').attr('disabled', false);
                                            $('#inputFontSizeM').prop('required', true);
                                            $('label[for=inputFontSizeM]').html('Display font size');
                                            $('#inputFontSizeM').val(data.fontSize);
                                            $('#inputFontColorM').attr('disabled', false);
                                            $('#inputFontColorM').prop('required', true);
                                            $('#inputFontColorM').val(data.fontColor);
                                            $('#select-frameColor-Widget-m').attr('disabled', false);
                                            $('#select-frameColor-Widget-m').prop('required', true);
                                            $('#select-IntTemp-Widget-m').val(-1);
                                            $('#select-IntTemp-Widget-m').prop('disabled', true);
                                            $('#select-IntTemp-Widget-m').prop('required', false);
                                            $('#inputFreqWidgetM').val('');
                                            $('#inputFreqWidgetM').prop('disabled', true);
                                            $('#inputFreqWidgetM').prop('required', false);
                                            $('#inputComuneWidgetM').attr('disabled', true);
                                            $('#urlWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').prop('required', true);
                                            $('#inputUdmWidgetM').prop("required", false);
                                            $('#inputUdmWidgetM').attr("disabled", true);
                                            $('#inputUdmWidgetM').val("");
                                            $('#inputUdmPositionM').prop("required", false);
                                            $('#inputUdmPositionM').attr("disabled", true);
                                            $('#inputUdmPositionM').val(-1);

                                            $("#inputFontSizeM").val(data['fontSize']);
                                            $("#inputFontColorM").val(data['fontColor']);

                                            //Rimozione eventuali campi del subform general per widget process
                                            removeWidgetProcessGeneralFields("editWidget");

                                            //Parametri specifici del widget
                                            $('#specificParamsM .row').remove(); 

                                            newFormRow = $('<div class="row"></div>');

                                            newLabel = $('<label for="editKnobIndicatorRadius" class="col-md-2 control-label"><?php echo _("Indicator radius (%)"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            var newControl = $('<input id="editKnobIndicatorRadius" name="editKnobIndicatorRadius" data-slider-id="editKnobIndicatorRadiusSlider" type="text" data-slider-min="1" data-slider-max="100" data-slider-step="1"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newLabel = $('<label for="editKnobDisplayRadius" class="col-md-2 control-label"><?php echo _("Value display radius (%)"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            var newControl = $('<input id="editKnobDisplayRadius" name="editKnobDisplayRadius" data-slider-id="editKnobDisplayRadiusSlider" type="text" data-slider-min="1" data-slider-max="100" data-slider-step="1"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            $('#specificParamsM').append(newFormRow);

                                            newFormRow.find('#editKnobIndicatorRadius').bootstrapSlider({
                                                formatter: function(value) {
                                                   return value + "%";
                                                },
                                                value: styleParameters.indicatorRadius    
                                            });

                                            newFormRow.find('#editKnobDisplayRadius').bootstrapSlider({
                                                formatter: function(value) {
                                                   return value + "%";
                                                },
                                                value: styleParameters.displayRadius    
                                            });

                                            newFormRow = $('<div class="row"></div>');
                                            newLabel = $('<label for="editKnobStartAngle" class="col-md-2 control-label"><?php echo _("Start angle"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<input type="text" name="editKnobStartAngle" class="form-control" value="' + styleParameters.startAngle + '" id="editKnobStartAngle"/>');
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newLabel = $('<label for="editKnobEndAngle" class="col-md-2 control-label"><?php echo _("End angle"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newInput = $('<input type="text" name="editKnobEndAngle" class="form-control" value="' + styleParameters.endAngle + '" id="editKnobEndAngle"/>');
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            $('#specificParamsM').append(newFormRow);

                                            newFormRow = $('<div class="row"></div>');
                                            
                                            newLabel = $('<label for="editKnobDisplayColor" class="col-md-2 control-label"><?php echo _("Display color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editKnobDisplayColor"><input type="text" name="editKnobDisplayColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.displayColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            $('#specificParamsM').append(newFormRow);

                                            newFormRow = $('<div class="row"></div>');
                                            newLabel = $('<label for="editKnobMinValue" class="col-md-2 control-label"><?php echo _("Min value"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<input type="text" name="editKnobMinValue" class="form-control" id="editKnobMinValue" data-param="editKnobMinValue" required/>');
                                            newInput.val(currentParams.minValue);
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newLabel = $('<label for="editKnobMaxValue" class="col-md-2 control-label"><?php echo _("Max value"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<input type="text" name="editKnobMaxValue" class="form-control" id="editKnobMaxValue" data-param="editKnobMaxValue" required/>');
                                            newInput.val(currentParams.maxValue);
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            newLabel = $('<label for="editKnobLabelsFontSize" class="col-md-2 control-label"><?php echo _("Labels font size"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<input type="text" name="editKnobLabelsFontSize" class="form-control" id="editKnobLabelsFontSize" value="' + styleParameters.labelsFontSize + '" data-param="editKnobLabelsFontSize"/>');
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newLabel = $('<label for="editKnobLabelsFontColor" class="col-md-2 control-label"><?php echo _("Labels font color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editKnobLabelsFontColor"><input type="text" name="editKnobLabelsFontColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.labelsFontColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            newLabel = $('<label for="editKnobIncreaseValue" class="col-md-2 control-label"><?php echo _("Increase value"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<input type="text" name="editKnobIncreaseValue" class="form-control" id="editKnobIncreaseValue" value="' + styleParameters.increaseValue + '" data-param="editKnobIncreaseValue"/>');
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            $('#specificParamsM').append(newFormRow);

                                            //Contenitore per tabella delle soglie
                                            var editKnobColorsTableContainer = $('<div id="editKnobColorsTableContainer" class="row rowCenterContent"></div>');
                                            var editKnobColorsTable = $("<table id='editKnobColorsTable' class='table table-bordered table-condensed thrRangeTable'><col style='width:25%'><col style='width:25%'><col style='width:40%'><col style='width:10%'><tr><td>Min</td><td>Max</td><td>Range color</td><td><a href='#'><i class='fa fa-plus' style='font-size:24px;color:#337ab7'></i></a></td></tr></table>");
                                            editKnobColorsTableContainer.append(editKnobColorsTable);
                                            $("#specificParamsM").append(editKnobColorsTableContainer);

                                            $('#editKnobMinValue').on('input', updateEditKnobParams);
                                            $('#editKnobMaxValue').on('input', updateEditKnobParams);
                                            
                                            if(currentParams.continuousRanges !== null)
                                            {
                                                if(currentParams.continuousRanges.length > 0)
                                                {
                                                    for(var key in currentParams.continuousRanges)
                                                    {
                                                        newTableRow = $('<tr></tr>');
                                                        newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="min">' + currentParams.continuousRanges[key].min + '</a></td>');
                                                        newTableCell.find('a').editable();
                                                        newTableRow.append(newTableCell);

                                                        newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="max">' + currentParams.continuousRanges[key].max + '</a></td>');
                                                        newTableCell.find('a').editable();
                                                        newTableRow.append(newTableCell);

                                                        newTableCell = $('<td><div class="input-group colorPicker" data-param="color"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                        newTableRow.append(newTableCell);
                                                        newTableRow.find('div.colorPicker').colorpicker({color: currentParams.continuousRanges[key].color, format: "rgba"});
                                                        //UPDATE DEI PARAMETRI AL CLOSE PICKER
                                                        newTableRow.find('div.colorPicker').on('hidePicker', updateEditKnobParams);

                                                        newTableCell = $('<td><a><i class="fa fa-close" style="font-size:24px;color:red"></i></a></td>');
                                                        //ELIMINAZIONE RIGA 
                                                        newTableCell.find('i').click(delEditKnobRange);
                                                        newTableRow.append(newTableCell);
                                                        //UPDATE DEI PARAMETRI AL CHANGE VALUES
                                                        newTableRow.find('a.toBeEdited').on('save', updateEditKnobParams);

                                                        $("#editKnobColorsTable").append(newTableRow);
                                                    }
                                                }
                                            }

                                            $("#editKnobColorsTable i.fa-plus").click(function(){
                                                var newRangeObj = {
                                                    min: 0,
                                                    max: 0,
                                                    color: "#009ddc"
                                                };

                                                if(currentParams.continuousRanges === null)
                                                {
                                                    currentParams.continuousRanges = [];
                                                }

                                                currentParams.continuousRanges.push(newRangeObj);
                                                $('#parametersM').val(JSON.stringify(currentParams));

                                                var newTableRow = $('<tr></tr>');
                                                newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="min">0</a></td>');
                                                newTableCell.find('a').editable();
                                                newTableRow.append(newTableCell);

                                                newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="max">0</a></td>');
                                                newTableCell.find('a').editable();
                                                newTableRow.append(newTableCell);

                                                newTableCell = $('<td><div class="input-group colorPicker" data-param="color"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                newTableRow.append(newTableCell);
                                                newTableRow.find('div.colorPicker').colorpicker({color: "#009ddc", format: "rgba"});
                                                //UPDATE DEI PARAMETRI AL CLOSE PICKER
                                                newTableRow.find('div.colorPicker').on('hidePicker', updateEditKnobParams);

                                                newTableCell = $('<td><a><i class="fa fa-close" style="font-size:24px;color:red"></i></a></td>');
                                                //ELIMINAZIONE RIGA 
                                                newTableCell.find('i').click(delEditKnobRange);
                                                newTableRow.append(newTableCell);
                                                //UPDATE DEI PARAMETRI AL CHANGE VALUES
                                                newTableRow.find('a.toBeEdited').on('save', updateEditKnobParams);

                                                $("#editKnobColorsTable").append(newTableRow);
                                            });

                                            function updateEditKnobParams(e, params)
                                            {
                                                var param = $(this).attr('data-param');
                                                var rowIndex = $(this).parents("tr").index() - 1;
                                                var newValue = null;

                                                switch(param)
                                                {
                                                    case "editKnobMinValue":
                                                        newValue = $(this).val();
                                                        currentParams.minValue = newValue;
                                                        break;

                                                    case "editKnobMaxValue":
                                                        newValue = $(this).val();
                                                        currentParams.maxValue = newValue;
                                                        break;

                                                    case "min":
                                                        newValue = params.newValue;
                                                        currentParams.continuousRanges[rowIndex].min = newValue;
                                                        break;

                                                    case "max":
                                                        newValue = params.newValue;
                                                        currentParams.continuousRanges[rowIndex].max = newValue;
                                                        break;

                                                    case "color":
                                                        newValue = $(this).colorpicker('getValue');
                                                        currentParams.continuousRanges[rowIndex].color = newValue;
                                                        break;
                                                        
                                                    case "editKnobDataPrecision":
                                                        newValue = parseInt($(this).val());
                                                        currentParams.dataPrecision = newValue;
                                                        break;    
                                                }

                                                $('#parametersM').val(JSON.stringify(currentParams));
                                            }

                                            function delEditKnobRange(e)
                                            {
                                                var delIndex = parseInt($(this).parents('tr').index() - 1);

                                                //Cancellazione della riga dalla tabella 
                                                $(this).parents('tr').remove();

                                                //Aggiornamento JSON parametri
                                                currentParams.continuousRanges.splice(delIndex, 1);
                                                if(currentParams.continuousRanges.length === 0)
                                                {
                                                    currentParams.continuousRanges = null;
                                                }

                                                $('#parametersM').val(JSON.stringify(currentParams));
                                            }

											/////////CK EDITOR NumericKeyboard
											$.ajax({
                                                url: "../controllers/getTrustedUsers.php",
                                                data: {

                                                },
                                                type: "POST",
                                                async: true,
                                                dataType: 'json',
                                                success: function (data) {
                                                    if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
                                                        //Nuova riga
														console.log('TRUSTED');
                                                        //Source Selection
                                                        newFormRow = $('<div class="row"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                                        newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
                                                        newSelect.append('<option value="no">no</option>');
                                                        newSelect.append('<option value="ckeditor">yes</option>');
                                                        newInnerDiv.append(newSelect);
                                                        newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        newLabel.show();
                                                        newInnerDiv.show();
                                                        newSelect.show();

                                                        //Nuova riga Tab Destro: CKEDITOR
                                                        //Modalità del widget (none, map, gis, link esterno)
                                                        newFormRow = $('<div class="row" id="ck_editor"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-12"></div>');
                                                        newBox = $('<div id="widgetEditor">');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
                                                        newBox.append('<?= _("Here you can insert Javascript code to be executed in the widget. Please save your script by clicking on the save button on the bottom.")?>');
                                                        newBox.append('</div></div>');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
                                                        newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
                                                        newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
                                                        newBox.append('</div></div></div>');
                                                        newInnerDiv.append(newBox);
                                                        //newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        //newLabel.show();
                                                        newInnerDiv.show();
                                                        //newInput.show();
                                                        $('#ck_editor').hide();

                                                        var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
                                                            allowedContent: true,
                                                            language: 'en',
                                                            contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
                                                            width: '100%'
                                                        });

                                                        let par = (JSON.stringify(currentParams));
                                                        if (par && !par.includes("latLng") && !par.includes("null")) {
                                                            $("#parametersM").val(JSON.stringify(currentParams));
                                                            if (currentParams['mode'] == "ckeditor") {
                                                                $('#ck_editor').show();
                                                                $('#enableCKEditor').val("ckeditor");
                                                                // if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    //    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                            }
                                                        }

                                                        $('#enableCKEditor').change(function () {
                                                            if ($('#enableCKEditor').val() === "ckeditor") {
                                                                $('#ck_editor').show();
                                                                //if (rowParams.substring(0, 8) != "https://" && rowParams.substring(0, 7) != "http://" && rowParams.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                                //$("#parametersM").val('{"mode": "ckeditor","continuousRanges":0}');
																currentParams.mode = "ckeditor"; 
																$("#parametersM").val(JSON.stringify(currentParams));
                                                            } else {
                                                                $('#ck_editor').hide();
																currentParams.mode = "";
																$("#parametersM").val(JSON.stringify(currentParams));
                                                                //$("#parametersM").val('');
																//$("#parametersM").val('{"continuousRanges":0}');
                                                            }
                                                        });

                                                        $('#sourceSelectionSaveBtn').click(function () {
                                                            var button = $(this);
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').show();
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');

                                                            var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();
                                                            /*if (newInfo.trim() === '') {
                                                                newInfo = null;
                                                            }   */

                                                            $.ajax({
                                                                url: "../controllers/updateWidget.php",
                                                                data: {
                                                                    action: "updateCkEditor",
                                                                    widgetName: name_widget_m,
                                                                    //    newText: newInfoDecoded
                                                                    newText: newInfo
                                                                },
                                                                type: "POST",
                                                                async: true,
                                                                dataType: 'json',
                                                                success: function (data) {
                                                                    if (data.detail === 'Ok') {
                                                                        alert('Saved!');
                                                                    } else {
                                                                        alert('Error');
                                                                    }
                                                                },
                                                                error: function (errorData) {
                                                                    alert('Error');
                                                                }
                                                            });
                                                        });
                                                    }
                                                },
                                                error: function (errorData) {
                                                    console.log('Error in retrieving Trusted Users.');
                                                }
                                            });
											///////////////////////
											//////////////////////////
                                            break;				
/////////////////////////////////INSERT widgetDeviceTable /////////////////								
									case "widgetDeviceTable":
                                        //console.log('widgetDeviceTable 2');
                                       /* $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').attr('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        
                                        //Campo di registrazione widget sul Notificatore
                                        editWidgetGeneratorRegisterField(data['notificatorRegistered'], data['notificatorEnabled'], data['param_w']);*/
                                        //////////////////////////////
                                        /*var codeForCKEditorDT = $('<div>').text('test').html();
                                        //var text_ck_area = document.createElement("text_ck_area");
                                        //text_ck_area.innerHTML = codeForCKEditor;
                                        //var newInfoDecoded = text_ck_area.innerText;
                                         //CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                         //
                                         //
                                         $('#deviceTableEditorSM').css('display','inline');
                                         $('#deviceTableEditorSM').append(codeForCKEditorDT);*/

                                        //////
										$.ajax({
                                                url: "../controllers/getTrustedUsers.php",
                                                data: {

                                                },
                                                type: "POST",
                                                async: true,
                                                dataType: 'json',
                                                success: function (data) {
                                                    // console.log('TRUSTED 0');
                                                    if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
                                                        //Nuova riga
														
                                                        //Source Selection
                                                        newFormRow = $('<div class="row"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                                        newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
                                                        newSelect.append('<option value="no">no</option>');
                                                        newSelect.append('<option value="ckeditor">yes</option>');
                                                        newInnerDiv.append(newSelect);
                                                        newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        newLabel.show();
                                                        newInnerDiv.show();
                                                        newSelect.show();

                                                        //Nuova riga Tab Destro: CKEDITOR
                                                        //Modalità del widget (none, map, gis, link esterno)
                                                        newFormRow = $('<div class="row" id="ck_editor"></div>');
                                                        // console.log(newFormRow);
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-12"></div>');
                                                        newBox = $('<div id="widgetEditor">');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
                                                        newBox.append('<?= _("Here you can insert Javascript code to be executed in the widget. Please save your script by clicking on the save button on the bottom.")?>');
                                                        newBox.append('</div></div>');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
                                                        newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
                                                        newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
                                                        newBox.append('</div></div></div>');
                                                        newInnerDiv.append(newBox);
                                                        //newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        //newLabel.show();
                                                        newInnerDiv.show();
                                                        //newInput.show();
                                                        $('#ck_editor').hide();

                                                        var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
                                                            allowedContent: true,
                                                            language: 'en',
                                                            contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
                                                            width: '100%'
                                                        });

                                                        let par = (JSON.stringify(currentParams));
                                                        if (par && !par.includes("latLng") && !par.includes("null")) {
                                                            $("#parametersM").val(JSON.stringify(currentParams));
                                                            if (currentParams['mode'] == "ckeditor") {
                                                                $('#ck_editor').show();
                                                                $('#enableCKEditor').val("ckeditor");
                                                                if (code != null && code != "null") {
                                                                   // var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var codeForCKEditor = $('<div>').text(code).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                            }
                                                        }

                                                        $('#enableCKEditor').change(function () {
                                                            if ($('#enableCKEditor').val() === "ckeditor") {
                                                                $('#ck_editor').show();
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                                $("#parametersM").val('{"mode": "ckeditor"}');
                                                            } else {
                                                                $('#ck_editor').hide();
                                                                $("#parametersM").val('');
                                                            }
                                                        });

                                                        $('#sourceSelectionSaveBtn').click(function () {
                                                            var button = $(this);
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').show();
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');
                                                            var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();


                                                            $.ajax({
                                                                url: "../controllers/updateWidget.php",
                                                                data: {
                                                                    action: "updateCkEditor",
                                                                    widgetName: name_widget_m,
                                                                    newText: newInfo
                                                                },
                                                                type: "POST",
                                                                async: true,
                                                                dataType: 'json',
                                                                success: function (data) {
                                                                    if (data.detail === 'Ok') {
                                                                        alert('Saved!');
                                                                    } else {
                                                                        alert('Error');
                                                                    }
                                                                },
                                                                error: function (errorData) {
                                                                    alert('Error');
                                                                }
                                                            });
                                                        });
                                                    }
                                                },
                                                error: function (errorData) {
                                                    console.log('Error in retrieving Trusted Users.');
                                                }
                                            });
                                        break;
										///////////ADD CKEDITOR
										case "widgetEvent":
											console.log('INTO WIDGET EVENT');
											console.log ('END PART 1');
											$.ajax({
															url: "../controllers/getTrustedUsers.php",
															data: { },
															type: "POST",
															async: true,
															dataType: 'json',
															success: function (data) {
																if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
																	//Nuova riga
																	console.log('TRUSTED');
																	//Source Selection
																	newFormRow = $('<div class="row"></div>');
																	$("#specificParamsMRight").append(newFormRow);
																	newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
																	newInnerDiv = $('<div class="col-md-3"></div>');
																	newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
																	newSelect.append('<option value="no">no</option>');
																	newSelect.append('<option value="ckeditor">yes</option>');
																	newInnerDiv.append(newSelect);
																	newFormRow.append(newLabel);
																	newFormRow.append(newInnerDiv);
																	newLabel.show();
																	newInnerDiv.show();
																	newSelect.show();

																	//Nuova riga Tab Destro: CKEDITOR
																	//Modalità del widget (none, map, gis, link esterno)
																	newFormRow = $('<div class="row" id="ck_editor"></div>');
																	$("#specificParamsMRight").append(newFormRow);
																	newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
																	newInnerDiv = $('<div class="col-md-12"></div>');
																	newBox = $('<div id="widgetEditor">');
																	newBox.append('<div class="row">');
																	newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
																	newBox.append('<?= _("Here you can insert Javascript code to be executed in the widget. Please save your script by clicking on the save button on the bottom.")?>');
																	newBox.append('</div></div>');
																	newBox.append('<div class="row">');
																	newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
																	newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
																	newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
																	newBox.append('</div></div></div>');
																	newInnerDiv.append(newBox);
																	//newFormRow.append(newLabel);
																	newFormRow.append(newInnerDiv);
																	//newLabel.show();
																	newInnerDiv.show();
																	//newInput.show();
																	$('#ck_editor').hide();

																	var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
																		allowedContent: true,
																		language: 'en',
																		contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
																		width: '100%'
																	});

																	let par = (JSON.stringify(currentParams));
																	if (par && !par.includes("latLng") && !par.includes("null")) {
																		$("#parametersM").val(JSON.stringify(currentParams));
																		if (currentParams['mode'] == "ckeditor") {
																			$('#ck_editor').show();
																			$('#enableCKEditor').val("ckeditor");
																			if (code != null && code != "null") {
																				var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
																				var text_ck_area = document.createElement("text_ck_area");
																				text_ck_area.innerHTML = codeForCKEditor;
																				var newInfoDecoded = text_ck_area.innerText;
																				CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
																			}
																		}
																	}

																	$('#enableCKEditor').change(function () {
																		if ($('#enableCKEditor').val() === "ckeditor") {
																			$('#ck_editor').show();
																			if (code != null && code != "null") {
																				var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
																				var text_ck_area = document.createElement("text_ck_area");
																				text_ck_area.innerHTML = codeForCKEditor;
																				var newInfoDecoded = text_ck_area.innerText;
																				CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
																			}
																			$("#parametersM").val('{"mode": "ckeditor"}');
																		} else {
																			$('#ck_editor').hide();
																			$("#parametersM").val('');
																		}
																	});

																	$('#sourceSelectionSaveBtn').click(function () {
																		var button = $(this);
																		$('#widgetInfoModalFooter div.compactMenuMsg').show();
																		$('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');
																		var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();


																		$.ajax({
																			url: "../controllers/updateWidget.php",
																			data: {
																				action: "updateCkEditor",
																				widgetName: name_widget_m,
																				newText: newInfo
																			},
																			type: "POST",
																			async: true,
																			dataType: 'json',
																			success: function (data) {
																				if (data.detail === 'Ok') {
																					alert('Saved!');
																				} else {
																					alert('Error');
																				}
																			},
																			error: function (errorData) {
																				alert('Error');
																			}
																		});
																	});
																}
															},
															error: function (errorData) {
																console.log('Error in retrieving Trusted Users.');
															}
														});
											 break;

											case "widgetMultiChoice":
												$("#inputFontSizeM").val(data['fontSize']);
												$("#inputFontColorM").val(data['fontColor']);
												$("#inputFontFamilyWidgetM").val(data['fontFamily']);
												$("#widgetFontColorM").css("background-color", data['fontColor']);
												$("#widgetFontColorPickerContainerM").colorpicker('setValue', data['fontColor']);
												break;
                                        }
                                        
                                    }
                                    else
                                    {
                                        //Caso widget attuatori su broker
                                    $('#widgetCategoryM').html("Actuator");
                                    $('#widgetCategoryHiddenM').val("actuator");
                                    $('#actuatorTargetM').text('Context broker');
                                    $('#widgetActuatorTargetM').val('broker');
                                    $('#entityIdM').html(entityJson.id);
                                    $('#entityTypeM').html(entityJson.type);
                                    $('#entityDescM').html(entityJson.entityDesc.value);
                                    $('#entityAttrNameM').html(attributeName);
                                    $('#entityAttrDescM').html(entityJson[attributeName].metadata.attrDesc.value);
                                    $('#entityAttrTypeM').html(entityJson[attributeName].type);
                                    $('#widgetActuatorTypeShownM').html(widgetTypeM);
                                    $('#widgetActuatorTypeM').val(widgetTypeM);
                                    
                                    $('#entityIdRowM').show();
                                    $('#entityTypeRowM').show();
                                    $('#entityDescRowM').show();
                                    $('#entityAttrNameRowM').show();
                                    $('#entityAttrDescRowM').show();
                                    $('#entityAttrTypeRowM').show();
                                    $('#widgetActuatorTypeRowM').show();
                                    
                                    if(styleParamsRaw !== null) 
                                    {
                                        styleParameters = JSON.parse(styleParamsRaw);
                                    }

                                    if(paramsRaw !== null) 
                                    {
                                        currentParams = JSON.parse(paramsRaw);
                                    }
            
                                    switch($('#widgetActuatorTypeM').val())
                                    {
                                        case "widgetNumericKeyboard":
                                            $("#parametersM").val(JSON.stringify(currentParams));
                                            $('#link_help_modal-add-widget-m').css("display", "");
                                            $('#inputTitleWidgetM').attr('disabled', false);
                                            $("label[for='inputTitleWidgetM']").html("Title");
                                            $("label[for='inputColorWidgetM']").html("Background color");
                                            $('#inputColorWidgetM').attr('disabled', false);
                                            $('#inputColorWidgetM').prop('required', true);
                                            $('#inputFontSizeM').attr('disabled', true);
                                            $('#inputFontSizeM').prop('required', false);
                                            $('#inputFontColorM').attr('disabled', true);
                                            $('#inputFontColorM').prop('required', false);
                                            $('#select-frameColor-Widget-m').attr('disabled', false);
                                            $('#select-frameColor-Widget-m').prop('required', true);
                                            $('#select-IntTemp-Widget-m').val(-1);
                                            $('#select-IntTemp-Widget-m').prop('disabled', true);
                                            $('#select-IntTemp-Widget-m').prop('required', false);
                                            $('#inputFreqWidgetM').val('');
                                            $('#inputFreqWidgetM').prop('disabled', true);
                                            $('#inputFreqWidgetM').prop('required', false);
                                            $('#inputComuneWidgetM').attr('disabled', true);
                                            $('#urlWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').prop('required', true);
                                            $('#inputUdmWidgetM').prop("required", false);
                                            $('#inputUdmWidgetM').attr("disabled", true);
                                            $('#inputUdmWidgetM').val("");
                                            $('#inputUdmPositionM').prop("required", false);
                                            $('#inputUdmPositionM').attr("disabled", true);
                                            $('#inputUdmPositionM').val(-1);

                                            //Rimozione eventuali campi del subform general per widget process
                                            removeWidgetProcessGeneralFields("editWidget");

                                            //Parametri specifici del widget
                                            $('#specificParamsM .row').remove();
											/////////CK EDITOR NumericKeyboard
											$.ajax({
                                                url: "../controllers/getTrustedUsers.php",
                                                data: {

                                                },
                                                type: "POST",
                                                async: true,
                                                dataType: 'json',
                                                success: function (data) {
                                                    if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
                                                        //Nuova riga
														console.log('TRUSTED');
                                                        //Source Selection
                                                        newFormRow = $('<div class="row"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                                        newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
                                                        newSelect.append('<option value="no">no</option>');
                                                        newSelect.append('<option value="ckeditor">yes</option>');
                                                        newInnerDiv.append(newSelect);
                                                        newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        newLabel.show();
                                                        newInnerDiv.show();
                                                        newSelect.show();

                                                        //Nuova riga Tab Destro: CKEDITOR
                                                        //Modalità del widget (none, map, gis, link esterno)
                                                        newFormRow = $('<div class="row" id="ck_editor"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-12"></div>');
                                                        newBox = $('<div id="widgetEditor">');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
                                                        newBox.append('<?= _("Here you can insert Javascript code to be executed in the widget. Please save your script by clicking on the save button on the bottom.")?>');
                                                        newBox.append('</div></div>');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
                                                        newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
                                                        newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
                                                        newBox.append('</div></div></div>');
                                                        newInnerDiv.append(newBox);
                                                        //newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        //newLabel.show();
                                                        newInnerDiv.show();
                                                        //newInput.show();
                                                        $('#ck_editor').hide();

                                                        var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
                                                            allowedContent: true,
                                                            language: 'en',
                                                            contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
                                                            width: '100%'
                                                        });

                                                        let par = (JSON.stringify(currentParams));
                                                        if (par && !par.includes("latLng") && !par.includes("null")) {
                                                            $("#parametersM").val(JSON.stringify(currentParams));
                                                            if (currentParams['mode'] == "ckeditor") {
                                                                $('#ck_editor').show();
                                                                $('#enableCKEditor').val("ckeditor");
                                                                // if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    //    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                            }
                                                        }

                                                        $('#enableCKEditor').change(function () {
                                                            if ($('#enableCKEditor').val() === "ckeditor") {
                                                                $('#ck_editor').show();
                                                                //if (rowParams.substring(0, 8) != "https://" && rowParams.substring(0, 7) != "http://" && rowParams.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                                $("#parametersM").val('{"mode": "ckeditor"}');
                                                            } else {
                                                                $('#ck_editor').hide();
                                                                $("#parametersM").val('');
                                                            }
                                                        });

                                                        $('#sourceSelectionSaveBtn').click(function () {
                                                            var button = $(this);
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').show();
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');

                                                            var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();
                                                            /*if (newInfo.trim() === '') {
                                                                newInfo = null;
                                                            }   */

                                                            $.ajax({
                                                                url: "../controllers/updateWidget.php",
                                                                data: {
                                                                    action: "updateCkEditor",
                                                                    widgetName: name_widget_m,
                                                                    //    newText: newInfoDecoded
                                                                    newText: newInfo
                                                                },
                                                                type: "POST",
                                                                async: true,
                                                                dataType: 'json',
                                                                success: function (data) {
                                                                    if (data.detail === 'Ok') {
                                                                        alert('Saved!');
                                                                    } else {
                                                                        alert('Error');
                                                                    }
                                                                },
                                                                error: function (errorData) {
                                                                    alert('Error');
                                                                }
                                                            });
                                                        });
                                                    }
                                                },
                                                error: function (errorData) {
                                                    console.log('Error in retrieving Trusted Users.');
                                                }
                                            });
										///////////////////////
                                            break;
                                        
                                        case "widgetImpulseButton":
                                            $("#parametersM").val(JSON.stringify(currentParams));
                                            $('#link_help_modal-add-widget-m').css("display", "");
                                            $('#inputTitleWidgetM').attr('disabled', false);
                                            $("label[for='inputTitleWidgetM']").html("Title");
                                            $("label[for='inputColorWidgetM']").html("Background color");
                                            $('#inputColorWidgetM').attr('disabled', false);
                                            $('#inputColorWidgetM').prop('required', true);
                                            $('#inputFontSizeM').attr('disabled', true);
                                            $('#inputFontSizeM').prop('required', false);
                                            $('#inputFontColorM').attr('disabled', true);
                                            $('#inputFontColorM').prop('required', false);
                                            $('#select-frameColor-Widget-m').attr('disabled', false);
                                            $('#select-frameColor-Widget-m').prop('required', true);
                                            $('#select-IntTemp-Widget-m').val(-1);
                                            $('#select-IntTemp-Widget-m').prop('disabled', true);
                                            $('#select-IntTemp-Widget-m').prop('required', false);
                                            $('#inputFreqWidgetM').val('');
                                            $('#inputFreqWidgetM').prop('disabled', true);
                                            $('#inputFreqWidgetM').prop('required', false);
                                            $('#inputComuneWidgetM').attr('disabled', true);
                                            $('#urlWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').prop('required', true);
                                            $('#inputUdmWidgetM').prop("required", false);
                                            $('#inputUdmWidgetM').attr("disabled", true);
                                            $('#inputUdmWidgetM').val("");
                                            $('#inputUdmPositionM').prop("required", false);
                                            $('#inputUdmPositionM').attr("disabled", true);
                                            $('#inputUdmPositionM').val(-1);

                                            //Rimozione eventuali campi del subform general per widget process
                                            removeWidgetProcessGeneralFields("editWidget");

                                            //Parametri specifici del widget
                                            $('#specificParamsM .row').remove();
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            $('#specificParamsM').append(newFormRow);
                                            newLabel = $('<label for="editSwitchButtonTargetEntity" class="col-md-2 control-label">Target entity</label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<input id="editSwitchButtonTargetEntity" name="editSwitchButtonTargetEntity" class="form-control" type="text"/>');
                                            newControl.val(currentParams.targetEntity);
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            
                                            newLabel = $('<label for="editSwitchButtonTargetEntityAttribute" class="col-md-2 control-label">Target entity attribute</label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<input id="editSwitchButtonTargetEntityAttribute" name="editSwitchButtonTargetEntityAttribute" class="form-control" type="text"/>');
                                            newControl.val(currentParams.targetEntityAttribute);
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            $('#specificParamsM').append(newFormRow);
                                            newLabel = $('<label for="editSwitchButtonViewMode" class="col-md-2 control-label"><?php echo _("View mode"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            var newControl = $('<select id="editSwitchButtonViewMode" name="editSwitchButtonViewMode" class="form-control"></select>');
                                            newControl.append('<option value="emptyButton"><?php echo _("Empty button"); ?></option>');
                                            newControl.append('<option value="iconOnly"><?php echo _("Icon only"); ?></option>');
                                            newControl.append('<option value="textOnly"><?php echo _("Text only"); ?></option>');
                                            newControl.append('<option value="displayOnly"><?php echo _("Value display only"); ?></option>');
                                            newControl.append('<option value="iconAndText"><?php echo _("Icon and text"); ?></option>');
                                            newControl.append('<option value="iconAndDisplay"><?php echo _("Icon and value display"); ?></option>');
                                            newControl.append('<option value="displayAndText"><?php echo _("Display and text"); ?></option>');
                                            newControl.append('<option value="all"><?php echo _("Icon, text and value display"); ?></option>');
                                            newControl.val(styleParameters.viewMode);
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            
                                            newLabel = $('<label for="editSwitchButtonRadius" class="col-md-2 control-label"><?php echo _("Button radius (%)"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newControl = $('<input id="editSwitchButtonRadius" name="editSwitchButtonRadius" data-slider-id="editSwitchButtonRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newFormRow.find('#editSwitchButtonRadius').bootstrapSlider({
                                                formatter: function(value) {
                                                   return value + "%";
                                                },
                                                value: styleParameters.buttonRadius    
                                            });
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newLabel = $('<label for="editSwitchButtonBaseValue" class="col-md-2 control-label">Base value</label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<input id="editSwitchButtonBaseValue" name="editSwitchButtonBaseValue" class="form-control" type="text" value="' + currentParams.baseValue + '"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            
                                            newLabel = $('<label for="editSwitchButtonImpulseValue" class="col-md-2 control-label">Impulse value</label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<input id="editSwitchButtonImpulseValue" name="editSwitchButtonImpulseValue" class="form-control" type="text" value="' + currentParams.impulseValue + '"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newLabel = $('<label for="editSwitchButtonImpulseMode" class="col-md-2 control-label">Impulse mode</label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<select id="editSwitchButtonImpulseMode" name="editSwitchButtonImpulseMode" class="form-control"></select>');
                                            newControl.append('<option value="singlePress">Send impulse on release</option>');
                                            newControl.append('<option value="sequence">Send impulses until pressed</option>');
                                            newControl.val(currentParams.impulseMode);
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newLabel = $('<label for="editSwitchButtonColor" class="col-md-2 control-label"><?php echo _("Button color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonColor"><input type="text" name="editSwitchButtonColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.color, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv); 

                                            newLabel = $('<label for="editSwitchButtonClickColor" class="col-md-2 control-label"><?php echo _("Button color on click"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonClickColor"><input type="text" name="editSwitchButtonClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.clickColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);        
                                            
                                            newFormRow = $('<div class="row"></div>');
                                
                                            newLabel = $('<label for="editSwitchButtonSymbolColor" class="col-md-2 control-label"><?php echo _("Symbol color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonSymbolColor"><input type="text" name="editSwitchButtonSymbolColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.symbolColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv); 

                                            newLabel = $('<label for="editSwitchButtonSymbolClickColor" class="col-md-2 control-label"><?php echo _("Symbol color on click"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonSymbolClickColor"><input type="text" name="editSwitchButtonSymbolClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.symbolClickColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);        

                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                
                                            newLabel = $('<label for="editSwitchButtonTextColor" class="col-md-2 control-label"><?php echo _("Text color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonTextColor"><input type="text" name="editSwitchButtonTextColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.textColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv); 

                                            newLabel = $('<label for="editSwitchButtonTextClickColor" class="col-md-2 control-label"><?php echo _("Text color on click"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonTextClickColor"><input type="text" name="editSwitchButtonTextClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.textClickColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);        

                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            newLabel = $('<label for="editSwitchButtonTextFontSize" class="col-md-2 control-label"><?php echo _("Text font size"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<input type="text" id="editSwitchButtonTextFontSize" name="editSwitchButtonTextFontSize" class="form-control" value="' + styleParameters.textFontSize + '"></input>');
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv); 

                                            newLabel = $('<label for="editSwitchButtonDisplayFontSize" class="col-md-2 control-label"><?php echo _("Display font size"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<input type="text" id="editSwitchButtonDisplayFontSize" name="editSwitchButtonDisplayFontSize" class="form-control" value="' + styleParameters.displayFontSize +'"></input>');
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);        

                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                
                                            newLabel = $('<label for="editSwitchButtonDisplayFontColor" class="col-md-2 control-label"><?php echo _("Display text color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonDisplayFontColor"><input type="text" name="editSwitchButtonDisplayFontColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.displayFontColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv); 

                                            newLabel = $('<label for="editSwitchButtonDisplayFontClickColor" class="col-md-2 control-label"><?php echo _("Display text color on click"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonDisplayFontClickColor"><input type="text" name="editSwitchButtonDisplayFontClickColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.displayFontClickColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);        

                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newLabel = $('<label for="editSwitchButtonDisplayColor" class="col-md-2 control-label"><?php echo _("Display background color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonDisplayColor"><input type="text" name="editSwitchButtonDisplayColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.displayColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv); 
                                            
                                            newLabel = $('<label for="editSwitchButtonDisplayRadius" class="col-md-2 control-label"><?php echo _("Display radius (%)"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<input id="editSwitchButtonDisplayRadius" name="editSwitchButtonDisplayRadius" data-slider-id="editSwitchButtonDisplayRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newFormRow.find('#editSwitchButtonDisplayRadius').bootstrapSlider({
                                                formatter: function(value) {
                                                   return value + "%";
                                                },
                                                value: styleParameters.displayRadius   
                                            });
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            $('#specificParamsM').append(newFormRow);

                                            newLabel = $('<label for="editSwitchButtonDisplayWidth" class="col-md-2 control-label"><?php echo _("Display width (%)"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<input id="editSwitchButtonDisplayWidth" name="editSwitchButtonDisplayWidth" data-slider-id="editSwitchButtonDisplayWidthSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newFormRow.find('#editSwitchButtonDisplayWidth').bootstrapSlider({
                                                formatter: function(value) {
                                                   return value + "%";
                                                },
                                                value: styleParameters.displayWidth   
                                            });

                                            newLabel = $('<label for="editSwitchButtonDisplayHeight" class="col-md-2 control-label"><?php echo _("Display height (%)"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<input id="editSwitchButtonDisplayHeight" name="editSwitchButtonDisplayHeight" data-slider-id="editSwitchButtonDisplayHeightSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newFormRow.find('#editSwitchButtonDisplayHeight').bootstrapSlider({
                                                formatter: function(value) {
                                                   return value + "%";
                                                },
                                                value: styleParameters.displayHeight    
                                            });
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            $('#specificParamsM').append(newFormRow);
                                            newLabel = $('<label for="editSwitchButtonNeonEffect" class="col-md-2 control-label"><?php echo _("Neon effect"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<select id="editSwitchButtonNeonEffect" name="editSwitchButtonNeonEffect" class="form-control"></select>');
                                            newControl.append('<option value="never"><?php echo _("Never"); ?></option>');
                                            newControl.append('<option value="pressedStatus"><?php echo _("When pressed"); ?></option>');
                                            newControl.append('<option value="always"><?php echo _("Always"); ?></option>');
                                            newControl.val(styleParameters.neonEffect);
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            
                                            $('#editSwitchButtonBaseValue').change(function(){
                                                currentParams.baseValue = $('#editSwitchButtonBaseValue').val();
                                                $("#parametersM").val(JSON.stringify(currentParams));
                                            });
                                            
                                            $('#editSwitchButtonImpulseValue').change(function(){
                                                currentParams.impulseValue = $('#editSwitchButtonImpulseValue').val();
                                                $("#parametersM").val(JSON.stringify(currentParams));
                                            });
                                            
                                            $('#editSwitchButtonImpulseMode').change(function(){
                                                currentParams.impulseMode = $('#editSwitchButtonImpulseMode').val();
                                                $("#parametersM").val(JSON.stringify(currentParams));
                                            });
                                            
                                            $('#editSwitchButtonTargetEntity').change(function(){
                                                currentParams.targetEntity = $('#editSwitchButtonTargetEntity').val();
                                                $("#parametersM").val(JSON.stringify(currentParams));
                                            });
                                            
                                            $('#editSwitchButtonTargetEntityAttribute').change(function(){
                                                currentParams.targetEntityAttribute = $('#editSwitchButtonTargetEntityAttribute').val();
                                                $("#parametersM").val(JSON.stringify(currentParams));
                                            });

                                            $.ajax({
                                                url: "../controllers/getTrustedUsers.php",
                                                data: {

                                                },
                                                type: "POST",
                                                async: true,
                                                dataType: 'json',
                                                success: function (data) {
                                                    if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
                                                        //Nuova riga
                                                        //Source Selection
                                                        newFormRow = $('<div class="row"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                                        newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
                                                        newSelect.append('<option value="no">no</option>');
                                                        newSelect.append('<option value="ckeditor">yes</option>');
                                                        newInnerDiv.append(newSelect);
                                                        newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        newLabel.show();
                                                        newInnerDiv.show();
                                                        newSelect.show();

                                                        //Nuova riga Tab Destro: CKEDITOR
                                                        //Modalità del widget (none, map, gis, link esterno)
                                                        newFormRow = $('<div class="row" id="ck_editor"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-12"></div>');
                                                        newBox = $('<div id="widgetEditor">');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
                                                        newBox.append('<?= _("Here you can insert Javascript code to be executed in the widget. Please save your script by clicking on the save button on the bottom.")?>');
                                                        newBox.append('</div></div>');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
                                                        newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
                                                        newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
                                                        newBox.append('</div></div></div>');
                                                        newInnerDiv.append(newBox);
                                                        //newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        //newLabel.show();
                                                        newInnerDiv.show();
                                                        //newInput.show();
                                                        $('#ck_editor').hide();

                                                        var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
                                                            allowedContent: true,
                                                            language: 'en',
                                                            contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
                                                            width: '100%'
                                                        });

                                                        let par = (JSON.stringify(currentParams));
                                                        if (par && !par.includes("latLng") && !par.includes("null")) {
                                                            $("#parametersM").val(JSON.stringify(currentParams));
                                                            if (currentParams['mode'] == "ckeditor") {
                                                                $('#ck_editor').show();
                                                                $('#enableCKEditor').val("ckeditor");
                                                                // if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    //    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                            }
                                                        }

                                                        $('#enableCKEditor').change(function () {
                                                            if ($('#enableCKEditor').val() === "ckeditor") {
                                                                $('#ck_editor').show();
                                                                //if (rowParams.substring(0, 8) != "https://" && rowParams.substring(0, 7) != "http://" && rowParams.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                                $("#parametersM").val('{"mode": "ckeditor"}');
                                                            } else {
                                                                $('#ck_editor').hide();
                                                                $("#parametersM").val('');
                                                            }
                                                        });

                                                        $('#sourceSelectionSaveBtn').click(function () {
                                                            var button = $(this);
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').show();
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');

                                                            var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();
                                                            /*if (newInfo.trim() === '') {
                                                                newInfo = null;
                                                            }   */

                                                            $.ajax({
                                                                url: "../controllers/updateWidget.php",
                                                                data: {
                                                                    action: "updateCkEditor",
                                                                    widgetName: name_widget_m,
                                                                    //    newText: newInfoDecoded
                                                                    newText: newInfo
                                                                },
                                                                type: "POST",
                                                                async: true,
                                                                dataType: 'json',
                                                                success: function (data) {
                                                                    if (data.detail === 'Ok') {
                                                                        alert('Saved!');
                                                                    } else {
                                                                        alert('Error');
                                                                    }
                                                                },
                                                                error: function (errorData) {
                                                                    alert('Error');
                                                                }
                                                            });
                                                        });
                                                    }
                                                },
                                                error: function (errorData) {
                                                    console.log('Error in retrieving Trusted Users.');
                                                }
                                            });

                                            break;
                                        
                                        case "widgetOnOffButton":
                                            $("#parametersM").val(JSON.stringify(currentParams));
                                            $('#link_help_modal-add-widget-m').css("display", "");
                                            $('#inputTitleWidgetM').attr('disabled', false);
                                            $("label[for='inputTitleWidgetM']").html("Title");
                                            $("label[for='inputColorWidgetM']").html("Background color");
                                            $('#inputColorWidgetM').attr('disabled', false);
                                            $('#inputColorWidgetM').prop('required', true);
                                            $('#inputFontSizeM').attr('disabled', true);
                                            $('#inputFontSizeM').prop('required', false);
                                            $('#inputFontColorM').attr('disabled', true);
                                            $('#inputFontColorM').prop('required', false);
                                            $('#select-frameColor-Widget-m').attr('disabled', false);
                                            $('#select-frameColor-Widget-m').prop('required', true);
                                            $('#select-IntTemp-Widget-m').val(-1);
                                            $('#select-IntTemp-Widget-m').prop('disabled', true);
                                            $('#select-IntTemp-Widget-m').prop('required', false);
                                            $('#inputFreqWidgetM').val('');
                                            $('#inputFreqWidgetM').prop('disabled', true);
                                            $('#inputFreqWidgetM').prop('required', false);
                                            $('#inputComuneWidgetM').attr('disabled', true);
                                            $('#urlWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').prop('required', true);
                                            $('#inputUdmWidgetM').prop("required", false);
                                            $('#inputUdmWidgetM').attr("disabled", true);
                                            $('#inputUdmWidgetM').val("");
                                            $('#inputUdmPositionM').prop("required", false);
                                            $('#inputUdmPositionM').attr("disabled", true);
                                            $('#inputUdmPositionM').val(-1);

                                            //Rimozione eventuali campi del subform general per widget process
                                            removeWidgetProcessGeneralFields("editWidget");

                                            //Parametri specifici del widget
                                            $('#specificParamsM .row').remove();
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            $('#specificParamsM').append(newFormRow);
                                            newLabel = $('<label for="editSwitchButtonViewMode" class="col-md-2 control-label"><?php echo _("View mode"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            var newControl = $('<select id="editSwitchButtonViewMode" name="editSwitchButtonViewMode" class="form-control"></select>');
                                            newControl.append('<option value="emptyButton"><?php echo _("Empty button"); ?></option>');
                                            newControl.append('<option value="iconOnly"><?php echo _("Icon only"); ?></option>');
                                            newControl.append('<option value="textOnly"><?php echo _("Text only"); ?></option>');
                                            newControl.append('<option value="displayOnly"><?php echo _("Value display only"); ?></option>');
                                            newControl.append('<option value="iconAndText"><?php echo _("Icon and text"); ?></option>');
                                            newControl.append('<option value="iconAndDisplay"><?php echo _("Icon and value display"); ?></option>');
                                            newControl.append('<option value="displayAndText"><?php echo _("Display and text"); ?></option>');
                                            newControl.append('<option value="all"><?php echo _("Icon, text and value display"); ?></option>');
                                            newControl.val(styleParameters.viewMode);
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            
                                            newLabel = $('<label for="editSwitchButtonRadius" class="col-md-2 control-label"><?php echo _("Button radius (%)"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newControl = $('<input id="editSwitchButtonRadius" name="editSwitchButtonRadius" data-slider-id="editSwitchButtonRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newFormRow.find('#editSwitchButtonRadius').bootstrapSlider({
                                                formatter: function(value) {
                                                   return value + "%";
                                                },
                                                value: styleParameters.buttonRadius    
                                            });
                                            
                                            newFormRow = $('<div class="row"></div>');
                                
                                            newLabel = $('<label for="editSwitchButtonOffValue" class="col-md-2 control-label"><?php echo _("Off value"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<input id="editSwitchButtonOffValue" name="editSwitchButtonOffValue" class="form-control" type="text" value="' + currentParams.offValue + '"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newLabel = $('<label for="editSwitchButtonOnValue" class="col-md-2 control-label"><?php echo _("On value"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<input id="editSwitchButtonOnValue" name="editSwitchButtonOnValue" class="form-control" type="text" value="' + currentParams.onValue + '"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            
                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                
                                            newLabel = $('<label for="editSwitchButtonOffColor" class="col-md-2 control-label"><?php echo _("Off button color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonOffColor"><input type="text" name="editSwitchButtonOffColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.offColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv); 

                                            newLabel = $('<label for="editSwitchButtonOnColor" class="col-md-2 control-label"><?php echo _("On button color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonOnColor"><input type="text" name="editSwitchButtonOnColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.onColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);        

                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                
                                            newLabel = $('<label for="editSwitchButtonSymbolOffColor" class="col-md-2 control-label"><?php echo _("Off symbol color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonSymbolOffColor"><input type="text" name="editSwitchButtonSymbolOffColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.symbolOffColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv); 

                                            newLabel = $('<label for="editSwitchButtonSymbolOnColor" class="col-md-2 control-label"><?php echo _("On symbol color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonSymbolOnColor"><input type="text" name="editSwitchButtonSymbolOnColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.symbolOnColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);        

                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                
                                            newLabel = $('<label for="editSwitchButtonTextOffColor" class="col-md-2 control-label">Off text color</label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonTextOffColor"><input type="text" name="editSwitchButtonTextOffColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.textOffColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv); 

                                            newLabel = $('<label for="editSwitchButtonTextOnColor" class="col-md-2 control-label">On text color</label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonTextOnColor"><input type="text" name="editSwitchButtonTextOnColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.textOnColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);        

                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            newLabel = $('<label for="editSwitchButtonTextFontSize" class="col-md-2 control-label"><?php echo _("Text font size"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<input type="text" id="editSwitchButtonTextFontSize" name="editSwitchButtonTextFontSize" class="form-control" value="' + styleParameters.textFontSize + '"></input>');
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv); 

                                            newLabel = $('<label for="editSwitchButtonDisplayFontSize" class="col-md-2 control-label"><?php echo _("Display font size"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<input type="text" id="editSwitchButtonDisplayFontSize" name="editSwitchButtonDisplayFontSize" class="form-control" value="' + styleParameters.displayFontSize +'"></input>');
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);        

                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                
                                            newLabel = $('<label for="editSwitchButtonDisplayOffColor" class="col-md-2 control-label"><?php echo _("Off display text color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonDisplayOffColor"><input type="text" name="editSwitchButtonDisplayOffColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.displayOffColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv); 

                                            newLabel = $('<label for="editSwitchButtonDisplayOnColor" class="col-md-2 control-label"><?php echo _("On display text color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonDisplayOnColor"><input type="text" name="editSwitchButtonDisplayOnColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.displayOnColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);        

                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newLabel = $('<label for="editSwitchButtonDisplayColor" class="col-md-2 control-label"><?php echo _("Display background color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editSwitchButtonDisplayColor"><input type="text" name="editSwitchButtonDisplayColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.displayColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv); 
                                            
                                            newLabel = $('<label for="editSwitchButtonDisplayRadius" class="col-md-2 control-label"><?php echo _("Display radius (%)"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<input id="editSwitchButtonDisplayRadius" name="editSwitchButtonDisplayRadius" data-slider-id="editSwitchButtonDisplayRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newFormRow.find('#editSwitchButtonDisplayRadius').bootstrapSlider({
                                                formatter: function(value) {
                                                   return value + "%";
                                                },
                                                value: styleParameters.displayRadius   
                                            });
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            $('#specificParamsM').append(newFormRow);

                                            newLabel = $('<label for="editSwitchButtonDisplayWidth" class="col-md-2 control-label"><?php echo _("Display width (%)"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<input id="editSwitchButtonDisplayWidth" name="editSwitchButtonDisplayWidth" data-slider-id="editSwitchButtonDisplayWidthSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newFormRow.find('#editSwitchButtonDisplayWidth').bootstrapSlider({
                                                formatter: function(value) {
                                                   return value + "%";
                                                },
                                                value: styleParameters.displayWidth   
                                            });

                                            newLabel = $('<label for="editSwitchButtonDisplayHeight" class="col-md-2 control-label"><?php echo _("Display height (%)"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<input id="editSwitchButtonDisplayHeight" name="editSwitchButtonDisplayHeight" data-slider-id="editSwitchButtonDisplayHeightSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newFormRow.find('#editSwitchButtonDisplayHeight').bootstrapSlider({
                                                formatter: function(value) {
                                                   return value + "%";
                                                },
                                                value: styleParameters.displayHeight    
                                            });
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newLabel = $('<label for="editSwitchButtonNeonEffect" class="col-md-2 control-label"><?php echo _("Neon effect"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newControl = $('<select id="editSwitchButtonNeonEffect" name="editSwitchButtonNeonEffect" class="form-control"></select>');
                                            newControl.append('<option value="never"><?php echo _("Never"); ?></option>');
                                            newControl.append('<option value="onStatus"><?php echo _("When on"); ?></option>');
                                            newControl.append('<option value="offStatus"><?php echo _("When off"); ?></option>');
                                            newControl.append('<option value="always"><?php echo _("Always"); ?></option>');
                                            newControl.val(styleParameters.neonEffect);
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            
                                            $('#editSwitchButtonOffValue').change(function(){
                                                currentParams.offValue = $('#editSwitchButtonOffValue').val();
                                                $("#parametersM").val(JSON.stringify(currentParams));
                                            });

                                            $('#editSwitchButtonOnValue').change(function(){
                                                currentParams.onValue = $('#editSwitchButtonOnValue').val();
                                                $("#parametersM").val(JSON.stringify(currentParams));
                                            });
																						///////////////////INSERIMENTO CKEDITOR ONOFF WIDGET////////////////
														$.ajax({
															url: "../controllers/getTrustedUsers.php",
															data: {

															},
															type: "POST",
															async: true,
															dataType: 'json',
															success: function(data) {
																if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
																	//Nuova riga
																	console.log('TRUSTED');
																	//Source Selection
																	newFormRow = $('<div class="row"></div>');
																	$("#specificParamsMRight").append(newFormRow);
																	newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
																	newInnerDiv = $('<div class="col-md-3"></div>');
																	newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
																	newSelect.append('<option value="no">no</option>');
																	newSelect.append('<option value="ckeditor">yes</option>');
																	newInnerDiv.append(newSelect);
																	newFormRow.append(newLabel);
																	newFormRow.append(newInnerDiv);
																	newLabel.show();
																	newInnerDiv.show();
																	newSelect.show();

																	//Nuova riga Tab Destro: CKEDITOR
																	//Modalità del widget (none, map, gis, link esterno)
																	newFormRow = $('<div class="row" id="ck_editor"></div>');
																	$("#specificParamsMRight").append(newFormRow);
																	newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
																	newInnerDiv = $('<div class="col-md-12"></div>');
																	newBox = $('<div id="widgetEditor">');
																	newBox.append('<div class="row">');
																	newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
																	newBox.append('<?= _("Here you can insert Javascript code to be executed in the widget. Please save your script by clicking on the save button on the bottom.")?>');
																	newBox.append('</div></div>');
																	newBox.append('<div class="row">');
																	newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
																	newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
																	newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
																	newBox.append('</div></div></div>');
																	newInnerDiv.append(newBox);
																	//newFormRow.append(newLabel);
																	newFormRow.append(newInnerDiv);
																	//newLabel.show();
																	newInnerDiv.show();
																	//newInput.show();
																	$('#ck_editor').hide();

																	var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
																		allowedContent: true,
																		language: 'en',
																		contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
																		width: '100%'
																	});

																	let par = (JSON.stringify(currentParams));
																	if (par && !par.includes("latLng") && !par.includes("null")) {
																		$("#parametersM").val(JSON.stringify(currentParams));
																		if (currentParams['mode'] == "ckeditor") {
																			$('#ck_editor').show();
																			$('#enableCKEditor').val("ckeditor");
																			// if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
																			if (code != null && code != "null") {
																				var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
																				var text_ck_area = document.createElement("text_ck_area");
																				text_ck_area.innerHTML = codeForCKEditor;
																				var newInfoDecoded = text_ck_area.innerText;
																				//    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
																				CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
																			}
																		}
																	}

																	$('#enableCKEditor').change(function() {
																		if ($('#enableCKEditor').val() === "ckeditor") {
																			$('#ck_editor').show();
																			//if (rowParams.substring(0, 8) != "https://" && rowParams.substring(0, 7) != "http://" && rowParams.substring(0, 3) != "NR_") {
																			if (code != null && code != "null") {
																				var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
																				var text_ck_area = document.createElement("text_ck_area");
																				text_ck_area.innerHTML = codeForCKEditor;
																				var newInfoDecoded = text_ck_area.innerText;
																				CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
																			}
																			currentParams.mode =  "ckeditor";
																			//$("#parametersM").val('{"mode": "ckeditor"}');
																			$("#parametersM").val(JSON.stringify(currentParams));
																		} else {
																			$('#ck_editor').hide();
																			//$("#parametersM").val('');
																			currentParams.mode =  "";
																			$("#parametersM").val(JSON.stringify(currentParams));
																		}
																	});

																	$('#sourceSelectionSaveBtn').click(function() {
																		var button = $(this);
																		$('#widgetInfoModalFooter div.compactMenuMsg').show();
																		$('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');

																		var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();
																		/*if (newInfo.trim() === '') {
																			newInfo = null;
																		}   */

																		$.ajax({
																			url: "../controllers/updateWidget.php",
																			data: {
																				action: "updateCkEditor",
																				widgetName: name_widget_m,
																				//    newText: newInfoDecoded
																				newText: newInfo
																			},
																			type: "POST",
																			async: true,
																			dataType: 'json',
																			success: function(data) {
																				if (data.detail === 'Ok') {
																					alert('Saved!');
																				} else {
																					alert('Error');
																				}
																			},
																			error: function(errorData) {
																				alert('Error');
																			}
																		});
																	});
																}
															},
															error: function(errorData) {
																console.log('Error in retrieving Trusted Users.');
															}
														});
														///////////////////////
                                            break;
										////////////////

                                        case "widgetKnob":
                                            $("#parametersM").val(JSON.stringify(currentParams));
                                            $('#link_help_modal-add-widget-m').css("display", "");
                                            $('#inputTitleWidgetM').attr('disabled', false);
                                            $("label[for='inputTitleWidgetM']").html("Title");
                                            $("label[for='inputColorWidgetM']").html("Background color");
                                            $('#inputColorWidgetM').attr('disabled', false);
                                            $('#inputColorWidgetM').prop('required', true);
                                            $('#inputFontSizeM').attr('disabled', false);
                                            $('#inputFontSizeM').prop('required', true);
                                            $('label[for=inputFontSizeM]').html('Display font size');
                                            $('#inputFontColorM').attr('disabled', false);
                                            $('#inputFontColorM').prop('required', true);
                                            $('#select-frameColor-Widget-m').attr('disabled', false);
                                            $('#select-frameColor-Widget-m').prop('required', true);
                                            $('#select-IntTemp-Widget-m').val(-1);
                                            $('#select-IntTemp-Widget-m').prop('disabled', true);
                                            $('#select-IntTemp-Widget-m').prop('required', false);
                                            $('#inputFreqWidgetM').val('');
                                            $('#inputFreqWidgetM').prop('disabled', true);
                                            $('#inputFreqWidgetM').prop('required', false);
                                            $('#inputComuneWidgetM').attr('disabled', true);
                                            $('#urlWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').prop('required', true);
                                            $('#inputUdmWidgetM').prop("required", false);
                                            $('#inputUdmWidgetM').attr("disabled", true);
                                            $('#inputUdmWidgetM').val("");
                                            $('#inputUdmPositionM').prop("required", false);
                                            $('#inputUdmPositionM').attr("disabled", true);
                                            $('#inputUdmPositionM').val(-1);

                                            $("#inputFontSizeM").val(data['fontSize']);
                                            $("#inputFontColorM").val(data['fontColor']);

                                            //Rimozione eventuali campi del subform general per widget process
                                            removeWidgetProcessGeneralFields("editWidget");

                                            //Parametri specifici del widget
                                            $('#specificParamsM .row').remove(); 

                                            newFormRow = $('<div class="row"></div>');

                                            newLabel = $('<label for="editKnobIndicatorRadius" class="col-md-2 control-label"><?php echo _("Indicator radius (%)"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            var newControl = $('<input id="editKnobIndicatorRadius" name="editKnobIndicatorRadius" data-slider-id="editKnobIndicatorRadiusSlider" type="text" data-slider-min="1" data-slider-max="100" data-slider-step="1"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newLabel = $('<label for="editKnobDisplayRadius" class="col-md-2 control-label"><?php echo _("Value display radius (%)"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            var newControl = $('<input id="editKnobDisplayRadius" name="editKnobDisplayRadius" data-slider-id="editKnobDisplayRadiusSlider" type="text" data-slider-min="1" data-slider-max="100" data-slider-step="1"/>');
                                            newInnerDiv.append(newControl);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            $('#specificParamsM').append(newFormRow);

                                            newFormRow.find('#editKnobIndicatorRadius').bootstrapSlider({
                                                formatter: function(value) {
                                                   return value + "%";
                                                },
                                                value: styleParameters.indicatorRadius    
                                            });

                                            newFormRow.find('#editKnobDisplayRadius').bootstrapSlider({
                                                formatter: function(value) {
                                                   return value + "%";
                                                },
                                                value: styleParameters.displayRadius    
                                            });

                                            newFormRow = $('<div class="row"></div>');
                                            newLabel = $('<label for="editKnobStartAngle" class="col-md-2 control-label"><?php echo _("Start angle"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<input type="text" name="editKnobStartAngle" class="form-control" value="' + styleParameters.startAngle + '" id="editKnobStartAngle"/>');
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newLabel = $('<label for="editKnobEndAngle" class="col-md-2 control-label"><?php echo _("End angle"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newInput = $('<input type="text" name="editKnobEndAngle" class="form-control" value="' + styleParameters.endAngle + '" id="editKnobEndAngle"/>');
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            $('#specificParamsM').append(newFormRow);

                                            newFormRow = $('<div class="row"></div>');
                                            newLabel = $('<label for="editKnobDomainType" class="col-md-2 control-label">Domain type</label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<select name="editKnobDomainType" id="editKnobDomainType" class="form-control"/>');
                                            newInput.append('<option value="continuous">Continuous</option>');
                                            //newInput.append('<option value="discreet">Discreet</option>');
                                            newInput.val(currentParams.domainType);
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            
                                            newLabel = $('<label for="editKnobDisplayColor" class="col-md-2 control-label"><?php echo _("Display color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editKnobDisplayColor"><input type="text" name="editKnobDisplayColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.displayColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            
                                            //La precisione la mettiamo fra i parameters, non fra gli style parameters
                                            if(entityJson[attributeName].type === 'Float')
                                            {
                                                newLabel = $('<label for="editKnobDataPrecision" class="col-md-2 control-label">Data precision</label>');
                                                newInnerDiv = $('<div class="col-md-4"></div>');
                                                newInput = $('<input type="text" name="editKnobDataPrecision" class="form-control" id="editKnobDataPrecision" data-param="editKnobDataPrecision"/>');
                                                newInput.val(currentParams.dataPrecision);
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);
                                            }
                                            
                                            newLabel = $('<label for="editKnobTicksColor" class="col-md-2 control-label">Ticks color</label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editKnobTicksColor"><input type="text" name="editKnobTicksColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.ticksColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            newLabel = $('<label for="editKnobMinValue" class="col-md-2 control-label"><?php echo _("Min value"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<input type="text" name="editKnobMinValue" class="form-control" id="editKnobMinValue" data-param="editKnobMinValue" required/>');
                                            newInput.val(currentParams.minValue);
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newLabel = $('<label for="editKnobMaxValue" class="col-md-2 control-label"><?php echo _("Max value"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<input type="text" name="editKnobMaxValue" class="form-control" id="editKnobMaxValue" data-param="editKnobMaxValue" required/>');
                                            newInput.val(currentParams.maxValue);
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            newLabel = $('<label for="editKnobLabelsFontSize" class="col-md-2 control-label"><?php echo _("Labels font size"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<input type="text" name="editKnobLabelsFontSize" class="form-control" id="editKnobLabelsFontSize" value="' + styleParameters.labelsFontSize + '" data-param="editKnobLabelsFontSize"/>');
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newLabel = $('<label for="editKnobLabelsFontColor" class="col-md-2 control-label"><?php echo _("Labels font color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<div class="input-group colorPicker" id="editKnobLabelsFontColor"><input type="text" name="editKnobLabelsFontColor" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div>');
                                            newInput.colorpicker({color: styleParameters.labelsFontColor, format: "rgba"});
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            $('#specificParamsM').append(newFormRow);
                                            
                                            newFormRow = $('<div class="row"></div>');
                                            newLabel = $('<label for="editKnobIncreaseValue" class="col-md-2 control-label"><?php echo _("Increase value"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<input type="text" name="editKnobIncreaseValue" class="form-control" id="editKnobIncreaseValue" value="' + styleParameters.increaseValue + '" data-param="editKnobIncreaseValue"/>');
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            $('#specificParamsM').append(newFormRow);

                                            //Contenitore per tabella delle soglie
                                            var editKnobColorsTableContainer = $('<div id="editKnobColorsTableContainer" class="row rowCenterContent"></div>');
                                            var editKnobColorsTable = $("<table id='editKnobColorsTable' class='table table-bordered table-condensed thrRangeTable'><col style='width:25%'><col style='width:25%'><col style='width:40%'><col style='width:10%'><tr><td>Min</td><td>Max</td><td>Range color</td><td><a href='#'><i class='fa fa-plus' style='font-size:24px;color:#337ab7'></i></a></td></tr></table>");
                                            editKnobColorsTableContainer.append(editKnobColorsTable);
                                            $("#specificParamsM").append(editKnobColorsTableContainer);

                                            $('#editKnobMinValue').on('input', updateEditKnobParams);
                                            $('#editKnobMaxValue').on('input', updateEditKnobParams);
                                            if(entityJson[attributeName].type === 'Float')
                                            {
                                                $('#editKnobDataPrecision').on('input', updateEditKnobParams);
                                            }
                                            
                                            if(currentParams.continuousRanges !== null)
                                            {
                                                if(currentParams.continuousRanges.length > 0)
                                                {
                                                    for(var key in currentParams.continuousRanges)
                                                    {
                                                        newTableRow = $('<tr></tr>');
                                                        newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="min">' + currentParams.continuousRanges[key].min + '</a></td>');
                                                        newTableCell.find('a').editable();
                                                        newTableRow.append(newTableCell);

                                                        newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="max">' + currentParams.continuousRanges[key].max + '</a></td>');
                                                        newTableCell.find('a').editable();
                                                        newTableRow.append(newTableCell);

                                                        newTableCell = $('<td><div class="input-group colorPicker" data-param="color"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                        newTableRow.append(newTableCell);
                                                        newTableRow.find('div.colorPicker').colorpicker({color: currentParams.continuousRanges[key].color, format: "rgba"});
                                                        //UPDATE DEI PARAMETRI AL CLOSE PICKER
                                                        newTableRow.find('div.colorPicker').on('hidePicker', updateEditKnobParams);

                                                        newTableCell = $('<td><a><i class="fa fa-close" style="font-size:24px;color:red"></i></a></td>');
                                                        //ELIMINAZIONE RIGA 
                                                        newTableCell.find('i').click(delEditKnobRange);
                                                        newTableRow.append(newTableCell);
                                                        //UPDATE DEI PARAMETRI AL CHANGE VALUES
                                                        newTableRow.find('a.toBeEdited').on('save', updateEditKnobParams);

                                                        $("#editKnobColorsTable").append(newTableRow);
                                                    }
                                                }
                                            }
											///////////////////INSERIMENTO CKEDITOR KNOB WIDGET////////////////
														$.ajax({
															url: "../controllers/getTrustedUsers.php",
															data: {

															},
															type: "POST",
															async: true,
															dataType: 'json',
															success: function(data) {
																if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
																	//Nuova riga
																	console.log('TRUSTED');
																	//Source Selection
																	newFormRow = $('<div class="row"></div>');
																	$("#specificParamsMRight").append(newFormRow);
																	newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
																	newInnerDiv = $('<div class="col-md-3"></div>');
																	newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
																	newSelect.append('<option value="no">no</option>');
																	newSelect.append('<option value="ckeditor">yes</option>');
																	newInnerDiv.append(newSelect);
																	newFormRow.append(newLabel);
																	newFormRow.append(newInnerDiv);
																	newLabel.show();
																	newInnerDiv.show();
																	newSelect.show();

																	//Nuova riga Tab Destro: CKEDITOR
																	//Modalità del widget (none, map, gis, link esterno)
																	newFormRow = $('<div class="row" id="ck_editor"></div>');
																	$("#specificParamsMRight").append(newFormRow);
																	newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
																	newInnerDiv = $('<div class="col-md-12"></div>');
																	newBox = $('<div id="widgetEditor">');
																	newBox.append('<div class="row">');
																	newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
																	newBox.append('<?= _("Here you can insert Javascript code to be executed in the widget. Please save your script by clicking on the save button on the bottom.")?>');
																	newBox.append('</div></div>');
																	newBox.append('<div class="row">');
																	newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
																	newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
																	newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
																	newBox.append('</div></div></div>');
																	newInnerDiv.append(newBox);
																	//newFormRow.append(newLabel);
																	newFormRow.append(newInnerDiv);
																	//newLabel.show();
																	newInnerDiv.show();
																	//newInput.show();
																	$('#ck_editor').hide();

																	var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
																		allowedContent: true,
																		language: 'en',
																		contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
																		width: '100%'
																	});

																	let par = (JSON.stringify(currentParams));
																	if (par && !par.includes("latLng") && !par.includes("null")) {
																		$("#parametersM").val(JSON.stringify(currentParams));
																		if (currentParams['mode'] == "ckeditor") {
																			$('#ck_editor').show();
																			$('#enableCKEditor').val("ckeditor");
																			// if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
																			if (code != null && code != "null") {
																				var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
																				var text_ck_area = document.createElement("text_ck_area");
																				text_ck_area.innerHTML = codeForCKEditor;
																				var newInfoDecoded = text_ck_area.innerText;
																				//    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
																				CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
																			}
																		}
																	}

																	$('#enableCKEditor').change(function() {
																		if ($('#enableCKEditor').val() === "ckeditor") {
																			$('#ck_editor').show();
																			//if (rowParams.substring(0, 8) != "https://" && rowParams.substring(0, 7) != "http://" && rowParams.substring(0, 3) != "NR_") {
																			if (code != null && code != "null") {
																				var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
																				var text_ck_area = document.createElement("text_ck_area");
																				text_ck_area.innerHTML = codeForCKEditor;
																				var newInfoDecoded = text_ck_area.innerText;
																				CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
																			}
																			currentParams.mode =  "ckeditor";
																			//$("#parametersM").val('{"mode": "ckeditor"}');
																			$("#parametersM").val(JSON.stringify(currentParams));
																		} else {
																			$('#ck_editor').hide();
																			//$("#parametersM").val('');
																			currentParams.mode =  "";
																			$("#parametersM").val(JSON.stringify(currentParams));
																		}
																	});

																	$('#sourceSelectionSaveBtn').click(function() {
																		var button = $(this);
																		$('#widgetInfoModalFooter div.compactMenuMsg').show();
																		$('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');

																		var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();
																		/*if (newInfo.trim() === '') {
																			newInfo = null;
																		}   */

																		$.ajax({
																			url: "../controllers/updateWidget.php",
																			data: {
																				action: "updateCkEditor",
																				widgetName: name_widget_m,
																				//    newText: newInfoDecoded
																				newText: newInfo
																			},
																			type: "POST",
																			async: true,
																			dataType: 'json',
																			success: function(data) {
																				if (data.detail === 'Ok') {
																					alert('Saved!');
																				} else {
																					alert('Error');
																				}
																			},
																			error: function(errorData) {
																				alert('Error');
																			}
																		});
																	});
																}
															},
															error: function(errorData) {
																console.log('Error in retrieving Trusted Users.');
															}
														});
														///////////////////////

                                            $("#editKnobColorsTable i.fa-plus").click(function(){
                                                var newRangeObj = {
                                                    min: 0,
                                                    max: 0,
                                                    color: "#009ddc"
                                                };

                                                if(currentParams.continuousRanges === null)
                                                {
                                                    currentParams.continuousRanges = [];
                                                }

                                                currentParams.continuousRanges.push(newRangeObj);
                                                $('#parametersM').val(JSON.stringify(currentParams));

                                                var newTableRow = $('<tr></tr>');
                                                newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="min">0</a></td>');
                                                newTableCell.find('a').editable();
                                                newTableRow.append(newTableCell);

                                                newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="max">0</a></td>');
                                                newTableCell.find('a').editable();
                                                newTableRow.append(newTableCell);

                                                newTableCell = $('<td><div class="input-group colorPicker" data-param="color"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                newTableRow.append(newTableCell);
                                                newTableRow.find('div.colorPicker').colorpicker({color: "#009ddc", format: "rgba"});
                                                //UPDATE DEI PARAMETRI AL CLOSE PICKER
                                                newTableRow.find('div.colorPicker').on('hidePicker', updateEditKnobParams);

                                                newTableCell = $('<td><a><i class="fa fa-close" style="font-size:24px;color:red"></i></a></td>');
                                                //ELIMINAZIONE RIGA 
                                                newTableCell.find('i').click(delEditKnobRange);
                                                newTableRow.append(newTableCell);
                                                //UPDATE DEI PARAMETRI AL CHANGE VALUES
                                                newTableRow.find('a.toBeEdited').on('save', updateEditKnobParams);

                                                $("#editKnobColorsTable").append(newTableRow);
                                            });

                                            function updateEditKnobParams(e, params)
                                            {
                                                var param = $(this).attr('data-param');
                                                var rowIndex = $(this).parents("tr").index() - 1;
                                                var newValue = null;

                                                switch(param)
                                                {
                                                    case "editKnobMinValue":
                                                        newValue = $(this).val();
                                                        currentParams.minValue = newValue;
                                                        break;

                                                    case "editKnobMaxValue":
                                                        newValue = $(this).val();
                                                        currentParams.maxValue = newValue;
                                                        break;

                                                    case "min":
                                                        newValue = params.newValue;
                                                        currentParams.continuousRanges[rowIndex].min = newValue;
                                                        break;

                                                    case "max":
                                                        newValue = params.newValue;
                                                        currentParams.continuousRanges[rowIndex].max = newValue;
                                                        break;

                                                    case "color":
                                                        newValue = $(this).colorpicker('getValue');
                                                        currentParams.continuousRanges[rowIndex].color = newValue;
                                                        break;
                                                        
                                                    //editKnobDataPrecision
                                                    case "editKnobDataPrecision":
                                                        newValue = parseInt($(this).val());
                                                        currentParams.dataPrecision = newValue;
                                                        break;    
                                                }

                                                $('#parametersM').val(JSON.stringify(currentParams));
                                                //console.log($('#parametersM').val());
                                            }

                                            function delEditKnobRange(e)
                                            {
                                                var delIndex = parseInt($(this).parents('tr').index() - 1);

                                                //Cancellazione della riga dalla tabella 
                                                $(this).parents('tr').remove();

                                                //Aggiornamento JSON parametri
                                                currentParams.continuousRanges.splice(delIndex, 1);
                                                if(currentParams.continuousRanges.length === 0)
                                                {
                                                    currentParams.continuousRanges = null;
                                                }

                                                $('#parametersM').val(JSON.stringify(currentParams));
                                            }
                                            break;
                                        }
                                    }
                                }
                                else
                                {
                                    //Caso widget data viewer
                                    $('#widgetCategoryM').html("Data viewer");
                                    $('#widgetCategoryHiddenM').val("viewer");
                                    $('#metricWidgetMRow').show();
                                    $('#inputNameWidgetMRow').show();
                                    $('#select-widget-mRow').show();
                                    $('#inputComuneRowM').show();
                                    $('#urlWidgetMRow').show();
                                    $('#textarea-metric-widget-mRow').show();
                                    
                                    $("#metricWidgetM").val(data['id_metric_widget'].replace(/\+/g, ", "));
                                    $("#select-widget-m").find('option').remove().end().append('<option>' + data['widgets_metric'] + '</option>');
                                    $('#select-widget-m').val(data['type_widget']);
                                    $("#inputComuneWidgetM").val(data['municipality_metric_widget']);
                                    $('#select-IntTemp-Widget-m').val(data['temporal_range_widget']);
                                    $('#editWidgetComparePeriod').val(data['temporal_compare_widget']);
                                    $("#mod-n-metrcis-widget").text("max " + data['number_metrics_widget'] + " metrics");
                                    $("#textarea-metric-widget-m").val('');
                                    $("#inputUdmWidgetM").val(decodeURI(data['udm']));
                                    $("#urlWidgetM").val(data['url']);
                                    
                                    if((data.title_widget !== null)&&(data.title_widget.trim() !== ''))
                                    {
                                        if(data.title_widget.trim() !== '')
                                        {
                                            var displayedTitle = data.title_widget.replace(/<script[^>]*>([\S\s]*?)<\/script>/gmi, '');
                                            displayedTitle = displayedTitle.replace(/<\/?\w(?:[^"'>]|"[^"]*"|'[^']*')*>/gmi, '');
                                            displayedTitle = displayedTitle.replace(/&deg;/g, "°");
                                            displayedTitle = displayedTitle.replace(/&num;/g, "#");
                                            displayedTitle = displayedTitle.replace(/&dollar;/g, "$");
                                            displayedTitle = displayedTitle.replace(/&percnt;/g, "%");
                                            displayedTitle = displayedTitle.replace(/&pound;/g, "£");
                                            displayedTitle = displayedTitle.replace(/&lt;/g, "<");
                                            displayedTitle = displayedTitle.replace(/&gt;/g, ">");
                                            displayedTitle = displayedTitle.replace(/&agrave;/g, "à");
                                            displayedTitle = displayedTitle.replace(/&egrave;/g, "è");
                                            displayedTitle = displayedTitle.replace(/&eacute;/g, "é");
                                            displayedTitle = displayedTitle.replace(/&igrave;/g, "ì");
                                            displayedTitle = displayedTitle.replace(/&ograve;/g, "ò");
                                            displayedTitle = displayedTitle.replace(/&ugrave;/g, "ù");
                                            displayedTitle = displayedTitle.replace(/&micro;/g, "µ");
                                            displayedTitle = displayedTitle.replace(/&sol;/g, "/");
                                            displayedTitle = displayedTitle.replace(/&bsol;/g, "\\");
                                            displayedTitle = displayedTitle.replace(/&lpar;/g, "(");
                                            displayedTitle = displayedTitle.replace(/&rpar;/g, ")");
                                            displayedTitle = displayedTitle.replace(/&lsqb;/g, "[");
                                            displayedTitle = displayedTitle.replace(/&rsqb;/g, "]");
                                            displayedTitle = displayedTitle.replace(/&lcub;/g, "{");
                                            displayedTitle = displayedTitle.replace(/&rcub;/g, "}");
                                            displayedTitle = displayedTitle.replace(/&Hat;/g, "^");
                                        }
                                        else
                                        {
                                            var displayedTitle = '';
                                        }
                                    }
                                    else
                                    {
                                        var displayedTitle = '';
                                    }

                                    $('#inputTitleWidgetM').val(displayedTitle);
                                    
                                    $("#inputFontSizeM").val(data['fontSize']);
                                    $("#inputFontColorM").val(data['fontColor']);
                                    $("#widgetFontColorM").css("background-color", data['fontColor']);
                                    $("#widgetFontColorPickerContainerM").colorpicker('setValue', data['fontColor']);
                                    $("#inputFreqWidgetM").val(data['frequency_widget']);
                                    $("#inputNameWidgetM").val(data['name_widget']);
                                    $("#inputShowTitleM").val(data['showTitle']);
                                    
                                    $("#inputFontFamilyWidgetM").val(data['fontFamily']);

                                    if(paramsRaw !== 'undefined')
                                    {
                                        parameters = JSON.parse(paramsRaw);
                                        currentParams = parameters;
                                    }

                                    if(isJson(infoJsonRaw))
                                    {
                                        if (JSON.parse(infoJsonRaw) != null) {
                                            infoJson = JSON.parse(infoJsonRaw);
                                        }
                                    }
                                    
                                    for(var i = 0; i < data['metrics_prop'].length; i++) 
                                    {
                                        var value_text_widget = $("#textarea-metric-widget-m").val();
                                        value_text_widget += "Name: " + data['metrics_prop'][i]['id_metric'] + ".\n";
                                        value_text_widget += "Description: " + data['metrics_prop'][i]['descrip_metric_widget'] + ".\n";
                                        value_text_widget += "Metric typology: " + data['metrics_prop'][i]['type_metric_widget'] + ".\n";
                                        metricType = data['metrics_prop'][i]['type_metric_widget'];
                                        value_text_widget += "Data Area: " + data['metrics_prop'][i]['area_metric_widget'] + ".\n";
                                        value_text_widget += "Data Source: " + data['metrics_prop'][i]['source_metric_widget'] + ".\n";
                                        value_text_widget += "Status: " + data['metrics_prop'][i]['status_metric_widget'] + ".";
                                        if(i !== ((data['metrics_prop'].length) - 1)) 
                                        {
                                            value_text_widget += "\n\n";
                                        }
                                        $("#textarea-metric-widget-m").val(value_text_widget);
                                    }
                                    
                                    //Titolo obbligatorio per tutti
                                    $('#inputTitleWidgetM').prop('required', true);
                                    
                                    switch($('#select-widget-m').val())
                                    {
                                        case "widgetSpeedLimit":
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-IntTemp-Widget-m').attr('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $("#urlWidgetM").prop('disabled', true);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').val(data.fontSize);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').prop('required', false);
                                        $('#inputFontColorM').val('');
                                        $('#inputFontColorM').prop('disabled', true);
                                        $('#widgetFontColorM').css("background-color", "#eeeeee");
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        
                                        $("#xAxisDatasetM").prop('required', false);
                                        $("#lineWidthM").prop('required', false);
                                        $("#alrLookM").prop('required', false);
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();

                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        
                                        newLabel = $('<label for="speedLimitEntityId" class="col-md-2 control-label"><?php echo _("Entity ID"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-4"></div>');
                                        newControl = $('<input type="text" name="speedLimitEntityId" class="form-control" id="speedLimitEntityId"/>');
                                        newControl.val(currentParams.entityId);
                                        newInnerDiv.append(newControl);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        newLabel = $('<label for="speedLimitAttributeName" class="col-md-2 control-label">Entity attribute name</label>');
                                        newInnerDiv = $('<div class="col-md-4"></div>');
                                        newControl = $('<input type="text" name="speedLimitAttributeName" class="form-control" id="speedLimitAttributeName"/>');
                                        newControl.val(currentParams.attributeName);
                                        newInnerDiv.append(newControl);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);

                                        newLabel = $('<label for="speedLimitUpdateTime" class="col-md-2 control-label"><?php echo _("Update time(s)"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-4"></div>');
                                        newControl = $('<input type="text" name="speedLimitUpdateTime" class="form-control" id="speedLimitUpdateTime"/>');
                                        newControl.val(currentParams.updateTime);
                                        newInnerDiv.append(newControl);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        $("#parametersM").val(JSON.stringify(currentParams));
                                        
                                        $('#specificParamsM #speedLimitEntityId').on('input',function(e){
                                            currentParams.entityId = $('#specificParamsM #speedLimitEntityId').val()
                                            $("#parametersM").val(JSON.stringify(currentParams));
                                        });
                                       
                                        $('#specificParamsM #speedLimitAttributeName').on('input',function(e)
                                        {
                                            currentParams.attributeName = $('#specificParamsM #speedLimitAttributeName').val()
                                            $("#parametersM").val(JSON.stringify(currentParams));
                                        });
                                        
                                        $('#specificParamsM #speedLimitUpdateTime').on('input',function(e)
                                        {
                                            currentParams.updateTime = $('#specificParamsM #speedLimitUpdateTime').val()
                                            $("#parametersM").val(JSON.stringify(currentParams));
                                        });
                                    break;
									
                                    case "widgetLightBulb":
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-IntTemp-Widget-m').attr('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $("#urlWidgetM").prop('disabled', true);
                                        $('#inputFontSizeM').prop('required', false);
                                        $('#inputFontSizeM').val('');
                                        $('#inputFontSizeM').prop('disabled', true);
                                        $('#inputFontColorM').prop('required', false);
                                        $('#inputFontColorM').val('');
                                        $('#inputFontColorM').prop('disabled', true);
                                        $('#widgetFontColorM').css("background-color", "#eeeeee");
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        $("#xAxisDatasetM").prop('required', false);
                                        $("#lineWidthM").prop('required', false);
                                        $("#alrLookM").prop('required', false);
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();

                                        newFormRow = $('<div class="row"></div>');
                                        newLabel = $('<label for="trafficLightEntityIdM" class="col-md-2 control-label"><?php echo _("Entity ID"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-4"></div>');
                                        newControl = $('<input type="text" name="trafficLightEntityIdM" class="form-control" id="trafficLightEntityIdM"/>');
                                        newControl.val(currentParams.entityId);
                                        $("#parametersM").val(JSON.stringify(currentParams));
                                        newControl.on('input',function(e){
                                            currentParams.entityId = newControl.val()
                                            $("#parametersM").val(JSON.stringify(currentParams));
                                        });
                                        newInnerDiv.append(newControl);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        $("#specificParamsM").append(newFormRow);
                                    break;
                                    
                                    case "widgetTrafficLight":
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-IntTemp-Widget-m').attr('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $("#urlWidgetM").prop('disabled', true);
                                        $('#inputFontSizeM').prop('required', false);
                                        $('#inputFontSizeM').val('');
                                        $('#inputFontSizeM').prop('disabled', true);
                                        $('#inputFontColorM').prop('required', false);
                                        $('#inputFontColorM').val('');
                                        $('#inputFontColorM').prop('disabled', true);
                                        $('#widgetFontColorM').css("background-color", "#eeeeee");
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        $("#xAxisDatasetM").prop('required', false);
                                        $("#lineWidthM").prop('required', false);
                                        $("#alrLookM").prop('required', false);
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();

                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="trafficLightEntityIdM" class="col-md-2 control-label"><?php echo _("Entity ID"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-4"></div>');
                                        newControl = $('<input type="text" name="trafficLightEntityIdM" class="form-control" id="trafficLightEntityIdM"/>');
                                        newControl.val(currentParams.entityId);
                                        newInnerDiv.append(newControl);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        newLabel = $('<label for="trafficLightAttributeNameM" class="col-md-2 control-label"><?php echo _("Attribute name"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-4"></div>');
                                        newControl = $('<input type="text" name="trafficLightAttributeNameM" class="form-control" id="trafficLightAttributeNameM"/>');
                                        newControl.val(currentParams.attributeName);
                                        newInnerDiv.append(newControl);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);

                                        newLabel = $('<label for="trafficLightUpdateTimeM" class="col-md-2 control-label"><?php echo _("Update time(s)"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-4"></div>');
                                        newControl = $('<input type="text" name="trafficLightUpdateTimeM" class="form-control" id="trafficLightUpdateTimeM"/>');
                                        newControl.val(currentParams.updateTime);
                                        newInnerDiv.append(newControl);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        $("#parametersM").val(JSON.stringify(currentParams));
                                        
                                        $('#specificParamsM #trafficLightEntityIdM').on('input',function(e){
                                            currentParams.entityId = $('#specificParamsM #trafficLightEntityIdM').val();
                                            $("#parametersM").val(JSON.stringify(currentParams));
                                        });
                                        
                                        $('#specificParamsM #trafficLightAttributeNameM').on('input',function(e){
                                            currentParams.attributeName = $('#specificParamsM #trafficLightAttributeNameM').val();
                                            $("#parametersM").val(JSON.stringify(currentParams));
                                        });
                                        
                                        $('#specificParamsM #trafficLightUpdateTimeM').on('input',function(e)
                                        {
                                            currentParams.updateTime = $('#specificParamsM #trafficLightUpdateTimeM').val();
                                            $("#parametersM").val(JSON.stringify(currentParams));
                                        });
                                    break;
                                    
                                    case "widgetServerStatus":
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-IntTemp-Widget-m').attr('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $("#urlWidgetM").prop('disabled', false);
                                        $('#inputFontSizeM').prop('required', false);
                                        $('#inputFontSizeM').val('');
                                        $('#inputFontSizeM').prop('disabled', true);
                                        $('#inputFontColorM').prop('required', false);
                                        $('#inputFontColorM').val('');
                                        $('#inputFontColorM').prop('disabled', true);
                                        $('#widgetFontColorM').css("background-color", "#eeeeee");
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        $("#xAxisDatasetM").prop('required', false);
                                        $("#lineWidthM").prop('required', false);
                                        $("#alrLookM").prop('required', false);
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        
                                        editWidgetServerStatusGeneratorRegisterField(data['notificatorRegistered'], data['notificatorEnabled'], data['param_w']);
                                        break;
                                    
                                    case "widgetSelectorWeb":
                                        var imgMaxSizeM, newControlM = null;  
                                        if(styleParamsRaw !== null) 
                                        {
                                            styleParameters = JSON.parse(styleParamsRaw);
                                        }
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#inputFontColorM').prop('disabled', false);
                                        $('#widgetFontColorM').css("background-color", data['fontColor']);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', true);
                                        $('#inputFreqWidgetM').prop('required', false);
                                        $('#inputFreqWidgetM').val("");
                                        $('#urlWidgetM').attr('disabled', true);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        var widgetsNumber = 0;
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan, editGisParameters, 
                                            widgetId, widgetTitle, newTableRow, newTableCell = null;

                                        var editGisParameters = currentParams;
                                        $("#parametersM").val(JSON.stringify(editGisParameters));
                                        setEditGisParameters(editGisParameters);

                                        //Target widgets geolocation
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="editGisGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Map widgets"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-4"></div>');
                                        newSelect = $('<select name="editGisGeolocationWidgets" class="form-control" id="editGisGeolocationWidgets" multiple></select>');

                                        $("li.gs_w").each(function(){
                                            if($(this).attr("id").includes("ExternalContent")&&($(this).find("div.widget").attr("data-role") === "selectorWebTarget"))
                                            {
                                              widgetId = $(this).attr("id");
                                              widgetTitle = $(this).find("div.titleDiv").html();
                                              newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                              widgetsNumber++;
                                            }
                                        });

                                        if(widgetsNumber > 0)
                                        {
                                            newInnerDiv.append(newSelect);
                                        }
                                        else
                                        {
                                            newInnerDiv.append("None");
                                        }

                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);

                                        if(widgetsNumber > 0)
                                        {
                                            $('#editGisGeolocationWidgets').selectpicker({
                                               actionsBox: true, 
                                               width: "auto"
                                            });
                                            
                                            $('#editGisGeolocationWidgets').selectpicker('val', editGisParameters.targets);

                                            $('#editGisGeolocationWidgets').on('changed.bs.select', function (e) 
                                            {
                                                if($(this).val() === null)
                                                {
                                                    editGisParameters.targets = [];
                                                }
                                                else
                                                {
                                                    editGisParameters.targets = $(this).val();
                                                }
                                                $("#parametersM").val(JSON.stringify(editGisParameters));
                                            });
                                        }
                                        
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="editGisRectDim" class="col-md-2 control-label">Rows height</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newControlM = $('<input id="editGisRectDim" name="editGisRectDim" data-slider-ticks="[1, 2, 3, 4]" data-slider-id="editGisRectDimSlider" type="text" data-slider-min="1" data-slider-max="4" data-slider-step="1"/>');
                                        newInnerDiv.append(newControlM);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);

                                        $('#editGisRectDim').bootstrapSlider({
                                            ticks_labels: ["small", "mid", "large", "fit"],
                                            value: styleParameters.rectDim,
                                            tooltip: 'hide',
                                            formatter: function(value) {
                                               switch(value)
                                               {
                                                    case 1:
                                                       return "25px";
                                                       break;

                                                    case 2:
                                                        return "50px";
                                                        break;

                                                    case 3:
                                                        return "75px";
                                                        break;

                                                    case 4:
                                                        return "Rectangles fit widget's height";
                                                        break;    
                                               }
                                            }
                                        });
                                        
                                        //Workaround per evitare che le label dello slider vengano tutte ammassate fra di loro: bug del componente?
                                        setTimeout(function(){
                                            $("#editGisRectDimSlider div.slider-tick-label-container").css("margin-left", "-18.6667px");
                                            $("#editGisRectDimSlider div.slider-tick-label-container div.slider-tick-label").css("width", "37.3333px");
                                        }, 250);
                                        
                                        //Colore testo quando picker attivo
                                        newLabel = $('<label for="editGisActiveQueriesFontColor" class="col-md-2 control-label"><?php echo _("Active rows font color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-4"></div>');
                                        var newColorPicker = $('<div id="editGisActiveQueriesFontColorContainer" class="input-group colorpicker-component"><input id="editGisActiveQueriesFontColor" name="editGisActiveQueriesFontColor" type="text" class="form-control input"/><span class="input-group-addon"><i></i></span></div>');
                                        newInnerDiv.append(newColorPicker);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);

                                        if (styleParameters != null) {
                                            $('#editGisActiveQueriesFontColorContainer').colorpicker({
                                                format: "rgba",
                                                color: styleParameters.activeFontColor
                                            });
                                        } else {
                                            $('#editGisActiveQueriesFontColorContainer').colorpicker({
                                                format: "rgba",
                                            });
                                        }

                                        //Modalità Icon/Text
                                    /*    newLabel = $('<label for="iconTextMode" class="col-md-2 control-label">Icon/Text Mode</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select name="iconTextMode" class="form-control" id="iconTextMode"></select>');
                                        newSelect.append('<option value="yes">Icon Only</option>');
                                        newSelect.append('<option value="no">Text Description</option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newSelect.val(styleParameters.iconText);
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel.show();
                                        newInnerDiv.show();*/

                                        //Nuova riga
                                        //Contenitore per tabella delle query
                                        var editGisQueryTableContainer = $('<div id="editGisQueryTableContainer" class="row rowCenterContent"></div>');
                                        var editGisQueryTable = $("<table id='editGisQueryTable' data-widgetType='selectorWeb' class='table table-bordered table-condensed thrRangeTable'><col style='width:64px'><col style='width:64px'><col style='width:64px'><col style='width:64px'><col style='width:128px'><col style='width:76px'><col style='width:128px'><col style='width:128px'><col style='width:128px'><col style='width:50px'><col style='width:50px'><tr><td><?php echo _("Default"); ?></td><td><?php echo _("Symbol mode"); ?></td><td><?php echo _("Symbol choice"); ?></td><td><?php echo _("Symbol preview"); ?></td><td><?php echo _("Description"); ?></td><td><?php echo _("Link"); ?></td><td><?php echo _("Color1"); ?></td><td><?php echo _("Color2"); ?></td><td><?php echo _("Order"); ?></td><td><a href='#'><i class='fa fa-plus' style='font-size:24px;color:#337ab7'></i></a></td></tr></table>");
                                        editGisQueryTableContainer.append(editGisQueryTable);
                                        $("#specificParamsM").append(editGisQueryTableContainer);

                                        editGisParameters.queries.sort(compareJsonElementsByKeyValues('rowOrder'));

                                        for(var i = 0; i < editGisParameters.queries.length; i++)
                                        {
                                            newTableRow = $('<tr></tr>');
                                            
                                            if(editGisParameters.queries[i].defaultOption === false)
                                            {
                                                newTableCell = $('<td><input data-param="queryDefaultOption" type="checkbox"/></td>');
                                            }
                                            else
                                            {
                                                newTableCell = $('<td><input data-param="queryDefaultOption" type="checkbox" checked/></td>');
                                            }
                                            
                                            newTableCell.find('input').bootstrapToggle({
                                                on: 'Yes',
                                                off: 'No',
                                                size: 'small',
                                                onstyle: 'warning',
                                                offstyle: 'primary'
                                            });

                                            newTableRow.append(newTableCell);
                                            
                                            newTableCell.find('div.toggle').click(function(){
                                                var rowIndex = $(this).parents("tr").index() - 1;
                                                 //Mutua esclusività per widgetSelectorWeb
                                                 if($('#editGisQueryTable').attr('data-widgetType') === 'selectorWeb')
                                                 {
                                                     $('#editGisQueryTable tr').each(function(i){
                                                         i = i - 1;

                                                         if((i !== rowIndex)&&(i !== -1))
                                                         {
                                                             $(this).find('td').eq(0).find('input[data-param=queryDefaultOption]').bootstrapToggle('off');
                                                         }
                                                     });
                                                 }
                                            });
                                            
                                            newTableCell.find('input').change(editGisUpdateParams);
                                            
                                            if(editGisParameters.queries[i].symbolMode === 'man')
                                            {
                                                newTableCell = $('<td><input data-param="queryIconOption" type="checkbox"/></td>');
                                            }
                                            else
                                            {
                                                newTableCell = $('<td><input data-param="queryIconOption" type="checkbox" checked/></td>');
                                            }
                                            
                                            newTableCell.find('input').bootstrapToggle({
                                                on: 'Auto',
                                                off: 'Man',
                                                size: 'small',
                                                onstyle: 'primary',
                                                offstyle: 'warning'
                                            });

                                            newTableRow.append(newTableCell);
                                            
                                            newTableCell = $('<td></td>');
                                            var imgMaxSize = $('<input type="hidden" name="MAX_FILE_SIZE" value="1000000" />');
                                            newTableCell.append(imgMaxSize);
                                            var newControl = $('<input type="file" class="form-control" name="editSelectorLogos[]">');
                                            newTableCell.append(newControl);
                                            newTableRow.append(newTableCell);
                                            
                                            newControl.filestyle({
                                                input: false,
                                                buttonText: "",
                                                buttonName: "btn-primary",
                                                size: "sm",
                                                disabled: false,
                                                badge: false
                                            });
                                            
                                            newTableRow.find('input[type=file]').change(function() 
                                            {
                                                var localRowRef = $(this).parents('tr');
                                                var file = this.files[0];
                                                var imagefile = file.type;
                                                var match= ["image/jpeg","image/png","image/jpg", "image/svg+xml"];
                                                if(!((imagefile === match[0]) || (imagefile === match[1]) || (imagefile === match[2]) || (imagefile === match[3])))
                                                {
                                                    return false;
                                                }
                                                else
                                                {
                                                    var reader = new FileReader();
                                                    reader.onload = function(event){
                                                        localRowRef.find('div.selectorMenuCustomIcon').html("");
                                                        localRowRef.find('div.selectorMenuCustomIcon').css("background", "url(" + event.target.result + ")");
                                                        localRowRef.find('div.selectorMenuCustomIcon').css("background-size", "contain");
                                                        localRowRef.find('div.selectorMenuCustomIcon').css("background-repeat", "no-repeat");
                                                        localRowRef.find('div.selectorMenuCustomIcon').css("background-position", "center center");
                                                    };
                                                    reader.readAsDataURL(this.files[0]);
                                                }
                                            });
                                            
                                            newTableCell = $('<td><i class="material-icons selectorMenuDefaultIcon" style="font-size: 34px; display: block;">navigation</i><div class="selectorMenuCustomIcon">None</div></td>');
                                            newTableRow.append(newTableCell);
                                            
                                            if(editGisParameters.queries[i].symbolMode === 'auto')
                                            {
                                                newTableRow.find('div.bootstrap-filestyle').hide();
                                                newTableRow.find('div.selectorMenuCustomIcon').hide();
                                                newTableRow.find('i.selectorMenuDefaultIcon').show();
                                            }
                                            else
                                            {
                                                newTableRow.find('div.bootstrap-filestyle').show();
                                                newTableRow.find('i.selectorMenuDefaultIcon').hide();
                                                newTableRow.find('div.selectorMenuCustomIcon').show();
                                                newTableRow.find('div.selectorMenuCustomIcon').css("width", "52px");
                                                newTableRow.find('div.selectorMenuCustomIcon').css("height", "33px");
                                                newTableRow.find('div.selectorMenuCustomIcon').html("");
                                                newTableRow.find('div.selectorMenuCustomIcon').css("background", "url(" + editGisParameters.queries[i].symbolFile + ")");
                                                newTableRow.find('div.selectorMenuCustomIcon').css("background-size", "contain");
                                                newTableRow.find('div.selectorMenuCustomIcon').css("background-repeat", "no-repeat");
                                                newTableRow.find('div.selectorMenuCustomIcon').css("background-position", "center center");
                                            }
                                            
                                            newTableRow.find('input[data-param=queryIconOption]').change(function(){
                                                var index = parseInt($(this).parents('tr').index() - 1);
                                                if($(this).prop('checked'))
                                                {
                                                    $(this).parents('tr').find('div.bootstrap-filestyle').hide();
                                                    $(this).parents('tr').find('div.selectorMenuCustomIcon').hide();
                                                    $(this).parents('tr').find('i.selectorMenuDefaultIcon').show();
                                                    editGisParameters.queries[index].symbolMode = "auto";
                                                }
                                                else
                                                {
                                                    $(this).parents('tr').find('div.bootstrap-filestyle').show();
                                                    $(this).parents('tr').find('i.selectorMenuDefaultIcon').hide();
                                                    $(this).parents('tr').find('div.selectorMenuCustomIcon').show();
                                                    $(this).parents('tr').find('div.selectorMenuCustomIcon').css("width", $(this).parents('tr').find('div.selectorMenuCustomIcon').parents('td').width() + "px");
                                                    $(this).parents('tr').find('div.selectorMenuCustomIcon').css("height", $(this).parents('tr').find('div.selectorMenuCustomIcon').parents('td').height() + "px");
                                                    editGisParameters.queries[index].symbolMode = "man";
                                                }
                                                
                                                $('#parametersM').val(JSON.stringify(editGisParameters));
                                            });
                                            
                                            newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="queryDesc"></a></td>');
                                            newTableCell.find('a').editable({
                                                emptytext: "Empty",
                                                display: function(value, response){
                                                    if(value.length > 16)
                                                    {
                                                        $(this).html(value.substring(0, 13) + "...");
                                                    }
                                                    else
                                                    {
                                                       $(this).html(value); 
                                                    }
                                                },
                                                value: editGisParameters.queries[i].desc
                                            });
                                            newTableRow.append(newTableCell);

                                            newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="queryUrl"></td>');
                                            newTableCell.find('a').editable({
                                                emptytext: "Empty",
                                                display: function(value, response){
                                                    if(value.length > 10)
                                                    {
                                                        $(this).html(value.substring(0, 10) + "...");
                                                    }
                                                    else
                                                    {
                                                       $(this).html(value); 
                                                    }
                                                },
                                                value: editGisParameters.queries[i].query
                                            });
                                            newTableRow.append(newTableCell);

                                            newTableCell = $('<td><div class="input-group colorPicker" data-param="color1"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                            newTableRow.append(newTableCell);
                                            newTableRow.find('div.colorPicker').colorpicker({color: editGisParameters.queries[i].color1, format: "rgba"});
                                            newTableRow.find('div.colorPicker').on('hidePicker', editGisUpdateParams); 

                                            newTableCell = $('<td><div class="input-group colorPicker" data-param="color2"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                            newTableRow.append(newTableCell);
                                            newTableRow.find('div.colorPicker').colorpicker({color: editGisParameters.queries[i].color2, format: "rgba"});
                                            newTableRow.find('div.colorPicker').on('hidePicker', editGisUpdateParams);

                                            var rowOrder = editGisParameters.queries[i].rowOrder;
                                            /*    if (rowOrder != null && rowOrder != null) {
                                                    newTableCell = $('<td><div class="input-group rowOrder" data-param="rowOrder"><input type="text" class="form-control"></div>' + rowOrder + '</td>');
                                                } else {
                                                    newTableCell = $('<td><div class="input-group rowOrder" data-param="rowOrder"><input type="text" class="form-control"></div></td>');
                                                }
                                                newTableRow.append(newTableCell);
                                                newTableRow.find('div.rowOrder').on('change', editGisUpdateParams);*/

                                            newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="rowOrder"></td>');
                                            newTableCell.find('a').editable({
                                                emptytext: "Empty",
                                                display: function (value, response) {
                                                    if (value.length > 10) {
                                                        $(this).html(value.substring(0, 10) + "...");
                                                    }
                                                    else {
                                                        $(this).html(value);
                                                    }
                                                },
                                                value: editGisParameters.queries[i].rowOrder
                                            });

                                            newTableRow.append(newTableCell);

                                            newTableCell = $('<td><a><i class="fa fa-close" style="font-size:24px;color:red"></i></a></td>');
                                            newTableCell.find('i').click(delGisQueryM);
                                            newTableRow.append(newTableCell);
                                            newTableRow.find('a.toBeEdited').on('save', editGisUpdateParams);

                                            $("#editGisQueryTable").append(newTableRow);     
                                        }
                                        
                                        $("#editGisQueryTable i.fa-plus").click(addGisQueryM);
                                        break; 
                                        
                                        case "widgetSelector":
                                        var imgMaxSizeM, newControlM = null;  
                                        if(styleParamsRaw !== null) 
                                        {
                                            styleParameters = JSON.parse(styleParamsRaw);
                                        }
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#inputFontColorM').prop('disabled', false);
                                        $('#widgetFontColorM').css("background-color", data['fontColor']);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', true);
                                        $('#inputFreqWidgetM').prop('required', false);
                                        $('#inputFreqWidgetM').val("");
                                        $('#urlWidgetM').attr('disabled', true);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        var widgetsNumber = 0;
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan, editGisParameters, 
                                            widgetId, widgetTitle, newTableRow, newTableCell = null;

                                        var editGisParameters = currentParams;
                                        $("#parametersM").val(JSON.stringify(editGisParameters));
                                        setEditGisParameters(editGisParameters);

                                        //Target widgets geolocation
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="editGisGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Map widgets"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-4"></div>');
                                        newSelect = $('<select name="editGisGeolocationWidgets" class="form-control" id="editGisGeolocationWidgets" multiple></select>');

                                        $("li.gs_w").each(function(){
                                            if($(this).attr("id").includes("ExternalContent")&&($(this).find("div.widget").attr("data-role") === "gisTarget"))
                                            {
                                              widgetId = $(this).attr("id");
                                              widgetTitle = $(this).find("div.titleDiv").html();
                                              newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                              widgetsNumber++;
                                            }
                                        });

                                        if(widgetsNumber > 0)
                                        {
                                            newInnerDiv.append(newSelect);
                                        }
                                        else
                                        {
                                            newInnerDiv.append("None");
                                        }

                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);

                                        if(widgetsNumber > 0)
                                        {
                                            $('#editGisGeolocationWidgets').selectpicker({
                                               actionsBox: true, 
                                               width: "auto"
                                            });
                                            
                                            $('#editGisGeolocationWidgets').selectpicker('val', editGisParameters.targets);

                                            $('#editGisGeolocationWidgets').on('changed.bs.select', function (e) 
                                            {
                                                if($(this).val() === null)
                                                {
                                                    editGisParameters.targets = [];
                                                }
                                                else
                                                {
                                                    editGisParameters.targets = $(this).val();
                                                }
                                                $("#parametersM").val(JSON.stringify(editGisParameters));
                                            });
                                        }
                                        
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        
                                        //Colore testo quando picker attivo
                                        newLabel = $('<label for="editGisActiveQueriesFontColor" class="col-md-2 control-label"><?php echo _("Active rows font color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-4"></div>');
                                        var newColorPicker = $('<div id="editGisActiveQueriesFontColorContainer" class="input-group colorpicker-component"><input id="editGisActiveQueriesFontColor" name="editGisActiveQueriesFontColor" type="text" class="form-control input"/><span class="input-group-addon"><i></i></span></div>');
                                        newInnerDiv.append(newColorPicker);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);

                                        if (styleParameters != null) {
                                            $('#editGisActiveQueriesFontColorContainer').colorpicker({
                                                format: "rgba",
                                                color: styleParameters.activeFontColor
                                            });
                                        } else {
                                            $('#editGisActiveQueriesFontColorContainer').colorpicker({
                                                format: "rgba",
                                            });
                                        }

                                        //Modalità Icon/Text
                                     /*   newLabel = $('<label for="iconTextMode" class="col-md-2 control-label">Icon/Text Mode</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select name="iconTextMode" class="form-control" id="iconTextMode"></select>');
                                        newSelect.append('<option value="yes">Icon Only</option>');
                                        newSelect.append('<option value="no">Text Description</option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newSelect.val(styleParameters.iconText);
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel.show();
                                        newInnerDiv.show();*/

                                        //Nuova riga
                                        //Contenitore per tabella delle query
                                        var editGisQueryTableContainer = $('<div id="editGisQueryTableContainer" class="row rowCenterContent"></div>');
                                        var editGisQueryTable = $("<table id='editGisQueryTable' data-widgetType='selector' class='table table-bordered table-condensed thrRangeTable'><col style='width:64px'><col style='width:64px'><col style='width:64px'><col style='width:64px'><col style='width:128px'><col style='width:76px'><col style='width:128px'><col style='width:128px'><col style='width:128px'><col style='width:128px'><col style='width:50px'><col style='width:50px'><tr><td><?php echo _("Default"); ?></td><td><?php echo _("Symbol mode"); ?></td><td><?php echo _("Symbol choice"); ?></td><td><?php echo _("Symbol preview"); ?></td><td><?php echo _("Description"); ?></td><td><?php echo _("Query"); ?></td><td><?php echo _("Color1"); ?></td><td><?php echo _("Color2"); ?></td><td><?php echo _("Data widgets"); ?></td><td><?php echo _("Display"); ?></td><td><?php echo _("Order"); ?></td><td><a href='#'><i class='fa fa-plus' style='font-size:24px;color:#337ab7'></i></a></td></tr></table>");
                                        editGisQueryTableContainer.append(editGisQueryTable);
                                        $("#specificParamsM").append(editGisQueryTableContainer);

                                        editGisParameters.queries.sort(compareJsonElementsByKeyValues('rowOrder'));

                                        for(var i = 0; i < editGisParameters.queries.length; i++)
                                        {
                                            newTableRow = $('<tr></tr>');
                                            
                                            if(editGisParameters.queries[i].defaultOption === false)
                                            {
                                                newTableCell = $('<td><input data-param="queryDefaultOption" type="checkbox"/></td>');
                                            }
                                            else
                                            {
                                                newTableCell = $('<td><input data-param="queryDefaultOption" type="checkbox" checked/></td>');
                                            }
                                            
                                            newTableCell.find('input').bootstrapToggle({
                                                on: 'Yes',
                                                off: 'No',
                                                size: 'small',
                                                onstyle: 'warning',
                                                offstyle: 'primary'
                                            });

                                            newTableRow.append(newTableCell);
                                            newTableCell.find('input').change(editGisUpdateParams);
                                            
                                            if(editGisParameters.queries[i].symbolMode === 'man')
                                            {
                                                newTableCell = $('<td><input data-param="queryIconOption" type="checkbox"/></td>');
                                            }
                                            else
                                            {
                                                newTableCell = $('<td><input data-param="queryIconOption" type="checkbox" checked/></td>');
                                            }
                                            
                                            newTableCell.find('input').bootstrapToggle({
                                                on: 'Auto',
                                                off: 'Man',
                                                size: 'small',
                                                onstyle: 'primary',
                                                offstyle: 'warning'
                                            });

                                            newTableRow.append(newTableCell);
                                            
                                            newTableCell = $('<td></td>');
                                            var imgMaxSize = $('<input type="hidden" name="MAX_FILE_SIZE" value="1000000" />');
                                            newTableCell.append(imgMaxSize);
                                            var newControl = $('<input type="file" class="form-control" name="editSelectorLogos[]">');
                                            newTableCell.append(newControl);
                                            newTableRow.append(newTableCell);
                                            
                                            newControl.filestyle({
                                                input: false,
                                                buttonText: "",
                                                buttonName: "btn-primary",
                                                size: "sm",
                                                disabled: false,
                                                badge: false
                                            });
                                            
                                            newTableRow.find('input[type=file]').change(function() 
                                            {
                                                var localRowRef = $(this).parents('tr');
                                                var file = this.files[0];
                                                var imagefile = file.type;
                                                var match= ["image/jpeg","image/png","image/jpg", "image/svg+xml"];
                                                if(!((imagefile === match[0]) || (imagefile === match[1]) || (imagefile === match[2]) || (imagefile === match[3])))
                                                {
                                                    return false;
                                                }
                                                else
                                                {
                                                    var reader = new FileReader();
                                                    reader.onload = function(event){
                                                        localRowRef.find('div.selectorMenuCustomIcon').html("");
                                                        localRowRef.find('div.selectorMenuCustomIcon').css("background", "url(" + event.target.result + ")");
                                                        localRowRef.find('div.selectorMenuCustomIcon').css("background-size", "contain");
                                                        localRowRef.find('div.selectorMenuCustomIcon').css("background-repeat", "no-repeat");
                                                        localRowRef.find('div.selectorMenuCustomIcon').css("background-position", "center center");
                                                    };
                                                    reader.readAsDataURL(this.files[0]);
                                                }
                                            });
                                            
                                            newTableCell = $('<td><i class="material-icons selectorMenuDefaultIcon" style="font-size: 34px; display: block;">navigation</i><div class="selectorMenuCustomIcon">None</div></td>');
                                            newTableRow.append(newTableCell);
                                            
                                            if(editGisParameters.queries[i].symbolMode === 'auto')
                                            {
                                                newTableRow.find('div.bootstrap-filestyle').hide();
                                                newTableRow.find('div.selectorMenuCustomIcon').hide();
                                                newTableRow.find('i.selectorMenuDefaultIcon').show();
                                            }
                                            else
                                            {
                                                newTableRow.find('div.bootstrap-filestyle').show();
                                                newTableRow.find('i.selectorMenuDefaultIcon').hide();
                                                newTableRow.find('div.selectorMenuCustomIcon').show();
                                                newTableRow.find('div.selectorMenuCustomIcon').css("width", "52px");
                                                newTableRow.find('div.selectorMenuCustomIcon').css("height", "33px");
                                                newTableRow.find('div.selectorMenuCustomIcon').html("");
                                                newTableRow.find('div.selectorMenuCustomIcon').css("background", "url(" + editGisParameters.queries[i].symbolFile + ")");
                                                newTableRow.find('div.selectorMenuCustomIcon').css("background-size", "contain");
                                                newTableRow.find('div.selectorMenuCustomIcon').css("background-repeat", "no-repeat");
                                                newTableRow.find('div.selectorMenuCustomIcon').css("background-position", "center center");
                                            }
                                            
                                            newTableRow.find('input[data-param=queryIconOption]').change(function(){
                                                var index = parseInt($(this).parents('tr').index() - 1);
                                                if($(this).prop('checked'))
                                                {
                                                    $(this).parents('tr').find('div.bootstrap-filestyle').hide();
                                                    $(this).parents('tr').find('div.selectorMenuCustomIcon').hide();
                                                    $(this).parents('tr').find('i.selectorMenuDefaultIcon').show();
                                                    editGisParameters.queries[index].symbolMode = "auto";
                                                }
                                                else
                                                {
                                                    $(this).parents('tr').find('div.bootstrap-filestyle').show();
                                                    $(this).parents('tr').find('i.selectorMenuDefaultIcon').hide();
                                                    $(this).parents('tr').find('div.selectorMenuCustomIcon').show();
                                                    $(this).parents('tr').find('div.selectorMenuCustomIcon').css("width", $(this).parents('tr').find('div.selectorMenuCustomIcon').parents('td').width() + "px");
                                                    $(this).parents('tr').find('div.selectorMenuCustomIcon').css("height", $(this).parents('tr').find('div.selectorMenuCustomIcon').parents('td').height() + "px");
                                                    editGisParameters.queries[index].symbolMode = "man";
                                                }
                                                
                                                $('#parametersM').val(JSON.stringify(editGisParameters));
                                            });
                                            
                                            newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="queryDesc"></a></td>');
                                            newTableCell.find('a').editable({
                                                emptytext: "Empty",
                                                display: function(value, response){
                                                    if(value.length > 16)
                                                    {
                                                        $(this).html(value.substring(0, 13) + "...");
                                                    }
                                                    else
                                                    {
                                                       $(this).html(value); 
                                                    }
                                                },
                                                value: editGisParameters.queries[i].desc
                                            });
                                            newTableRow.append(newTableCell);

                                            newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="queryUrl"></td>');
                                            newTableCell.find('a').editable({
                                                emptytext: "Empty",
                                                display: function(value, response){
                                                    if(value.length > 10)
                                                    {
                                                        $(this).html(value.substring(0, 10) + "...");
                                                    }
                                                    else
                                                    {
                                                       $(this).html(value); 
                                                    }
                                                },
                                                value: editGisParameters.queries[i].query
                                            });
                                            newTableRow.append(newTableCell);

                                            newTableCell = $('<td><div class="input-group colorPicker" data-param="color1"><input type="text" class="input form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                            newTableRow.append(newTableCell);
                                            newTableRow.find('div.colorPicker').colorpicker({color: editGisParameters.queries[i].color1, format: "rgba"});
                                            newTableRow.find('div.colorPicker').on('hidePicker', editGisUpdateParams); 

                                            newTableCell = $('<td><div class="input-group colorPicker" data-param="color2"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                            newTableRow.append(newTableCell);
                                            newTableRow.find('div.colorPicker').colorpicker({color: editGisParameters.queries[i].color2, format: "rgba"});
                                            newTableRow.find('div.colorPicker').on('hidePicker', editGisUpdateParams);
                                            
                                            newTableCell = $('<td><select data-param="targets" class="form-control" multiple></select></td>');
                                            newTableRow.append(newTableCell);

                                             $("li.gs_w").each(function(){
                                                 if(($(this).attr("id").includes("BarContent"))||($(this).attr("id").includes("ColumnContent"))||($(this).attr("id").includes("GaugeChart"))||($(this).attr("id").includes("PieChart"))||($(this).attr("id").includes("SingleContent"))||($(this).attr("id").includes("Speedometer"))||($(this).attr("id").includes("TimeTrend")))
                                                 {
                                                   widgetId = $(this).attr("id");
                                                   widgetTitle = $(this).find("div.titleDiv").html();
                                                   newTableRow.find('select').append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                 }
                                             });                               


                                            newTableRow.find('select').selectpicker({
                                                                                actionsBox: true, 
                                                                                width: 110
                                                                             });
                                            newTableRow.find('select').on('changed.bs.select', editGisUpdateParams);
                                            newTableRow.find('select').selectpicker('val', editGisParameters.queries[i].targets);
                                            
                                            newTableCell = $('<td><select data-param="display" class="form-control"></select></td>');
                                            newTableCell.find('select').append('<option value="pins"><?php echo _("Pins"); ?></option>');
                                            newTableCell.find('select').append('<option value="geometries"><?php echo _("Geometries"); ?></option>');
                                            newTableCell.find('select').append('<option value="all"><?php echo _("Pins and geometries"); ?></option>');
                                            newTableRow.append(newTableCell);
                                            newTableCell.find('select').val(editGisParameters.queries[i].display);
                                            newTableCell.find('select').on('change', editGisUpdateParams);

                                            var rowOrder = editGisParameters.queries[i].rowOrder;
                                            /*    if (rowOrder != null && rowOrder != null) {
                                                    newTableCell = $('<td><div class="input-group rowOrder" data-param="rowOrder"><input type="text" class="form-control"></div>' + rowOrder + '</td>');
                                                } else {
                                                    newTableCell = $('<td><div class="input-group rowOrder" data-param="rowOrder"><input type="text" class="form-control"></div></td>');
                                                }
                                                newTableRow.append(newTableCell);
                                                newTableRow.find('div.rowOrder').on('change', editGisUpdateParams);*/

                                            newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="rowOrder"></td>');
                                            newTableCell.find('a').editable({
                                                emptytext: "Empty",
                                                display: function (value, response) {
                                                    if (value.length > 10) {
                                                        $(this).html(value.substring(0, 10) + "...");
                                                    }
                                                    else {
                                                        $(this).html(value);
                                                    }
                                                },
                                                value: editGisParameters.queries[i].rowOrder
                                            });

                                            newTableRow.append(newTableCell);

                                            newTableCell = $('<td><a><i class="fa fa-close" style="font-size:24px;color:red"></i></a></td>');
                                            newTableCell.find('i').click(delGisQueryM);
                                            newTableRow.append(newTableCell);
                                            newTableRow.find('a.toBeEdited').on('save', editGisUpdateParams);

                                            $("#editGisQueryTable").append(newTableRow);     
                                        }
                                        
                                        $("#editGisQueryTable i.fa-plus").click(addGisQueryM);
                                        break;

                                        case "widgetSelectorNew":
                                            var imgMaxSizeM, newControlM = null;
                                            if (styleParamsRaw !== null) {
                                                styleParameters = JSON.parse(styleParamsRaw);
                                            }
                                        //    $('div.modalContentWidgetForm').css("width", "120%");
                                        //    $('div.modalContentWidgetForm').css("left", "50%");
                                            $('div.modalContentWidgetForm').css("width", "135%");
                                            $('div.modalContentWidgetForm').css("left", "50%");
                                            $('div.modalContentWidgetForm').css("margin-left", "-65%");
                                            $('div.wellCustomFooter').css("width", "100%");
                                            $('div.wellCustom2right').css("width", $('div.wellCustom2right').width() * 1.5);
                                            $('#link_help_modal-add-widget-m').css("display", "");
                                            $('#inputTitleWidgetM').attr('disabled', false);
                                            $("label[for='inputTitleWidgetM']").html("Title");
                                            $("label[for='inputColorWidgetM']").html("Background color");
                                            $('#inputColorWidgetM').attr('disabled', false);
                                            $('#inputColorWidgetM').prop('required', true);
                                            $('#inputFontSizeM').prop('required', true);
                                            $('#inputFontSizeM').prop('disabled', false);
                                            $('#inputFontColorM').prop('required', true);
                                            $('#inputFontColorM').prop('disabled', false);
                                            $('#widgetFontColorM').css("background-color", data['fontColor']);
                                            $('#select-frameColor-Widget-m').attr('disabled', false);
                                            $('#select-frameColor-Widget-m').prop('required', true);
                                            $('#select-frameColor-Widget-m').val('');
                                            $('#select-IntTemp-Widget-m').val(-1);
                                            $('#select-IntTemp-Widget-m').prop('disabled', true);
                                            $('#select-IntTemp-Widget-m').prop('required', false);
                                            $('#inputFreqWidgetM').prop('disabled', true);
                                            $('#inputFreqWidgetM').prop('required', false);
                                            $('#inputFreqWidgetM').val("");
                                            $('#urlWidgetM').attr('disabled', true);
                                            $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').prop('required', true);
                                            $('#inputUdmWidgetM').prop("required", false);
                                            $('#inputUdmWidgetM').attr("disabled", true);
                                            $('#inputUdmWidgetM').val("");
                                            $('#inputUdmPositionM').prop("required", false);
                                            $('#inputUdmPositionM').attr("disabled", true);
                                            $('#inputUdmPositionM').val(-1);

                                            var bubbleMetricsArray = [];

                                            //Rimozione eventuali campi del subform general per widget process
                                            removeWidgetProcessGeneralFields("editWidget");
                                            var widgetsNumber = 0;

                                            //Parametri specifici del widget
                                            $('#specificParamsM .row').remove();
                                            var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                                editGisParameters,
                                                widgetId, widgetTitle, newTableRow, newTableCell = null;

                                            var editGisParameters = currentParams;
                                            $("#parametersM").val(JSON.stringify(editGisParameters));
                                            setEditGisParameters(editGisParameters);

                                            //Target widgets geolocation
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="editGisGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Map widgets"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newSelect = $('<select name="editGisGeolocationWidgets" class="form-control" id="editGisGeolocationWidgets" multiple></select>');

                                            $("li.gs_w").each(function () {
                                                if ($(this).attr("id") != null) {
                                                    //    if ($(this).attr("id").includes("widgetMap") && ($(this).find("div.widget").attr("data-role") === "gisTarget")) {
                                                    if ($(this).attr("id").includes("widgetMap")) {
                                                        widgetId = $(this).attr("id");
                                                        widgetTitle = $(this).find("div.titleDiv").html();
                                                        newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                        widgetsNumber++;
                                                    }
                                                }
                                            });

                                            if (widgetsNumber > 0) {
                                                newInnerDiv.append(newSelect);
                                            }
                                            else {
                                                newInnerDiv.append("None");
                                            }

                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            if (widgetsNumber > 0) {
                                                $('#editGisGeolocationWidgets').selectpicker({
                                                    actionsBox: true,
                                                    width: "auto",
                                                    size: "auto"
                                                });

                                                $('#editGisGeolocationWidgets').selectpicker('val', editGisParameters.targets);

                                                $('#editGisGeolocationWidgets').on('changed.bs.select', function (e) {
                                                    if ($(this).val() === null) {
                                                        editGisParameters.targets = [];
                                                    }
                                                    else {
                                                        editGisParameters.targets = $(this).val();
                                                    }
                                                    $("#parametersM").val(JSON.stringify(editGisParameters));
                                                });
                                            }

                                    /*        // Bubble Map Selection
                                            newLabel = $('<label for="bubbleMap" class="col-md-1 control-label">Bubble/Marker Mode</label>');
                                            newInnerDiv = $('<div class="col-md-2"></div>');
                                            newSelect = $('<select name="bubbleMapMode" class="form-control" id="bubbleMapMode"></select>');
                                            newSelect.append('<option value="Bubbles">Icon Only</option>');
                                            newSelect.append('<option value="Markers">Text Description</option>');
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newSelect.val(styleParameters.bubbleMapMode);
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel.show();
                                            newInnerDiv.show();*/

                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);

                                            //Colore testo quando picker attivo
                                            newLabel = $('<label for="editGisActiveQueriesFontColor" class="col-md-2 control-label"><?php echo _("Active rows font color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-2"></div>');
                                            var newColorPicker = $('<div id="editGisActiveQueriesFontColorContainer" class="input-group colorpicker-component"><input id="editGisActiveQueriesFontColor" name="editGisActiveQueriesFontColor" type="text" class="form-control input"/><span class="input-group-addon"><i></i></span></div>');
                                            newInnerDiv.append(newColorPicker);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            if (styleParameters != null) {
                                                $('#editGisActiveQueriesFontColorContainer').colorpicker({
                                                    format: "rgba",
                                                    color: styleParameters.activeFontColor
                                                });
                                            } else {
                                                $('#editGisActiveQueriesFontColorContainer').colorpicker({
                                                    format: "rgba",
                                                });
                                            }

                                            //Modalità Icon/Text SelectorNew
                                            newLabel = $('<label for="iconTextMode" class="col-md-1 control-label"><?php echo _("Icon/Text Mode"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-2"></div>');
                                            newSelect = $('<select name="iconTextMode" class="form-control" id="iconTextMode"></select>');
                                            newSelect.append('<option value="Icon Only"><?php echo _("Icon Only"); ?></option>');
                                            newSelect.append('<option value="Text Description"><?php echo _("Text Description"); ?></option>');
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newSelect.val(styleParameters.iconText);
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel.show();
                                            newInnerDiv.show();

                                            $('#iconTextMode').change(function()
                                            {
                                                if($('#iconTextMode').val() === "Icon Only")
                                                {
                                                    $('#mapPinIcon').show();
                                                    $('#symbolColorColumn').show();
                                                    $('.symbolColorTd').show();
                                                    if ($('#mapPinIcon').val() === "Pin Icon")
                                                    {
                                                        $('#mapIconColorColumn').show();
                                                        $('.newMapPinColorTd').show();
                                                    } else {
                                                        $('#mapIconColorColumn').hide();
                                                        $('.newMapPinColorTd').hide();
                                                    }
                                                }
                                                else
                                                {
                                                    $('#mapPinIcon').hide();
                                                    $('#symbolColorColumn').hide();
                                                    $('.symbolColorTd').hide();
                                                }
                                            });

                                            // Map Pins Icon
                                        /*    newTableCell = $('<td><select data-param="mapPinIcon" class="form-control"></select></td>');
                                            newTableCell.find('select').append('<option value="old">Old</option>');
                                            newTableCell.find('select').append('<option value="new">New</option>');
                                            newTableRow.append(newTableCell);
                                            newTableCell.find('select').val(editGisParameters.queries[i].mapPinIcon);
                                            newTableCell.find('select').on('change', editGisUpdateParams);*/

                                            //Modalità Icon/Text SelectorNew
                                            newLabel = $('<label for="mapPinIcon" class="col-md-1 control-label"><?php echo _("Map Pin Icon"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-2"></div>');
                                            newSelect = $('<select name="mapPinIcon" class="form-control" id="mapPinIcon"></select>');
                                            newSelect.append('<option value="Square Icon"><?php echo _("Square Icon"); ?></option>');
                                            newSelect.append('<option value="Pin Icon"><?php echo _("Pin Icon"); ?></option>');
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newSelect.val(styleParameters.mapPinIcon);
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel.show();
                                            newInnerDiv.show();

                                            $('#mapPinIcon').change(function()
                                            {
                                                if($('#mapPinIcon').val() === "Pin Icon")
                                                {
                                                    $('#mapIconColorColumn').show();
                                                    $('.newMapPinColorTd').show();
                                                }
                                                else
                                                {
                                                    $('#mapIconColorColumn').hide();
                                                    $('.newMapPinColorTd').hide();
                                                }
                                            });

                                            //Nuova riga
                                            //Contenitore per tabella delle query
                                            var editGisQueryTableContainer = $('<div id="editGisQueryTableContainer" class="row rowCenterContent"></div>');
                                         //   var editGisQueryTable = $("<table id='editGisQueryTable' data-name_w='" + data.name_widget + "' data-widgetType='selectorNew' class='table table-bordered table-condensed thrRangeTable'><col style='width:64px'><col style='width:64px'><col style='width:120px'><col style='width:64px'><col style='width:120px'><col style='width:128px'><col style='width:128px'><col style='width:128px'><col style='width:128px'><col style='width:128px'><col style='width:76px'><col style='width:120px'><col style='width:84px'><col style='width:120px'><col style='width:128px'><col style='width:50px'><col style='width:50px'><tr><td><?php echo _("Default"); ?></td><td><?php echo _("Symbol mode"); ?></td><td><?php echo _("Symbol choice"); ?></td><td><?php echo _("Symbol preview"); ?></td><td id='symbolColorColumn'>Symbol color</td><td><?php echo _("Description"); ?></td><td><?php echo _("Query"); ?></td><td><?php echo _("Color1"); ?></td><td><?php echo _("Color2"); ?></td><td><?php echo _("Data widgets"); ?></td><td><?php echo _("Display"); ?></td><td id='mapIconColorColumn'>Map Icon color</td><td id='mapBubbleColumn'>Bubble</td><td id='mapBubbleAttr'>Bubble Metric</td><td>Bubble Color</td><td><?php echo _("Order"); ?></td><td><a href='#'><i class='fa fa-plus' style='font-size:24px;color:#337ab7'></i></a></td></tr></table>");
                                            var editGisQueryTable = $("<table id='editGisQueryTable' data-name_w='" + data.name_widget + "' data-widgetType='selectorNew' class='table table-bordered table-condensed thrRangeTable'><col style='width:64px'><col style='width:64px'><col style='width:120px'><col style='width:64px'><col style='width:120px'><col style='width:128px'><col style='width:128px'><col style='width:128px'><col style='width:128px'><col style='width:128px'><col style='width:76px'><col style='width:120px'><col style='width:84px'><col style='width:120px'><col style='width:50px'><col style='width:50px'><tr><td><?php echo _("Default"); ?></td><td><?php echo _("Symbol mode"); ?></td><td><?php echo _("Symbol choice"); ?></td><td><?php echo _("Symbol preview"); ?></td><td id='symbolColorColumn'>Symbol color</td><td><?php echo _("Description"); ?></td><td><?php echo _("Query"); ?></td><td><?php echo _("Color1"); ?></td><td><?php echo _("Color2"); ?></td><td><?php echo _("Data widgets"); ?></td><td>Default View Mode</td><td id='mapIconColorColumn'>Map Icon color</td><td id='mapBubbleColumn'>Alternate View Mode</td><td id='mapBubbleAttr'>Variable Name</td><td><?php echo _("Order"); ?></td><td><a href='#'><i class='fa fa-plus' style='font-size:24px;color:#337ab7'></i></a></td></tr></table>");
                                            editGisQueryTableContainer.append(editGisQueryTable);
                                            $("#specificParamsM").append(editGisQueryTableContainer);

                                            editGisParameters.queries.sort(compareJsonElementsByKeyValues('rowOrder'));
                                            var allIcons = getIconsPool();

                                            for (var i = 0; i < editGisParameters.queries.length; i++) {

                                                var svgSingleReadVariablesObj = null;
                                                var iconPoolDatasetJSONCustom = null;
                                                if (editGisParameters.queries[i].bubble == "Bubble" || editGisParameters.queries[i].bubble == "CustomPin" || editGisParameters.queries[i].bubble == "DynamicCustomPin" || editGisParameters.queries[i].bubble == "BimShape" || editGisParameters.queries[i].bubble == "BimShapePopup") {

                                                    // RETRIEVE METRICS ARRAY FOR BUBBLE CHART (SERVER SIDE)
                                                    getBubbleMetrics(editGisParameters.queries[i].query, i, function(extractedMetrics) {
                                                        if (extractedMetrics) {
                                                            let index = extractedMetrics[0];
                                                            bubbleMetricsArray[index] = [];
                                                            if (extractedMetrics[1].metrics != null) {
                                                                if(extractedMetrics[1].metrics.length > 0) {
                                                                    bubbleMetricsArray[index].push(extractedMetrics[1].metrics);
                                                                    $('#' + $('#editGisQueryTable').attr('data-name_w') + '_pinCtn' + index).attr("data-bubblemetricsarray", extractedMetrics[1].metrics);
                                                                    if (bubbleMetricsArray[index][0] != null) {
                                                                        if (bubbleMetricsArray[index][0].length > 0) {
                                                                            for (let k = 0; k < bubbleMetricsArray[index][0].length; k++) {
                                                                                if (bubbleMetricsArray[index][k] === "loading available metrics..." || bubbleMetricsArray[index] === "no metrics available") {
                                                                                    $('#bubbleMetricsSelect' + index).append('<option style="color:darkgrey" value="' + bubbleMetricsArray[index][0][k] + '" disabled>' + bubbleMetricsArray[index][0][k] + '</option>');
                                                                                } else {
                                                                                    $('#bubbleMetricsSelect' + index).append('<option value="' + bubbleMetricsArray[index][0][k] + '">' + bubbleMetricsArray[index][0][k] + '</option>');
                                                                                }
                                                                            }
                                                                            for (let sc = 0; sc < $('#bubbleMetricsSelect' + index).length; sc++) {
                                                                                if ($('#bubbleMetricsSelect' + index)[0].options[sc].value == 'loading available metrics...' || $('#bubbleMetricsSelect' + index).options[sc].value == 'no metrics available') {
                                                                                    $('#bubbleMetricsSelect' + index)[0].remove(sc);
                                                                                    break;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            $('#bubbleMetricsSelect' + index).append('<option style="color:darkgrey" value="no metrics available" disabled>no metrics available</option>');
                                                                            $('#bubbleMetricsSelect' + index).val("no metrics available");
                                                                            for (let sc = 0; sc < $('#bubbleMetricsSelect' + index).length; sc++) {
                                                                                if ($('#bubbleMetricsSelect' + index)[0].options[sc].value == 'loading available metrics...' || $('#bubbleMetricsSelect' + index).options[sc].value == 'no metrics available') {
                                                                                    $('#bubbleMetricsSelect' + index)[0].remove(sc);
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                    } else {
                                                                        $('#bubbleMetricsSelect' + index).append('<option style="color:darkgrey" value="no metrics available" disabled>no metrics available</option>');
                                                                        $('#bubbleMetricsSelect' + index).val("no metrics available");
                                                                        for (let sc = 0; sc < $('#bubbleMetricsSelect' + index).length; sc++) {
                                                                            if ($('#bubbleMetricsSelect' + index)[0].options[sc].value == 'loading available metrics...' || $('#bubbleMetricsSelect' + index).options[sc].value == 'no metrics available') {
                                                                                $('#bubbleMetricsSelect' + index)[0].remove(sc);
                                                                                break;
                                                                            }
                                                                        }
                                                                    }
                                                                    var stopFlag = 1;
                                                                } else {
                                                                    $('#bubbleMetricsSelect' + index).append('<option style="color:darkgrey" value="no metrics available" disabled>no metrics available</option>');
                                                                    $('#bubbleMetricsSelect' + index).val("no metrics available");
                                                                    for (let sc = 0; sc < $('#bubbleMetricsSelect' + index).length; sc++) {
                                                                        if ($('#bubbleMetricsSelect' + index)[0].options[sc].value == 'loading available metrics...' || $('#bubbleMetricsSelect' + index).options[sc].value == 'no metrics available') {
                                                                            $('#bubbleMetricsSelect' + index)[0].remove(sc);
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                $('#bubbleMetricsSelect' + index).append('<option style="color:darkgrey" value="no metrics available" disabled>no metrics available</option>');
                                                                $('#bubbleMetricsSelect' + index).val("no metrics available");
                                                                for (let sc = 0; sc < $('#bubbleMetricsSelect' + index).length; sc++) {
                                                                    if ($('#bubbleMetricsSelect' + index)[0].options[sc].value == 'loading available metrics...' || $('#bubbleMetricsSelect' + index).options[sc].value == 'no metrics available') {
                                                                        $('#bubbleMetricsSelect' + index)[0].remove(sc);
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    });
                                                }

                                                newTableRow = $('<tr></tr>');

                                                // Default CELL
                                                if (editGisParameters.queries[i].defaultOption === false ) {
                                                    newTableCell = $('<td><input data-param="queryDefaultOption" type="checkbox"/></td>');
                                                }
                                                else {
                                                    newTableCell = $('<td><input data-param="queryDefaultOption" type="checkbox" checked/></td>');
                                                }

                                                newTableCell.find('input').bootstrapToggle({
                                                    on: 'Yes',
                                                    off: 'No',
                                                    size: 'small',
                                                    onstyle: 'warning',
                                                    offstyle: 'primary'
                                                });

                                                newTableRow.append(newTableCell);
                                                newTableCell.find('input').change(editGisUpdateParams);

                                                // Symbol mode CELL
                                                if (editGisParameters.queries[i].symbolMode === 'man') {
                                                    newTableCell = $('<td><input data-param="queryIconOption" type="checkbox"/></td>');
                                                }
                                                else {
                                                    newTableCell = $('<td><input data-param="queryIconOption" type="checkbox" checked/></td>');
                                                }

                                                newTableCell.find('input').bootstrapToggle({
                                                    on: 'Auto',
                                                    off: 'Man',
                                                    size: 'small',
                                                    onstyle: 'primary',
                                                    offstyle: 'warning'
                                                });

                                                newTableRow.append(newTableCell);

                                                // Symbol choice CELL
                                                newTableCell = $('<td></td>');
                                                var imgMaxSize = $('<input type="hidden" name="MAX_FILE_SIZE" value="1000000" />');
                                                newTableCell.append(imgMaxSize);
                                                var newControl = $('<input type="file" class="form-control" name="editSelectorLogos[]">');
                                                newTableCell.append(newControl);
                                                newTableRow.append(newTableCell);

                                                newControl.filestyle({
                                                    input: false,
                                                    buttonText: "",
                                                    buttonName: "btn-primary custom_pic",
                                                    size: "sm",
                                                    disabled: false,
                                                    badge: false
                                                });

                                                var highLevelType = "";
                                                var nature = "";
                                                var subNature = "";

                                                if (editGisParameters.queries[i].high_level_type) {
                                                    highLevelType = editGisParameters.queries[i].high_level_type.replace(/\s+/g, '');
                                                }
                                                if (editGisParameters.queries[i].nature) {
                                                    nature = editGisParameters.queries[i].nature.replace(/\s+/g, '');
                                                }

                                                if (editGisParameters.queries[i].sub_nature) {
                                                    subNature = editGisParameters.queries[i].sub_nature.replace(/\s+/g, '');
                                                }

                                                if((highLevelType || nature || subNature) && styleParameters.iconText == "Icon Only") {
                                                    var suggestedIconsList = getSuggestedIconsPool(highLevelType, nature, subNature);
                                                } else {
                                                //    var suggestedIconsList = allIcons;
                                                    var suggestedIconsList = "";
                                                }

                                                if (editGisParameters.queries[i].bubble == 'CustomPin' || editGisParameters.queries[i].bubble == 'DynamicCustomPin') {
                                                    if (svgArray != null) {
                                                        var    iconPoolDatasetJSON = buildIconsBox("", i, svgArray, newTableRow, newTableCell, widgetId)
                                                    }
                                                }

                                                if(styleParameters.iconText == "Icon Only" && editGisParameters.queries[i].bubble != 'CustomPin' && editGisParameters.queries[i].bubble != 'DynamicCustomPin' && editGisParameters.queries[i].bubble != 'BimShape' && editGisParameters.queries[i].bubble != 'BimShapePopup') {
                                                    var iconPoolDatasetJSON = buildIconsBox(suggestedIconsList, i, allIcons, newTableRow, newTableCell, widgetId);
                                                }
                                            
                                                
                                                newTableRow.find('input[type=file]').change(function () {
                                                    var localRowRef = $(this).parents('tr');
                                                    var file = this.files[0];
                                                    var imagefile = file.type;
                                                    var match = ["image/jpeg", "image/png", "image/jpg", "image/svg+xml"];
                                                    if (!((imagefile === match[0]) || (imagefile === match[1]) || (imagefile === match[2]) || (imagefile === match[3]))) {
                                                        return false;
                                                    }
                                                    else {
                                                        var reader = new FileReader();
                                                        reader.onload = function (event) {
                                                            localRowRef.find('div.selectorMenuCustomIcon').html("");
                                                            localRowRef.find('div.selectorMenuCustomIcon').css("background", "url(" + event.target.result + ")");
                                                            localRowRef.find('div.selectorMenuCustomIcon').css("background-size", "contain");
                                                            localRowRef.find('div.selectorMenuCustomIcon').css("background-repeat", "no-repeat");
                                                            localRowRef.find('div.selectorMenuCustomIcon').css("background-position", "center center");
                                                        };
                                                        reader.readAsDataURL(this.files[0]);
                                                    }
                                                });

                                                // Symbo preview CELL
                                            //    if (styleParameters.iconText != "Icon Only") {
                                                    newTableCell = $('<td><i class="material-icons selectorMenuDefaultIcon" style="font-size: 34px; display: block;">navigation</i><div id = "' + data.name_widget + '_opts_poolIcon_' + i + '" class = "_opts_poolIcon_"><img></div><div class="selectorMenuCustomIcon">None</div></td>');
                                            /*    } else {
                                                    // CLASSIFICAZIONE ICONE
                                                    newTableCell = $('<td></td>');
                                                }   */
                                                newTableRow.append(newTableCell);

                                                if (editGisParameters.queries[i].symbolMode === 'auto') {
                                                    if (styleParameters.iconText != "Icon Only") {
                                                        newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).hide();
                                                     //   $(this).parents('tr').find('div.bootstrap-filestyle').hide();
                                                        newTableRow.find('label.custom_pic').hide();
                                                        // SOSTITUIRE SOPRA CON :
                                                    //    $(this).parents('tr').find('div.icons-selector').hide();
                                                        $(this).parents('tr').find('div.icons-selector').css("display", "none");
                                                        newTableRow.find('div.selectorMenuCustomIcon').hide();
                                                        newTableRow.find('i.selectorMenuDefaultIcon').show();
                                                    } else {
                                                        //$(this).parents('tr').find('div.bootstrap-filestyle').hide();
                                                        newTableRow.find('label.custom_pic').hide();
                                                        newTableRow.find('div.selectorMenuCustomIcon').hide();
                                                        let iconPath = "";
                                                        if (editGisParameters.queries[i].iconPoolImg) {
                                                            newTableRow.find('div.selectorMenuCustomIcon').hide();
                                                            newTableRow.find('i.selectorMenuDefaultIcon').hide();
                                                            if (editGisParameters.queries[i].iconPoolImg.includes("61_SVG_Value.svg") || editGisParameters.queries[i].iconPoolImg.includes("78_SVG_Thermometer.svg")) {
                                                                newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).css('height', "18px");
                                                            //    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).css('padding-left', "25px");
                                                            } else if (editGisParameters.queries[i].iconPoolImg.includes("78_SVG_Thermometer.svg")) {
                                                                newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).css('height', "9px");
                                                                //    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).css('padding-left', "25px");
                                                            } else {
                                                                newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).css('height', "52px");
                                                            }
                                                            newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).attr("src", editGisParameters.queries[i].iconPoolImg);
                                                            newTableRow.find('#' + data.name_widget + '_poolIcon_' + i).children(0).attr("data-iconblack", editGisParameters.queries[i].iconPoolImg);
                                                            var iconWhitePathAuto = editGisParameters.queries[i].iconPoolImg.split(".svg")[0] + "-white.svg";
                                                            newTableRow.find('#' + data.name_widget + '_poolIcon_' + i).children(0).attr("data-iconwhite", iconWhitePathAuto);
                                                            newTableRow.find('#' + data.name_widget + '_poolIcon' + i).show();
                                                        } else {
                                                            if (nature) {
                                                                if (subNature) {
                                                                    //    iconPath = "../img/widgetSelectorIconsPool/subnature/"+ editGisParameters.queries[i].nature + "/" + editGisParameters.queries[i].nature + "_" + editGisParameters.queries[i].sub_nature + ".svg";
                                                                    iconPath = "../img/widgetSelectorIconsPool/subnature/" + nature + "_" + subNature + ".svg";
                                                                } else {
                                                                    iconPath = "../img/widgetSelectorIconsPool/nature/" + nature + ".svg";
                                                                }
                                                                if (UrlExists(iconPath)) {
                                                                    $(this).parents('tr').find('div.icons-selector').show();
                                                                    newTableRow.find('i.selectorMenuDefaultIcon').hide();
                                                                    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).css('height', "52px");
                                                                    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).attr("src", iconPath);
                                                                    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).show();
                                                                } else {
                                                                    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).hide();
                                                                    //    $(this).parents('tr').find('div.icons-selector').hide();
                                                                    $(this).parents('tr').find('div.icons-selector').css("display", "none");
                                                                    newTableRow.find('div.selectorMenuCustomIcon').hide();
                                                                    newTableRow.find('i.selectorMenuDefaultIcon').show();
                                                                }
                                                            } else if (highLevelType) {
                                                                iconPath = "../img/widgetSelectorIconsPool/hlt/" + highLevelType + ".svg";
                                                                if (UrlExists(iconPath)) {
                                                                    $(this).parents('tr').find('div.icons-selector').show();
                                                                    newTableRow.find('i.selectorMenuDefaultIcon').hide();
                                                                    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).css('height', "52px");
                                                                    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).attr("src", iconPath);
                                                                    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).show();
                                                                } else {
                                                                    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).hide();
                                                                    //    $(this).parents('tr').find('div.icons-selector').hide();
                                                                    $(this).parents('tr').find('div.icons-selector').css("display", "none");
                                                                    newTableRow.find('div.selectorMenuCustomIcon').hide();
                                                                    newTableRow.find('i.selectorMenuDefaultIcon').show();
                                                                }
                                                            } else if (editGisParameters.queries[i].iconPoolImg) {
                                                                newTableRow.find('i.selectorMenuDefaultIcon').hide();
                                                                newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).css('height', "52px");
                                                                newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).attr("src", editGisParameters.queries[i].iconPoolImg);
                                                                newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).show();
                                                            } else {
                                                                newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).hide();
                                                                //    $(this).parents('tr').find('div.icons-selector').hide();
                                                                $(this).parents('tr').find('div.icons-selector').css("display", "none");
                                                                newTableRow.find('div.selectorMenuCustomIcon').hide();
                                                                newTableRow.find('i.selectorMenuDefaultIcon').show();
                                                            }
                                                        }
                                                        // Set Preview Icon with Default if bubble='None' AND iconPoolImg cotains the substring synopticTemplates/svg
                                                        if (editGisParameters.queries[i].iconPoolImg != null) {
                                                        //    if (editGisParameters.queries[i].bubble == 'None' && editGisParameters.queries[i].iconPoolImg.includes("synopticTemplates/svg")) {
                                                            if (editGisParameters.queries[i].bubble != 'CustomPin' && editGisParameters.queries[i].bubble != 'DynamicCustomPin' && editGisParameters.queries[i].bubble != 'BimShape' && editGisParameters.queries[i].bubble != 'BimShapePopup' && editGisParameters.queries[i].iconPoolImg.includes("synopticTemplates/svg")) {
                                                                newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).hide();
                                                                //    $(this).parents('tr').find('div.icons-selector').hide();
                                                                $(this).parents('tr').find('div.icons-selector').css("display", "none");
                                                                newTableRow.find('div.selectorMenuCustomIcon').hide();
                                                                newTableRow.find('i.selectorMenuDefaultIcon').show();
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                  //  newTableRow.find('div.bootstrap-filestyle').show();
                                                    newTableRow.find('label.custom_pic').show();
                                                //    newTableRow.find('label.pool_ic_btn').hide();
                                                    // SOSTITUIRE SOPRA CON :
                                                //    $(this).parents('tr').find('div.icons-selector').hide();
                                                    $(this).parents('tr').find('div.icons-selector').css("display", "none");
                                                    newTableRow.find('i.selectorMenuDefaultIcon').hide();
                                                    newTableRow.find('div.selectorMenuCustomIcon').show();
                                                    newTableRow.find('div.selectorMenuCustomIcon').css("width", "52px");
                                                    newTableRow.find('div.selectorMenuCustomIcon').css("height", "33px");
                                                    newTableRow.find('div.selectorMenuCustomIcon').html("");
                                                    newTableRow.find('div.selectorMenuCustomIcon').css("background", "url(" + editGisParameters.queries[i].symbolFile + ")");
                                                    newTableRow.find('div.selectorMenuCustomIcon').css("background-size", "contain");
                                                    newTableRow.find('div.selectorMenuCustomIcon').css("background-repeat", "no-repeat");
                                                    newTableRow.find('div.selectorMenuCustomIcon').css("background-position", "center center");
                                                    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).hide();
                                                }

                                                $('.poolBtn').off('click');
                                                $('.poolBtn').on('click', function()
                                                {
                                                 //   getIconsPool
                                                });
                                                
                                                newTableRow.find('input[data-param=queryIconOption]').change(function () {
                                                    var index = parseInt($(this).parents('tr').index() - 1);
                                                    if ($(this).prop('checked')) {
                                                     //   $(this).parents('tr').find('div.bootstrap-filestyle').hide();
                                                        $(this).parents('tr').find('label.custom_pic').hide();
                                                        $(this).parents('tr').find('div.selectorMenuCustomIcon').hide();
                                                        $(this).parents('tr').find('div.icons-selector').show();
                                                        if($(this).parents('tr').find('div._opts_poolIcon_').children(0).attr("src") != null) {
                                                            $(this).parents('tr').find('div._opts_poolIcon_').show();
                                                         //   $(this).parents('tr').find('label.pool_ic_btn').show();
                                                        } else {
                                                            $(this).parents('tr').find('i.selectorMenuDefaultIcon').show();
                                                        }
                                                        editGisParameters.queries[index].symbolMode = "auto";
                                                    }
                                                    else {
                                                    //    $(this).parents('tr').find('div.icons-selector').hide();
                                                        $(this).parents('tr').find('div.icons-selector').css("display", "none");
                                                    //    $(this).parents('tr').find('div.bootstrap-filestyle').show();
                                                        $(this).parents('tr').find('label.custom_pic').show();
                                                    //    $(this).parents('tr').find('label.pool_ic_btn').hide();
                                                        if($(this).parents('tr').find('div._opts_poolIcon_').children(0).attr("src") != null) {
                                                            $(this).parents('tr').find('div._opts_poolIcon_').hide();
                                                        } else {
                                                            $(this).parents('tr').find('i.selectorMenuDefaultIcon').hide();
                                                        }
                                                        $(this).parents('tr').find('div.selectorMenuCustomIcon').show();
                                                        $(this).parents('tr').find('div.selectorMenuCustomIcon').css("width", $(this).parents('tr').find('div.selectorMenuCustomIcon').parents('td').width() + "px");
                                                        $(this).parents('tr').find('div.selectorMenuCustomIcon').css("height", $(this).parents('tr').find('div.selectorMenuCustomIcon').parents('td').height() + "px");
                                                        editGisParameters.queries[index].symbolMode = "man";
                                                    }

                                                    $('#parametersM').val(JSON.stringify(editGisParameters));
                                                });

                                                // Symbol color CELL
                                                newTableCell = $('<td class="symbolColorTd"><div class="input-group colorPicker" data-param="symbolColor"><input type="text" class="input form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                newTableRow.append(newTableCell);
                                                newTableRow.find('div.colorPicker').colorpicker({
                                                    color: editGisParameters.queries[i].symbolColor,
                                                    format: "rgba"
                                                });
                                                newTableRow.find('div.colorPicker').on('hidePicker', editGisUpdateParams);

                                                // Description CELL
                                                newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="queryDesc"></a></td>');
                                                newTableCell.find('a').editable({
                                                    emptytext: "Empty",
                                                    display: function (value, response) {
                                                        if (value.length > 16) {
                                                            $(this).html(value.substring(0, 13) + "...");
                                                        }
                                                        else {
                                                            $(this).html(value);
                                                        }
                                                    },
                                                    value: editGisParameters.queries[i].desc
                                                });
                                                newTableRow.append(newTableCell);

                                                // Query CELL
                                                newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="queryUrl"></td>');
                                                newTableCell.find('a').editable({
                                                    emptytext: "Empty",
                                                    display: function (value, response) {
                                                        if (value.length > 10) {
                                                            $(this).html(value.substring(0, 10) + "...");
                                                        }
                                                        else {
                                                            $(this).html(value);
                                                        }
                                                    },
                                                    value: editGisParameters.queries[i].query
                                                });
                                                newTableRow.append(newTableCell);

                                                newTableCell = $('<td><div class="input-group colorPicker" data-param="color1"><input type="text" class="input form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                newTableRow.append(newTableCell);
                                                newTableRow.find('div.colorPicker').colorpicker({
                                                    color: editGisParameters.queries[i].color1,
                                                    format: "rgba"
                                                });
                                                newTableRow.find('div.colorPicker').on('hidePicker', editGisUpdateParams);

                                                newTableCell = $('<td><div class="input-group colorPicker" data-param="color2"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                newTableRow.append(newTableCell);
                                                newTableRow.find('div.colorPicker').colorpicker({
                                                    color: editGisParameters.queries[i].color2,
                                                    format: "rgba"
                                                });
                                                newTableRow.find('div.colorPicker').on('hidePicker', editGisUpdateParams);

                                                newTableCell = $('<td><select data-param="targets" class="form-control" multiple></select></td>');
                                                newTableRow.append(newTableCell);

                                                $("li.gs_w").each(function () {
                                                    if ($(this).attr("id") != null) {
                                                        if (($(this).attr("id").includes("BarContent")) || ($(this).attr("id").includes("ColumnContent")) || ($(this).attr("id").includes("GaugeChart")) || ($(this).attr("id").includes("PieChart")) || ($(this).attr("id").includes("SingleContent")) || ($(this).attr("id").includes("Speedometer")) || ($(this).attr("id").includes("TimeTrend"))) {
                                                            widgetId = $(this).attr("id");
                                                            widgetTitle = $(this).find("div.titleDiv").html();
                                                            newTableRow.find('select').append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                        }
                                                    }
                                                });


                                                newTableRow.find('select').selectpicker({
                                                    actionsBox: true,
                                                    width: 110,
                                                    size: "auto"
                                                });
                                                newTableRow.find('select').on('changed.bs.select', editGisUpdateParams);
                                                newTableRow.find('select').selectpicker('val', editGisParameters.queries[i].targets);

                                                newTableCell = $('<td><select data-param="display" class="form-control"></select></td>');
                                                newTableCell.find('select').append('<option value="pins"><?php echo _("Pins"); ?></option>');
                                                newTableCell.find('select').append('<option value="geometries"><?php echo _("Geometries"); ?></option>');
                                                newTableCell.find('select').append('<option value="all"><?php echo _("Pins and geometries"); ?></option>');
                                                newTableRow.append(newTableCell);
                                                newTableCell.find('select').val(editGisParameters.queries[i].display);
                                                newTableCell.find('select').on('change', editGisUpdateParams);

                                                // New Map Pin Color CELL
                                                newTableCell = $('<td class="newMapPinColorTd"><select data-param="newMapPinColor" class="form-control"></select></td>');
                                                newTableCell.find('select').append('<option value="Default">Default</option>');
                                                newTableCell.find('select').append('<option value="SymbolColor">Symbol Color</option>');
                                                newTableRow.append(newTableCell);
                                                newTableCell.find('select').val(editGisParameters.queries[i].newMapPinColor);
                                                newTableCell.find('select').on('change', editGisUpdateParams);

                                                // Alternate View Mode CELL
                                                newTableCell = $('<td class="bubbleTd"><select data-param="bubble" class="form-control"></select></td>');
                                                newTableCell.find('select').append('<option value="None"><?php echo _("None"); ?></option>');
                                                newTableCell.find('select').append('<option value="Bubble">Bubble</option>');
                                                newTableCell.find('select').append('<option value="CustomPin">Custom Pin</option>');
                                                newTableCell.find('select').append('<option value="DynamicCustomPin">Dynamic Custom Pin</option>');
                                                newTableCell.find('select').append('<option value="BimShape">BIM Shape</option>');
                                                newTableCell.find('select').append('<option value="BimShapePopup">BIM Shape & Popup</option>');
                                                newTableRow.append(newTableCell);
                                                newTableCell.find('select').val(editGisParameters.queries[i].bubble);
                                                newTableCell.find('select').on('change', editGisUpdateParams);

                                                // Bubble Mterics CELL
                                               // newTableCell = $('<div id="bubbleMetricsDiv' + i + '"><td class="bubbleMetricsTd"><select id="bubbleMetricsSelect' + i + '" data-param="bubbleMetrics" class="form-control"></select></td></div>');
                                                newTableCell = $('<td class="bubbleMetricsTd"><select id="bubbleMetricsSelect' + i + '" data-param="bubbleMetrics" class="form-control"></select></td>');
                                                newTableRow.append(newTableCell);

                                                if (editGisParameters.queries[i].bubble == "Bubble" || editGisParameters.queries[i].bubble == "CustomPin" || editGisParameters.queries[i].bubble == "DynamicCustomPin" || editGisParameters.queries[i].bubble == "BimShape" || editGisParameters.queries[i].bubble == "BimShapePopup") {
                                                    var bubbleMetricsString = $('#' + data.name_widget + '_pinCtn' + i).attr("data-bubblemetricsarray");
                                                    if (bubbleMetricsString === "loading available metrics...") {
                                                        var bubbleMetricsArray = ["loading available metrics...", editGisParameters.queries[i].bubbleMetrics];
                                                    } else {
                                                        var bubbleMetricsArray = bubbleMetricsString.split(",");
                                                    }

                                                    if (bubbleMetricsArray != null) {
                                                        for (k = 0; k < bubbleMetricsArray.length; k++) {
                                                            if (bubbleMetricsArray[k] === "loading available metrics..." || bubbleMetricsArray[k] === "no metrics available") {
                                                                newTableCell.find('select').append('<option style="color:darkgrey" value="' + bubbleMetricsArray[k] + '" disabled>' + bubbleMetricsArray[k] + '</option>');
                                                            } else {
                                                                newTableCell.find('select').append('<option value="' + bubbleMetricsArray[k] + '">' + bubbleMetricsArray[k] + '</option>');
                                                            }
                                                        }
                                                    }
                                                    if (editGisParameters.queries[i].bubbleMetrics !== "") {
                                                        newTableCell.find('select').val(editGisParameters.queries[i].bubbleMetrics);
                                                    } else {
                                                        newTableCell.find('select').val(bubbleMetricsArray[0]);
                                                    }
                                                } else {
                                                    newTableCell.find('select').val();
                                                }


                                            //    newTableCell.find('select').val(editGisParameters.queries[i].bubbleMetrics);
                                                newTableCell.find('select').on('change', editGisUpdateParams);

                                                var rowOrder = editGisParameters.queries[i].rowOrder;

                                                newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="rowOrder"></td>');
                                                newTableCell.find('a').editable({
                                                    emptytext: "Empty",
                                                    display: function (value, response) {
                                                        if (value.length > 10) {
                                                            $(this).html(value.substring(0, 10) + "...");
                                                        }
                                                        else {
                                                            $(this).html(value);
                                                        }
                                                    },
                                                    value: editGisParameters.queries[i].rowOrder
                                                });

                                                newTableRow.append(newTableCell);

                                                newTableCell = $('<td><a><i class="fa fa-close" style="font-size:24px;color:red"></i></a></td>');
                                                newTableCell.find('i').click(delGisQueryM);
                                                newTableRow.append(newTableCell);
                                                newTableRow.find('a.toBeEdited').on('save', editGisUpdateParams);

                                                $("#editGisQueryTable").append(newTableRow);

                                                var svgs = [ '/hlt/ComplexEvent', '/hlt/Dashboard-IOTApp', '/hlt/ExternalService', '/hlt/Heatmap',
                                                    '/hlt/KPI', '/hlt/MicroApplication', '/hlt/MyData', '/hlt/MyKPI', '/hlt/MyPersonalData', '/hlt/MyPOI',
                                                    '/hlt/POI', '/hlt/Sensor', '/hlt/Sensor-Actuator', '/hlt/SpecialTool', '/hlt/SpecialWidget',
                                                    '/hlt/wfs' ];

                                            //    if(editGisParameters.queries[i].high_level_type || editGisParameters.queries[i].nature || editGisParameters.queries[i].sub_nature) {
                                                 var picker = $( '#Selector_poolBtn_' + i ).fontIconPicker({
                                                        //  $('.poolBtn').fontIconPicker({
                                                    //    source: svgs,
                                                        source: iconPoolDatasetJSON,
                                                        theme: 'fip-bootstrap',
                                                    //    appendTo: 'self',
                                                        iconGenerator: function (item, flipBoxTitle, index) {
                                                         //   var rowIndex = $(this).parents("tr").index() - 1;
                                                        //    if (editGisParameters.queries[i].bubble == "CustomPin") {
                                                            if (item.includes("synopticTemplates/svg"))  {
                                                                if (item.includes("61_SVG_Value.svg")) {
                                                                    return '<i style="display: flex; align-items: center; justify-content: center; height: 40px"><img id="' + widgetId + '_poolImg_' + i + '" class="poolImg" src="' + item + '" style="height:18px;padding-left:25px;"></i>';
                                                                } else if(item.includes("78_SVG_Thermometer.svg")) {
                                                                    return '<i style="display: flex; align-items: center; justify-content: center; height: 40px"><img id="' + widgetId + '_poolImg_' + i + '" class="poolImg" src="' + item + '" style="height:9px;"></i>';
                                                                } else {
                                                                    return '<i style="display: flex; align-items: center; justify-content: center; height: 40px"><img id="' + widgetId + '_poolImg_' + i + '" class="poolImg" src="' + item + '" style="height:40px"></i>';
                                                                }
                                                            } else {
                                                                return '<i style="display: flex; align-items: center; justify-content: center; height: 100%;"><img id="' + widgetId + '_poolImg_' + i + '" class="poolImg" src="../img/widgetSelectorIconsPool' + item + '.svg" style="height:40px"></i>';
                                                            }
                                                        }
                                                    })
                                                        .on('change', function () {
                                                            var item = $(this).val(),
                                                                liveView = $('#figura'),
                                                                liveTitle = liveView.find('h3'),
                                                                liveImage = liveView.find('img');
                                                            if ('' === item) {liveTitle.html('Please Select…');
                                                                //liveImage.attr( 'src', 'lib/svgs/placeholder.png' );
                                                                return;
                                                            }
                                                            liveTitle.html(item.split('-').join(' '));
                                                            liveImage.attr('src', '../img/widgetSelectorIconsPool/hlt' + item + '.svg');
                                                        });
                                            //    }

                                            // Set Starting Icon (in Icon-Only Modality)
                                                if (editGisParameters.queries[i].iconPoolImg != null) {
                                                 //   if (editGisParameters.queries[i].bubble == 'CustomPin' || editGisParameters.queries[i].iconPoolImg.includes('synopticTemplates/svg')) {
                                                    if ((editGisParameters.queries[i].bubble == 'CustomPin' || editGisParameters.queries[i].bubble == 'DynamicCustomPin') && editGisParameters.queries[i].iconPoolImg.split('widgetSelectorIconsPool')[1] == null) {
                                                        picker.setIcon(editGisParameters.queries[i].iconPoolImg);
                                                    } else {
                                                        let iconPathToSet = "";
                                                        if (editGisParameters.queries[i].iconPoolImg.split('widgetSelectorIconsPool') != null && editGisParameters.queries[i].iconPoolImg.split('widgetSelectorIconsPool')[1] != null) {
                                                            iconPathToSet = editGisParameters.queries[i].iconPoolImg.split('widgetSelectorIconsPool')[1];
                                                            iconPathToSet = iconPathToSet.split('.svg')[0];
                                                        }
                                                        picker.setIcon(iconPathToSet);
                                                    }

                                                    if (editGisParameters.queries[i].bubble == "CustomPin" || editGisParameters.queries[i].bubble == "DynamicCustomPin") {
                                                        //     newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).hide();
                                                        $('div.selector').filter(function () {
                                                            return $(this).attr('data-fip-origin') == 'Selector_poolBtn_' + i;
                                                        }).show();
                                                    }
                                                }
                                            }

                                            if (styleParameters.iconText == "Icon Only") {
                                                $('#mapPinIcon').show();
                                                $('#symbolColorColumn').show();
                                                $('.symbolColorTd').show();
                                                if ($('#mapPinIcon').val() === "Pin Icon")
                                                {
                                                    $('#mapIconColorColumn').show();
                                                    $('.newMapPinColorTd').show();
                                                } else {
                                                    $('#mapIconColorColumn').hide();
                                                    $('.newMapPinColorTd').hide();
                                                }
                                            } else {
                                                $('#mapPinIcon').hide();
                                                $('#symbolColorColumn').hide();
                                                $('.symbolColorTd').hide();
                                                $('#mapIconColorColumn').hide();
                                                $('.newMapPinColorTd').hide();
                                            }

                                            $("#editGisQueryTable i.fa-plus").click(addGisQueryM);
                                            break;

                                        case "widgetSelectorTech":
                                            var imgMaxSizeM, newControlM = null;
                                            if (styleParamsRaw !== null) {
                                                styleParameters = JSON.parse(styleParamsRaw);
                                            }
                                            $('#link_help_modal-add-widget-m').css("display", "");
                                            $('#inputTitleWidgetM').attr('disabled', false);
                                            $("label[for='inputTitleWidgetM']").html("Title");
                                            $("label[for='inputColorWidgetM']").html("Background color");
                                            $('#inputColorWidgetM').attr('disabled', false);
                                            $('#inputColorWidgetM').prop('required', true);
                                            $('#inputFontSizeM').prop('required', true);
                                            $('#inputFontSizeM').prop('disabled', false);
                                            $('#inputFontColorM').prop('required', true);
                                            $('#inputFontColorM').prop('disabled', false);
                                            $('#widgetFontColorM').css("background-color", data['fontColor']);
                                            $('#select-frameColor-Widget-m').attr('disabled', false);
                                            $('#select-frameColor-Widget-m').prop('required', true);
                                            $('#select-frameColor-Widget-m').val('');
                                            $('#select-IntTemp-Widget-m').val(-1);
                                            $('#select-IntTemp-Widget-m').prop('disabled', true);
                                            $('#select-IntTemp-Widget-m').prop('required', false);
                                            $('#inputFreqWidgetM').prop('disabled', true);
                                            $('#inputFreqWidgetM').prop('required', false);
                                            $('#inputFreqWidgetM').val("");
                                            $('#urlWidgetM').attr('disabled', true);
                                            $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').prop('required', true);
                                            $('#inputUdmWidgetM').prop("required", false);
                                            $('#inputUdmWidgetM').attr("disabled", true);
                                            $('#inputUdmWidgetM').val("");
                                            $('#inputUdmPositionM').prop("required", false);
                                            $('#inputUdmPositionM').attr("disabled", true);
                                            $('#inputUdmPositionM').val(-1);

                                            //Rimozione eventuali campi del subform general per widget process
                                            removeWidgetProcessGeneralFields("editWidget");
                                            var widgetsNumber = 0;

                                            //Parametri specifici del widget
                                            $('#specificParamsM .row').remove();
                                            var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                                editGisParameters,
                                                widgetId, widgetTitle, newTableRow, newTableCell = null;

                                            var editGisParameters = currentParams;
                                            $("#parametersM").val(JSON.stringify(editGisParameters));
                                            setEditGisParameters(editGisParameters);

                                            //Target widgets geolocation
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="editGisGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Map widgets"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newSelect = $('<select name="editGisGeolocationWidgets" class="form-control" id="editGisGeolocationWidgets" multiple></select>');

                                            $("li.gs_w").each(function () {
                                                if ($(this).attr("id") != null) {
                                                    //    if ($(this).attr("id").includes("widgetMap") && ($(this).find("div.widget").attr("data-role") === "gisTarget")) {
                                                    if ($(this).attr("id").includes("widgetMap")) {
                                                        widgetId = $(this).attr("id");
                                                        widgetTitle = $(this).find("div.titleDiv").html();
                                                        newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                        widgetsNumber++;
                                                    }
                                                }
                                            });

                                            if (widgetsNumber > 0) {
                                                newInnerDiv.append(newSelect);
                                            }
                                            else {
                                                newInnerDiv.append("None");
                                            }

                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            if (widgetsNumber > 0) {
                                                $('#editGisGeolocationWidgets').selectpicker({
                                                    actionsBox: true,
                                                    width: "auto",
                                                    size: "auto"
                                                });

                                                $('#editGisGeolocationWidgets').selectpicker('val', editGisParameters.targets);

                                                $('#editGisGeolocationWidgets').on('changed.bs.select', function (e) {
                                                    if ($(this).val() === null) {
                                                        editGisParameters.targets = [];
                                                    }
                                                    else {
                                                        editGisParameters.targets = $(this).val();
                                                    }
                                                    $("#parametersM").val(JSON.stringify(editGisParameters));
                                                });
                                            }

                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
   
                                            //Colore testo quando picker attivo
                                            /*newLabel = $('<label for="editGisActiveQueriesFontColor" class="col-md-2 control-label"><?php echo _("Active rows font color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            var newColorPicker = $('<div id="editGisActiveQueriesFontColorContainer" class="input-group colorpicker-component"><input id="editGisActiveQueriesFontColor" name="editGisActiveQueriesFontColor" type="text" class="form-control input"/><span class="input-group-addon"><i></i></span></div>');
                                            newInnerDiv.append(newColorPicker);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
   
                                            if (styleParameters != null) {
                                                $('#editGisActiveQueriesFontColorContainer').colorpicker({
                                                    format: "rgba",
                                                    color: styleParameters.activeFontColor
                                                });
                                            } else {
                                                $('#editGisActiveQueriesFontColorContainer').colorpicker({
                                                    format: "rgba",
                                                });
                                            }*/
   
                                            //Modalità Icon/Text SelectorNew
                                            /*newLabel = $('<label for="iconTextMode" class="col-md-2 control-label">Icon/Text Mode</label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newSelect = $('<select name="iconTextMode" class="form-control" id="iconTextMode"></select>');
                                            newSelect.append('<option value="Icon Only">Icon Only</option>');
                                            newSelect.append('<option value="Text Description">Text Description</option>');
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newSelect.val(styleParameters.iconText);
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel.show();
                                            newInnerDiv.show();*/
   
                                            //Nuova riga
                                            //Contenitore per tabella delle query 
                                            var editGisQueryTableContainer = $('<div id="editGisQueryTableContainer" class="row rowCenterContent"></div>');
                                            var editGisQueryTable = $("<table id='editGisQueryTable' data-widgetType='selectorTech' class='table table-bordered table-condensed thrRangeTable'><col style='width:64px'><col style='width:64px'><col style='width:120px'><col style='width:64px'><col style='width:128px'><col style='width:76px'><col style='width:128px'><col style='width:128px'><col style='width:128px'><col style='width:128px'><col style='width:50px'><col style='width:50px'><tr><td><?php echo _("Default"); ?></td><td><?php echo _("Symbol mode"); ?></td><td><?php echo _("Symbol choice"); ?></td><td><?php echo _("Symbol preview"); ?></td><td><?php echo _("Description"); ?></td><td><?php echo _("Query"); ?></td><td><?php echo _("Color1"); ?></td><td><?php echo _("Color2"); ?></td><td><?php echo _("Data widgets"); ?></td><td><?php echo _("Display"); ?></td><td><?php echo _("Order"); ?></td><td><a href='#'><i class='fa fa-plus' style='font-size:24px;color:#337ab7'></i></a></td></tr></table>");
                                            editGisQueryTableContainer.append(editGisQueryTable); 
                                            $("#specificParamsM").append(editGisQueryTableContainer); 
   
                                            editGisParameters.queries.sort(compareJsonElementsByKeyValues('rowOrder'));
                                            var allIcons = []; //var allIcons = getIconsPool();
  
                                            for (var i = 0; i < editGisParameters.queries.length; i++) { 
                                                newTableRow = $('<tr></tr>'); 
  
                                                if (editGisParameters.queries[i].defaultOption === false) {
                                                    newTableCell = $('<td><input data-param="queryDefaultOption" type="checkbox"/></td>');
                                                }
                                                else {
                                                    newTableCell = $('<td><input data-param="queryDefaultOption" type="checkbox" checked/></td>');
                                                }
  
                                                newTableCell.find('input').bootstrapToggle({
                                                    on: 'Yes',
                                                    off: 'No',
                                                    size: 'small',
                                                    onstyle: 'warning',
                                                    offstyle: 'primary'
                                                });
  
                                                newTableRow.append(newTableCell); 
                                                newTableCell.find('input').change(editGisUpdateParams);
  
                                                if (editGisParameters.queries[i].symbolMode === 'man') {
                                                    newTableCell = $('<td><input data-param="queryIconOption" type="checkbox"/></td>');
                                                }
                                                else {
                                                    newTableCell = $('<td><input data-param="queryIconOption" type="checkbox" checked/></td>');
                                                }
      
                                                newTableCell.find('input').bootstrapToggle({
                                                    on: 'Auto',
                                                    off: 'Man',
                                                    size: 'small',
                                                    onstyle: 'primary',
                                                    offstyle: 'warning'
                                                });
  
                                                newTableRow.append(newTableCell); 
 
                                                newTableCell = $('<td></td>');
                                                var imgMaxSize = $('<input type="hidden" name="MAX_FILE_SIZE" value="1000000" />');
                                                newTableCell.append(imgMaxSize);
                                                var newControl = $('<input type="file" class="form-control" name="editSelectorLogos[]">');
                                                newTableCell.append(newControl);
                                                newTableRow.append(newTableCell); 
  
                                                newControl.filestyle({
                                                    input: false,
                                                    buttonText: "",
                                                    buttonName: "btn-primary custom_pic",
                                                    size: "sm",
                                                    disabled: false,
                                                    badge: false
                                                });
  
                                                var highLevelType = "";
                                                var nature = "";
                                                var subNature = "";
  
                                                if (editGisParameters.queries[i].high_level_type) {
                                                    highLevelType = editGisParameters.queries[i].high_level_type.replace(/\s+/g, '');
                                                }
                                                if (editGisParameters.queries[i].nature) {
                                                    nature = editGisParameters.queries[i].nature.replace(/\s+/g, '');
                                                }
   
                                                if (editGisParameters.queries[i].sub_nature) {
                                                    subNature = editGisParameters.queries[i].sub_nature.replace(/\s+/g, '');
                                                }
   
                                                if((highLevelType || nature || subNature) && styleParameters.iconText == "Icon Only") {
                                                    var suggestedIconsList = getSuggestedIconsPool(highLevelType, nature, subNature);
                                                } else {
                                                //    var suggestedIconsList = allIcons;
                                                    var suggestedIconsList = "";
                                                }
                                                
                                                if(styleParameters.iconText == "Icon Only") {
                                                    var iconPoolDataset = '{"SUGGESTED Icons": ["';
                                                    var iconPoolString = '<select name="Selector_poolBtn_' + i + '" id="Selector_poolBtn_poolBtn_' + i + '"><optgroup label="SUGGESTED Icons">';
                                                    var resultingSuggested = "";
                                                    if(suggestedIconsList.suggestedIconList) {
                                                        if (suggestedIconsList.suggestedIconList instanceof Array === false) {
                                                            resultingSuggested = Object.keys(suggestedIconsList.suggestedIconList).map(function(key) {
                                                                return suggestedIconsList.suggestedIconList[key];
                                                            });
  
                                                        } else {
                                                            resultingSuggested = suggestedIconsList.suggestedIconList;
                                                        }
                                                        for (k = 0; k < resultingSuggested.length; k++) {
                                                            if (UrlExists("../img/widgetSelectorIconsPool" + resultingSuggested[k] + ".svg")) {
                                                                iconPoolString = iconPoolString + '<option value="' + resultingSuggested[k] + '">' + resultingSuggested[k] + '</option>';
                                                                if (k == 0) {
                                                                    iconPoolDataset = iconPoolDataset + resultingSuggested[k];
                                                                } else {
                                                                    iconPoolDataset = iconPoolDataset + '", "' + resultingSuggested[k];
                                                                }
                                                            }
                                                        }
                                                    }
   
                                                    iconPoolDataset = iconPoolDataset + '"], "ALL Icons": ["';
                                                    iconPoolString = iconPoolString + '</optgroup><optgroup label="ALL Icons">';
  
                                                    for(k=0; k < allIcons.allIconList.length; k++) {
                                                        iconPoolString = iconPoolString + '<option value="' + allIcons.allIconList[k] + '">' + allIcons.allIconList[k] + '</option>';
                                                        if (k == 0) {
                                                            iconPoolDataset = iconPoolDataset + allIcons.allIconList[k];
                                                        } else {
                                                            iconPoolDataset = iconPoolDataset + '", "' + allIcons.allIconList[k];
                                                        }
                                                    }
   
                                                    iconPoolDataset = iconPoolDataset + '"]}';
                                                    var iconPoolDatasetJSON = JSON.parse(iconPoolDataset);
                                                    iconPoolString = iconPoolString + '</optgroup></select>';
  
                                                    var newControl2 = $('<input data-param="iconPoolImg" id="Selector_poolBtn_' + i + '" class="poolBtn" title="Choose Image from Our Icons Pool !"><input type="hidden" name="iconPoolSelected" id="' + widgetId + '_poolInput_' + i + '"></input>');
  
                                                    newTableCell.append(newControl2);
                                                    newTableRow.append(newTableCell);
                                                    newTableCell.find('input').change(editGisUpdateParams);
                                                    
                                                }
                                            
                                                
                                                newTableRow.find('input[type=file]').change(function () {
                                                    var localRowRef = $(this).parents('tr');
                                                    var file = this.files[0];
                                                    var imagefile = file.type;
                                                    var match = ["image/jpeg", "image/png", "image/jpg", "image/svg+xml"];
                                                    if (!((imagefile === match[0]) || (imagefile === match[1]) || (imagefile === match[2]) || (imagefile === match[3]))) {
                                                        return false;
                                                    }
                                                    else {
                                                        var reader = new FileReader();
                                                        reader.onload = function (event) {
                                                            localRowRef.find('div.selectorMenuCustomIcon').html("");
                                                            localRowRef.find('div.selectorMenuCustomIcon').css("background", "url(" + event.target.result + ")");
                                                            localRowRef.find('div.selectorMenuCustomIcon').css("background-size", "contain");
                                                            localRowRef.find('div.selectorMenuCustomIcon').css("background-repeat", "no-repeat");
                                                            localRowRef.find('div.selectorMenuCustomIcon').css("background-position", "center center");
                                                        };
                                                        reader.readAsDataURL(this.files[0]);
                                                    }
                                                });
      
                                            //    if (styleParameters.iconText != "Icon Only") {
                                                    newTableCell = $('<td><i class="material-icons selectorMenuDefaultIcon" style="font-size: 34px; display: block;">navigation</i><div id = "' + data.name_widget + '_opts_poolIcon_' + i + '" class = "_opts_poolIcon_"><img></div><div class="selectorMenuCustomIcon">None</div></td>');
                                            /*    } else {
                                                    // CLASSIFICAZIONE ICONE
                                                    newTableCell = $('<td></td>');
                                                }   */
                                                newTableRow.append(newTableCell); 
   
                                                if (editGisParameters.queries[i].symbolMode === 'auto') {
                                                    if (styleParameters.iconText != "Icon Only") {
                                                        newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).hide();
                                                     //   $(this).parents('tr').find('div.bootstrap-filestyle').hide();
                                                        newTableRow.find('label.custom_pic').hide();
                                                        // SOSTITUIRE SOPRA CON :
                                                    //    $(this).parents('tr').find('div.icons-selector').hide();
                                                        $(this).parents('tr').find('div.icons-selector').css("display", "none");
                                                        newTableRow.find('div.selectorMenuCustomIcon').hide();
                                                        newTableRow.find('i.selectorMenuDefaultIcon').show();
                                                    } else {
                                                        //$(this).parents('tr').find('div.bootstrap-filestyle').hide();
                                                        newTableRow.find('label.custom_pic').hide();
                                                        newTableRow.find('div.selectorMenuCustomIcon').hide();
                                                        let iconPath = "";
                                                        if (editGisParameters.queries[i].iconPoolImg) {
                                                            newTableRow.find('div.selectorMenuCustomIcon').hide();
                                                            newTableRow.find('i.selectorMenuDefaultIcon').hide();
                                                            newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).css('height', "52px");
                                                            newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).attr("src", editGisParameters.queries[i].iconPoolImg);
                                                            newTableRow.find('#' + data.name_widget + '_poolIcon_' + i).children(0).attr("data-iconblack", editGisParameters.queries[i].iconPoolImg);
                                                            var iconWhitePathAuto = editGisParameters.queries[i].iconPoolImg.split(".svg")[0] + "-white.svg";
                                                            newTableRow.find('#' + data.name_widget + '_poolIcon_' + i).children(0).attr("data-iconwhite", iconWhitePathAuto);
                                                            newTableRow.find('#' + data.name_widget + '_poolIcon' + i).show();
                                                        } else {
                                                            if (nature) {
                                                                if (subNature) {
                                                                    //    iconPath = "../img/widgetSelectorIconsPool/subnature/"+ editGisParameters.queries[i].nature + "/" + editGisParameters.queries[i].nature + "_" + editGisParameters.queries[i].sub_nature + ".svg";
                                                                    iconPath = "../img/widgetSelectorIconsPool/subnature/" + nature + "_" + subNature + ".svg";
                                                                } else {
                                                                    iconPath = "../img/widgetSelectorIconsPool/nature/" + nature + ".svg";
                                                                }
                                                                if (UrlExists(iconPath)) {
                                                                    $(this).parents('tr').find('div.icons-selector').show();
                                                                    newTableRow.find('i.selectorMenuDefaultIcon').hide();
                                                                    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).css('height', "52px");
                                                                    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).attr("src", iconPath);
                                                                    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).show();
                                                                } else {
                                                                    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).hide();
                                                                    //    $(this).parents('tr').find('div.icons-selector').hide();
                                                                    $(this).parents('tr').find('div.icons-selector').css("display", "none");
                                                                    newTableRow.find('div.selectorMenuCustomIcon').hide();
                                                                    newTableRow.find('i.selectorMenuDefaultIcon').show();
                                                                }
                                                            } else if (highLevelType) {
                                                                iconPath = "../img/widgetSelectorIconsPool/hlt/" + highLevelType + ".svg";
                                                                if (UrlExists(iconPath)) {
                                                                    $(this).parents('tr').find('div.icons-selector').show();
                                                                    newTableRow.find('i.selectorMenuDefaultIcon').hide();
                                                                    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).css('height', "52px");
                                                                    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).attr("src", iconPath);
                                                                    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).show();
                                                                } else {
                                                                    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).hide();
                                                                    //    $(this).parents('tr').find('div.icons-selector').hide();
                                                                    $(this).parents('tr').find('div.icons-selector').css("display", "none");
                                                                    newTableRow.find('div.selectorMenuCustomIcon').hide();
                                                                    newTableRow.find('i.selectorMenuDefaultIcon').show();
                                                                }
                                                            } else if (editGisParameters.queries[i].iconPoolImg) {
                                                                newTableRow.find('i.selectorMenuDefaultIcon').hide();
                                                                newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).css('height', "52px");
                                                                newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).children(0).attr("src", editGisParameters.queries[i].iconPoolImg);
                                                                newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).show();
                                                            } else {
                                                                newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).hide();
                                                                //    $(this).parents('tr').find('div.icons-selector').hide();
                                                                $(this).parents('tr').find('div.icons-selector').css("display", "none");
                                                                newTableRow.find('div.selectorMenuCustomIcon').hide();
                                                                newTableRow.find('i.selectorMenuDefaultIcon').show();
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                  //  newTableRow.find('div.bootstrap-filestyle').show();
                                                    newTableRow.find('label.custom_pic').show();
                                                //    newTableRow.find('label.pool_ic_btn').hide();
                                                    // SOSTITUIRE SOPRA CON :
                                                //    $(this).parents('tr').find('div.icons-selector').hide();
                                                    $(this).parents('tr').find('div.icons-selector').css("display", "none");
                                                    newTableRow.find('i.selectorMenuDefaultIcon').hide();
                                                    newTableRow.find('div.selectorMenuCustomIcon').show();
                                                    newTableRow.find('div.selectorMenuCustomIcon').css("width", "52px");
                                                    newTableRow.find('div.selectorMenuCustomIcon').css("height", "33px");
                                                    newTableRow.find('div.selectorMenuCustomIcon').html("");
                                                    newTableRow.find('div.selectorMenuCustomIcon').css("background", "url(" + editGisParameters.queries[i].symbolFile + ")");
                                                    newTableRow.find('div.selectorMenuCustomIcon').css("background-size", "contain");
                                                    newTableRow.find('div.selectorMenuCustomIcon').css("background-repeat", "no-repeat");
                                                    newTableRow.find('div.selectorMenuCustomIcon').css("background-position", "center center");
                                                    newTableRow.find('#' + data.name_widget + '_opts_poolIcon_' + i).hide();
                                                }
     
                                                $('.poolBtn').off('click');
                                                $('.poolBtn').on('click', function()
                                                {
                                                    // APRI MODALE E FAI SCEGLIERE ICONE DA NUOVO POOL
                                                 //   getIconsPool
                                                });
                                                
                                                newTableRow.find('input[data-param=queryIconOption]').change(function () {
                                                    var index = parseInt($(this).parents('tr').index() - 1);
                                                    if ($(this).prop('checked')) {
                                                     //   $(this).parents('tr').find('div.bootstrap-filestyle').hide();
                                                        $(this).parents('tr').find('label.custom_pic').hide();
                                                        $(this).parents('tr').find('div.selectorMenuCustomIcon').hide();
                                                        $(this).parents('tr').find('div.icons-selector').show();
                                                        if($(this).parents('tr').find('div._opts_poolIcon_').children(0).attr("src") != null) {
                                                            $(this).parents('tr').find('div._opts_poolIcon_').show();
                                                         //   $(this).parents('tr').find('label.pool_ic_btn').show();
                                                        } else {
                                                            $(this).parents('tr').find('i.selectorMenuDefaultIcon').show();
                                                        }
                                                        editGisParameters.queries[index].symbolMode = "auto";
                                                    }
                                                    else {
                                                    //    $(this).parents('tr').find('div.icons-selector').hide();
                                                        $(this).parents('tr').find('div.icons-selector').css("display", "none");
                                                    //    $(this).parents('tr').find('div.bootstrap-filestyle').show();
                                                        $(this).parents('tr').find('label.custom_pic').show();
                                                    //    $(this).parents('tr').find('label.pool_ic_btn').hide();
                                                        if($(this).parents('tr').find('div._opts_poolIcon_').children(0).attr("src") != null) {
                                                            $(this).parents('tr').find('div._opts_poolIcon_').hide();
                                                        } else {
                                                            $(this).parents('tr').find('i.selectorMenuDefaultIcon').hide();
                                                        }
                                                        $(this).parents('tr').find('div.selectorMenuCustomIcon').show();
                                                        $(this).parents('tr').find('div.selectorMenuCustomIcon').css("width", $(this).parents('tr').find('div.selectorMenuCustomIcon').parents('td').width() + "px");
                                                        $(this).parents('tr').find('div.selectorMenuCustomIcon').css("height", $(this).parents('tr').find('div.selectorMenuCustomIcon').parents('td').height() + "px");
                                                        editGisParameters.queries[index].symbolMode = "man";
                                                    }
  
                                                    $('#parametersM').val(JSON.stringify(editGisParameters));
                                                });
    
                                                newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="queryDesc"></a></td>');
                                                newTableCell.find('a').editable({
                                                    emptytext: "Empty",
                                                    display: function (value, response) {
                                                        if (value.length > 16) {
                                                            $(this).html(value.substring(0, 13) + "...");
                                                        }
                                                        else {
                                                            $(this).html(value);
                                                        }
                                                    },
                                                    value: editGisParameters.queries[i].desc
                                                });
                                                newTableRow.append(newTableCell); 
    
                                                newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="queryUrl"></td>');
                                                newTableCell.find('a').editable({
                                                    emptytext: "Empty",
                                                    display: function (value, response) {
                                                        if (value.length > 10) {
                                                            $(this).html(value.substring(0, 10) + "...");
                                                        }
                                                        else {
                                                            $(this).html(value);
                                                        }
                                                    },
                                                    value: editGisParameters.queries[i].query
                                                });
                                                newTableRow.append(newTableCell); 
   
                                                newTableCell = $('<td><div class="input-group colorPicker" data-param="color1"><input type="text" class="input form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                newTableRow.append(newTableCell); 
                                                newTableRow.find('div.colorPicker').colorpicker({
                                                    color: editGisParameters.queries[i].color1,
                                                    format: "rgba"
                                                });
                                                newTableRow.find('div.colorPicker').on('hidePicker', editGisUpdateParams);
    
                                                newTableCell = $('<td><div class="input-group colorPicker" data-param="color2"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                newTableRow.append(newTableCell); 
                                                newTableRow.find('div.colorPicker').colorpicker({
                                                    color: editGisParameters.queries[i].color2,
                                                    format: "rgba"
                                                });
                                                newTableRow.find('div.colorPicker').on('hidePicker', editGisUpdateParams);
  
                                                newTableCell = $('<td><select data-param="targets" class="form-control" multiple></select></td>');
                                                newTableRow.append(newTableCell); 
  
                                                $("li.gs_w").each(function () {
                                                    if ($(this).attr("id") != null) {
                                                        if (($(this).attr("id").includes("BarContent")) || ($(this).attr("id").includes("ColumnContent")) || ($(this).attr("id").includes("GaugeChart")) || ($(this).attr("id").includes("PieChart")) || ($(this).attr("id").includes("SingleContent")) || ($(this).attr("id").includes("Speedometer")) || ($(this).attr("id").includes("TimeTrend")) || ($(this).attr("id").includes("Calendar"))) {
                                                            widgetId = $(this).attr("id");
                                                            widgetTitle = $(this).find("div.titleDiv").html();
                                                            newTableRow.find('select').append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                        }
                                                    }
                                                });
  
   
                                                newTableRow.find('select').selectpicker({
                                                    actionsBox: true,
                                                    width: 110,
                                                    size: "auto"
                                                });
                                                newTableRow.find('select').on('changed.bs.select', editGisUpdateParams);
                                                newTableRow.find('select').selectpicker('val', editGisParameters.queries[i].targets);

                                                newTableCell = $('<td><select data-param="display" class="form-control"></select></td>');
                                                newTableCell.find('select').append('<option value="pins"><?php echo _("Pins"); ?></option>');
                                                newTableCell.find('select').append('<option value="geometries"><?php echo _("Geometries"); ?></option>');
                                                newTableCell.find('select').append('<option value="all"><?php echo _("Pins and geometries"); ?></option>');
                                                newTableRow.append(newTableCell); 
                                                newTableCell.find('select').val(editGisParameters.queries[i].display);
                                                newTableCell.find('select').on('change', editGisUpdateParams);

                                                var rowOrder = editGisParameters.queries[i].rowOrder;
                                            /*    if (rowOrder != null && rowOrder != null) {
                                                    newTableCell = $('<td><div class="input-group rowOrder" data-param="rowOrder"><input type="text" class="form-control"></div>' + rowOrder + '</td>');
                                                } else {
                                                    newTableCell = $('<td><div class="input-group rowOrder" data-param="rowOrder"><input type="text" class="form-control"></div></td>');
                                                }
                                                newTableRow.append(newTableCell); 
                                                newTableRow.find('div.rowOrder').on('change', editGisUpdateParams);*/
 
                                                newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="rowOrder"></td>');
                                                newTableCell.find('a').editable({
                                                    emptytext: "Empty",
                                                    display: function (value, response) {
                                                        if (value.length > 10) {
                                                            $(this).html(value.substring(0, 10) + "...");
                                                        }
                                                        else {
                                                            $(this).html(value);
                                                        }
                                                    },
                                                    value: editGisParameters.queries[i].rowOrder
                                                });

                                                newTableRow.append(newTableCell);     

                                                newTableCell = $('<td><a><i class="fa fa-close" style="font-size:24px;color:red"></i></a></td>');
                                                newTableCell.find('i').click(delGisQueryM);
                                                newTableRow.append(newTableCell);       
                                                newTableRow.find('a.toBeEdited').on('save', editGisUpdateParams);
       
                                                $("#editGisQueryTable").append(newTableRow); 
 
                                                var svgs = [ '/hlt/ComplexEvent', '/hlt/Dashboard-IOTApp', '/hlt/ExternalService', '/hlt/Heatmap',
                                                    '/hlt/KPI', '/hlt/MicroApplication', '/hlt/MyData', '/hlt/MyKPI', '/hlt/MyPersonalData', '/hlt/MyPOI',
                                                    '/hlt/POI', '/hlt/Sensor', '/hlt/Sensor-Actuator', '/hlt/SpecialTool', '/hlt/SpecialWidget',
                                                    '/hlt/wfs' ];
    
                                            //    if(editGisParameters.queries[i].high_level_type || editGisParameters.queries[i].nature || editGisParameters.queries[i].sub_nature) {
                                                    $( '#Selector_poolBtn_' + i ).fontIconPicker({
                                                        //  $('.poolBtn').fontIconPicker({
                                                    //    source: svgs,
                                                        source: iconPoolDatasetJSON,
                                                        theme: 'fip-bootstrap',
                                                    //    appendTo: 'self',
                                                        iconGenerator: function (item, flipBoxTitle, index) {
                                                            //    if (editGisParameters.queries[i].bubble == "CustomPin") {
                                                            if (item.includes("synopticTemplates/svg"))  {
                                                                return '<i style="display: flex; align-items: center; justify-content: center; height: 40px"><img id="' + widgetId + '_poolImg_' + i + '" class="poolImg" src="' + item + '" style="height:40px"></i>';
                                                            } else {
                                                                return '<i style="display: flex; align-items: center; justify-content: center; height: 100%;"><img id="' + widgetId + '_poolImg_' + i + '" class="poolImg" src="../img/widgetSelectorIconsPool' + item + '.svg" style="height:40px"></i>';
                                                            }
                                            // LAST WORKING OK!
                                                    //        return '<i style="display: flex; align-items: center; justify-content: center; height: 100%;"><img src="../img/widgetSelectorIconsPool/hlt/' + item + '.svg" style="height:56px"></i>';
                                                            //	return '<i style="display: flex; align-items: center; justify-content: center; height: 100%;"><svg style="height: 32px; width: auto;" class="svg-icon ' + item + '"><use xlink:href="#' + item + '"></use></svg></i>';
                                                            //	return '<i style="display: flex; align-items: center; justify-content: center; height: 100%;"><svg style="height: 32px; width: auto;" class="svg-icon ' + item + '"><use xlink:href="C:/Apache24/htdocs/dashboardSmartCity/img/widgetSelectorIconsPool/hlt/' + item + '.svg"></use></svg></i>';
                                                        }
                                                    })
                                                        .on('change', function () {
                                                            var item = $(this).val(),
                                                                liveView = $('#figura'),
                                                                liveTitle = liveView.find('h3'),
                                                                liveImage = liveView.find('img');
                                                            if ('' === item) {liveTitle.html('Please Select…');
                                                                //liveImage.attr( 'src', 'lib/svgs/placeholder.png' );
                                                                return;
                                                            }
                                                            liveTitle.html(item.split('-').join(' '));
                                                            liveImage.attr('src', '../img/widgetSelectorIconsPool/hlt' + item + '.svg');
                                                        });
                                            //    }
                                            }
                                            $("#editGisQueryTable i.fa-plus").click(addGisQueryM);										
                                            break;									
                                    case "widgetClock":
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').attr('disabled', false);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontColorM').attr('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', true);
                                        $('#inputFreqWidgetM').prop('required', false);
                                        $('#inputFreqWidgetM').val('');
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $("#inputUdmPositionM").val(-1);
                                        
                                       //Parametri specifici del widget
                                       $('#specificParamsM .row').remove();
                                       //Rimozione eventuali campi del subform general per widget process
                                       removeWidgetProcessGeneralFields("editWidget");
                                        
                                       var styleParameters, newFormRow, newLabel, newInnerDiv, newSelect, newInput = null;
                                        
                                       if(styleParamsRaw !== null) 
                                       {
                                          styleParameters = JSON.parse(styleParamsRaw);
                                       } 
                                        
                                       //Nuova riga
                                       //Clock data e clock font type
                                       newFormRow = $('<div class="row"></div>');
                                       newLabel = $('<label for="editWidgetClockData" class="col-md-2 control-label"><?php echo _("Shown data"); ?></label>');
                                       newInnerDiv = $('<div class="col-md-3"></div>');
                                       newSelect = $('<select name="editWidgetClockData" class="form-control" id="editWidgetClockData"></select>');
                                       newSelect.append('<option value="date">Date</option>');
                                       newSelect.append('<option value="time">Time</option>');
                                       newSelect.append('<option value="dateTime">Date and time</option>');
                                       newSelect.val(styleParameters.clockData);
                                       newInnerDiv.append(newSelect);
                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);

                                       newLabel = $('<label for="editWidgetClockFont" class="col-md-2 control-label"><?php echo _("Font type"); ?></label>');
                                       newInnerDiv = $('<div class="col-md-3"></div>');
                                       newSelect = $('<select name="editWidgetClockFont" class="form-control" id="editWidgetClockFont"></select>');
                                       newSelect.append('<option value="normal">Normal</option>');
                                       newSelect.append('<option value="lcd">LCD like</option>');
                                       newSelect.val(styleParameters.clockFont);
                                       newInnerDiv.append(newSelect);
                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);

                                       $("#specificParamsM").append(newFormRow);
                                       break;
                                        
                                    case "widgetNetworkAnalysis":
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').val('');
                                        $('#inputFontColorM').prop('required', false);
                                        $('#inputFontColorM').prop('disabled', true);
                                        $('#widgetFontColorM').css("background-color", "#eeeeee");
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#urlWidgetM').attr('disabled', true);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                       //Rimozione eventuali campi del subform general per widget process
                                       removeWidgetProcessGeneralFields("editWidget");
                                       
                                       //Parametri specifici del widget
                                       $('#specificParamsM .row').remove();
                                       var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan = null;
                                    
                                       //Target widgets geolocation
                                       newFormRow = $('<div class="row"></div>');
                                       newLabel = $('<label for="editWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                       newInnerDiv = $('<div class="col-md-3"></div>');
                                       newSelect = $('<select name="editWidgetGeolocationWidgets" class="form-control" id="editWidgetGeolocationWidgets" multiple></select>');

                                       var widgetId, widgetTitle = null;
                                       var widgetsNumber = 0;
                                       
                                       //JSON degli eventi da mostrare su ogni widget target di questo widget events
                                       var targetsJson = currentParams;
                                       $("#parametersM").val(JSON.stringify(targetsJson));
                                       
                                       //console.log($("#parametersM").val());
                                       
                                       $("li.gs_w").each(function(){
                                          if($(this).attr("id").includes("ExternalContent")&&($(this).find("div.widget").attr("data-role") === "map"))
                                          {
                                             widgetId = $(this).attr("id");
                                             widgetTitle = $(this).find("div.titleDiv").html();
                                             newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                             widgetsNumber++;
                                          }
                                       });

                                       if(widgetsNumber > 0)
                                       {
                                          newInnerDiv.append(newSelect);
                                       }
                                       else
                                       {
                                          newInnerDiv.append("None");
                                       }

                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);
                                       $("#specificParamsM").append(newFormRow);
                                       newLabel.show();
                                       newInnerDiv.show();

                                       if(widgetsNumber > 0)
                                       {
                                          $('#editWidgetGeolocationWidgets').selectpicker({
                                             actionsBox: true, 
                                             width: "auto"
                                          });
                                          
                                          $('#editWidgetGeolocationWidgets').selectpicker('val', targetsJson);

                                          $('#editWidgetGeolocationWidgets').on('changed.bs.select', function (e) 
                                          {
                                             if($(this).val() === null)
                                             {
                                                targetsJson = [];
                                             }
                                             else
                                             {
                                                targetsJson = $(this).val();
                                             }
                                             $("#parametersM").val(JSON.stringify(targetsJson));
                                          });
                                       }
                                       break;
                                   
                                    case "widgetResources":
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').val('');
                                        $('#inputFontColorM').prop('required', false);
                                        $('#inputFontColorM').prop('disabled', true);
                                        $('#widgetFontColorM').css("background-color", "#eeeeee");
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#urlWidgetM').attr('disabled', true);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                       //Rimozione eventuali campi del subform general per widget process
                                       removeWidgetProcessGeneralFields("editWidget");
                                       
                                       //Parametri specifici del widget
                                       $('#specificParamsM .row').remove();
                                       var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan = null;
                                    
                                       //Target widgets geolocation
                                       newFormRow = $('<div class="row"></div>');
                                       newLabel = $('<label for="editWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                       newInnerDiv = $('<div class="col-md-3"></div>');
                                       newSelect = $('<select name="editWidgetGeolocationWidgets" class="form-control" id="editWidgetGeolocationWidgets" multiple></select>');

                                       var widgetId, widgetTitle = null;
                                       var widgetsNumber = 0;
                                       
                                       //JSON degli eventi da mostrare su ogni widget target di questo widget events
                                       var targetsJson = currentParams;
                                       $("#parametersM").val(JSON.stringify(targetsJson));
                                       
                                       //console.log($("#parametersM").val());
                                       
                                       $("li.gs_w").each(function(){
                                          if($(this).attr("id").includes("ExternalContent")&&($(this).find("div.widget").attr("data-role") === "map"))
                                          {
                                             widgetId = $(this).attr("id");
                                             widgetTitle = $(this).find("div.titleDiv").html();
                                             newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                             widgetsNumber++;
                                          }
                                       });

                                       if(widgetsNumber > 0)
                                       {
                                          newInnerDiv.append(newSelect);
                                       }
                                       else
                                       {
                                          newInnerDiv.append("None");
                                       }

                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);
                                       $("#specificParamsM").append(newFormRow);
                                       newLabel.show();
                                       newInnerDiv.show();

                                       if(widgetsNumber > 0)
                                       {
                                          $('#editWidgetGeolocationWidgets').selectpicker({
                                             actionsBox: true, 
                                             width: "auto"
                                          });
                                          
                                          $('#editWidgetGeolocationWidgets').selectpicker('val', targetsJson);

                                          $('#editWidgetGeolocationWidgets').on('changed.bs.select', function (e) 
                                          {
                                             if($(this).val() === null)
                                             {
                                                targetsJson = [];
                                             }
                                             else
                                             {
                                                targetsJson = $(this).val();
                                             }
                                             $("#parametersM").val(JSON.stringify(targetsJson));
                                          });
                                       }
                                       break;

                                    case "widgetResourcesNew":
                                            $('#link_help_modal-add-widget-m').css("display", "");
                                            $('#inputTitleWidgetM').attr('disabled', false);
                                            $("label[for='inputTitleWidgetM']").html("Title");
                                            $("label[for='inputColorWidgetM']").html("Background color");
                                            $('#inputColorWidgetM').attr('disabled', false);
                                            $('#inputColorWidgetM').prop('required', true);
                                            $('#inputFontSizeM').prop('required', true);
                                            $('#inputFontSizeM').prop('disabled', false);
                                            $('#inputFontColorM').val('');
                                            $('#inputFontColorM').prop('required', false);
                                            $('#inputFontColorM').prop('disabled', true);
                                            $('#widgetFontColorM').css("background-color", "#eeeeee");
                                            $('#select-frameColor-Widget-m').attr('disabled', false);
                                            $('#select-frameColor-Widget-m').prop('required', true);
                                            $('#select-frameColor-Widget-m').val('');
                                            $('#select-IntTemp-Widget-m').val(-1);
                                            $('#select-IntTemp-Widget-m').prop('disabled', true);
                                            $('#select-IntTemp-Widget-m').prop('required', false);
                                            $('#inputFreqWidgetM').prop('disabled', false);
                                            $('#inputFreqWidgetM').prop('required', true);
                                            $('#urlWidgetM').attr('disabled', true);
                                            $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').prop('required', true);
                                            $('#inputUdmWidgetM').prop("required", false);
                                            $('#inputUdmWidgetM').attr("disabled", true);
                                            $('#inputUdmWidgetM').val("");
                                            $('#inputUdmPositionM').prop("required", false);
                                            $('#inputUdmPositionM').attr("disabled", true);
                                            $('#inputUdmPositionM').val(-1);

                                            //Rimozione eventuali campi del subform general per widget process
                                            removeWidgetProcessGeneralFields("editWidget");

                                            //Parametri specifici del widget
                                            $('#specificParamsM .row').remove();
                                            var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput,
                                                newSpan = null;

                                            //Target widgets geolocation
                                            newFormRow = $('<div class="row"></div>');
                                            newLabel = $('<label for="editWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newSelect = $('<select name="editWidgetGeolocationWidgets" class="form-control" id="editWidgetGeolocationWidgets" multiple></select>');

                                            var widgetId, widgetTitle = null;
                                            var widgetsNumber = 0;

                                            //JSON degli eventi da mostrare su ogni widget target di questo widget events
                                            var targetsJson = currentParams;
                                            $("#parametersM").val(JSON.stringify(targetsJson));

                                            //console.log($("#parametersM").val());

                                            $("li.gs_w").each(function () {
                                                if ($(this).attr("id") != null) {
                                                    if ($(this).attr("id").includes("widgetMap")) {
                                                        widgetId = $(this).attr("id");
                                                        widgetTitle = $(this).find("div.titleDiv").html();
                                                        newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                        widgetsNumber++;
                                                    }
                                                }
                                            });

                                            if (widgetsNumber > 0) {
                                                newInnerDiv.append(newSelect);
                                            }
                                            else {
                                                newInnerDiv.append("None");
                                            }

                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel.show();
                                            newInnerDiv.show();

                                            if (widgetsNumber > 0) {
                                                $('#editWidgetGeolocationWidgets').selectpicker({
                                                    actionsBox: true,
                                                    width: "auto",
                                                    size: "auto"
                                                });

                                                $('#editWidgetGeolocationWidgets').selectpicker('val', targetsJson);

                                                $('#editWidgetGeolocationWidgets').on('changed.bs.select', function (e) {
                                                    if ($(this).val() === null) {
                                                        targetsJson = [];
                                                    }
                                                    else {
                                                        targetsJson = $(this).val();
                                                    }
                                                    $("#parametersM").val(JSON.stringify(targetsJson));
                                                });
                                            }
                                            break;
                                    
                                    case "widgetEvacuationPlans":
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').val('');
                                        $('#inputFontColorM').prop('required', false);
                                        $('#inputFontColorM').prop('disabled', true);
                                        $('#widgetFontColorM').css("background-color", "#eeeeee");
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#urlWidgetM').attr('disabled', true);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                       //Rimozione eventuali campi del subform general per widget process
                                       removeWidgetProcessGeneralFields("editWidget");
                                       
                                       //Parametri specifici del widget
                                       $('#specificParamsM .row').remove();
                                       var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan, addWidgetRangeTableContainer = null;
                                    
                                       //Nuova riga
                                       newFormRow = $('<div class="row"></div>');
                                       $("#specificParamsM").append(newFormRow);

                                       newLabel = $('<label for="editWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                       newInnerDiv = $('<div class="col-md-3"></div>');
                                       newSelect = $('<select class="form-control" id="editWidgetGeolocationWidgets" name="editWidgetGeolocationWidgets"></select>');

                                       var widgetId, widgetTitle = null;
                                       var widgetsNumber = 0;
                                       
                                       //JSON degli eventi da mostrare su ogni widget target di questo widget events
                                       var targetEventsJson = currentParams;
                                       $("#parametersM").val(JSON.stringify(targetEventsJson));

                                       $("li.gs_w").each(function()
                                       {
                                          if($(this).attr("id").includes("ExternalContent")&&($(this).find("div.widget").attr("data-role") === "map"))
                                          {
                                             widgetId = $(this).attr("id");
                                             widgetTitle = $(this).find("div.titleDiv").html();
                                             newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                             widgetsNumber++;
                                          }
                                       });

                                       if(widgetsNumber > 0)
                                       {
                                          newInnerDiv.append(newSelect);
                                       }
                                       else
                                       {
                                          newInnerDiv.append("None");
                                       }

                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);
                                       $("#specificParamsM").append(newFormRow);
                                       newLabel.show();
                                       newInnerDiv.show();

                                       if(widgetsNumber > 0)
                                       {
                                          newSelect.show();
                                          newSelect.val(-1);
                                          newLabel = $('<label for="editWidgetEventTypes" class="col-md-2 control-label"><?php echo _("Events to show on selected map"); ?></label>');
                                          newInnerDiv = $('<div class="col-md-3"></div>');
                                          var eventTypeSelect = $('<select name="editWidgetEventTypes" class="form-control" id="editWidgetEventTypes" multiple></select>');
                                          
                                          eventTypeSelect.append('<option value="approved"><?php echo _("Approved"); ?></option>');
                                          eventTypeSelect.append('<option value="closed"><?php echo _("Closed"); ?></option>');
                                          eventTypeSelect.append('<option value="in_progress"><?php echo _("In progress"); ?></option>');
                                          eventTypeSelect.append('<option value="proposed"><?php echo _("Proposed"); ?></option>');
                                          eventTypeSelect.append('<option value="rejected"><?php echo _("Rejected"); ?></option>');
                                          
                                          eventTypeSelect.val(-1);
                                          newFormRow.append(newLabel);
                                          newInnerDiv.append(eventTypeSelect);
                                          newFormRow.append(newInnerDiv);
                                          newLabel.hide();
                                          newInnerDiv.hide();

                                          $('#editWidgetEventTypes').selectpicker({
                                             actionsBox: true, 
                                             width: "auto"
                                          });

                                          $('#editWidgetEventTypes').on('changed.bs.select', function (e) 
                                          {
                                             if($(this).val() === null)
                                             {
                                                targetEventsJson[$("#editWidgetGeolocationWidgets").val()] = [];
                                             }
                                             else
                                             {
                                                targetEventsJson[$("#editWidgetGeolocationWidgets").val()] = $(this).val();
                                             }
                                             $("#parametersM").val(JSON.stringify(targetEventsJson));
                                          });

                                          $("#editWidgetGeolocationWidgets").change(function(){
                                             newLabel.show();
                                             newInnerDiv.show();
                                             $('#editWidgetEventTypes').selectpicker('val', targetEventsJson[$("#editWidgetGeolocationWidgets").val()]);
                                          });
                                       }
                                       break;

                                    case "widgetEvacuationPlansNew":
                                            $('#link_help_modal-add-widget-m').css("display", "");
                                            $('#inputTitleWidgetM').attr('disabled', false);
                                            $("label[for='inputTitleWidgetM']").html("Title");
                                            $("label[for='inputColorWidgetM']").html("Background color");
                                            $('#inputColorWidgetM').attr('disabled', false);
                                            $('#inputColorWidgetM').prop('required', true);
                                            $('#inputFontSizeM').prop('required', true);
                                            $('#inputFontSizeM').prop('disabled', false);
                                            $('#inputFontColorM').val('');
                                            $('#inputFontColorM').prop('required', false);
                                            $('#inputFontColorM').prop('disabled', true);
                                            $('#widgetFontColorM').css("background-color", "#eeeeee");
                                            $('#select-frameColor-Widget-m').attr('disabled', false);
                                            $('#select-frameColor-Widget-m').prop('required', true);
                                            $('#select-frameColor-Widget-m').val('');
                                            $('#select-IntTemp-Widget-m').val(-1);
                                            $('#select-IntTemp-Widget-m').prop('disabled', true);
                                            $('#select-IntTemp-Widget-m').prop('required', false);
                                            $('#inputFreqWidgetM').prop('disabled', false);
                                            $('#inputFreqWidgetM').prop('required', true);
                                            $('#urlWidgetM').attr('disabled', true);
                                            $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').prop('required', true);
                                            $('#inputUdmWidgetM').prop("required", false);
                                            $('#inputUdmWidgetM').attr("disabled", true);
                                            $('#inputUdmWidgetM').val("");
                                            $('#inputUdmPositionM').prop("required", false);
                                            $('#inputUdmPositionM').attr("disabled", true);
                                            $('#inputUdmPositionM').val(-1);

                                            //Rimozione eventuali campi del subform general per widget process
                                            removeWidgetProcessGeneralFields("editWidget");

                                            //Parametri specifici del widget
                                            $('#specificParamsM .row').remove();
                                            var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                                addWidgetRangeTableContainer = null;

                                            //Nuova riga
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);

                                            newLabel = $('<label for="editWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newSelect = $('<select class="form-control" id="editWidgetGeolocationWidgets" name="editWidgetGeolocationWidgets"></select>');

                                            var widgetId, widgetTitle = null;
                                            var widgetsNumber = 0;

                                            //JSON degli eventi da mostrare su ogni widget target di questo widget events
                                            var targetEventsJson = currentParams;
                                            $("#parametersM").val(JSON.stringify(targetEventsJson));

                                            $("li.gs_w").each(function () {
                                                if ($(this).attr("id") != null) {
                                                    if ($(this).attr("id").includes("widgetMap")) {
                                                        widgetId = $(this).attr("id");
                                                        widgetTitle = $(this).find("div.titleDiv").html();
                                                        newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                        widgetsNumber++;
                                                    }
                                                }
                                            });

                                            if (widgetsNumber > 0) {
                                                newInnerDiv.append(newSelect);
                                            }
                                            else {
                                                newInnerDiv.append("None");
                                            }

                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel.show();
                                            newInnerDiv.show();

                                            if (widgetsNumber > 0) {
                                                newSelect.show();
                                                newSelect.val(-1);
                                                newLabel = $('<label for="editWidgetEventTypes" class="col-md-2 control-label"><?php echo _("Events to show on selected map"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                var eventTypeSelect = $('<select name="editWidgetEventTypes" class="form-control" id="editWidgetEventTypes" multiple></select>');

                                                eventTypeSelect.append('<option value="approved"><?php echo _("Approved"); ?></option>');
                                                eventTypeSelect.append('<option value="closed"><?php echo _("Closed"); ?></option>');
                                                eventTypeSelect.append('<option value="in_progress"><?php echo _("In progress"); ?></option>');
                                                eventTypeSelect.append('<option value="proposed"><?php echo _("Proposed"); ?></option>');
                                                eventTypeSelect.append('<option value="rejected"><?php echo _("Rejected"); ?></option>');

                                                eventTypeSelect.val(-1);
                                                newFormRow.append(newLabel);
                                                newInnerDiv.append(eventTypeSelect);
                                                newFormRow.append(newInnerDiv);
                                                newLabel.hide();
                                                newInnerDiv.hide();

                                                $('#editWidgetEventTypes').selectpicker({
                                                    actionsBox: true,
                                                    width: "auto",
                                                    size: "auto"
                                                });

                                                $('#editWidgetEventTypes').on('changed.bs.select', function (e) {
                                                    if ($(this).val() === null) {
                                                        targetEventsJson[$("#editWidgetGeolocationWidgets").val()] = [];
                                                    }
                                                    else {
                                                        targetEventsJson[$("#editWidgetGeolocationWidgets").val()] = $(this).val();
                                                    }
                                                    $("#parametersM").val(JSON.stringify(targetEventsJson));
                                                });

                                                $("#editWidgetGeolocationWidgets").change(function () {
                                                    newLabel.show();
                                                    newInnerDiv.show();
                                                    $('#editWidgetEventTypes').selectpicker('val', targetEventsJson[$("#editWidgetGeolocationWidgets").val()]);
                                                });
                                            }
                                            break;
                                    
				    case "widgetOperatorEventsList":
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').val('');
                                        $('#inputFontColorM').prop('required', false);
                                        $('#inputFontColorM').prop('disabled', true);
                                        $('#widgetFontColorM').css("background-color", "#eeeeee");
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#urlWidgetM').attr('disabled', true);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                       //Rimozione eventuali campi del subform general per widget process
                                       removeWidgetProcessGeneralFields("editWidget");
                                       
                                       //Parametri specifici del widget
                                       $('#specificParamsM .row').remove();
                                       var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan, addWidgetRangeTableContainer = null;
                                    
                                       //Nuova riga
                                       newFormRow = $('<div class="row"></div>');
                                       $("#specificParamsM").append(newFormRow);

                                       newLabel = $('<label for="editWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                       newInnerDiv = $('<div class="col-md-5"></div>');
                                       newSelect = $('<select class="selectpicker form-control" id="editWidgetGeolocationWidgets" name="editWidgetGeolocationWidgets" multiple></select>');
                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);
                                       
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);

                                        newLabel = $('<label for="editWidgetPanToWidgets" class="col-md-2 control-label"><?php echo _("Available autopan widgets"); ?></label>');
                                        var newInnerDiv2 = $('<div class="col-md-5"></div>');
                                        var newSelect2 = $('<select class="selectpicker form-control" id="editWidgetPanToWidgets" name="editWidgetPanToWidgets" multiple></select>');
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv2);
                                       
                                       var widgetId, widgetTitle = null;
                                       var widgetsNumber = 0, panToWidgetsNumber = 0;
                                       
                                       //JSON degli eventi da mostrare su ogni widget target di questo widget events
                                       var operatorEventsParametersM = currentParams;
                                       $("#parametersM").val(JSON.stringify(operatorEventsParametersM));
										
                                       $("li.gs_w").each(function()
                                       {
                                          if($(this).attr("id").includes("ExternalContent")&&($(this).find("div.widget").attr("data-role") === "map"))
                                          {
                                             widgetId = $(this).attr("id");
                                             widgetTitle = $(this).find("div.titleDiv").html();
                                             newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                             widgetsNumber++;
                                          }
                                          
                                            if($(this).attr("id").includes("ExternalContent")&&($(this).find("div.widget").attr("data-role") !== "link")&&($(this).find("div.widget").attr("data-role") !== "selectorWebTarget"))
                                            {
                                               widgetId = $(this).attr("id");
                                               widgetTitle = $(this).find("div.titleDiv").html();
                                               newSelect2.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                               panToWidgetsNumber++;
                                            }
                                       });

                                       if(widgetsNumber > 0)
                                       {
                                          newInnerDiv.append(newSelect);
                                       }
                                       else
                                       {
                                          newInnerDiv.append("None");
                                       }

                                        if(panToWidgetsNumber > 0)
                                        {
                                           newInnerDiv2.append(newSelect2);
                                        }
                                        else
                                        {
                                           newInnerDiv2.append("None");
                                        }

                                       if(widgetsNumber > 0)
                                       {
                                          newSelect.show();
                                          newSelect.val(-1);
										  
					  $('#editWidgetGeolocationWidgets').selectpicker({
                                             actionsBox: true, 
                                             width: "auto"
                                          });
                                          
                                          $('#editWidgetGeolocationWidgets').selectpicker('val', operatorEventsParametersM.targetEventsJson);

                                          $('#editWidgetGeolocationWidgets').on('changed.bs.select', function (e) 
                                          {
                                             if($(this).val() === null)
                                             {
                                                operatorEventsParametersM.targetEventsJson = [];
                                             }
                                             else
                                             {
                                                operatorEventsParametersM.targetEventsJson = $(this).val();
                                             }
                                             $("#parametersM").val(JSON.stringify(operatorEventsParametersM));
                                          });
                                       }
                                       
                                       if(panToWidgetsNumber > 0)
                                       {
                                          newSelect2.show();
                                          newSelect2.val(-1);
										  
					  $('#editWidgetPanToWidgets').selectpicker({
                                             actionsBox: true, 
                                             width: "auto"
                                          });
                                          
                                          $('#editWidgetPanToWidgets').selectpicker('val', operatorEventsParametersM.targetPanToJson);

                                          $('#editWidgetPanToWidgets').on('changed.bs.select', function (e) 
                                          {
                                             if($(this).val() === null)
                                             {
                                                operatorEventsParametersM.targetPanToJson = [];
                                             }
                                             else
                                             {
                                                operatorEventsParametersM.targetPanToJson = $(this).val();
                                             }
                                             $("#parametersM").val(JSON.stringify(operatorEventsParametersM));
                                          });
                                       }
                                       break;

                                        case "widgetOperatorEventsListNew":
                                            $('#link_help_modal-add-widget-m').css("display", "");
                                            $('#inputTitleWidgetM').attr('disabled', false);
                                            $("label[for='inputTitleWidgetM']").html("Title");
                                            $("label[for='inputColorWidgetM']").html("Background color");
                                            $('#inputColorWidgetM').attr('disabled', false);
                                            $('#inputColorWidgetM').prop('required', true);
                                            $('#inputFontSizeM').prop('required', true);
                                            $('#inputFontSizeM').prop('disabled', false);
                                            $('#inputFontColorM').val('');
                                            $('#inputFontColorM').prop('required', false);
                                            $('#inputFontColorM').prop('disabled', true);
                                            $('#widgetFontColorM').css("background-color", "#eeeeee");
                                            $('#select-frameColor-Widget-m').attr('disabled', false);
                                            $('#select-frameColor-Widget-m').prop('required', true);
                                            $('#select-frameColor-Widget-m').val('');
                                            $('#select-IntTemp-Widget-m').val(-1);
                                            $('#select-IntTemp-Widget-m').prop('disabled', true);
                                            $('#select-IntTemp-Widget-m').prop('required', false);
                                            $('#inputFreqWidgetM').prop('disabled', false);
                                            $('#inputFreqWidgetM').prop('required', true);
                                            $('#urlWidgetM').attr('disabled', true);
                                            $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').prop('required', true);
                                            $('#inputUdmWidgetM').prop("required", false);
                                            $('#inputUdmWidgetM').attr("disabled", true);
                                            $('#inputUdmWidgetM').val("");
                                            $('#inputUdmPositionM').prop("required", false);
                                            $('#inputUdmPositionM').attr("disabled", true);
                                            $('#inputUdmPositionM').val(-1);

                                            //Rimozione eventuali campi del subform general per widget process
                                            removeWidgetProcessGeneralFields("editWidget");

                                            //Parametri specifici del widget
                                            $('#specificParamsM .row').remove();
                                            var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                                addWidgetRangeTableContainer = null;

                                            //Nuova riga
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);

                                            newLabel = $('<label for="editWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-5"></div>');
                                            newSelect = $('<select class="selectpicker form-control" id="editWidgetGeolocationWidgets" name="editWidgetGeolocationWidgets" multiple></select>');
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);

                                            newLabel = $('<label for="editWidgetPanToWidgets" class="col-md-2 control-label"><?php echo _("Available autopan widgets"); ?></label>');
                                            var newInnerDiv2 = $('<div class="col-md-5"></div>');
                                            var newSelect2 = $('<select class="selectpicker form-control" id="editWidgetPanToWidgets" name="editWidgetPanToWidgets" multiple></select>');
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv2);

                                            var widgetId, widgetTitle = null;
                                            var widgetsNumber = 0, panToWidgetsNumber = 0;

                                            //JSON degli eventi da mostrare su ogni widget target di questo widget events
                                            var operatorEventsParametersM = currentParams;
                                            $("#parametersM").val(JSON.stringify(operatorEventsParametersM));

                                            $("li.gs_w").each(function () {
                                                if ($(this).attr("id") != null) {
                                                    if ($(this).attr("id").includes("widgetMap")) {
                                                        widgetId = $(this).attr("id");
                                                        widgetTitle = $(this).find("div.titleDiv").html();
                                                        newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                        widgetsNumber++;
                                                    }

                                                    if ($(this).attr("id").includes("ExternalContent") && ($(this).find("div.widget").attr("data-role") !== "link") && ($(this).find("div.widget").attr("data-role") !== "selectorWebTarget")) {
                                                        widgetId = $(this).attr("id");
                                                        widgetTitle = $(this).find("div.titleDiv").html();
                                                        newSelect2.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                        panToWidgetsNumber++;
                                                    }
                                                }
                                            });

                                            if (widgetsNumber > 0) {
                                                newInnerDiv.append(newSelect);
                                            }
                                            else {
                                                newInnerDiv.append("None");
                                            }

                                            if (panToWidgetsNumber > 0) {
                                                newInnerDiv2.append(newSelect2);
                                            }
                                            else {
                                                newInnerDiv2.append("None");
                                            }

                                            if (widgetsNumber > 0) {
                                                newSelect.show();
                                                newSelect.val(-1);

                                                $('#editWidgetGeolocationWidgets').selectpicker({
                                                    actionsBox: true,
                                                    width: "auto",
                                                    size: "auto"
                                                });

                                                $('#editWidgetGeolocationWidgets').selectpicker('val', operatorEventsParametersM.targetEventsJson);

                                                $('#editWidgetGeolocationWidgets').on('changed.bs.select', function (e) {
                                                    if ($(this).val() === null) {
                                                        operatorEventsParametersM.targetEventsJson = [];
                                                    }
                                                    else {
                                                        operatorEventsParametersM.targetEventsJson = $(this).val();
                                                    }
                                                    $("#parametersM").val(JSON.stringify(operatorEventsParametersM));
                                                });
                                            }

                                            if (panToWidgetsNumber > 0) {
                                                newSelect2.show();
                                                newSelect2.val(-1);

                                                $('#editWidgetPanToWidgets').selectpicker({
                                                    actionsBox: true,
                                                    width: "auto",
                                                    size: "auto"
                                                });

                                                $('#editWidgetPanToWidgets').selectpicker('val', operatorEventsParametersM.targetPanToJson);

                                                $('#editWidgetPanToWidgets').on('changed.bs.select', function (e) {
                                                    if ($(this).val() === null) {
                                                        operatorEventsParametersM.targetPanToJson = [];
                                                    }
                                                    else {
                                                        operatorEventsParametersM.targetPanToJson = $(this).val();
                                                    }
                                                    $("#parametersM").val(JSON.stringify(operatorEventsParametersM));
                                                });
                                            }
                                            break;
									
                                    case "widgetAlarms":
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').val('');
                                        $('#inputFontColorM').prop('required', false);
                                        $('#inputFontColorM').prop('disabled', true);
                                        $('#widgetFontColorM').css("background-color", "#eeeeee");
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#urlWidgetM').attr('disabled', true);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                       //Rimozione eventuali campi del subform general per widget process
                                       removeWidgetProcessGeneralFields("editWidget");
                                       
                                       //Parametri specifici del widget
                                       $('#specificParamsM .row').remove();
                                       var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan, addWidgetRangeTableContainer = null;
                                    
                                       //Nuova riga
                                       newFormRow = $('<div class="row"></div>');
                                       $("#specificParamsM").append(newFormRow);

                                       newLabel = $('<label for="editWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                       newInnerDiv = $('<div class="col-md-3"></div>');
                                       newSelect = $('<select class="form-control" id="editWidgetGeolocationWidgets" name="editWidgetGeolocationWidgets"></select>');

                                       var widgetId, widgetTitle = null;
                                       var widgetsNumber = 0;
                                       
                                       //JSON degli eventi da mostrare su ogni widget target di questo widget events
                                       var targetEventsJson = currentParams;
                                       $("#parametersM").val(JSON.stringify(targetEventsJson));

                                       $("li.gs_w").each(function()
                                       {
                                          if($(this).attr("id").includes("ExternalContent")&&($(this).find("div.widget").attr("data-role") === "map"))
                                          {
                                             widgetId = $(this).attr("id");
                                             widgetTitle = $(this).find("div.titleDiv").html();
                                             newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                             widgetsNumber++;
                                          }
                                       });

                                       if(widgetsNumber > 0)
                                       {
                                          newInnerDiv.append(newSelect);
                                       }
                                       else
                                       {
                                          newInnerDiv.append("None");
                                       }

                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);
                                       $("#specificParamsM").append(newFormRow);
                                       newLabel.show();
                                       newInnerDiv.show();

                                       if(widgetsNumber > 0)
                                       {
                                          newSelect.show();
                                          newSelect.val(-1);
                                          newLabel = $('<label for="editWidgetEventTypes" class="col-md-2 control-label"><?php echo _("Events to show on selected map"); ?></label>');
                                          newInnerDiv = $('<div class="col-md-3"></div>');
                                          var eventTypeSelect = $('<select name="editWidgetEventTypes" class="form-control" id="editWidgetEventTypes" multiple></select>');
                                          
                                          for(var key in alarmTypes)
                                          {
                                             eventTypeSelect.append('<option value="' + key + '">' + alarmTypes[key].desc + '</option>');
                                          }
                                          
                                          eventTypeSelect.val(-1);
                                          newFormRow.append(newLabel);
                                          newInnerDiv.append(eventTypeSelect);
                                          newFormRow.append(newInnerDiv);
                                          newLabel.hide();
                                          newInnerDiv.hide();

                                          $('#editWidgetEventTypes').selectpicker({
                                             actionsBox: true, 
                                             width: "auto"
                                          });

                                          $('#editWidgetEventTypes').on('changed.bs.select', function (e) 
                                          {
                                             if($(this).val() === null)
                                             {
                                                targetEventsJson[$("#editWidgetGeolocationWidgets").val()] = [];
                                             }
                                             else
                                             {
                                                targetEventsJson[$("#editWidgetGeolocationWidgets").val()] = $(this).val();
                                             }
                                             $("#parametersM").val(JSON.stringify(targetEventsJson));
                                          });

                                          $("#editWidgetGeolocationWidgets").change(function(){
                                             newLabel.show();
                                             newInnerDiv.show();
                                             $('#editWidgetEventTypes').selectpicker('val', targetEventsJson[$("#editWidgetGeolocationWidgets").val()]);
                                          });
                                       }
                                       break;

                                       case "widgetAlarmsNew":
                                            $('#link_help_modal-add-widget-m').css("display", "");
                                            $('#inputTitleWidgetM').attr('disabled', false);
                                            $("label[for='inputTitleWidgetM']").html("Title");
                                            $("label[for='inputColorWidgetM']").html("Background color");
                                            $('#inputColorWidgetM').attr('disabled', false);
                                            $('#inputColorWidgetM').prop('required', true);
                                            $('#inputFontSizeM').prop('required', true);
                                            $('#inputFontSizeM').prop('disabled', false);
                                            $('#inputFontColorM').val('');
                                            $('#inputFontColorM').prop('required', false);
                                            $('#inputFontColorM').prop('disabled', true);
                                            $('#widgetFontColorM').css("background-color", "#eeeeee");
                                            $('#select-frameColor-Widget-m').attr('disabled', false);
                                            $('#select-frameColor-Widget-m').prop('required', true);
                                            $('#select-frameColor-Widget-m').val('');
                                            $('#select-IntTemp-Widget-m').val(-1);
                                            $('#select-IntTemp-Widget-m').prop('disabled', true);
                                            $('#select-IntTemp-Widget-m').prop('required', false);
                                            $('#inputFreqWidgetM').prop('disabled', false);
                                            $('#inputFreqWidgetM').prop('required', true);
                                            $('#urlWidgetM').attr('disabled', true);
                                            $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').prop('required', true);
                                            $('#inputUdmWidgetM').prop("required", false);
                                            $('#inputUdmWidgetM').attr("disabled", true);
                                            $('#inputUdmWidgetM').val("");
                                            $('#inputUdmPositionM').prop("required", false);
                                            $('#inputUdmPositionM').attr("disabled", true);
                                            $('#inputUdmPositionM').val(-1);

                                            //Rimozione eventuali campi del subform general per widget process
                                            removeWidgetProcessGeneralFields("editWidget");

                                            //Parametri specifici del widget - Vecchio modale
                                            $('#specificParamsM .row').remove();
                                            var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                                addWidgetRangeTableContainer = null;

                                            //Nuova riga
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);

                                            newLabel = $('<label for="editWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newSelect = $('<select class="form-control" id="editWidgetGeolocationWidgets" name="editWidgetGeolocationWidgets"></select>');

                                            var widgetId, widgetTitle = null;
                                            var widgetsNumber = 0;

                                            //JSON degli eventi da mostrare su ogni widget target di questo widget events
                                            var targetEventsJson = currentParams;
                                            $("#parametersM").val(JSON.stringify(targetEventsJson));

                                            $("li.gs_w").each(function () {
                                                if ($(this).attr("id") != null) {
                                                    if ($(this).attr("id").includes("widgetMap")) {
                                                        widgetId = $(this).attr("id");
                                                        widgetTitle = $(this).find("div.titleDiv").html();
                                                        newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                        widgetsNumber++;
                                                    }
                                                }
                                            });

                                            if (widgetsNumber > 0) {
                                                newInnerDiv.append(newSelect);
                                            }
                                            else {
                                                newInnerDiv.append("None");
                                            }

                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel.show();
                                            newInnerDiv.show();

                                            if (widgetsNumber > 0) {
                                                newSelect.show();
                                                newSelect.val(-1);
                                                newLabel = $('<label for="editWidgetEventTypes" class="col-md-2 control-label"><?php echo _("Events to show on selected map"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                var eventTypeSelect = $('<select name="editWidgetEventTypes" class="form-control" id="editWidgetEventTypes" multiple></select>');

                                                for (var key in alarmTypes) {
                                                    eventTypeSelect.append('<option value="' + key + '">' + alarmTypes[key].desc + '</option>');
                                                }

                                                eventTypeSelect.val(-1);
                                                newFormRow.append(newLabel);
                                                newInnerDiv.append(eventTypeSelect);
                                                newFormRow.append(newInnerDiv);
                                                newLabel.hide();
                                                newInnerDiv.hide();

                                                $('#editWidgetEventTypes').selectpicker({
                                                    actionsBox: true,
                                                    width: "auto",
                                                    size: "auto"
                                                });

                                                $('#editWidgetEventTypes').on('changed.bs.select', function (e) {
                                                    if ($(this).val() === null) {
                                                        targetEventsJson[$("#editWidgetGeolocationWidgets").val()] = [];
                                                    }
                                                    else {
                                                        targetEventsJson[$("#editWidgetGeolocationWidgets").val()] = $(this).val();
                                                    }
                                                    $("#parametersM").val(JSON.stringify(targetEventsJson));
                                                });

                                                $("#editWidgetGeolocationWidgets").change(function () {
                                                    newLabel.show();
                                                    newInnerDiv.show();
                                                    $('#editWidgetEventTypes').selectpicker('val', targetEventsJson[$("#editWidgetGeolocationWidgets").val()]);
                                                });
                                            }

                                            //Parametri specifici del widget - Nuovo modale
                                            $('#modalWidgetAdvancedOptions #advancedTab .row').empty();

                                            //Nuova riga
                                            var newFieldCnt = $('<div class="col-xs-12 col-md-6"><div class="col-xs-12 centerWithFlex advancedFieldLbl">Available map widgets</div><div class="col-xs-12 centerWithFlex advancedFieldCnt"></div></div>');
                                            $('#modalWidgetAdvancedOptions #advancedTab .row').append(newFieldCnt);

                                            newSelect = $('<select class="form-control" id="editWidgetGeolocationWidgets" name="editWidgetGeolocationWidgets"></select>');

                                            var widgetId, widgetTitle = null;
                                            var widgetsNumber = 0;

                                            //JSON degli eventi da mostrare su ogni widget target di questo widget events
                                            var targetEventsJson = currentParams;
                                            $("#parametersM").val(JSON.stringify(targetEventsJson));

                                            $("li.gs_w").each(function () {
                                                if ($(this).attr("id") != null) {
                                                    if ($(this).attr("id").includes("widgetMap")) {
                                                        widgetId = $(this).attr("id");
                                                        widgetTitle = $(this).find("div.titleDiv").html();
                                                        newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                        widgetsNumber++;
                                                    }
                                                }
                                            });

                                            if (widgetsNumber > 0) {
                                                newFieldCnt.find('.advancedFieldCnt').append(newSelect);
                                            }
                                            else {
                                                newFieldCnt.find('.advancedFieldCnt').append("None");
                                            }

                                            if (widgetsNumber > 0) {
                                                newSelect.show();
                                                newSelect.val(-1);

                                                var newFieldCnt = $('<div class="col-xs-12 col-md-6"><div class="col-xs-12 centerWithFlex advancedFieldLbl">Events to show on selected map</div><div class="col-xs-12 centerWithFlex advancedFieldCnt"></div></div>');
                                                $('#modalWidgetAdvancedOptions #advancedTab .row').append(newFieldCnt);

                                                var eventTypeSelect = $('<select name="editWidgetEventTypes" class="form-control" id="editWidgetEventTypes" multiple></select>');

                                                for (var key in alarmTypes) {
                                                    eventTypeSelect.append('<option value="' + key + '">' + alarmTypes[key].desc + '</option>');
                                                }

                                                eventTypeSelect.val(-1);
                                                newFieldCnt.find('.advancedFieldCnt').append(newSelect);
                                                newFieldCnt.hide();

                                                $('#editWidgetEventTypes').selectpicker({
                                                    actionsBox: true,
                                                    width: "auto",
                                                    size: "auto"
                                                });

                                                $('#editWidgetEventTypes').on('changed.bs.select', function (e) {
                                                    if ($(this).val() === null) {
                                                        targetEventsJson[$("#editWidgetGeolocationWidgets").val()] = [];
                                                    }
                                                    else {
                                                        targetEventsJson[$("#editWidgetGeolocationWidgets").val()] = $(this).val();
                                                    }
                                                    $("#parametersM").val(JSON.stringify(targetEventsJson));
                                                });

                                                $("#editWidgetGeolocationWidgets").change(function () {
                                                    newFieldCnt.show();
                                                    $('#editWidgetEventTypes').selectpicker('val', targetEventsJson[$("#editWidgetGeolocationWidgets").val()]);
                                                });
                                            }
                                            break;

                                    case "widgetTrafficEvents":
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').val('');
                                        $('#inputFontColorM').prop('required', false);
                                        $('#inputFontColorM').prop('disabled', true);
                                        $('#widgetFontColorM').css("background-color", "#eeeeee");
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#urlWidgetM').attr('disabled', true);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        if(styleParamsRaw !== null) 
                                        {
                                            styleParameters = JSON.parse(styleParamsRaw);
                                        }
                                        
                                       //Rimozione eventuali campi del subform general per widget process
                                       removeWidgetProcessGeneralFields("editWidget");
                                       
                                       //Parametri specifici del widget
                                       $('#specificParamsM .row').remove();
                                       var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan, addWidgetRangeTableContainer = null;
                                       
                                       //Nuova riga
                                       newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);

                                        newLabel = $('<label for="editWidgetDefaultCategory" class="col-md-2 control-label">Default category</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="editWidgetDefaultCategory" name="editWidgetDefaultCategory"></select>');
                                        newSelect.append('<option value="none"><?php echo _("None"); ?></option>');
                                        newSelect.append('<option value="incident"><?php echo _("Incidents"); ?></option>');
                                        newSelect.append('<option value="roadWorks"><?php echo _("Road works"); ?></option>');
                                        newSelect.append('<option value="snow"><?php echo _("Snow"); ?></option>');
                                        newSelect.append('<option value="weatherData"><?php echo _("Weather data"); ?></option>');
                                        newSelect.append('<option value="wind"><?php echo _("Wind"); ?></option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newSelect.val(styleParameters.defaultCategory);
                                       
                                       //Nuova riga
                                       newFormRow = $('<div class="row"></div>');
                                       $("#specificParamsM").append(newFormRow);

                                       newLabel = $('<label for="editWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                       newInnerDiv = $('<div class="col-md-3"></div>');
                                       newSelect = $('<select class="form-control" id="editWidgetGeolocationWidgets" name="editWidgetGeolocationWidgets"></select>');

                                       var widgetId, widgetTitle = null;
                                       var widgetsNumber = 0;
                                       
                                       //JSON degli eventi da mostrare su ogni widget target di questo widget events
                                       var targetEventsJson = currentParams;
                                       $("#parametersM").val(JSON.stringify(targetEventsJson));

                                       $("li.gs_w").each(function()
                                       {
                                          if($(this).attr("id").includes("ExternalContent")&&($(this).find("div.widget").attr("data-role") === "map"))
                                          {
                                             widgetId = $(this).attr("id");
                                             widgetTitle = $(this).find("div.titleDiv").html();
                                             newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                             widgetsNumber++;
                                          }
                                       });

                                       if(widgetsNumber > 0)
                                       {
                                          newInnerDiv.append(newSelect);
                                       }
                                       else
                                       {
                                          newInnerDiv.append("None");
                                       }

                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);
                                       $("#specificParamsM").append(newFormRow);
                                       newLabel.show();
                                       newInnerDiv.show();

                                       if(widgetsNumber > 0)
                                       {
                                          newSelect.show();
                                          newSelect.val(-1);
                                          newLabel = $('<label for="editWidgetEventTypes" class="col-md-2 control-label"><?php echo _("Events to show on selected map"); ?></label>');
                                          newInnerDiv = $('<div class="col-md-3"></div>');
                                          var eventTypeSelect = $('<select name="editWidgetEventTypes" class="form-control" id="editWidgetEventTypes" multiple></select>');
                                          
                                          for(var key in trafficEventTypes)
                                          {
                                             eventTypeNum = key.replace("type", "");
                                             eventTypeSelect.append('<option value="' + eventTypeNum + '">' + trafficEventTypes[key].desc + '</option>');
                                          }
                                          
                                          eventTypeSelect.val(-1);
                                          newFormRow.append(newLabel);
                                          newInnerDiv.append(eventTypeSelect);
                                          newFormRow.append(newInnerDiv);
                                          newLabel.hide();
                                          newInnerDiv.hide();

                                          $('#editWidgetEventTypes').selectpicker({
                                             actionsBox: true, 
                                             width: "auto"
                                          });

                                          $('#editWidgetEventTypes').on('changed.bs.select', function (e) 
                                          {
                                             if($(this).val() === null)
                                             {
                                                targetEventsJson[$("#editWidgetGeolocationWidgets").val()] = [];
                                             }
                                             else
                                             {
                                                targetEventsJson[$("#editWidgetGeolocationWidgets").val()] = $(this).val();
                                             }
                                             $("#parametersM").val(JSON.stringify(targetEventsJson));
                                          });

                                          $("#editWidgetGeolocationWidgets").change(function(){
                                             newLabel.show();
                                             newInnerDiv.show();
                                             $('#editWidgetEventTypes').selectpicker('val', targetEventsJson[$("#editWidgetGeolocationWidgets").val()]);
                                          });
                                       }
                                       break;

                                        case "widgetTrafficEventsNew":
                                            $('#link_help_modal-add-widget-m').css("display", "");
                                            $('#inputTitleWidgetM').attr('disabled', false);
                                            $("label[for='inputTitleWidgetM']").html("Title");
                                            $("label[for='inputColorWidgetM']").html("Background color");
                                            $('#inputColorWidgetM').attr('disabled', false);
                                            $('#inputColorWidgetM').prop('required', true);
                                            $('#inputFontSizeM').prop('required', true);
                                            $('#inputFontSizeM').prop('disabled', false);
                                            $('#inputFontColorM').val('');
                                            $('#inputFontColorM').prop('required', false);
                                            $('#inputFontColorM').prop('disabled', true);
                                            $('#widgetFontColorM').css("background-color", "#eeeeee");
                                            $('#select-frameColor-Widget-m').attr('disabled', false);
                                            $('#select-frameColor-Widget-m').prop('required', true);
                                            $('#select-frameColor-Widget-m').val('');
                                            $('#select-IntTemp-Widget-m').val(-1);
                                            $('#select-IntTemp-Widget-m').prop('disabled', true);
                                            $('#select-IntTemp-Widget-m').prop('required', false);
                                            $('#inputFreqWidgetM').prop('disabled', false);
                                            $('#inputFreqWidgetM').prop('required', true);
                                            $('#urlWidgetM').attr('disabled', true);
                                            $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').prop('required', true);
                                            $('#inputUdmWidgetM').prop("required", false);
                                            $('#inputUdmWidgetM').attr("disabled", true);
                                            $('#inputUdmWidgetM').val("");
                                            $('#inputUdmPositionM').prop("required", false);
                                            $('#inputUdmPositionM').attr("disabled", true);
                                            $('#inputUdmPositionM').val(-1);

                                            if (styleParamsRaw !== null) {
                                                styleParameters = JSON.parse(styleParamsRaw);
                                            }

                                            //Rimozione eventuali campi del subform general per widget process
                                            removeWidgetProcessGeneralFields("editWidget");

                                            //Parametri specifici del widget
                                            $('#specificParamsM .row').remove();
                                            var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                                addWidgetRangeTableContainer = null;

                                            //Nuova riga
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);

                                            newLabel = $('<label for="editWidgetDefaultCategory" class="col-md-2 control-label">Default category</label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newSelect = $('<select class="form-control" id="editWidgetDefaultCategory" name="editWidgetDefaultCategory"></select>');
                                            newSelect.append('<option value="none"><?php echo _("None"); ?></option>');
                                            newSelect.append('<option value="incident"><?php echo _("Incidents"); ?></option>');
                                            newSelect.append('<option value="roadWorks"><?php echo _("Road works"); ?></option>');
                                            newSelect.append('<option value="snow"><?php echo _("Snow"); ?></option>');
                                            newSelect.append('<option value="weatherData"><?php echo _("Weather data"); ?></option>');
                                            newSelect.append('<option value="wind"><?php echo _("Wind"); ?></option>');
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newSelect.val(styleParameters.defaultCategory);

                                            //Nuova riga
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);

                                            newLabel = $('<label for="editWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newSelect = $('<select class="form-control" id="editWidgetGeolocationWidgets" name="editWidgetGeolocationWidgets"></select>');

                                            var widgetId, widgetTitle = null;
                                            var widgetsNumber = 0;

                                            //JSON degli eventi da mostrare su ogni widget target di questo widget events
                                            var targetEventsJson = currentParams;
                                            $("#parametersM").val(JSON.stringify(targetEventsJson));

                                            $("li.gs_w").each(function () {
                                                if ($(this).attr("id") != null) {
                                                    if ($(this).attr("id").includes("widgetMap")) {
                                                        widgetId = $(this).attr("id");
                                                        widgetTitle = $(this).find("div.titleDiv").html();
                                                        newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                        widgetsNumber++;
                                                    }
                                                }
                                            });

                                            if (widgetsNumber > 0) {
                                                newInnerDiv.append(newSelect);
                                            }
                                            else {
                                                newInnerDiv.append("None");
                                            }

                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel.show();
                                            newInnerDiv.show();

                                            if (widgetsNumber > 0) {
                                                newSelect.show();
                                                newSelect.val(-1);
                                                newLabel = $('<label for="editWidgetEventTypes" class="col-md-2 control-label"><?php echo _("Events to show on selected map"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                var eventTypeSelect = $('<select name="editWidgetEventTypes" class="form-control" id="editWidgetEventTypes" multiple></select>');

                                                for (var key in trafficEventTypes) {
                                                    eventTypeNum = key.replace("type", "");
                                                    eventTypeSelect.append('<option value="' + eventTypeNum + '">' + trafficEventTypes[key].desc + '</option>');
                                                }

                                                eventTypeSelect.val(-1);
                                                newFormRow.append(newLabel);
                                                newInnerDiv.append(eventTypeSelect);
                                                newFormRow.append(newInnerDiv);
                                                newLabel.hide();
                                                newInnerDiv.hide();

                                                $('#editWidgetEventTypes').selectpicker({
                                                    actionsBox: true,
                                                    width: "auto",
                                                    size: "auto"
                                                });

                                                $('#editWidgetEventTypes').on('changed.bs.select', function (e) {
                                                    if ($(this).val() === null) {
                                                        targetEventsJson[$("#editWidgetGeolocationWidgets").val()] = [];
                                                    }
                                                    else {
                                                        targetEventsJson[$("#editWidgetGeolocationWidgets").val()] = $(this).val();
                                                    }
                                                    $("#parametersM").val(JSON.stringify(targetEventsJson));
                                                });

                                                $("#editWidgetGeolocationWidgets").change(function () {
                                                    newLabel.show();
                                                    newInnerDiv.show();
                                                    $('#editWidgetEventTypes').selectpicker('val', targetEventsJson[$("#editWidgetGeolocationWidgets").val()]);
                                                });
                                            }
                                            break;

                                       case "widgetFirstAid":
                                       var series = JSON.parse(data['lastSeries']);
                                      
                                       var thrTables1 = new Array();
                                       var thrTables2 = new Array();
                                       var i, j, k, min, max, color, newTableRow, newTableCell, currentFieldIndex, currentSeriesIndex, thrSeries, newFormRow, 
                                           newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan, addWidgetRangeTableContainer, newSeries = null;
                                        
                                       //Funzione di settaggio dei globals per il file dashboard_configdash.js
                                       setGlobals(currentParams, thrTables1, thrTables2, series, $('#select-widget-m').val());
                                        
                                       //Costruzione THRTables dai parametri provenienti da DB (vuote se non ci sono soglie per quel campo, anche nel caso di nessuna soglia settata in assoluto
                                       buildThrTablesForEditWidget();
                                        
                                       //Rimozione eventuali campi del subform general per widget process
                                       removeWidgetProcessGeneralFields("editWidget");
                                        
                                       if(styleParamsRaw !== null) 
                                       {
                                          styleParameters = JSON.parse(styleParamsRaw);
                                       } 
                                      
                                       $('#link_help_modal-add-widget-m').css("display", "");
                                       $('#inputComuneWidgetM').attr('disabled', true);
                                       $("label[for='inputTitleWidgetM']").html("Title");
                                       $("label[for='inputColorWidgetM']").html("Background color");
                                       $('#inputTitleWidgetM').attr('disabled', false);
                                       $('#select-frameColor-Widget-m').attr('disabled', false);
                                       $('#select-frameColor-Widget-m').prop('required', true);
                                       $('#select-IntTemp-Widget-m').attr('disabled', true);
                                       $('#select-IntTemp-Widget-m').prop('required', false);
                                       $('#inputFreqWidgetM').prop('disabled', false);
                                       $("#urlWidgetM").prop('disabled', false);
                                       $('#inputFontSizeM').prop('required', true);
                                       $('#inputFontSizeM').prop('disabled', false);
                                       $('#inputFontColorM').prop('required', true);
                                       $('#inputFontColorM').prop('disabled', false);
                                       $('#urlWidgetM').attr('disabled', false);
                                       $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                       $('#inputHeaderFontColorWidgetM').prop('required', true);
                                       $('#inputUdmWidgetM').prop("required", false);
                                       $('#inputUdmWidgetM').attr("disabled", true);
                                       $('#inputUdmWidgetM').val("");
                                       $('#inputUdmPositionM').prop("required", false);
                                       $('#inputUdmPositionM').attr("disabled", true);
                                       $('#inputUdmPositionM').val(-1);
                                       $('#inputFirstAidRowM').show();
                                        
                                       removeWidgetProcessGeneralFields("editWidget");
                                        
                                       //RIMOZIONE CAMPI PER TUTTI GLI ALTRI WIDGET
                                       $('#specificParamsM .row').remove();
                                        
                                       //Visualizzazione campi specifici per questo widget
                                        
                                       //Nuova riga
                                       newFormRow = $('<div class="row"></div>');
                                       $("#specificParamsM").append(newFormRow);

                                       newLabel = $('<label for="editWidgetFirstAidMode" class="col-md-2 control-label"><?php echo _("Visualization mode"); ?></label>');
                                       newInnerDiv = $('<div class="col-md-3"></div>');
                                       newSelect = $('<select class="form-control" id="editWidgetFirstAidMode" name="editWidgetFirstAidMode" required></select>');
                                       newSelect.append('<option value="singleSummary"><?php echo _("Single hospital - Totals only"); ?></option>');
                                       newSelect.append('<option value="singleDetails"><?php echo _("Single hospital - Details"); ?></option>');
                                       newSelect.append('<option value="hospitalsOverview"><?php echo _("Multiple hospitals overview"); ?></option>');
                                       newSelect.val(viewMode);
                                       newInnerDiv.append(newSelect);
                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);
                                       newLabel.show();
                                       newInnerDiv.show();
                                       newSelect.show();

                                       var hospitalSelect = '<label for="editWidgetFirstAidHospital" class="col-md-2 control-label"><?php echo _("Visualization mode"); ?><First aid</label>' +
                                       '<div class="col-md-3">' +
                                           '<div class="input-group">' +
                                               '<select id="editWidgetFirstAidHospital" name="editWidgetFirstAidHospital" class="form-control">' + 
                                               '</select>' +
                                           '</div>' +
                                       '</div>';

                                       var multipleHospitalSelect = '<label for="editWidgetFirstAidHospitals" class="col-md-2 control-label"><?php echo _("First aids"); ?></label>' +
                                               '<div class="col-md-3">' +
                                                   '<div class="input-group">' +
                                                       '<select name="editWidgetFirstAidHospitals" class="form-control" id="editWidgetFirstAidHospitals" multiple>' + 
                                                       '</select>' +
                                                   '</div>' +
                                               '</div>';
                                       
                                       newFormRow.append(hospitalSelect);
                                       newFormRow.append(multipleHospitalSelect);
                                       
                                       $('label[for=editWidgetFirstAidHospital]').hide();
                                       $('#editWidgetFirstAidHospital').parent().parent().hide();
                                       $('label[for=editWidgetFirstAidHospitals]').hide();
                                       $('#editWidgetFirstAidHospitals').parent().parent().hide();

                                       var hospitalName, hospitalUrl = null;

                                       for(var i = 0; i < hospitalList.Services.features.length; i++)
                                       {
                                          hospitalName = hospitalList.Services.features[i].properties.name;
                                          hospitalUrl = hospitalList.Services.features[i].properties.serviceUri;
                                          
                                          hospitalName = hospitalName.replace("PRONTO SOCCORSO", "PS");
                                          hospitalName = hospitalName.replace("PRIMO INTERVENTO", "PI");
                                          hospitalName = hospitalName.replace("AZIENDA OSPEDALIERA", "AO");
                                          hospitalName = hospitalName.replace("PRESIDIO OSPEDALIERO", "PO");
                                          hospitalName = hospitalName.replace("ISTITUTO DI PUBBLICA ASSISTENZA", "IPA");
                                          hospitalName = hospitalName.replace("ASSOCIAZIONE DI PUBBLICA ASSISTENZA", "APA");
                                          hospitalName = hospitalName.replace("OSPEDALE DI", "");
                                          hospitalName = hospitalName.replace("OSPEDALE DEL", "");
                                          hospitalName = hospitalName.replace("OSPEDALE DELL'", "");
                                          hospitalName = hospitalName.replace("OSPEDALE DELLA", "");
                                          hospitalName = hospitalName.replace("DELL'OSPEDALE", "");
                                          hospitalName = hospitalName.replace("OSPEDALE", "");
                                          hospitalName = hospitalName.replace("ITALIANA", "");
                                          
                                          if($("#editWidgetFirstAidHospital").find('option[value="' + hospitalUrl + '"]').length <= 0)
                                          {
                                             $("#editWidgetFirstAidHospital").append('<option value="' + hospitalUrl + '">' + hospitalName + '</option>');
                                          }
                                          
                                          if($("#editWidgetFirstAidHospitals").find('option[value="' + hospitalUrl + '"]').length <= 0)
                                          {
                                             $("#editWidgetFirstAidHospitals").append('<option value="' + hospitalUrl + '">' + hospitalName + '</option>');
                                          }
                                       }
                                       
                                       if((viewMode === 'singleSummary')||(viewMode === 'singleDetails'))
                                       {
                                          $('label[for=editWidgetFirstAidHospital]').show();
                                          $('#editWidgetFirstAidHospital').parent().parent().show(); 
                                          $('#editWidgetFirstAidHospital').attr("disabled", false);
                                          $('#editWidgetFirstAidHospital').prop("required", true);
                                          $('#editWidgetFirstAidHospital').val(serviceUri);
                                          $("#serviceUriM").val(serviceUri);
                                          $("#hospitalListM").val("");
                                          $("#editWidgetFirstAidHospital").change(function()
                                          {
                                             $("#serviceUriM").val($(this).val());
                                          });
                                       }
                                       else
                                       {
                                          var selectedHospitals = JSON.parse(data['hospitalList']);
                                          $("#serviceUriM").val("");
                                          $("#hospitalListM").val(data['hospitalList']);
                                          $('label[for=editWidgetFirstAidHospitals]').show();
                                          $('#editWidgetFirstAidHospitals').parent().parent().show();
                                          $('#editWidgetFirstAidHospitals').selectpicker({
                                             actionsBox: true, 
                                             width: "auto"
                                          });
                                          $('#editWidgetFirstAidHospitals').selectpicker('val', selectedHospitals);
                                          
                                          $('#editWidgetFirstAidHospitals').on('changed.bs.select', function (e) {
                                             $("#hospitalListM").val(JSON.stringify($(this).val()));
                                             var labelsString = $('button[data-id="editWidgetFirstAidHospitals"] span').eq(0).html().replace(/  /g, " ");
                                                   
                                             var localInfoJson = {
                                                "firstAxis":
                                                {
                                                   "Red_code":"",
                                                   "Yellow_code":"",
                                                   "Green_code":"",
                                                   "Blue_code":"",
                                                   "White_code":""
                                                },
                                                "secondAxis": {}
                                             };

                                             var localSeries = {  
                                                "firstAxis":{  
                                                   "desc":"Priority",
                                                   "labels":[  
                                                      "Red code",
                                                      "Yellow code",
                                                      "Green code",
                                                      "Blue code",
                                                      "White code"
                                                   ]
                                                },
                                                "secondAxis":{  
                                                   "desc":"Hospital",
                                                   "labels":[],
                                                   "series":[]
                                                }
                                             };

                                             if(labelsString !== "Nothing selected")
                                             {
                                                var labels = labelsString.split(", ");
                                                var infoLabel = null;

                                                for(var i = 0; i < labels.length; i++)
                                                {
                                                   localSeries.secondAxis.labels[i] = labels[i];
                                                }

                                                for(var j = 0; j < localSeries.secondAxis.labels.length; j++)
                                                {
                                                   infoLabel = localSeries.secondAxis.labels[j].replace(/ /g, "_");
                                                   infoJson.secondAxis[infoLabel] = "";
                                                }
                                             }
                                          });
                                       }
                                       
                                       $("#editWidgetFirstAidMode").change(function()
                                       {
                                          switch($(this).val())
                                          {
                                             case "singleSummary": 
                                                $('label[for=editWidgetFirstAidHospitals]').hide();
                                                $('#editWidgetFirstAidHospitals').parent().parent().hide();
                                                $('label[for=editWidgetFirstAidHospital]').show();
                                                $('#editWidgetFirstAidHospital').parent().parent().show();
                                                
                                                $('#editWidgetFirstAidHospital').val(-1);
                                                $("#hospitalListM").val("");
                                                
                                                $("#editWidgetFirstAidHospital").change(function()
                                                {
                                                   $("#serviceUriM").val($(this).val());
                                                });
                                                   
                                                newSeries = {  
                                                   "firstAxis":{  
                                                      "desc":"Priority",
                                                      "labels":[  
                                                         "Red code",
                                                         "Yellow code",
                                                         "Green code",
                                                         "Blue code",
                                                         "White code"
                                                      ]
                                                   },
                                                   "secondAxis":{  
                                                      "desc":"Status",
                                                      "labels":[  
                                                         "Totals"
                                                      ],
                                                      "series":[]
                                                   }
                                                };
                                                
                                                infoJson = {
                                                   "firstAxis":
                                                   {
                                                      "Red_code":"",
                                                      "Yellow_code":"",
                                                      "Green_code":"",
                                                      "Blue_code":"",
                                                      "White_code":""
                                                   },
                                                   "secondAxis":
                                                   {
                                                      "Totals":""
                                                   }
                                                };
                                                
                                                $('label[for="alrAxisSelM"]').hide();
                                                $("#alrAxisSelM").hide();
                                                $('label[for="alrFieldSelM"]').hide();
                                                $("#alrFieldSelM").hide();
                                                $("#alrAxisSelM").empty();
                                                $("#alrAxisSelM").append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                                $("#alrAxisSelM").val(-1);
                                                $("#addWidgetRangeTableContainerM").hide();
                                                $("#alrThrSelM").attr("disabled", false);
                                                $("#alrThrSelM").prop("required", true);
                                                $("#alrThrSelM").val("no");
                                                
                                                $("#showTableFirstCellM").val(-1);
                                                $("#showTableFirstCellM").prop("required", false);
                                                $("#showTableFirstCellM").attr("disabled", true);

                                                $("#tableFirstCellFontSizeM").val("");
                                                $("#tableFirstCellFontSizeM").prop("required", false);
                                                $("#tableFirstCellFontSizeM").attr("disabled", true);	

                                                $("#widgetFirstCellFontColorM").parent().parent().parent().colorpicker("setValue","#eeeeee");
                                                $("#tableFirstCellFontColorM").val("");
                                                $("#tableFirstCellFontColorM").prop("required", false);
                                                $("#tableFirstCellFontColorM").attr("disabled", true);	

                                                $("#rowsLabelsFontSizeM").val("");
                                                $("#rowsLabelsFontSizeM").prop("required", false);
                                                $("#rowsLabelsFontSizeM").attr("disabled", true);	

                                                $("#widgetRowsLabelsFontColorM").parent().parent().parent().colorpicker("setValue","#eeeeee");
                                                $("#rowsLabelsFontColorM").val("");
                                                $("#rowsLabelsFontColorM").prop("required", false);
                                                $("#rowsLabelsFontColorM").attr("disabled", true);

                                                $("#widgetRowsLabelsBckColorM").parent().parent().parent().colorpicker("setValue","#eeeeee");
                                                $("#rowsLabelsBckColorM").val("");
                                                $("#rowsLabelsBckColorM").attr("disabled", true);
                                                break;

                                             case "singleDetails":
                                                $('label[for=editWidgetFirstAidHospitals]').hide();
                                                $('#editWidgetFirstAidHospitals').parent().parent().hide();
                                                $('label[for=editWidgetFirstAidHospital]').show();
                                                $('#editWidgetFirstAidHospital').parent().parent().show();

                                                $('#editWidgetFirstAidHospital').val(-1);
                                                $("#hospitalListM").val("");

                                                $("#editWidgetFirstAidHospital").change(function()
                                                {
                                                   $("#serviceUriM").val($(this).val());
                                                });

                                                newSeries = {  
                                                   "firstAxis":{  
                                                      "desc":"Priority",
                                                      "labels":[  
                                                         "Red code",
                                                         "Yellow code",
                                                         "Green code",
                                                         "Blue code",
                                                         "White code"
                                                      ]
                                                   },
                                                   "secondAxis":{  
                                                      "desc":"Status",
                                                      "labels":[  
                                                         "Addressed",
                                                         "Waiting",
                                                         "In visit",
                                                         "In observation",
                                                         "Totals"
                                                      ],
                                                      "series":[]
                                                   }
                                                };
                                                
                                                infoJson = {
                                                   "firstAxis":
                                                    {
                                                       "Red_code":"",
                                                       "Yellow_code":"",
                                                       "Green_code":"",
                                                       "Blue_code":"",
                                                       "White_code":""
                                                    },
                                                    "secondAxis":
                                                    {
                                                       "Addressed":"",
                                                       "Waiting":"",
                                                       "In_visit":"",
                                                       "In_observation":"",
                                                       "Totals":""
                                                    }
                                                };
                                                
                                                $('label[for="alrAxisSelM"]').hide();
                                                $("#alrAxisSelM").hide();
                                                $('label[for="alrFieldSelM"]').hide();
                                                $("#alrFieldSelM").hide();
                                                $("#alrAxisSelM").empty();
                                                $("#alrAxisSelM").append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                                //$("#alrAxisSelM").append("<option value='" + series.secondAxis.desc + "'>" + series.secondAxis.desc + "</option>");
                                                $("#alrAxisSelM").val(-1);
                                                $("#addWidgetRangeTableContainerM").hide();
                                                $("#alrThrSelM").attr("disabled", false);
                                                $("#alrThrSelM").prop("required", true);
                                                $("#alrThrSelM").val("no");
                                                
                                                $("#showTableFirstCellM").val(-1);
                                                $("#showTableFirstCellM").prop("required", false);
                                                $("#showTableFirstCellM").attr("disabled", true);

                                                $("#tableFirstCellFontSizeM").val("10");
                                                $("#tableFirstCellFontSizeM").prop("required", true);
                                                $("#tableFirstCellFontSizeM").attr("disabled", false);	

                                                $("#widgetFirstCellFontColorM").parent().parent().parent().colorpicker("setValue","#000000");
                                                $("#tableFirstCellFontColorM").val("#000000");
                                                $("#tableFirstCellFontColorM").prop("required", true);
                                                $("#tableFirstCellFontColorM").attr("disabled", false);	

                                                $("#rowsLabelsFontSizeM").val("10");
                                                $("#rowsLabelsFontSizeM").prop("required", true);
                                                $("#rowsLabelsFontSizeM").attr("disabled", false);	

                                                $("#widgetRowsLabelsFontColorM").parent().parent().parent().colorpicker("setValue","#000000");
                                                $("#rowsLabelsFontColorM").val("#000000");
                                                $("#rowsLabelsFontColorM").prop("required", true);
                                                $("#rowsLabelsFontColorM").attr("disabled", false);

                                                $("#widgetRowsLabelsBckColorM").parent().parent().parent().colorpicker("setValue","#FFFFFF");
                                                $("#rowsLabelsBckColorM").val("#FFFFFF");
                                                $("#rowsLabelsBckColorM").prop("required", true);
                                                $("#rowsLabelsBckColorM").attr("disabled", false);
                                                break;      

                                             case "hospitalsOverview":
                                                $('label[for=editWidgetFirstAidHospital]').hide();
                                                $('#editWidgetFirstAidHospital').parent().parent().hide();
                                                $('label[for=editWidgetFirstAidHospitals]').show();
                                                $('#editWidgetFirstAidHospitals').parent().parent().show();
                                                $('#editWidgetFirstAidHospitals').selectpicker('deselectAll');
                                                $('#editWidgetFirstAidHospitals').selectpicker('destroy');
                                                $('#editWidgetFirstAidHospitals').selectpicker({
                                                   actionsBox: true, 
                                                   width: "auto"
                                                });

                                                newSeries = {  
                                                   "firstAxis":{  
                                                      "desc":"Priority",
                                                      "labels":[  
                                                         "Red code",
                                                         "Yellow code",
                                                         "Green code",
                                                         "Blue code",
                                                         "White code"
                                                      ]
                                                   },
                                                   "secondAxis":{  
                                                      "desc":"Hospital",
                                                      "labels":[],
                                                      "series":[]
                                                   }
                                                };
                                                
                                                infoJson = {
                                                   "firstAxis":
                                                   {
                                                      "Red_code":"",
                                                      "Yellow_code":"",
                                                      "Green_code":"",
                                                      "Blue_code":"",
                                                      "White_code":""
                                                   },
                                                   "secondAxis": {}
                                                };

                                                $("#serviceUriM").val("");

                                                $('#editWidgetFirstAidHospitals').off('changed.bs.select');
                                                $('#editWidgetFirstAidHospitals').on('changed.bs.select', function (e) 
                                                {
                                                   $("#hospitalListM").val(JSON.stringify($(this).val()));
                                                   
                                                   var labelsString = $('button[data-id="editWidgetFirstAidHospitals"] span').eq(0).html().replace(/  /g, " ");
                                                   
                                                   infoJson = {
                                                      "firstAxis":
                                                      {
                                                         "Red_code":"",
                                                         "Yellow_code":"",
                                                         "Green_code":"",
                                                         "Blue_code":"",
                                                         "White_code":""
                                                      },
                                                      "secondAxis": {}
                                                   };
                                                   
                                                   var localSeries = {  
                                                      "firstAxis":{  
                                                         "desc":"Priority",
                                                         "labels":[  
                                                            "Red code",
                                                            "Yellow code",
                                                            "Green code",
                                                            "Blue code",
                                                            "White code"
                                                         ]
                                                      },
                                                      "secondAxis":{  
                                                         "desc":"Hospital",
                                                         "labels":[],
                                                         "series":[]
                                                      }
                                                   };
                                                   
                                                   if(labelsString !== "Nothing selected")
                                                   {
                                                      var labels = labelsString.split(", ");
                                                      var infoLabel = null;

                                                      for(var i = 0; i < labels.length; i++)
                                                      {
                                                         localSeries.secondAxis.labels[i] = labels[i];
                                                      }

                                                      for(var j = 0; j < localSeries.secondAxis.labels.length; j++)
                                                      {
                                                         infoLabel = localSeries.secondAxis.labels[j].replace(/ /g, "_");
                                                         infoJson.secondAxis[infoLabel] = "";
                                                      }
                                                   }
                                                });
                                                
                                                $('label[for="alrAxisSelM"]').hide();
                                                $("#alrAxisSelM").hide();
                                                $('label[for="alrFieldSelM"]').hide();
                                                $("#alrFieldSelM").hide();
                                                $("#alrAxisSelM").empty();
                                                $("#alrAxisSelM").append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                                $("#alrAxisSelM").append("<option value='" + series.secondAxis.desc + "'>" + series.secondAxis.desc + "</option>");
                                                $("#alrAxisSelM").val(-1);
                                                $("#addWidgetRangeTableContainerM").hide();
                                                $("#alrThrSelM").val("no");
                                                $("#alrThrSelM").attr("disabled", true);
                                                $("#alrThrSelM").prop("required", false);

                                                $("#showTableFirstCellM").val(-1);
                                                $("#showTableFirstCellM").prop("required", false);
                                                $("#showTableFirstCellM").attr("disabled", true);

                                                $("#tableFirstCellFontSizeM").val("10");
                                                $("#tableFirstCellFontSizeM").prop("required", true);
                                                $("#tableFirstCellFontSizeM").attr("disabled", false);	

                                                $("#widgetFirstCellFontColorM").parent().parent().parent().colorpicker("setValue","#000000");
                                                $("#tableFirstCellFontColorM").val("#000000");
                                                $("#tableFirstCellFontColorM").prop("required", true);
                                                $("#tableFirstCellFontColorM").attr("disabled", false);	

                                                $("#rowsLabelsFontSizeM").val("10");
                                                $("#rowsLabelsFontSizeM").prop("required", true);
                                                $("#rowsLabelsFontSizeM").attr("disabled", false);	

                                                $("#widgetRowsLabelsFontColorM").parent().parent().parent().colorpicker("setValue","#000000");
                                                $("#rowsLabelsFontColorM").val("#000000");
                                                $("#rowsLabelsFontColorM").prop("required", true);
                                                $("#rowsLabelsFontColorM").attr("disabled", false);

                                                $("#widgetRowsLabelsBckColorM").parent().parent().parent().colorpicker("setValue","#FFFFFF");
                                                $("#rowsLabelsBckColorM").val("#FFFFFF");
                                                $("#rowsLabelsBckColorM").prop("required", true);
                                                $("#rowsLabelsBckColorM").attr("disabled", false);
                                                break;
                                          }
                                          
                                          //Distruzione thr tables pregresse
                                          thrTables1 = new Array();
                                          thrTables2 = new Array();

                                          //Funzione di settaggio dei globals per il file dashboard_configdash.js
                                          setGlobals(null, thrTables1, thrTables2, newSeries, $('#select-widget-m').val());

                                          //Costruzione THRTables vuote
                                          buildEmptyThrTables();
                                       });
 
                                        //Nuova riga
                                        //Select show first cell
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="showTableFirstCellM" class="col-md-2 control-label"><?php echo _("Show first cell"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="showTableFirstCellM" name="showTableFirstCellM" required></select>');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        if(viewMode === 'singleSummary')
                                        {
                                           $("#showTableFirstCellM").val(-1);
                                           $("#showTableFirstCellM").prop("required", false);
                                           $("#showTableFirstCellM").attr("disabled", true);
                                        }
                                        
                                        //First cell font size
                                        //Nuova riga
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="tableFirstCellFontSizeM" class="col-md-2 control-label"><?php echo _("First cell font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="tableFirstCellFontSizeM" name="tableFirstCellFontSizeM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();
                                        if(viewMode === 'singleSummary')
                                        {
                                           $("#tableFirstCellFontSizeM").val("");
                                           $("#tableFirstCellFontSizeM").prop("required", false);
                                           $("#tableFirstCellFontSizeM").attr("disabled", true);
                                        }
                                        
                                        //First cell font color
                                        newLabel = $('<label for="tableFirstCellFontColorM" class="col-md-2 control-label"><?php echo _("First cell font color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="tableFirstCellFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="tableFirstCellFontColorM" name="tableFirstCellFontColorM" required><span class="input-group-addon"><i id="widgetFirstCellFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#tableFirstCellFontColorContainerM').show();
                                        $('#tableFirstCellFontColorM').show();
                                        $("#widgetFirstCellFontColorM").css('display', 'block');
                                        $("#widgetFirstCellFontColorM").parent().parent().parent().colorpicker({color: styleParameters.tableFirstCellFontColor, format: "rgba"});
                                        if(viewMode === 'singleSummary')
                                        {
                                           $("#widgetFirstCellFontColorM").parent().parent().parent().colorpicker("setValue","#eeeeee");
                                           $("#tableFirstCellFontColorM").val("");
                                           $("#tableFirstCellFontColorM").prop("required", false);
                                           $("#tableFirstCellFontColorM").attr("disabled", true);
                                        }
                                        
                                        //Nuova riga
                                        //Rows labels font size
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="rowsLabelsFontSizeM" class="col-md-2 control-label"><?php echo _("Rows labels font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="rowsLabelsFontSizeM" name="rowsLabelsFontSizeM" required> ');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();
                                        if(viewMode === 'singleSummary')
                                        {
                                           $("#rowsLabelsFontSizeM").val("");
                                           $("#rowsLabelsFontSizeM").prop("required", false);
                                           $("#rowsLabelsFontSizeM").attr("disabled", true);
                                        }

                                        //Rows labels font color
                                        newLabel = $('<label for="rowsLabelsFontColorM" class="col-md-2 control-label"><?php echo _("Rows labels font color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="rowsLabelsFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="rowsLabelsFontColorM" name="rowsLabelsFontColorM" required><span class="input-group-addon"><i id="widgetRowsLabelsFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#rowsLabelsFontColorContainerM').show();
                                        $('#rowsLabelsFontColorM').show();
                                        $("#widgetRowsLabelsFontColorM").css('display', 'block');
                                        $("#widgetRowsLabelsFontColorM").parent().parent().parent().colorpicker({color: styleParameters.rowsLabelsFontColor, format: "rgba"});
                                        if(viewMode === 'singleSummary')
                                        {
                                           $("#rowsLabelsFontColorM").val("");
                                           $("#widgetRowsLabelsFontColorM").parent().parent().parent().colorpicker("setValue","#eeeeee");
                                           $("#rowsLabelsFontColorM").val("");
                                           $("#rowsLabelsFontColorM").prop("required", false);
                                           $("#rowsLabelsFontColorM").attr("disabled", true);
                                        }

                                        //Nuova riga
                                        //Cols labels font size
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="colsLabelsFontSizeM" class="col-md-2 control-label"><?php echo _("Cols labels font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="colsLabelsFontSizeM" name="colsLabelsFontSizeM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //Cols labels font color
                                        newLabel = $('<label for="colsLabelsFontColorM" class="col-md-2 control-label"><?php echo _("Cols labels font color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="colsLabelsFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="colsLabelsFontColorM" name="colsLabelsFontColorM" required><span class="input-group-addon"><i id="widgetColsLabelsFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#colsLabelsFontColorContainerM').show();
                                        $('#colsLabelsFontColorM').show();
                                        $("#widgetColsLabelsFontColorM").css('display', 'block');
                                        $("#widgetColsLabelsFontColorM").parent().parent().parent().colorpicker({color: styleParameters.colsLabelsFontColor, format: "rgba"});
                                    
                                        //Nuova riga
                                        //Rows labels background color
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="rowsLabelsBckColorM" class="col-md-2 control-label">Rows labels background color</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="rowsLabelsBckColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="rowsLabelsBckColorM" name="rowsLabelsBckColorM" required><span class="input-group-addon"><i id="widgetRowsLabelsBckColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#rowsLabelsBckColorContainerM').show();
                                        $('#rowsLabelsBckColorM').show();
                                        $("#widgetRowsLabelsBckColorM").css('display', 'block');
                                        $("#widgetRowsLabelsBckColorM").parent().parent().parent().colorpicker({color: styleParameters.rowsLabelsBckColor, format: "rgba"});
                                        if(viewMode === 'singleSummary')
                                        {
                                           $("#widgetRowsLabelsBckColorM").parent().parent().parent().colorpicker("setValue","#eeeeee");
                                           $("#rowsLabelsBckColorM").val("");
                                           $("#rowsLabelsBckColorM").prop("required", false);
                                           $("#rowsLabelsBckColorM").attr("disabled", true);	
                                        }
                                        
                                        //Nuova riga
                                        //Table borders
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="tableBordersM" class="col-md-2 control-label"><?php echo _("Table borders"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="tableBordersM" name="tableBordersM"></select>');
                                        newSelect.append('<option value="no">No borders</option>');
                                        newSelect.append('<option value="horizontal">Horizontal borders only</option>');
                                        newSelect.append('<option value="all">All borders</option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();

                                        //Table borders color
                                        newLabel = $('<label for="tableBordersColorM" class="col-md-2 control-label"><?php echo _("Table borders color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="tableBordersColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="tableBordersColorM" name="tableBordersColorM" required><span class="input-group-addon"><i id="widgetTableBordersColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#tableBordersColorContainerM').show();
                                        $('#tableBordersColorM').show();
                                        $("#widgetTableBordersColorM").css('display', 'block');
                                        $("#widgetTableBordersColorM").parent().parent().parent().colorpicker({color: styleParameters.tableBordersColor, format: "rgba"});

                                        if(styleParamsRaw !== null) 
                                        {
                                            $("#showTableFirstCellM").val(styleParameters.showTableFirstCell);
                                            $("#tableFirstCellFontSizeM").val(styleParameters.tableFirstCellFontSize);
                                            $("#tableFirstCellFontColorM").val(styleParameters.tableFirstCellFontColor);
                                            $("#widgetFirstCellFontColorM").css("background-color", styleParameters.tableFirstCellFontColor);
                                            $("#rowsLabelsFontSizeM").val(styleParameters.rowsLabelsFontSize);
                                            $("#rowsLabelsFontColorM").val(styleParameters.rowsLabelsFontColor);
                                            $("#widgetRowsLabelsFontColorM").css("background-color", styleParameters.rowsLabelsFontColor);
                                            $("#colsLabelsFontSizeM").val(styleParameters.colsLabelsFontSize);
                                            $("#colsLabelsFontColorM").val(styleParameters.colsLabelsFontColor);
                                            $("#widgetColsLabelsFontColorM").css("background-color", styleParameters.colsLabelsFontColor);
                                            $("#rowsLabelsBckColorM").val(styleParameters.rowsLabelsBckColor);
                                            $("#widgetRowsLabelsBckColorM").css("background-color", styleParameters.rowsLabelsBckColor);
                                            $("#colsLabelsBckColorM").val(styleParameters.colsLabelsBckColor);
                                            $("#widgetColsLabelsBckColorM").css("background-color", styleParameters.colsLabelsBckColor);
                                            $("#tableBordersM").val(styleParameters.tableBorders);
                                            $("#tableBordersColorM").val(styleParameters.tableBordersColor);
                                            $("#widgetTableBordersColorM").css("background-color", styleParameters.tableBordersColor);
                                        }
                                        
                                        //Nuova riga
                                        //Set thresholds
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="alrThrSelM" class="col-md-2 control-label"><?php echo _("Set thresholds"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="alrThrSelM" name="alrThrSelM" required>');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        if(viewMode === 'hospitalsOverview')
                                        {
                                          $("#alrThrSelM").val("no");
                                          $("#alrThrSelM").attr("disabled", true);
                                          $("#alrThrSelM").prop("required", false);
                                        }
                                        else
                                        {
                                           $("#alrThrSelM").attr("disabled", false);
                                           $("#alrThrSelM").prop("required", true);
                                           if(currentParams === null)
                                           {
                                              $('#alrThrSelM').val("no");
                                              $("label[for='alrAxisSelM']").hide();
                                              $('#alrAxisSelM').val(-1);
                                              $('#alrAxisSelM').hide();
                                              $('#parametersM').val('');
                                           }
                                           else
                                           {
                                              //ESPOSIZIONE DEI CAMPI
                                              $('#alrThrSelM').val("yes");
                                              $('#alrAxisSelM').val(currentParams.thresholdObject.target);
                                              $("label[for='alrAxisSelM']").show();
                                              $('#alrAxisSelM').parent().show();
                                              $('#alrAxisSelM').show();
                                              $('#alrAxisSelM').change(alrAxisSelMListener);
                                              $("label[for='alrFieldSelM']").show();
                                              $('#alrFieldSelM').parent().show();
                                              $('#alrFieldSelM').show();
                                              //POPOLAMENTO DELLA SELECT DEI CAMPI
                                              $('#alrAxisSelM').trigger("change");
                                              $('#alrFieldSelM').change(alrFieldSelMListener);
                                              $('#addWidgetRangeTableContainerM').show();
                                              $('#parametersM').val(JSON.stringify(currentParams));
                                           }
                                        }
                                        
                                        //Listener per settaggio/desettaggio soglie relativo alla select "Set thresholds"
                                        $('#alrThrSelM').change(alrThrFlagMListener);
                                        
                                        //Threshold target select - Questa select viene nascosta o mostrata a seconda che nella "Set thresholds" si selezioni yes o no.
                                        newLabel = $('<label for="alrAxisSelM" class="col-md-2 control-label"><?php echo _("Thresholds target set"); ?></label>');
                                        newSelect = $('<select class="form-control" id="alrAxisSelM" name="alrAxisSelM"></select>');
                                        newSelect.append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                        if((viewMode !== 'singleSummary') && (viewMode !== 'singleDetails'))
                                        {
                                           newSelect.append("<option value='" + series.secondAxis.desc + "'>" + series.secondAxis.desc + "</option>");
                                        }
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();
                                        newSelect.hide();
                                        
                                        //Nuova riga
                                        //Threshold field select
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="alrFieldSelM" class="col-md-2 control-label"><?php echo _("Thresholds target field"); ?></label>');
                                        newSelect = $('<select class="form-control" id="alrFieldSelM" name="alrFieldSelM">');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();
                                        newSelect.hide();
                                        
                                        //Contenitore per tabella delle soglie
                                        addWidgetRangeTableContainerM = $('<div id="addWidgetRangeTableContainerM" class="row rowCenterContent"></div>');
                                        $("#specificParamsM").append(addWidgetRangeTableContainerM);
                                        addWidgetRangeTableContainerM.hide();
                                        
                                        if(currentParams === null)
                                        {
                                            $('#alrThrSelM').val("no");
                                            $("label[for='alrAxisSelM']").hide();
                                            $('#alrAxisSelM').val(-1);
                                            $('#alrAxisSelM').hide();
                                            $('#parametersM').val('');
                                        }
                                        else
                                        {
                                            //ESPOSIZIONE DEI CAMPI
                                            $('#alrThrSelM').val("yes");
                                            $('#alrAxisSelM').val(currentParams.thresholdObject.target);
                                            $("label[for='alrAxisSelM']").show();
                                            $('#alrAxisSelM').parent().show();
                                            $('#alrAxisSelM').show();
                                            $('#alrAxisSelM').change(alrAxisSelMListener);
                                            $("label[for='alrFieldSelM']").show();
                                            $('#alrFieldSelM').parent().show();
                                            $('#alrFieldSelM').show();
                                            //POPOLAMENTO DELLA SELECT DEI CAMPI
                                            $('#alrAxisSelM').trigger("change");
                                            $('#alrFieldSelM').change(alrFieldSelMListener);
                                            $('#addWidgetRangeTableContainerM').show();
                                            $('#parametersM').val(JSON.stringify(currentParams));
                                        }
                                       break;
                                       
                                       case "widgetRadarSeries":
                                        var metricId = $('#metricWidgetM').val();
                                        var metricData = getMetricData(metricId);
                                     //   var seriesString = metricData.data[0].commit.author.series;
                                     //   var series = jQuery.parseJSON(seriesString);

                                       if (metricData.data.length != 0 && (serviceUri == null || serviceUri == "")) {
                                           var seriesString = metricData.data[0].commit.author.series;
                                           var series = jQuery.parseJSON(seriesString);
                                       } else {
                                           var seriesDataArray = [];
                                           var seriesString = "";
                                           var series = null;
                                           var rowParamsArray = JSON.parse(rowParams);
                                           if (serviceUri) {
                                               series = jQuery.parseJSON(serviceUri);
                                           } else {
                                               for (var i = 0; i < rowParamsArray.length; i++) {
                                                   let smUrl = "<?= $superServiceMapProxy ?>/api/v1/?serviceUri=" + rowParamsArray[i].metricId.split("serviceUri=")[1];
                                                   getSmartCitySensorValues(rowParamsArray, i, smUrl, null, false, function (extractedData) {

                                                       if (extractedData) {
                                                           seriesDataArray.push(extractedData);
                                                       } else {
                                                           console.log("Dati Smart City non presenti");
                                                           seriesDataArray.push(undefined);
                                                       }
                                                       //if (endFlag === true) {
                                                       // Alla fine quando si arriva all'ultimo record ottenuto dalle varie chiamate asincrone
                                                       if (rowParamsArray.length === seriesDataArray.length) {
                                                           let stopFlag = 1;
                                                           // DO FINAL SERIALIZATION
                                                           metricLabels = getMetricLabelsForBarSeries(rowParamsArray);
                                                           deviceLabels = getDeviceLabelsForBarSeries(rowParamsArray);
                                                           let mappedSeriesDataArray = buildBarSeriesArrayMap(seriesDataArray);
                                                           series = serializeSensorDataForBarSeries(mappedSeriesDataArray, metricLabels, deviceLabels);

                                                       }

                                                   });
                                               }
                                           }
                                       }

                                       if (rowParamsArray) {
                                           if (!serviceUri) {
                                               // Caso New BarSeries primo istanziamento
                                               for (n = 0; n < rowParamsArray.length; n++) {
                                                   if (!metricLabels.includes(rowParamsArray[n].metricType)) {
                                                       metricLabels.push(rowParamsArray[n].metricType);
                                                   }

                                                   if (!deviceLabels.includes(rowParamsArray[n].metricName)) {
                                                       deviceLabels.push(rowParamsArray[n].metricName);
                                                   }
                                               }
                                           } else {
                                               deviceLabels = series.secondAxis.labels;
                                           }
                                       }
                                        var thrSeries, i, j, k, min, max, color, newTableRow, newTableCell, currentFieldIndex, currentSeriesIndex, colorsTable, newRow, 
                                            newCell, newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan, addWidgetRangeTableContainer, 
                                            barsColorsTableContainerM, index, newThrObj, fieldName, descName = null;
                                        var defaultColorsArray = ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'];
                                        var colorsArray = new Array();
                                        
                                        //Costruzione THRTable
                                        var thrTable = $("<table class='thrRangeTableRadar table table-bordered'></table>"); 
                                        
                                        //Costruzione intestazione tabella
                                        firstRow = $('<tr></tr>');
                                        cell = $('<td><a href="#"><i class="fa fa-plus" style="font-size:24px;color:#337ab7"></i></a></td>');
                                        cell.find('i.fa-plus').click(addThrRangeRadarM);
                                        firstRow.append(cell);
                                        cell = $('<td class="colorHeader">Color</td>'); 
                                        firstRow.append(cell);
                                        cell = $('<td><span style="display: block; width: 75px">Short description</span></td>');
                                        firstRow.append(cell);
                                        thrTable.append(firstRow);
                                        
                                        for(var i in series.firstAxis.labels)
                                        {
                                            if(series.firstAxis.labels[i].length > 8)
                                            {
                                                descName = series.firstAxis.labels[i].substr(0,8) + "...";
                                            }
                                            else
                                            {
                                                descName = series.firstAxis.labels[i];
                                            }
                                            
                                            cell = $('<td class="boundDesc"><b>' + descName + '</b><br/><?php echo _("limit"); ?></td>');
                                            firstRow.append(cell);
                                        }

                                        //Costruzione del corpo della tabella
                                        if(currentParams !== null)
                                        {
                                            for(j = 0; j < currentParams.thresholdArray.length; j++)
                                            {
                                                index = j;

                                                //Aggiunta record alla thrTable
                                                newTableRow = $('<tr></tr>');

                                                //Cella con pulsante rimozione riga
                                                newTableCell = $('<td><a><i class="fa fa-close" data-index="' + index + '" data-field="delBtn" style="font-size:24px;color:red"></i></a></td>');
                                                newTableCell.find('i').click(delThrRangeRadarM);
                                                newTableRow.append(newTableCell);

                                                //Cella per color picker
                                                newTableCell = $('<td><div style="width: 130px" class="input-group colorPicker" data-index="' + index + '" + data-field="color"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                newTableRow.append(newTableCell);
                                                newTableRow.find('div.colorPicker').colorpicker({color: currentParams.thresholdArray[j].color, format: "rgba"});
                                                newTableRow.find('div.colorPicker').on('hidePicker', updateParamsRadarM);                
                                                newTableRow.append(newTableCell);

                                                //Cella per short description
                                                newTableCell = $('<td class="descValue"><a href="#" data-mode="popup" data-index="' + index + '" data-field="desc" class="toBeEdited">' + currentParams.thresholdArray[j].desc + '</a></td>');
                                                newTableCell.find('a').editable();
                                                newTableRow.append(newTableCell);

                                                //Celle per gli upper bound per ogni campo
                                                for(i = 0; i < series.firstAxis.labels.length; i++)
                                                {
                                                    fieldName = series.firstAxis.labels[i];
                                                    newTableCell = $('<td class="boundValue"><a href="#" data-mode="popup" data-index="' + index + '" data-field="' + fieldName + '" class="toBeEdited">' + currentParams.thresholdArray[j][fieldName] + '</a></td>');
                                                    newTableCell.find('a').editable();
                                                    newTableRow.append(newTableCell);
                                                }

                                                newTableRow.find('a.toBeEdited').on('save', updateParamsRadarM);
                                                thrTable.append(newTableRow);
                                            }
                                        }
                                        
                                        //Funzione di settaggio dei globals per il file dashboard_configdash.js
                                        setGlobalsRadar(currentParams, thrTable, series, $('#select-widget-m').val());
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        
                                        if(styleParamsRaw !== null) 
                                        {
                                            styleParameters = JSON.parse(styleParamsRaw);
                                        }
                                        
                                        //AGGIORNA CODICE DA QUI, E' ANCORA IL VECCHIO COPIA/INCOLLA DEGLI ALTRI SERIES
                                        //$("#inputComuneRowM").css("display", "");
                                        $("label[for='inputComuneWidgetM']").css("display", "");
                                        $('#inputComuneWidgetM').css("display", "");
                                        $("label[for='inputComuneWidgetM']").text("Context");
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-IntTemp-Widget-m').attr('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $("#urlWidgetM").prop('disabled', false);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#inputFontColorM').prop('disabled', false);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        //RIMOZIONE CAMPI PER TUTTI GLI ALTRI WIDGET
                                        $('#specificParamsM .row').remove();
                                        
                                        //Nuova riga
                                        //Rows labels font size
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="rowsLabelsFontSizeM" class="col-md-2 control-label"><?php echo _("X-Axis labels font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="rowsLabelsFontSizeM" name="rowsLabelsFontSizeM" required> ');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //Rows labels font color
                                        newLabel = $('<label for="rowsLabelsFontColorM" class="col-md-2 control-label"><?php echo _("X-Axis labels font color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="rowsLabelsFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="rowsLabelsFontColorM" name="rowsLabelsFontColorM" required><span class="input-group-addon"><i id="widgetRowsLabelsFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#rowsLabelsFontColorContainerM').show();
                                        $('#rowsLabelsFontColorM').show();
                                        $("#widgetRowsLabelsFontColorM").css('display', 'block');
                                        $("#widgetRowsLabelsFontColorM").parent().parent().parent().colorpicker({color: styleParameters.rowsLabelsFontColor, format: "rgba"});

                                        //Nuova riga
                                        //Cols labels font size
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="colsLabelsFontSizeM" class="col-md-2 control-label"><?php echo _("Y-Axis labels font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="colsLabelsFontSizeM" name="colsLabelsFontSizeM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //Cols labels font color
                                        newLabel = $('<label for="colsLabelsFontColorM" class="col-md-2 control-label"><?php echo _("Y-Axis labels font color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="colsLabelsFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="colsLabelsFontColorM" name="colsLabelsFontColorM" required><span class="input-group-addon"><i id="widgetColsLabelsFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#colsLabelsFontColorContainerM').show();
                                        $('#colsLabelsFontColorM').show();
                                        $("#widgetColsLabelsFontColorM").css('display', 'block');
                                        $("#widgetColsLabelsFontColorM").parent().parent().parent().colorpicker({color: styleParameters.colsLabelsFontColor, format: "rgba"});
                                        
                                        //Nuova riga
                                        //Data labels font size
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="dataLabelsFontSizeM" class="col-md-2 control-label"><?php echo _("Data labels font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="dataLabelsFontSizeM" name="dataLabelsFontSizeM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //Data labels font color
                                        newLabel = $('<label for="dataLabelsFontColorM" class="col-md-2 control-label"><?php echo _("Data labels font color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="dataLabelsFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="dataLabelsFontColorM" name="dataLabelsFontColorM" required><span class="input-group-addon"><i id="widgetDataLabelsFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#dataLabelsFontColorContainerM').show();
                                        $('#dataLabelsFontColorM').show();
                                        $("#widgetDataLabelsFontColorM").css('display', 'block');
                                        $("#widgetDataLabelsFontColorM").parent().parent().parent().colorpicker({color: styleParameters.dataLabelsFontColor, format: "rgba"});
                                        
                                        //Nuova riga
                                        //Legend font size
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="legendFontSizeM" class="col-md-2 control-label"><?php echo _("Legend font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="legendFontSizeM" name="legendFontSizeM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //Legend font color
                                        newLabel = $('<label for="legendFontColorM" class="col-md-2 control-label">Legend font color</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="legendFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="legendFontColorM" name="legendFontColorM" required><span class="input-group-addon"><i id="widgetLegendFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#legendFontColorContainerM').show();
                                        $('#legendFontColorM').show();
                                        $("#widgetLegendFontColorM").css('display', 'block');
                                        $("#widgetLegendFontColorM").parent().parent().parent().colorpicker({color: styleParameters.legendFontColor, format: "rgba"});
                                        
                                        //Nuova riga
                                        //Grid lines width
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="gridLinesWidthM" class="col-md-2 control-label">Grid lines width</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="gridLinesWidthM" name="gridLinesWidthM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //Grid lines color
                                        newLabel = $('<label for="gridLinesColorM" class="col-md-2 control-label">Grid lines color</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="gridLinesColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="gridLinesColorM" name="gridLinesColorM" required><span class="input-group-addon"><i id="widgetGridLinesColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#gridLinesColorContainerM').show();
                                        $('#gridLinesColorM').show();
                                        $("#widgetGridLinesColorM").css('display', 'block');
                                        $("#widgetGridLinesColorM").parent().parent().parent().colorpicker({color: styleParameters.gridLinesColor, format: "rgba"});
                                        
                                        //Nuova riga
                                        //Lines width
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="linesWidthM" class="col-md-2 control-label">Lines width</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="linesWidthM" name="linesWidthM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();
                                        
                                        //Lines colors
                                        newLabel = $('<label for="barsColorsSelectM" class="col-md-2 control-label">Lines colors</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="barsColorsSelectM" name="barsColorsSelectM"></select>');
                                        newSelect.append('<option value="manual">Manual</option>');
                                        newSelect.append('<option value="auto">Automatic</option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        
                                        $('#barsColorsSelectM').change(function() 
                                        {
                                            if($('#barsColorsSelectM').val() === "manual")
                                            {
                                                $('#barsColorsTableContainerM').show();
                                            }
                                            else
                                            {
                                                $('#barsColorsTableContainerM').hide();
                                            }
                                        });
                                        
                                        newSelect.show();
                                        
                                        //Parametri specifici del widget
                                        if(styleParamsRaw !== null) 
                                        {
                                            $("#rowsLabelsFontSizeM").val(styleParameters.rowsLabelsFontSize);
                                            $("#rowsLabelsFontColorM").val(styleParameters.rowsLabelsFontColor);
                                            $("#widgetRowsLabelsFontColorM").css("background-color", styleParameters.rowsLabelsFontColor);
                                            $("#widgetRowsLabelsFontColorM").parent().parent().colorpicker({color: styleParameters.rowsLabelsFontColor, format: "rgba"});
                                            $("#colsLabelsFontSizeM").val(styleParameters.colsLabelsFontSize);
                                            $("#colsLabelsFontColorM").val(styleParameters.colsLabelsFontColor);
                                            $("#widgetColsLabelsFontColorM").css("background-color", styleParameters.colsLabelsFontColor);
                                            $("#widgetColsLabelsFontColorM").parent().parent().colorpicker({color: styleParameters.colsLabelsFontColor, format: "rgba"});
                                            $("label[for='legendFontSizeM']").parent().show();
                                            $("#dataLabelsFontSizeM").val(styleParameters.dataLabelsFontSize);
                                            $("#dataLabelsFontColorM").val(styleParameters.dataLabelsFontColor);
                                            $("#gridLinesWidthM").val(styleParameters.gridLinesWidth);
                                            $("#linesWidthM").val(styleParameters.linesWidth);
                                            $("#widgetDataLabelsFontColorM").css("background-color", styleParameters.dataLabelsFontColor);
                                            $("#widgetDataLabelsFontColorM").parent().parent().colorpicker({color: styleParameters.dataLabelsFontColor, format: "rgba"});
                                            $("#legendFontSizeM").val(styleParameters.legendFontSize);
                                            $("#legendFontColorM").val(styleParameters.legendFontColor);
                                            $("#widgetLegendFontColorM").css("background-color", styleParameters.legendFontColor);
                                            $("#widgetLegendFontColorM").parent().parent().colorpicker({color: styleParameters.legendFontColor, format: "rgba"});
                                            $("#barsColorsSelectM").val(styleParameters.barsColorsSelect);
                                        }
                                        
                                        //Contenitore per tabella dei colori
                                        barsColorsTableContainerM = $('<div id="barsColorsTableContainerM" class="row rowCenterContent"></div>');
                                        $("#specificParamsM").append(barsColorsTableContainerM);
                                        
                                        function updateWidgetBarSeriesColorsM(e, params)
                                        {
                                            var newColor = $(this).colorpicker('getValue');
                                            var index = parseInt($(this).parents('tr').index() - 1);
                                            colorsArray[index] = newColor;
                                            $("#barsColorsM").val(JSON.stringify(colorsArray));
                                        }
                                        
                                        colorsTable = $("<table class='table table-bordered table-condensed thrRangeTable'><tr><td>Series</td><td>Color</td></tr></table>");
                                        for(var i in series.secondAxis.labels)
                                        {
                                            newRow = $('<tr></tr>');
                                            newCell = $('<td>' + series.secondAxis.labels[i] + '</td>');
                                            newRow.append(newCell);
                                            newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                            newRow.append(newCell);
                                            //Se l'attuale impostazione è per colori automatici, costruiamo JSON e tabella GUI con impostazioni di default, altrimenti con colori da DB
                                            if(styleParameters.barsColorsSelect === 'auto')
                                            {
                                                newRow.find('div.colorPicker').colorpicker({color: defaultColorsArray[i%10], format: "rgba"});
                                                colorsArray.push(defaultColorsArray[i%10]);
                                            }
                                            else
                                            {
                                                newRow.find('div.colorPicker').colorpicker({color: styleParameters.barsColors[i], format: "rgba"});
                                                colorsArray.push(styleParameters.barsColors[i]);
                                            }
                                            
                                            newRow.find('div.colorPicker').on('changeColor', updateWidgetBarSeriesColorsM); 
                                            colorsTable.append(newRow);
                                        }
                                        
                                        $("#barsColorsM").val(JSON.stringify(colorsArray));
                                        $('#barsColorsTableContainerM').append(colorsTable);
                                        
                                        //Per prima visualizzazione in edit
                                        if($('#barsColorsSelectM').val() === "manual")
                                        {
                                            $('#barsColorsTableContainerM').show();
                                        }
                                        else
                                        {
                                            $('#barsColorsTableContainerM').hide();
                                        }

                                           // Nuove righe (labels per i devices)
                                        if (deviceLabels != null) {
                                            for (var n = 0; n < deviceLabels.length; n++) {
                                                newFormRow = $('<div class="row"></div>');
                                                $("#specificParamsM").append(newFormRow);
                                                newLabel = $('<label for="deviceLabelsM" class="col-md-2 control-label">Value Name #' + (n + 1).toString() + ' Label</label>');
                                                newInnerDiv = $('<div class="col-md-7"></div>');
                                                var placeholderStr = "";
                                                if (styleParameters.editDeviceLabels != null) {
                                                    if (styleParameters.editDeviceLabels.length == deviceLabels.length) {
                                                        placeholderStr = styleParameters.editDeviceLabels[n];
                                                    } else {
                                                        // flipped case
                                                        placeholderStr = deviceLabels[n];
                                                    }
                                                } else {
                                                    placeholderStr = deviceLabels[n];
                                                }
                                                //    newInput = $('<input type="text" class="form-control" id="deviceLabelsM_' + n + '" name="deviceLabelsM_' + n + '" placeholder="' + placeholderStr + '">');
                                                newInput = $('<input type="text" class="form-control" id="deviceLabelsM_' + n + '" name="deviceLabelsM_' + n + '" value = "' + placeholderStr + '">');
                                                //    newInput = $('<input type="text" class="form-control" id="deviceLabelsM_' + n + '" name="deviceLabelsM" required placeholder="' + deviceLabels[n] + '">');
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);
                                                newLabel.show();
                                                newInnerDiv.show();
                                                newInput.show();
                                            }
                                        }

                                        //Codice di creazione soglie
                                        //Nuova riga
                                        //Set thresholds
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="alrThrSelM" class="col-md-2 control-label"><?php echo _("Set thresholds"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="alrThrSelM" name="alrThrSelM" required>');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        
                                        //Thresholds lines width
                                        newLabel = $('<label for="alrThrLinesWidthM" class="col-md-2 control-label">Thresholds lines width</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="alrThrLinesWidthM" name="alrThrLinesWidthM" required>');
                                        newInput.val(styleParameters.alrThrLinesWidth);
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();
                                        newInput.hide();
                                        
                                        //Contenitore per tabella delle soglie
                                        addWidgetRangeTableContainerM = $('<div id="addWidgetRangeTableContainerM" class="row thrRangeTableRadarContainer"></div>');
                                        addWidgetRangeTableContainerM.append(thrTable);
                                        $("#specificParamsM").append(addWidgetRangeTableContainerM);
                                        addWidgetRangeTableContainerM.hide();
                                        
                                        //Listener per settaggio/desettaggio soglie relativo alla select "Set thresholds"
                                        $('#alrThrSelM').change(alrThrSelListenerRadarM);
                                        
                                        if(currentParams === null)
                                        {
                                            $('#alrThrSelM').val("no");
                                            $("label[for='alrThrLinesWidthM']").hide();
                                            $('#alrThrLinesWidthM').parent().hide();
                                            $('#alrThrLinesWidthM').hide();
                                            $('#parametersM').val('');
                                        }
                                        else
                                        {
                                            //ESPOSIZIONE DEI CAMPI
                                            $('#alrThrSelM').val("yes");
                                            $("label[for='alrThrLinesWidthM']").show();
                                            $('#alrThrLinesWidthM').parent().show();
                                            $('#alrThrLinesWidthM').show();
                                            $('#addWidgetRangeTableContainerM').show();
                                            $('#parametersM').val(JSON.stringify(currentParams));
                                        }
                                        
                                        removeWidgetProcessGeneralFields("editWidget");
										//INSERT CKEDITOR RADARSERIES
										console.log('currentParams: ');
									  console.log(currentParams);
															$.ajax({
                                                url: "../controllers/getTrustedUsers.php",
                                                data: {

                                                },
                                                type: "POST",
                                                async: true,
                                                dataType: 'json',
                                                success: function (data) {
                                                    if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
                                                        //Nuova riga
														//console.log('TRUSTED PIECHART');
                                                        //Source Selection
                                                        newFormRow = $('<div class="row"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                                        newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
                                                        newSelect.append('<option value="no">no</option>');
                                                        newSelect.append('<option value="ckeditor">yes</option>');
                                                        newInnerDiv.append(newSelect);
                                                        newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        newLabel.show();
                                                        newInnerDiv.show();
                                                        newSelect.show();
                                                        $('#enableCKEditor').val(styleParameters.enableCKEditor);

                                                        //Nuova riga Tab Destro: CKEDITOR
                                                        //Modalità del widget (none, map, gis, link esterno)
                                                        newFormRow = $('<div class="row" id="ck_editor"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-12"></div>');
                                                        newBox = $('<div id="widgetEditor">');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
                                                        newBox.append('<?= _("Here you can insert Javascript code to be executed in the widget. Please save your script by clicking on the save button on the bottom.")?>');
                                                        newBox.append('</div></div>');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
                                                        newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
                                                        newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
                                                        newBox.append('</div></div></div>');
                                                        newInnerDiv.append(newBox);
                                                        //newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        //newLabel.show();
                                                        newInnerDiv.show();
                                                        //newInput.show();
                                                        $('#ck_editor').hide();

                                                        var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
                                                            allowedContent: true,
                                                            language: 'en',
                                                            contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
                                                            width: '100%'
                                                        });
														//alert(code);
														//console.log(code);
														if ($('#enableCKEditor') != null && $('#enableCKEditor').val() == "ckeditor") {
															$('#ck_editor').show();
                                                            //$('#enableCKEditor').val("ckeditor");
                                                            // if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
                                                            if (code != null && code != "null") {
                                                                var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                            } else {
                                                                var codeForCKEditor = $('<div>').text(prepareCkEditorTemplate(code), connections).html();
                                                            }
                                                            var text_ck_area = document.createElement("text_ck_area");
                                                            text_ck_area.innerHTML = codeForCKEditor;
                                                            var newInfoDecoded = text_ck_area.innerText;
                                                            //    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
                                                            CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                            //}
														}

                                                        $('#enableCKEditor').change(function () {
															
                                                            if ($('#enableCKEditor').val() === "ckeditor") {
                                                                $('#ck_editor').show();
                                                                //if (rowParams.substring(0, 8) != "https://" && rowParams.substring(0, 7) != "http://" && rowParams.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                                //$("#parametersM").val('{"mode": "ckeditor"}');
                                                            } else {
                                                                $('#ck_editor').hide();
                                                                $("#parametersM").val('');
                                                            }
                                                        });

                                                        $('#sourceSelectionSaveBtn').click(function () {
                                                            var button = $(this);
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').show();
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');

                                                            var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();
                                                            /*if (newInfo.trim() === '') {
                                                                newInfo = null;
                                                            }   */

                                                            $.ajax({
                                                                url: "../controllers/updateWidget.php",
                                                                data: {
                                                                    action: "updateCkEditor",
                                                                    widgetName: name_widget_m,
                                                                    //    newText: newInfoDecoded
                                                                    newText: newInfo
                                                                },
                                                                type: "POST",
                                                                async: true,
                                                                dataType: 'json',
                                                                success: function (data) {
                                                                    if (data.detail === 'Ok') {
                                                                        alert('Saved!');
                                                                    } else {
                                                                        alert('Error');
                                                                    }
                                                                },
                                                                error: function (errorData) {
                                                                    alert('Error');
                                                                }
                                                            });
                                                        });
                                                    }
                                                },
                                                error: function (errorData) {
                                                    console.log('Error in retrieving Trusted Users.');
                                                }
                                            });
										///	
										///
                                        break;
                                        /////////////////////////////////INSERT widgetDeviceTable /////////////////								
									case "widgetDeviceTable":
                                        console.log('widgetDeviceTable 1');
                                        //////
                                        console.dir('code',code);
										$.ajax({
                                                url: "../controllers/getTrustedUsers.php",
                                                data: {

                                                },
                                                type: "POST",
                                                async: true,
                                                dataType: 'json',
                                                success: function (data) {
                                                    //console.log('TRUSTED 1');
                                                    console.dir(data['trustedUsers']);
                                                    if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
                                                        //Nuova riga
														//console.log('TRUSTED');
                                                        // console.log(data);
                                                        //Source Selection
                                                        newFormRow = $('<div class="row"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                                        newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
                                                        newSelect.append('<option value="no">no</option>');
                                                        newSelect.append('<option value="ckeditor">yes</option>');
                                                        newInnerDiv.append(newSelect);
                                                        newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        newLabel.show();
                                                        newInnerDiv.show();
                                                        newSelect.show();

                                                        //Nuova riga Tab Destro: CKEDITOR
                                                        //Modalità del widget (none, map, gis, link esterno)
                                                        newFormRow = $('<div class="row" id="ck_editor"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-12"></div>');
                                                        newBox = $('<div id="widgetEditor">');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
                                                        newBox.append('<?= _("Here you can insert Javascript code to be executed in the widget. Please save your script by clicking on the save button on the bottom.")?>');
                                                        newBox.append('</div></div>');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
                                                        newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
                                                        newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
                                                        newBox.append('</div></div></div>');
                                                        newInnerDiv.append(newBox);
                                                        //newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        //newLabel.show();
                                                        newInnerDiv.show();
                                                        //newInput.show();
                                                        $('#ck_editor').hide();

                                                        var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
                                                            allowedContent: true,
                                                            language: 'en',
                                                            contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
                                                            width: '100%'
                                                        });

                                                        let par = (JSON.stringify(currentParams));
                                                        if (par && !par.includes("latLng") && !par.includes("null")) {
                                                            $("#parametersM").val(JSON.stringify(currentParams));
                                                            if (currentParams['mode'] == "ckeditor") {
                                                                $('#ck_editor').show();
                                                                $('#enableCKEditor').val("ckeditor");
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    //var codeForCKEditor = $('<div>').text(code).html();
                                                                    //
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                            }
                                                        }

                                                        $('#enableCKEditor').change(function () {
                                                            if ($('#enableCKEditor').val() === "ckeditor") {
                                                                $('#ck_editor').show();
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    //var codeForCKEditor = $('<div>').text(code).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                                $("#parametersM").val('{"mode": "ckeditor"}');
                                                            } else {
                                                                $('#ck_editor').hide();
                                                                $("#parametersM").val('');
                                                            }
                                                        });

                                                        $('#sourceSelectionSaveBtn').click(function () {
                                                            var button = $(this);
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').show();
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');
                                                            var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();


                                                            $.ajax({
                                                                url: "../controllers/updateWidget.php",
                                                                data: {
                                                                    action: "updateCkEditor",
                                                                    widgetName: name_widget_m,
                                                                    newText: newInfo
                                                                },
                                                                type: "POST",
                                                                async: true,
                                                                dataType: 'json',
                                                                success: function (data) {
                                                                    if (data.detail === 'Ok') {
                                                                        alert('Saved!');
                                                                    } else {
                                                                        alert('Error');
                                                                    }
                                                                },
                                                                error: function (errorData) {
                                                                    alert('Error');
                                                                }
                                                            });
                                                        });
                                                    }
                                                },
                                                error: function (errorData) {
                                                    console.log('Error in retrieving Trusted Users.');
                                                }
                                            });
                                        break;
										///////////ADD CKEDITOR
										case "widgetEvent":
											console.log('INTO WIDGET EVENT');
											console.log ('END PART 1');
											$.ajax({
															url: "../controllers/getTrustedUsers.php",
															data: { },
															type: "POST",
															async: true,
															dataType: 'json',
															success: function (data) {
																if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
																	//Nuova riga
																	console.log('TRUSTED');
																	//Source Selection
																	newFormRow = $('<div class="row"></div>');
																	$("#specificParamsMRight").append(newFormRow);
																	newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
																	newInnerDiv = $('<div class="col-md-3"></div>');
																	newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
																	newSelect.append('<option value="no">no</option>');
																	newSelect.append('<option value="ckeditor">yes</option>');
																	newInnerDiv.append(newSelect);
																	newFormRow.append(newLabel);
																	newFormRow.append(newInnerDiv);
																	newLabel.show();
																	newInnerDiv.show();
																	newSelect.show();

																	//Nuova riga Tab Destro: CKEDITOR
																	//Modalità del widget (none, map, gis, link esterno)
																	newFormRow = $('<div class="row" id="ck_editor"></div>');
																	$("#specificParamsMRight").append(newFormRow);
																	newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
																	newInnerDiv = $('<div class="col-md-12"></div>');
																	newBox = $('<div id="widgetEditor">');
																	newBox.append('<div class="row">');
																	newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
																	newBox.append('<?= _("Here you can insert Javascript code to be executed in the widget. Please save your script by clicking on the save button on the bottom.")?>');
																	newBox.append('</div></div>');
																	newBox.append('<div class="row">');
																	newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
																	newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
																	newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
																	newBox.append('</div></div></div>');
																	newInnerDiv.append(newBox);
																	//newFormRow.append(newLabel);
																	newFormRow.append(newInnerDiv);
																	//newLabel.show();
																	newInnerDiv.show();
																	//newInput.show();
																	$('#ck_editor').hide();

																	var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
																		allowedContent: true,
																		language: 'en',
																		contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
																		width: '100%'
																	});

																	let par = (JSON.stringify(currentParams));
																	if (par && !par.includes("latLng") && !par.includes("null")) {
																		$("#parametersM").val(JSON.stringify(currentParams));
																		if (currentParams['mode'] == "ckeditor") {
																			$('#ck_editor').show();
																			$('#enableCKEditor').val("ckeditor");
																			if (code != null && code != "null") {
																				var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
																				var text_ck_area = document.createElement("text_ck_area");
																				text_ck_area.innerHTML = codeForCKEditor;
																				var newInfoDecoded = text_ck_area.innerText;
																				CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
																			}
																		}
																	}

																	$('#enableCKEditor').change(function () {
																		if ($('#enableCKEditor').val() === "ckeditor") {
																			$('#ck_editor').show();
																			if (code != null && code != "null") {
																				var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
																				var text_ck_area = document.createElement("text_ck_area");
																				text_ck_area.innerHTML = codeForCKEditor;
																				var newInfoDecoded = text_ck_area.innerText;
																				CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
																			}
																			$("#parametersM").val('{"mode": "ckeditor"}');
																		} else {
																			$('#ck_editor').hide();
																			$("#parametersM").val('');
																		}
																	});

																	$('#sourceSelectionSaveBtn').click(function () {
																		var button = $(this);
																		$('#widgetInfoModalFooter div.compactMenuMsg').show();
																		$('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');
																		var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();


																		$.ajax({
																			url: "../controllers/updateWidget.php",
																			data: {
																				action: "updateCkEditor",
																				widgetName: name_widget_m,
																				newText: newInfo
																			},
																			type: "POST",
																			async: true,
																			dataType: 'json',
																			success: function (data) {
																				if (data.detail === 'Ok') {
																					alert('Saved!');
																				} else {
																					alert('Error');
																				}
																			},
																			error: function (errorData) {
																				alert('Error');
																			}
																		});
																	});
																}
															},
															error: function (errorData) {
																console.log('Error in retrieving Trusted Users.');
															}
														});
											 break;

                                    case "widgetDataCube":
                                        var thrTables1 = new Array();
                                        var thrTables2 = new Array();
                                        var thrSeries, i, j, k, min, max, color, newTableRow, newTableCell, currentFieldIndex, currentSeriesIndex, colorsTable, newRow, newCell, newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan, addWidgetRangeTableContainer, barsColorsTableContainerM = null;
                                        var defaultColorsArray = ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'];
                                        var colorsArray = new Array();
                                        var metricId = $('#metricWidgetM').val();
                                        var metricData = getMetricData(metricId);
                                        if (metricData.data.length != 0 && (serviceUri == null || serviceUri == "")) {
                                            var seriesString = metricData.data[0].commit.author.series;
                                            var series = jQuery.parseJSON(seriesString);
                                        } else {
                                            var seriesDataArray = [];
                                            var seriesString = "";
                                            var series = null;
                                            var rowParamsArray = JSON.parse(rowParams);
                                            if (serviceUri) {
                                                series = jQuery.parseJSON(serviceUri);
                                            } else {
                                                for (var i = 0; i < rowParamsArray.length; i++) {
                                                    metricLabels = getMetricLabelsForBarSeries(rowParamsArray);
                                                    deviceLabels = getDeviceLabelsForBarSeries(rowParamsArray);
                                                    let mappedSeriesDataArray = buildBarSeriesArrayMap(seriesDataArray);
                                                    series = serializeDataForSeries(metricLabels, deviceLabels);
                                                }
                                            }
                                        }

                                        removeWidgetProcessGeneralFields("editWidget");

                                        var metricLabels = [];
                                        var deviceLabels = [];

                                        if (rowParamsArray) {
                                            if (!serviceUri) {
                                                // Caso New curvedLineSeries primo istanziamento
                                                for (n = 0; n < rowParamsArray.length; n++) {
                                                    if (!metricLabels.includes(rowParamsArray[n].smField)) {
                                                        metricLabels.push(rowParamsArray[n].smField);
                                                    }

                                                    if (!deviceLabels.includes(rowParamsArray[n].metricName)) {
                                                        deviceLabels.push(rowParamsArray[n].metricName);
                                                    }
                                                }
                                            } else {
                                                deviceLabels = series.secondAxis.labels;
                                            }
                                        }

                                        //Funzione di settaggio dei globals per il file dashboard_configdash.js
                                        setGlobals(currentParams, thrTables1, thrTables2, series, $('#select-widget-m').val());

                                        //Costruzione THRTables dai parametri provenienti da DB (vuote se non ci sono soglie per quel campo, anche nel caso di nessuna soglia settata in assoluto
                                        buildThrTablesForEditWidget();

                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");

                                        setEditMultiSeriesParameters(rowParamsArray);

                                        if(styleParamsRaw !== null)
                                        {
                                            styleParameters = JSON.parse(styleParamsRaw);
                                        }

                                        //$("#inputComuneRowM").css("display", "");
                                        $("label[for='inputComuneWidgetM']").css("display", "");
                                        //$('#inputComuneWidgetM').css("display", "");
                                        $("label[for='inputComuneWidgetM']").text("Context");
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-IntTemp-Widget-m').attr('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $("#urlWidgetM").prop('disabled', false);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#inputFontColorM').prop('disabled', false);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);

                                        //RIMOZIONE CAMPI PER TUTTI GLI ALTRI WIDGET
                                        $('#specificParamsM .row').remove();

                                        //Visualizzazione campi specifici per questo widget
                                        //Nuova riga
                                        //X-Axis dataset
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);

                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        //Default Unit
                                        newLabel = $('<label for="defaultUnit" class="col-md-1 control-label">Default Unit</label>');
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newSelect = $('<select class="form-control" id="defaultUnit" name="defaultUnit"></select>');
                                        for (var u of eval(data.name_widget+'_units')){
                                            newSelect.append("<option value="+u+">"+u+"</option>");
                                        }
                                        newSelect.val(styleParameters.defaultUnit);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();

                                        // Nuova Riga
                                        //Chart type
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="chartTypeM" class="col-md-1 control-label">Default chart type</label>');
                                        newInnerDiv = $('<div class="col-md-2" id="chartTypeDiv"></div>');
                                        newSelect = $('<select class="form-control" id="chartTypeM" name="chartTypeM"></select>');
                                        newSelect.append("<option value='3d'>3d Cube</option>");
                                        newSelect.append("<option value='cut'>Time Slice</option>");
                                        newSelect.append("<option value='stream'>Stream Graph</option>");
                                        newSelect.val(styleParameters.chartType);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();

                                        //Nuova riga
                                        //X-Axis labels font size
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="rowsLabelsFontSizeM" class="col-md-1 control-label">X-Axis labels font size</label>');
                                        newInnerDiv = $('<div class="col-md-1"></div>');
                                        newInput = $('<input type="text" class="form-control" id="rowsLabelsFontSizeM" name="rowsLabelsFontSizeM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //X-Axis labels font color
                                        newLabel = $('<label for="rowsLabelsFontColorM" class="col-md-1 control-label">X-Axis labels font color</label>');
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newInput = $('<div id="rowsLabelsFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="rowsLabelsFontColorM" name="rowsLabelsFontColorM" required><span class="input-group-addon"><i id="widgetRowsLabelsFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#rowsLabelsFontColorContainerM').show();
                                        $('#rowsLabelsFontColorM').show();
                                        $("#widgetRowsLabelsFontColorM").css('display', 'block');
                                        $("#widgetRowsLabelsFontColor").parent().parent().parent().colorpicker({color: styleParameters.rowsLabelsFontColor, format: "rgba"});

                                        //Nuova riga
                                        //Y-Axis labels font size
                                     /*   newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);*/
                                        newLabel = $('<label for="colsLabelsFontSizeM" class="col-md-1 control-label">Y-Axis labels font size</label>');
                                        newInnerDiv = $('<div class="col-md-1"></div>');
                                        newInput = $('<input type="text" class="form-control" id="colsLabelsFontSizeM" name="colsLabelsFontSizeM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //Y-Axis labels font color
                                        newLabel = $('<label for="colsLabelsFontColorM" class="col-md-1 control-label">Y-Axis labels font color</label>');
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newInput = $('<div id="colsLabelsFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="colsLabelsFontColorM" name="colsLabelsFontColorM" required><span class="input-group-addon"><i id="widgetColsLabelsFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#colsLabelsFontColorContainerM').show();
                                        $('#colsLabelsFontColorM').show();
                                        $("#widgetColsLabelsFontColorM").css('display', 'block');
                                        $("#widgetColsLabelsFontColorM").parent().parent().parent().colorpicker({color: styleParameters.colsLabelsFontColor, format: "rgba"});

                                        if (rowParamsArray) {
                                            //Nuova riga
                                            //X-Axis Label
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="xAxisLabel" class="col-md-1 control-label">X-Axis Label</label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<input type="text" class="form-control" id="xAxisLabel" name="xAxisLabel">');
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newLabel.show();
                                            newInnerDiv.show();
                                            newInput.show();
                                        }

                                        if (rowParamsArray == null) {
                                            // Nuova Riga
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                        }

                                        newLabel = $('<label for="legendFontSizeM" class="col-md-1 control-label">Legend font size</label>');
                                        newInnerDiv = $('<div class="col-md-1"></div>');
                                        newInput = $('<input type="text" class="form-control" id="legendFontSizeM" name="legendFontSizeM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //Parametri specifici del widget
                                        if(styleParamsRaw !== null)
                                        {
                                            $("#xAxisDatasetM").val(styleParameters.xAxisDataset);
                                            $("#rowsLabelsFontSizeM").val(styleParameters.rowsLabelsFontSize);
                                            $("#rowsLabelsFontColorM").val(styleParameters.rowsLabelsFontColor);
                                            $("#widgetRowsLabelsFontColorM").css("background-color", styleParameters.rowsLabelsFontColor);
                                            $("#widgetRowsLabelsFontColorM").parent().parent().colorpicker({color: styleParameters.rowsLabelsFontColor, format: "rgba"});
                                            $("#colsLabelsFontSizeM").val(styleParameters.colsLabelsFontSize);
                                            $("#colsLabelsFontColorM").val(styleParameters.colsLabelsFontColor);
                                            $("#widgetColsLabelsFontColorM").css("background-color", styleParameters.colsLabelsFontColor);
                                            $("#widgetColsLabelsFontColorM").parent().parent().colorpicker({color: styleParameters.colsLabelsFontColor, format: "rgba"});
                                            $("#dataLabelsFontSizeM").val(styleParameters.dataLabelsFontSize);
                                            $("#dataLabelsFontColorM").val(styleParameters.dataLabelsFontColor);
                                            $("#widgetDataLabelsFontColorM").css("background-color", styleParameters.dataLabelsFontColor);
                                            $("#widgetDataLabelsFontColorM").parent().parent().colorpicker({color: styleParameters.dataLabelsFontColor, format: "rgba"});
                                            $("#legendFontSizeM").val(styleParameters.legendFontSize);
                                            $("#legendFontColorM").val(styleParameters.legendFontColor);
                                            $("#widgetLegendFontColorM").css("background-color", styleParameters.legendFontColor);
                                            $("#widgetLegendFontColorM").parent().parent().colorpicker({color: styleParameters.legendFontColor, format: "rgba"});
                                            $("#barsColorsSelectM").val(styleParameters.barsColorsSelect);
                                            $("#chartTypeM").val(styleParameters.chartType);
                                            $("#dataLabelsM").val(styleParameters.dataLabels);
                                            $("#lineWidthM").val(styleParameters.lineWidth);
                                            $("#alrLookM").val(styleParameters.alrLook);
                                            $("#xAxisLabel").val(styleParameters.xAxisLabel);
                                            $("#yAxisLabel").val(styleParameters.yAxisLabel);
                                        }

                                        //Contenitore per tabella dei colori
                                        barsColorsTableContainerM = $('<div id="barsColorsTableContainerM" class="row rowCenterContent"></div>');
                                        $("#specificParamsM").append(barsColorsTableContainerM);

                                        function updateWidgetBarSeriesColorsM(e, params)
                                        {
                                            var newColor = $(this).colorpicker('getValue');
                                            var index = parseInt($(this).parents('tr').index() - 1);
                                            colorsArray[index] = newColor;
                                            $("#barsColorsM").val(JSON.stringify(colorsArray));
                                        }

                                        colorsTable = $("<table class='table table-bordered table-condensed thrRangeTable'><tr><td>Series</td><td>Color</td></tr></table>");
                                        if (series) {
                                            for (var i in rowParamsArray) {
                                                newRow = $('<tr></tr>');
                                                newCell = $('<td>' + rowParamsArray[i].metricName + '</td>');
                                                newRow.append(newCell);
                                                newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                newRow.append(newCell);
                                                //Se l'attuale impostazione Ã¨ per colori automatici, costruiamo JSON e tabella GUI con impostazioni di default, altrimenti con colori da DB
                                                if (styleParameters.barsColorsSelect === 'auto') {
                                                    newRow.find('div.colorPicker').colorpicker({
                                                        color: defaultColorsArray[i % 10],
                                                        format: "rgba"
                                                    });
                                                    colorsArray.push(defaultColorsArray[i % 10]);
                                                } else {
                                                    newRow.find('div.colorPicker').colorpicker({
                                                        color: styleParameters.barsColors[i],
                                                        format: "rgba"
                                                    });
                                                    colorsArray.push(styleParameters.barsColors[i]);
                                                }

                                                newRow.find('div.colorPicker').on('changeColor', updateWidgetBarSeriesColorsM);
                                                colorsTable.append(newRow);
                                            }
                                        }

                                        $("#barsColorsM").val(JSON.stringify(colorsArray));
                                        $('#barsColorsTableContainerM').append(colorsTable);

                                        //Per prima visualizzazione in edit
                                        if($('#barsColorsSelectM').val() === "manual")
                                        {
                                            $('#barsColorsTableContainerM').show();
                                        }
                                        else
                                        {
                                            $('#barsColorsTableContainerM').hide();
                                        }

                                        if (rowParamsArray) {   // For NEW wdgetCurvedLineSeries Only
                                            //Nuova riga
                                            //Contenitore per tabella delle query
                                            var editMultiSeriesQueryTableContainer = $('<div id="editMultiSeriesQueryTableContainer" class="row rowCenterContent"></div>');
                                            var editMultiSeriesQueryTable = $("<table id='editMultiSeriesQueryTable' data-widgetType='curvedLineSeries' class='table table-bordered table-condensed thrRangeTable'><col style='width:100px'><col style='width:136px'><col style='width:50px'><col style='width:76px'><col style='width:25px'><tr><td><br>Labels</td><td>Query ID or URI <br>(Empty for Dynamic Data from IOT-Apps)</td><td>Value Type<br>(Mandatory only for MyKPI & Sensor)</td><td><br>Color</td><td><a href='#'><i class='fa fa-plus' style='font-size:24px;color:#337ab7'></i></a></td></tr></table>");
                                            editMultiSeriesQueryTableContainer.append(editMultiSeriesQueryTable);
                                            $("#specificParamsM").append(editMultiSeriesQueryTableContainer);

                                    //    editGisParameters.queries.sort(compareJsonElementsByKeyValues('rowOrder'));
                                    //    var allIcons = getIconsPool();

                                            for (var i = 0; i < rowParamsArray.length; i++) {
                                                newTableRow = $('<tr></tr>');

                                                var placeholderStr = "";
                                                /*  if (styleParameters.editDeviceLabels != null) {
                                                      placeholderStr = styleParameters.editDeviceLabels[i];
                                                  } else {
                                                      placeholderStr = deviceLabels[i];
                                                  }*/
                                                //   placeholderStr = rowParamsArray[i].metricName;
                                                if (rowParamsArray[i].label) {
                                                    placeholderStr = rowParamsArray[i].label;
                                                } else {
                                                    placeholderStr = rowParamsArray[i].metricName + ' - ' + rowParamsArray[i].smField;
                                                }

                                                // Labels CELL
                                                newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="labels"></a></td>');
                                                newTableCell.find('a').editable({
                                                    emptytext: "Empty",
                                                    display: function (value, response) {
                                                        if (value.length > 30) {
                                                            $(this).html(value.substring(0, 30) + "...");
                                                        } else {
                                                            $(this).html(value);
                                                        }
                                                    },
                                                    //    value: rowParamsArray[i].metricName
                                                    value: placeholderStr
                                                });
                                                newTableRow.append(newTableCell);

                                                // Query ID or URI CELL
                                                newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="queryIDUrl"></td>');
                                                newTableCell.find('a').editable({
                                                    emptytext: "Empty",
                                                    display: function (value, response) {
                                                        if (value.length > 45) {
                                                            $(this).html(value.substring(0, 45) + "...");
                                                        } else {
                                                            $(this).html(value);
                                                        }
                                                    },
                                                    value: rowParamsArray[i].serviceUri
                                                });
                                                newTableRow.append(newTableCell);

                                                // High Level Type CELL
                                                /*    newTableCell = $('<td><select data-param="hlt" class="form-control"></select></td>');
                                                    newTableCell.find('select').append('<option value="Sensor">Sensor</option>');
                                                    newTableCell.find('select').append('<option value="MyKPI">MyKPI</option>');
                                                    newTableCell.find('select').append('<option value="Dynamic">Dynamic</option>');
                                                    newTableRow.append(newTableCell);
                                                    newTableCell.find('select').val(rowParamsArray[i].metricHighLevelType);
                                                    newTableCell.find('select').on('change', editMultiSeriesUpdateParams);*/

                                                // Value Type CELL
                                                newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="valueType"></td>');
                                                newTableCell.find('a').editable({
                                                    emptytext: "Empty",
                                                    display: function (value, response) {
                                                        if (value.length > 12) {
                                                            $(this).html(value.substring(0, 12) + "...");
                                                        } else {
                                                            $(this).html(value);
                                                        }
                                                    },
                                                    value: rowParamsArray[i].smField
                                                });
                                                newTableRow.append(newTableCell);

                                                function updateWidgetBarSeriesColorsM(e, params) {
                                                    var newColor = $(this).colorpicker('getValue');
                                                    var index = parseInt($(this).parents('tr').index() - 1);
                                                    colorsArray[index] = newColor;
                                                    $("#barsColorsM").val(JSON.stringify(colorsArray));
                                                }

                                                newTableCell = $('<td><div class="input-group colorPicker" data-param="lineColor"><input type="text" class="input form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                newTableRow.append(newTableCell);
                                                /*  if (styleParameters.barsColorsSelect === 'auto') {
                                                      newTableRow.find('div.colorPicker').colorpicker({
                                                          color: defaultColorsArray[i % 10],
                                                          format: "rgba"
                                                      });
                                                      colorsArray.push(defaultColorsArray[i % 10]);
                                                  } else {*/
                                                newTableRow.find('div.colorPicker').colorpicker({
                                                    color: styleParameters.barsColors[i],
                                                    format: "rgba"
                                                });
                                                colorsArray.push(styleParameters.barsColors[i]);
                                                //   }

                                                // NO UPDATE QUI
                                                //    newTableRow.find('div.colorPicker').on('changeColor', updateWidgetBarSeriesColorsM);

                                                newTableRow.find('div.colorPicker').on('changeColor', editMultiSeriesUpdateParams);
                                                colorsTable.append(newTableRow);
                                                newTableRow.append(newTableCell);
                                                /*   newTableRow.find('div.colorPicker').colorpicker({
                                                       color: editGisParameters.queries[i].color1,
                                                       format: "rgba"
                                                   });
                                                   newTableRow.find('div.colorPicker').on('hidePicker', editGisUpdateParams);

                                                   newTableCell = $('<td><select data-param="targets" class="form-control" multiple></select></td>');
                                                   newTableRow.append(newTableCell);*/

                                                newTableCell = $('<td><a><i class="fa fa-close" style="font-size:24px;color:red"></i></a></td>');
                                                newTableCell.find('i').click(delMultiSeriesQueryM);
                                                newTableRow.append(newTableCell);
                                                newTableRow.find('a.toBeEdited').on('save', editMultiSeriesUpdateParams);
                                                $("#editMultiSeriesQueryTable").append(newTableRow);
                                            }
                                        }

                                        if(currentParams === null)
                                        {
                                            $('#alrThrSelM').val("no");
                                            $("label[for='alrAxisSelM']").hide();
                                            $('#alrAxisSelM').val(-1);
                                            $('#alrAxisSelM').hide();
                                        //    $('#parametersM').val('');
                                            $('#parametersM').val(rowParams);
                                        }
                                        else
                                        {
                                            //ESPOSIZIONE DEI CAMPI
                                            $('#alrThrSelM').val("yes");
                                            $('#alrAxisSelM').val(currentParams.thresholdObject.target);
                                            $("label[for='alrAxisSelM']").show();
                                            $('#alrAxisSelM').parent().show();
                                            $('#alrAxisSelM').show();
                                            $("label[for='alrFieldSelM']").show();
                                            $('#alrFieldSelM').parent().show();
                                            $('#alrFieldSelM').show();
                                            $("label[for='alrLookM']").show();
                                            $('#alrLookM').parent().show();
                                            $('#alrLookM').show();
                                            $('#alrLookM').val(styleParameters.alrLook);
                                            //POPOLAMENTO DELLA SELECT DEI CAMPI
                                            alrAxisSelMListener();
                                            $('#addWidgetRangeTableContainerM').show();
                                            $('#parametersM').val(JSON.stringify(currentParams));
                                            //Listener per settaggio/desettaggio campi in base ad asse selezionato
                                            $('#alrAxisSelM').change(alrAxisSelMListener);
                                            //Listener per selezione campo
                                            $('#alrFieldSelM').change(alrFieldSelMListener);
                                        }
                                        $("#editMultiSeriesQueryTable i.fa-plus").click(addMultiSeriesQueryM);
                                        break;

                                    case "widgetLineSeries": case "widgetCurvedLineSeries":
                                        var thrTables1 = new Array();
                                        var thrTables2 = new Array();
                                        var thrSeries, i, j, k, min, max, color, newTableRow, newTableCell, currentFieldIndex, currentSeriesIndex, colorsTable, newRow, newCell, newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan, addWidgetRangeTableContainer, barsColorsTableContainerM = null;
                                        var defaultColorsArray = ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'];
                                        var colorsArray = new Array();    
                                        var metricId = $('#metricWidgetM').val();
                                        var metricData = getMetricData(metricId);
                                        if (metricData.data.length != 0 && (serviceUri == null || serviceUri == "")) {
                                            var seriesString = metricData.data[0].commit.author.series;
                                            var series = jQuery.parseJSON(seriesString);
                                        } else {
                                            var seriesDataArray = [];
                                            var seriesString = "";
                                            var series = null;
                                            var rowParamsArray = JSON.parse(rowParams);
                                            if (serviceUri && IsJsonString(serviceUri)) {
                                                series = jQuery.parseJSON(serviceUri);
                                            } else {
                                                for (var i = 0; i < rowParamsArray.length; i++) {
                                                    metricLabels = getMetricLabelsForBarSeries(rowParamsArray);
                                                    deviceLabels = getDeviceLabelsForBarSeries(rowParamsArray);
                                                    let mappedSeriesDataArray = buildBarSeriesArrayMap(seriesDataArray);
                                                    series = serializeDataForSeries(metricLabels, deviceLabels);
                                                }
                                            }
                                        }
                                        
                                        removeWidgetProcessGeneralFields("editWidget");

                                        var metricLabels = [];
                                        var deviceLabels = [];

                                        if (rowParamsArray) {
                                            if (!serviceUri) {
                                                // Caso New curvedLineSeries primo istanziamento
                                                for (n = 0; n < rowParamsArray.length; n++) {
                                                    if (!metricLabels.includes(rowParamsArray[n].smField)) {
                                                        metricLabels.push(rowParamsArray[n].smField);
                                                    }

                                                    if (!deviceLabels.includes(rowParamsArray[n].metricName)) {
                                                        deviceLabels.push(rowParamsArray[n].metricName);
                                                    }
                                                }
                                            } else {
                                                deviceLabels = series.secondAxis.labels;
                                            }
                                        }

                                        //Funzione di settaggio dei globals per il file dashboard_configdash.js
                                        setGlobals(currentParams, thrTables1, thrTables2, series, $('#select-widget-m').val());
                                        
                                        //Costruzione THRTables dai parametri provenienti da DB (vuote se non ci sono soglie per quel campo, anche nel caso di nessuna soglia settata in assoluto
                                        buildThrTablesForEditWidget();
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");

                                        setEditMultiSeriesParameters(rowParamsArray);
                                        
                                        if(styleParamsRaw !== null) 
                                        {
                                            styleParameters = JSON.parse(styleParamsRaw);
                                        }
                                        
                                        //$("#inputComuneRowM").css("display", "");
                                        $("label[for='inputComuneWidgetM']").css("display", "");
                                        //$('#inputComuneWidgetM').css("display", "");
                                        $("label[for='inputComuneWidgetM']").text("Context");
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-IntTemp-Widget-m').attr('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $("#urlWidgetM").prop('disabled', false);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#inputFontColorM').prop('disabled', false);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        //RIMOZIONE CAMPI PER TUTTI GLI ALTRI WIDGET
                                        $('#specificParamsM .row').remove();
                                        
                                        //Visualizzazione campi specifici per questo widget
                                        //Nuova riga
                                        //X-Axis dataset
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                    /*    newLabel = $('<label for="xAxisDatasetM" class="col-md-2 control-label">X-Axis dataset</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="xAxisDatasetM" name="xAxisDatasetM" required>');
                                        newSelect.append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                        newSelect.append("<option value='" + series.secondAxis.desc + "'>" + series.secondAxis.desc + "</option>");
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();   */

                                        //Line width
                                        newLabel = $('<label for="lineWidthM" class="col-md-1 control-label">Line width</label>');
                                        newInnerDiv = $('<div class="col-md-1"></div>');
                                        newInput = $('<input type="text" class="form-control" id="lineWidthM" name="lineWidthM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //Nuova Riga
                                        //X-Axis Format
                                     /*   newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);*/
                                        newLabel = $('<label for="xAxisFormat" class="col-md-1 control-label">X-Axis format</label>');
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newSelect = $('<select class="form-control" id="xAxisFormat" name="xAxisFormat"></select>');
                                        newSelect.append("<option value='timestamp'>Timestamp</option>");
                                        newSelect.append("<option value='numeric'>Numeric</option>");
                                        newSelect.val(styleParameters.xAxisFormat);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();

                                        //Y-Axis Type
                                        newLabel = $('<label for="yAxisType" class="col-md-1 control-label"><?php echo _("Y-Axis type"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newSelect = $('<select class="form-control" id="yAxisType" name="yAxisType"></select>');
                                        newSelect.append("<option value='linear'>Linear</option>");
                                        newSelect.append("<option value='logarithmic'>Logarithmic</option>");
                                        newSelect.val(styleParameters.yAxisType);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        
                                        //Y-Axis Min
                                        newLabel = $('<div id="yAxisMinVal"><label for="yAxisMinVal" class="col-md-1 control-label"><?php echo _("Y-Axis Min"); ?></label></div>');
                                        newInnerDiv = $('<div id="yAxisMinInnerDiv" class="col-md-1"></div>');
                                        newInput = $('<input type="text" class="form-control" id="yAxisMin" name="yAxisMin">');
                                        newInput.val(styleParameters.yAxisMin);
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();
                                        
                                        //Y-Axis Max
                                        newLabel = $('<div id="yAxisMaxVal"><label for="yAxisMaxVal" class="col-md-1 control-label"><?php echo _("Y-Axis Max"); ?></label></div>');
                                        newInnerDiv = $('<div id="yAxisMaxInnerDiv" class="col-md-1"></div>');
                                        newInput = $('<input type="text" class="form-control" id="yAxisMax" name="yAxisMax">');
                                        newInput.val(styleParameters.yAxisMax);
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();
                                        
                                        //Nuova riga
                                        //X-Axis labels font size
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="rowsLabelsFontSizeM" class="col-md-1 control-label"><?php echo _("X-Axis labels font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-1"></div>');
                                        newInput = $('<input type="text" class="form-control" id="rowsLabelsFontSizeM" name="rowsLabelsFontSizeM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //X-Axis labels font color
                                        newLabel = $('<label for="rowsLabelsFontColorM" class="col-md-1 control-label"><?php echo _("X-Axis labels font color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newInput = $('<div id="rowsLabelsFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="rowsLabelsFontColorM" name="rowsLabelsFontColorM" required><span class="input-group-addon"><i id="widgetRowsLabelsFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#rowsLabelsFontColorContainerM').show();
                                        $('#rowsLabelsFontColorM').show();
                                        $("#widgetRowsLabelsFontColorM").css('display', 'block');
                                        $("#widgetRowsLabelsFontColor").parent().parent().parent().colorpicker({color: styleParameters.rowsLabelsFontColor, format: "rgba"});
                                        
                                        //Nuova riga
                                        //Y-Axis labels font size
                                     /*   newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);*/
                                        newLabel = $('<label for="colsLabelsFontSizeM" class="col-md-1 control-label"><?php echo _("Y-Axis labels font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-1"></div>');
                                        newInput = $('<input type="text" class="form-control" id="colsLabelsFontSizeM" name="colsLabelsFontSizeM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //Y-Axis labels font color
                                        newLabel = $('<label for="colsLabelsFontColorM" class="col-md-1 control-label"><?php echo _("Y-Axis labels font color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newInput = $('<div id="colsLabelsFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="colsLabelsFontColorM" name="colsLabelsFontColorM" required><span class="input-group-addon"><i id="widgetColsLabelsFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#colsLabelsFontColorContainerM').show();
                                        $('#colsLabelsFontColorM').show();
                                        $("#widgetColsLabelsFontColorM").css('display', 'block');
                                        $("#widgetColsLabelsFontColorM").parent().parent().parent().colorpicker({color: styleParameters.colsLabelsFontColor, format: "rgba"});

                                        if (rowParamsArray) {
                                            //Nuova riga
                                            //X-Axis Label
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="xAxisLabel" class="col-md-1 control-label">X-Axis Label</label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newInput = $('<input type="text" class="form-control" id="xAxisLabel" name="xAxisLabel">');
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newLabel.show();
                                            newInnerDiv.show();
                                            newInput.show();
                                        }

                                        if (rowParamsArray == null) {
                                            // Nuova Riga
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                        }
                                        // Y-Axis Label
                                        newLabel = $('<label for="yAxisLabel" class="col-md-1 control-label"><?php echo _("Y-Axis Label"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-4"></div>');
                                        newInput = $('<input type="text" class="form-control" id="yAxisLabel" name="yAxisLabel">');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();
                                        
                                        // Show Content on Load
                                        newLabel = $('<label for="showContentLoadM" class="col-md-1 control-label"><?php echo _("Show CSBL Content on Load"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-1"></div>');
                                        newSelect = $('<select class="form-control" id="showContentLoadM" name="showContentLoadM">');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newSelect.val(styleParameters.showContentLoadM);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();

                                        // Nuova Riga
                                        //Secondary y-axis
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="secondaryYAxisM" class="col-md-1 control-label"><?php echo _("Secondary Y-Axis"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-1" id="secondaryYAxisMDiv"></div>');
                                        newSelect = $('<select class="form-control" id="secondaryYAxisM" name="secondaryYAxisM"></select>');
                                        newSelect.append("<option value='yes'>Yes</option>");
                                        newSelect.append("<option value='no'>No</option>");
                                        newSelect.val(styleParameters.secondaryYAxisM);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        
                                        newLabel = $('<div id="secondaryYAxisLabel"><label for="secondaryYAxisLab" class="col-md-1 control-label"><?php echo _("Secondary Y-Axis Label"); ?></label></div>');
                                        newInnerDiv = $('<div id="secYAxisLabOpInnerDiv" class="col-md-2"></div>');
                                        newInput = $('<input type="text" class="form-control" id="secondaryYAxisLab" name="secondaryYAxisLab">');
                                        newInput.val(styleParameters.secondaryYAxisLab);
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();
                                        if ($('#secondaryYAxisM').val() == "yes") {
                                            $('#secondaryYAxisLabel').show();
                                            $('#secYAxisLabOpInnerDiv').show();
                                            $('#secondaryYAxisLab').show();
                                        } else {
                                            $('#secondaryYAxisLabel').hide();
                                            $('#secYAxisLabOpInnerDiv').hide();
                                            $('#secondaryYAxisLab').hide();
                                        }
                                        
                                        newLabel = $('<div id="secondaryYAxisMinVal"><label for="secondaryYAxisMinVal" class="col-md-1 control-label"><?php echo _("Secondary Y-Axis Min"); ?></label></div>');
                                        newInnerDiv = $('<div id="secYAxisMinInnerDiv" class="col-md-1"></div>');
                                        newInput = $('<input type="text" class="form-control" id="secondaryYAxisMin" name="secondaryYAxisMin">');
                                        newInput.val(styleParameters.secondaryYAxisMin);
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();
                                        if ($('#secondaryYAxisM').val() == "yes") {
                                            $('#secondaryYAxisMinVal').show();
                                            $('#secYAxisMinInnerDiv').show();
                                            $('#secondaryYAxisMin').show();
                                        } else {
                                            $('#secondaryYAxisMinVal').hide();
                                            $('#secYAxisMinInnerDiv').hide();
                                            $('#secondaryYAxisMin').hide();
                                        }
                                        
                                        newLabel = $('<div id="secondaryYAxisMaxVal"><label for="secondaryYAxisMaxVal" class="col-md-1 control-label"><?php echo _("Secondary Y-Axis Max"); ?></label></div>');
                                        newInnerDiv = $('<div id="secYAxisMaxInnerDiv" class="col-md-1"></div>');
                                        newInput = $('<input type="text" class="form-control" id="secondaryYAxisMax" name="secondaryYAxisMax">');
                                        newInput.val(styleParameters.secondaryYAxisMax);
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();
                                        if ($('#secondaryYAxisM').val() == "yes") {
                                            $('#secondaryYAxisMaxVal').show();
                                            $('#secYAxisMaxInnerDiv').show();
                                            $('#secondaryYAxisMax').show();
                                        } else {
                                            $('#secondaryYAxisMaxVal').hide();
                                            $('#secYAxisMaxInnerDiv').hide();
                                            $('#secondaryYAxisMax').hide();
                                        }

                                    /*    newLabel = $('<div id="secondaryYAxisValueUnit"><label for="secondaryYAxisVuM" class="col-md-1 control-label"><?php echo _("Secondary Y-Axis Value Unit"); ?></label></div>');
                                        newInnerDiv = $('<div id="secYAxisVUOpInnerDiv" class="col-md-2"></div>');
                                        newInput = $('<input type="text" class="form-control" id="secondaryYAxisVuM" name="secondaryYAxisVuM">');
                                        newInput.val(styleParameters.secondaryYAxisVuM);
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();
                                        if ($('#secondaryYAxisM').val() == "yes") {
                                            $('#secondaryYAxisValueUnit').show();
                                            $('#secYAxisVUOpInnerDiv').show();
                                            $('#secondaryYAxisVuM').show();
                                        } else {
                                            $('#secondaryYAxisValueUnit').hide();
                                            $('#secYAxisVUOpInnerDiv').hide();
                                            $('#secondaryYAxisVuM').hide();
                                        }   */
                                        
                                        $('#secondaryYAxisM').change(function () {
                                            if ($('#secondaryYAxisM').val() === "yes") {
												// $('#secondaryYAxisValueUnit').show();
                                                // $('#secYAxisVUOpInnerDiv').show();
                                                // $('#secondaryYAxisVuM').show();
												$('#secondaryYAxisLabel').show();
												$('#secYAxisLabOpInnerDiv').show();
												$('#secondaryYAxisLab').show();
                                                $('#secondaryYAxisMinVal').show();
                                                $('#secYAxisMinInnerDiv').show();
                                                $('#secondaryYAxisMin').show();
                                                $('#secondaryYAxisMaxVal').show();
                                                $('#secYAxisMaxInnerDiv').show();
                                                $('#secondaryYAxisMax').show();
                                                $('#seconYAx').show();
                                                $('.secYAxTd').show();
                                            } else {
                                                // $('#secondaryYAxisValueUnit').hide();
                                                // $('#secYAxisVUOpInnerDiv').hide();
                                                // $('#secondaryYAxisVuM').hide();
												$('#secondaryYAxisLabel').hide();
												$('#secYAxisLabOpInnerDiv').hide();
												$('#secondaryYAxisLab').hide();
                                                $('#secondaryYAxisMinVal').hide();
                                                $('#secYAxisMinInnerDiv').hide();
                                                $('#secondaryYAxisMin').hide();
                                                $('#secondaryYAxisMaxVal').hide();
                                                $('#secYAxisMaxInnerDiv').hide();
                                                $('#secondaryYAxisMax').hide();
                                                $('#seconYAx').hide();
                                                $('.secYAxTd').hide();
                                            }
                                        });

                                        //Nuova riga
                                        //Data labels font size
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="dataLabelsFontSizeM" class="col-md-1 control-label"><?php echo _("Data labels font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-1"></div>');
                                        newInput = $('<input type="text" class="form-control" id="dataLabelsFontSizeM" name="dataLabelsFontSizeM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //Data labels font color
                                        newLabel = $('<label for="dataLabelsFontColorM" class="col-md-1 control-label"><?php echo _("Data labels font color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newInput = $('<div id="dataLabelsFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="dataLabelsFontColorM" name="dataLabelsFontColorM" required><span class="input-group-addon"><i id="widgetDataLabelsFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#dataLabelsFontColorContainerM').show();
                                        $('#dataLabelsFontColorM').show();
                                        $("#widgetDataLabelsFontColorM").css('display', 'block');
                                        $("#widgetDataLabelsFontColorM").parent().parent().parent().colorpicker({color: styleParameters.dataLabelsFontColor, format: "rgba"});
                                        
                                        //Nuova riga
                                        //Legend font size
                                    /*    newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);*/
                                        newLabel = $('<label for="legendFontSizeM" class="col-md-1 control-label"><?php echo _("Legend font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-1"></div>');
                                        newInput = $('<input type="text" class="form-control" id="legendFontSizeM" name="legendFontSizeM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //Legend font color
                                        newLabel = $('<label for="legendFontColorM" class="col-md-1 control-label">Legend font color</label>');
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newInput = $('<div id="legendFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="legendFontColorM" name="legendFontColorM" required><span class="input-group-addon"><i id="widgetLegendFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#legendFontColorContainerM').show();
                                        $('#legendFontColorM').show();
                                        $("#widgetLegendFontColorM").css('display', 'block');
                                        $("#widgetLegendFontColorM").parent().parent().parent().colorpicker({color: styleParameters.legendFontColor, format: "rgba"});

                                        // Nuova Riga
                                        //Chart type
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="chartTypeM" class="col-md-1 control-label">Chart type</label>');
                                        newInnerDiv = $('<div class="col-md-2" id="chartTypeDiv"></div>');
                                        newSelect = $('<select class="form-control" id="chartTypeM" name="chartTypeM"></select>');
                                        newSelect.append("<option value='lines'>Simple lines</option>");
                                        newSelect.append("<option value='area'>Area lines</option>");
                                        newSelect.append("<option value='stacked'>Stacked area lines</option>");
                                        newSelect.val(styleParameters.chartType);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();

                                        $("#chartTypeDiv").on("change", function() {
                                            // if Stacekd Option is selected, a message is shown explaining it works only with equally-sampled data series
                                            if (this.children[0].options[2].selected === true) {
                                                alert('<?= _("Please note that the Stacked Areas option correctly works only for equally-sampled data series") ?>');
                                            }
                                        });
                                        
                                        newLabel = $('<div id="areaOpacity"><label for="areaChartOpacityM" class="col-md-1 control-label">Area Lines Opacity [0, 1]</label></div>');
                                        newInnerDiv = $('<div id="areaOpInnerDiv" class="col-md-1"></div>');
                                        newInput = $('<input type="text" class="form-control" id="areaChartOpacityM" name="areaChartOpacityM">');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();
                                        $('#areaOpacity').hide();
                                        $('#areaOpInnerDiv').hide();
                                        $('#areaChartOpacityM').hide();

                                        if ($('#chartTypeM').val() === "area") {
                                            $('#areaOpacity').show();
                                            $('#areaOpInnerDiv').show();
                                            $('#areaChartOpacityM').val(styleParameters['areaChartOpacityM']);
                                            $('#areaChartOpacityM').show();
                                        }
                                        
                                        $('#chartTypeM').change(function () {
                                            if ($('#chartTypeM').val() === "area") {
                                                $('#areaOpacity').show();
                                                $('#areaOpInnerDiv').show();
                                                $('#areaChartOpacityM').show();
                                            } else {
                                                $('#areaOpacity').hide();
                                                $('#areaOpInnerDiv').hide();
                                                $('#areaChartOpacityM').hide();
                                            }
                                        });
                                        
                                        //Data labels
                                    /*    newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);*/
                                        newLabel = $('<label for="dataLabelsM" class="col-md-1 control-label">Data labels</label>');
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newSelect = $('<select class="form-control" id="dataLabelsM" name="dataLabelsM">');
                                        newSelect.append('<option value="no">No data labels</option>');
                                        newSelect.append('<option value="value">Value only</option>');
                                        newSelect.append('<option value="full">Field name and value</option>');
                                        newSelect.val(styleParameters.dataLabels);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="TypicalTimeTrendM" class="col-md-1 control-label">Typical time trend</label>');
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newSelect = $('<select class="form-control TypicalTimetrendC" id="TypicalTimeTrendM" name="TypicalTimeTrendM">');
                                        newSelect.append('<option value="No"><?php echo _("No"); ?></option>');
                                        newSelect.append('<option value="Yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.val(data['typical_time_trend']);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        
                                        newLabel = $('<label for="TrendTypeM" class="col-md-1 control-label">Trend type</label>');
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newSelect = $('<select class="form-control TypicalTimetrendC" id="TrendTypeM" name="TrendTypeM">');
                                        newSelect.append('<option value="dayHour">Day hour</option>');
                                        newSelect.append('<option value="monthDay">Month day</option>');
                                        newSelect.append('<option value="monthWeek">Month week</option>');
                                        newSelect.val(data['trend_type']);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        
                                        newLabel = $('<label for="ReferenceDateM" class="col-md-1 control-label">Reference date</label>');
                                        newInnerDiv = $('<div class="col-md-2 TypicalTimetrendC"></div>');
                                        newSelect = $('<input type="date" id="ReferenceDateM" name="ReferenceDateM">');
                                        newSelect.val(data['reference_date']);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();  
                                        newSelect.show();
                                        
                                        newLabel = $('<label for="TTTDate" class="col-md-1 control-label">Typical Trend Type Date</label>');
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newSelect = $('<select class="form-control" id="TTTDate" name="TTTDate">');
                                        $.ajax({
                                            url: "../controllers/getWidgetParams.php",
                                            type: "GET",
                                            data: {
                                                widgetName: name_widget_m
                                            },
                                            async: false,
                                            dataType: 'json',
                                            success: function (widgetData)
                                            {
                                                $rowParameters = JSON.parse(widgetData.params.rowParameters);
                                                dataOriginV = JSON.stringify($rowParameters[0]);
                                                $.ajax({
                                                    url: "../controllers/aggregationSeriesProxy.php",
                                                    type: "POST",
                                                    data:
                                                    {
                                                        dataOrigin: dataOriginV,
                                                        index: 0,
                                                        timeRange: null,
                                                        field: $rowParameters[0].smField,
                                                        upperTime: null,
                                                        typicaltrend: $('#TypicalTimeTrendM').val(),
                                                        trendtype: $('#TrendTypeM').val(), 
                                                        trenddate: $('#ReferenceDateM').val() 
                                                    },
                                                    async: false,
                                                    dataType: 'json',
                                                    success: function (data1)
                                                    {
                                                        if (IsJsonString(data1.data)) {
                                                            $arrayttt = JSON.parse(data1.data);
                                                            if ($arrayttt != null) {
                                                                for (var m = 0; m < $arrayttt.length; m++) {
                                                                    $selectString = '<option value="&from=' + $arrayttt[m].from + '&to=' + $arrayttt[m].to + '|&computationType=' + $arrayttt[m].computationType + '">' + $arrayttt[m].from + ' --> ' + $arrayttt[m].to + '(' + $arrayttt[m].computationType + ')' + '</option>';
                                                                    newSelect.append($selectString);
                                                                }
                                                            }
                                                        }
                                                    },error: function (errorData)
                                                    {
                                                        Data1 = null;
                                                        console.log("Error in data retrieval");
                                                        console.log(JSON.stringify(errorData));
                                                    }
                                                });
                                            }                                        
                                        });
                                        
                                        newSelect.val(data['ttt_date']+'|'+data['computation_type']);
                                        //$aaa.dd=2;
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="dayHourView" id="dayHourViewL" class="col-md-1 control-label">Day hour view</label>');
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newSelect = $('<select class="form-control" id="dayHourView" name="dayHourView">');
                                        newSelect.append('<option value="weekview">week view</option>');
                                        newSelect.append('<option value="dayview">day view</option>');
                                        newSelect.val(data['day_hour_view']);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        if ($('#TypicalTimeTrendM').find(":selected").val() == "Yes" && $('#TrendTypeM').find(":selected").val() == "dayHour"){
                                            newLabel.show();
                                            newInnerDiv.show(); 
                                            newSelect.show();                                    
                                        }else{
                                            $('#dayHourViewL').hide();
                                            $('#dayHourView').hide();
                                            
                                        }    
                                        
                                        
                                        
                                        //Parametri specifici del widget
                                        if(styleParamsRaw !== null) 
                                        {
                                            $("#xAxisDatasetM").val(styleParameters.xAxisDataset);
                                            $("#rowsLabelsFontSizeM").val(styleParameters.rowsLabelsFontSize);
                                            $("#rowsLabelsFontColorM").val(styleParameters.rowsLabelsFontColor);
                                            $("#widgetRowsLabelsFontColorM").css("background-color", styleParameters.rowsLabelsFontColor);
                                            $("#widgetRowsLabelsFontColorM").parent().parent().colorpicker({color: styleParameters.rowsLabelsFontColor, format: "rgba"});
                                            $("#colsLabelsFontSizeM").val(styleParameters.colsLabelsFontSize);
                                            $("#colsLabelsFontColorM").val(styleParameters.colsLabelsFontColor);
                                            $("#widgetColsLabelsFontColorM").css("background-color", styleParameters.colsLabelsFontColor);
                                            $("#widgetColsLabelsFontColorM").parent().parent().colorpicker({color: styleParameters.colsLabelsFontColor, format: "rgba"});
                                            $("#dataLabelsFontSizeM").val(styleParameters.dataLabelsFontSize);
                                            $("#dataLabelsFontColorM").val(styleParameters.dataLabelsFontColor);
                                            $("#widgetDataLabelsFontColorM").css("background-color", styleParameters.dataLabelsFontColor);
                                            $("#widgetDataLabelsFontColorM").parent().parent().colorpicker({color: styleParameters.dataLabelsFontColor, format: "rgba"});
                                            $("#legendFontSizeM").val(styleParameters.legendFontSize);
                                            $("#legendFontColorM").val(styleParameters.legendFontColor);
                                            $("#widgetLegendFontColorM").css("background-color", styleParameters.legendFontColor);
                                            $("#widgetLegendFontColorM").parent().parent().colorpicker({color: styleParameters.legendFontColor, format: "rgba"});
                                            $("#barsColorsSelectM").val(styleParameters.barsColorsSelect);
                                            $("#chartTypeM").val(styleParameters.chartType);
                                            $("#dataLabelsM").val(styleParameters.dataLabels);
                                            $("#lineWidthM").val(styleParameters.lineWidth);
                                            $("#alrLookM").val(styleParameters.alrLook);
                                            $("#xAxisLabel").val(styleParameters.xAxisLabel);
                                            $("#yAxisLabel").val(styleParameters.yAxisLabel);
                                        }

                                        //Contenitore per tabella dei colori
                                        barsColorsTableContainerM = $('<div id="barsColorsTableContainerM" class="row rowCenterContent"></div>');
                                        $("#specificParamsM").append(barsColorsTableContainerM);

                                        function updateWidgetBarSeriesColorsM(e, params)
                                        {
                                            var newColor = $(this).colorpicker('getValue');
                                            var index = parseInt($(this).parents('tr').index() - 1);
                                            colorsArray[index] = newColor;
                                            $("#barsColorsM").val(JSON.stringify(colorsArray));
                                        }

                                        colorsTable = $("<table class='table table-bordered table-condensed thrRangeTable'><tr><td>Series</td><td>Color</td></tr></table>");
                                        if (series) {
                                            for (var i in rowParamsArray) {
                                                newRow = $('<tr></tr>');
                                                newCell = $('<td>' + rowParamsArray[i].metricName + '</td>');
                                                newRow.append(newCell);
                                                newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                newRow.append(newCell);
                                                //Se l'attuale impostazione è per colori automatici, costruiamo JSON e tabella GUI con impostazioni di default, altrimenti con colori da DB
                                                if (styleParameters.barsColorsSelect === 'auto') {
                                                    newRow.find('div.colorPicker').colorpicker({
                                                        color: defaultColorsArray[i % 10],
                                                        format: "rgba"
                                                    });
                                                    colorsArray.push(defaultColorsArray[i % 10]);
                                                } else {
                                                    newRow.find('div.colorPicker').colorpicker({
                                                        color: styleParameters.barsColors[i],
                                                        format: "rgba"
                                                    });
                                                    colorsArray.push(styleParameters.barsColors[i]);
                                                }

                                                newRow.find('div.colorPicker').on('changeColor', updateWidgetBarSeriesColorsM);
                                                colorsTable.append(newRow);
                                            }
                                        }

                                        $("#barsColorsM").val(JSON.stringify(colorsArray));
                                        $('#barsColorsTableContainerM').append(colorsTable);

                                        //Per prima visualizzazione in edit
                                        if($('#barsColorsSelectM').val() === "manual")
                                        {
                                            $('#barsColorsTableContainerM').show();
                                        }
                                        else
                                        {
                                            $('#barsColorsTableContainerM').hide();
                                        }

                                        if (rowParamsArray) {   // For NEW wdgetCurvedLineSeries Only
                                            //Nuova riga
                                            //Contenitore per tabella delle query
                                            var editMultiSeriesQueryTableContainer = $('<div id="editMultiSeriesQueryTableContainer" class="row rowCenterContent"></div>');
                                            var editMultiSeriesQueryTable = $("<table id='editMultiSeriesQueryTable' data-widgetType='curvedLineSeries' class='table table-bordered table-condensed thrRangeTable'><col style='width:100px'><col style='width:136px'><col style='width:50px'><col style='width:76px'><col style='width:30px'><col style='width:25px'><tr><td><br>Labels</td><td>Query, Query ID or URI <br>(Empty for Dynamic Data from IOT-Apps)</td><td>Value Type<br>(Mandatory only for MyKPI & Sensor)</td><td><br>Color</td><td id='seconYAx'><br>Y-Axis</td><td><a href='#'><i class='fa fa-plus' style='font-size:24px;color:#337ab7'></i></a></td></tr></table>");
                                            editMultiSeriesQueryTableContainer.append(editMultiSeriesQueryTable);
                                            $("#specificParamsM").append(editMultiSeriesQueryTableContainer);

                                    //    editGisParameters.queries.sort(compareJsonElementsByKeyValues('rowOrder'));
                                    //    var allIcons = getIconsPool();
                                        
                                            for (var i = 0; i < rowParamsArray.length; i++) {
                                                newTableRow = $('<tr></tr>');

                                                var placeholderStr = "";
                                                /*  if (styleParameters.editDeviceLabels != null) {
                                                      placeholderStr = styleParameters.editDeviceLabels[i];
                                                  } else {
                                                      placeholderStr = deviceLabels[i];
                                                  }*/
                                                //   placeholderStr = rowParamsArray[i].metricName;
                                                if (rowParamsArray[i].label) {
                                                    placeholderStr = rowParamsArray[i].label;
                                                } else {
                                                    placeholderStr = rowParamsArray[i].metricName + ' - ' + rowParamsArray[i].smField;
                                                }

                                                // Labels CELL
                                                newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="labels"></a></td>');
                                                newTableCell.find('a').editable({
                                                    emptytext: "Empty",
                                                    display: function (value, response) {
                                                        if (value.length > 30) {
                                                            $(this).html(value.substring(0, 30) + "...");
                                                        } else {
                                                            $(this).html(value);
                                                        }
                                                    },
                                                    //    value: rowParamsArray[i].metricName
                                                    value: placeholderStr
                                                });
                                                newTableRow.append(newTableCell);

                                                // Query ID or URI CELL
                                                newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="queryIDUrl"></td>');
                                                newTableCell.find('a').editable({
                                                    emptytext: "Empty",
                                                    display: function (value, response) {
                                                        if (value.length > 45) {
                                                            $(this).html(value.substring(0, 45) + "...");
                                                        } else {
                                                            $(this).html(value);
                                                        }
                                                    },
                                                    value: rowParamsArray[i].serviceUri
                                                });
                                                newTableRow.append(newTableCell);

                                                // High Level Type CELL
                                                /*    newTableCell = $('<td><select data-param="hlt" class="form-control"></select></td>');
                                                    newTableCell.find('select').append('<option value="Sensor">Sensor</option>');
                                                    newTableCell.find('select').append('<option value="MyKPI">MyKPI</option>');
                                                    newTableCell.find('select').append('<option value="Dynamic">Dynamic</option>');
                                                    newTableRow.append(newTableCell);
                                                    newTableCell.find('select').val(rowParamsArray[i].metricHighLevelType);
                                                    newTableCell.find('select').on('change', editMultiSeriesUpdateParams);*/

                                                // Value Type CELL
                                                newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="valueType"></td>');
                                                newTableCell.find('a').editable({
                                                    emptytext: "Empty",
                                                    display: function (value, response) {
                                                        if (value.length > 12) {
                                                            $(this).html(value.substring(0, 12) + "...");
                                                        } else {
                                                            $(this).html(value);
                                                        }
                                                    },
                                                    value: rowParamsArray[i].smField
                                                });
                                                newTableRow.append(newTableCell);

                                                function updateWidgetBarSeriesColorsM(e, params) {
                                                    var newColor = $(this).colorpicker('getValue');
                                                    var index = parseInt($(this).parents('tr').index() - 1);
                                                    colorsArray[index] = newColor;
                                                    $("#barsColorsM").val(JSON.stringify(colorsArray));
                                                }

                                                newTableCell = $('<td><div class="input-group colorPicker" data-param="lineColor"><input type="text" class="input form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                newTableRow.append(newTableCell);
                                                /*  if (styleParameters.barsColorsSelect === 'auto') {
                                                      newTableRow.find('div.colorPicker').colorpicker({
                                                          color: defaultColorsArray[i % 10],
                                                          format: "rgba"
                                                      });
                                                      colorsArray.push(defaultColorsArray[i % 10]);
                                                  } else {*/
                                                newTableRow.find('div.colorPicker').colorpicker({
                                                    color: styleParameters.barsColors[i],
                                                    format: "rgba"
                                                });
                                                colorsArray.push(styleParameters.barsColors[i]);
                                                //   }

                                                // NO UPDATE QUI
                                                //    newTableRow.find('div.colorPicker').on('changeColor', updateWidgetBarSeriesColorsM);

                                                newTableRow.find('div.colorPicker').on('changeColor', editMultiSeriesUpdateParams);
                                                colorsTable.append(newTableRow);
                                                newTableRow.append(newTableCell);
                                                /*   newTableRow.find('div.colorPicker').colorpicker({
                                                       color: editGisParameters.queries[i].color1,
                                                       format: "rgba"
                                                   });
                                                   newTableRow.find('div.colorPicker').on('hidePicker', editGisUpdateParams);

                                                   newTableCell = $('<td><select data-param="targets" class="form-control" multiple></select></td>');
                                                   newTableRow.append(newTableCell);*/
												                                                   
                                                
                                                // Secondary Y Axis Choice
                                                newTableCell = $('<td class="secYAxTd"><select data-param="secYAxChoice" class="form-control"></select></td>');
                                                newTableCell.find('select').append('<option value="primary">1 - Left</option>');
                                                newTableCell.find('select').append('<option value="secondary">2 - Right</option>');
                                                newTableRow.append(newTableCell);
                                                if (rowParamsArray[i].secYAx) {
                                                    newTableCell.find('select').val(rowParamsArray[i].secYAx);
                                                } else {
                                                    newTableCell.find('select').val("primary");
                                                }
                                                newTableCell.find('select').on('change', editMultiSeriesUpdateParams);

                                                newTableCell = $('<td><a><i class="fa fa-close" style="font-size:24px;color:red"></i></a></td>');
                                                newTableCell.find('i').click(delMultiSeriesQueryM);
                                                newTableRow.append(newTableCell);
                                                newTableRow.find('a.toBeEdited').on('save', editMultiSeriesUpdateParams);
                                                $("#editMultiSeriesQueryTable").append(newTableRow);
                                            }
                                        }

                                        // Nuove righe (labels per i devices)
                                    /*    for (var n = 0; n < deviceLabels.length; n++) {
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="deviceLabelsM" class="col-md-1 control-label">Device #' + (n+1).toString() + ' Label</label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            var placeholderStr = "";
                                            if (styleParameters.editDeviceLabels != null) {
                                                placeholderStr = styleParameters.editDeviceLabels[n];
                                            } else {
                                                placeholderStr = deviceLabels[n];
                                            }
                                            //    newInput = $('<input type="text" class="form-control" id="deviceLabelsM_' + n + '" name="deviceLabelsM_' + n + '" placeholder="' + placeholderStr + '">');
                                            newInput = $('<input type="text" class="form-control" id="deviceLabelsM_' + n + '" name="deviceLabelsM_' + n + '" value = "' + placeholderStr + '">');
                                            //    newInput = $('<input type="text" class="form-control" id="deviceLabelsM_' + n + '" name="deviceLabelsM" required placeholder="' + deviceLabels[n] + '">');
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newLabel.show();
                                            newInnerDiv.show();
                                            newInput.show();
                                        }*/
										//Nuova Riga - CalendarM
										newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="calendarM" class="col-md-1 control-label"><?php echo _("Show Calendar Button"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newSelect = $('<select class="form-control" id="calendarM" name="calendarM">');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newSelect.val("value");
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
										//console.log('CalendarM: '+styleParameters.calendarM);
										$("#calendarM").val(styleParameters.calendarM);

                                        if ("<?= $_SESSION['loggedRole'] ?>" == "RootAdmin") {
                                            newLabel = $('<label for="exportM" class="col-md-1 control-label"><?php echo _("Export Chart Data"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-2"></div>');
                                            newSelect = $('<select class="form-control" id="exportM" name="exportM">');
                                            newSelect.append('<option value="enabled"><?php echo _("Enabled"); ?></option>');
                                            newSelect.append('<option value="disabled"><?php echo _("Disabled"); ?></option>');
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newLabel.show();
                                            newInnerDiv.show();
                                            newSelect.show();
                                            $("#exportM").val(styleParameters.exportM);
                                        }

										//
                                        //Codice di creazione soglie
                                        //Nuova riga
                                        //Set thresholds
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="alrThrSelM" class="col-md-1 control-label"><?php echo _("Set thresholds"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newSelect = $('<select class="form-control" id="alrThrSelM" name="alrThrSelM" required>');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        
                                        //Threshold target select - Questa select viene nascosta o mostrata a seconda che nella "Set thresholds" si selezioni yes o no.
                                        newLabel = $('<label for="alrAxisSelM" class="col-md-1 control-label"><?php echo _("Thresholds target set"); ?></label>');
                                        newSelect = $('<select class="form-control" id="alrAxisSelM" name="alrAxisSelM"></select>');
                                        if($("#xAxisDatasetM").val() === series.firstAxis.desc)
                                        {
                                            //No trasposizione
                                            newSelect.append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                        }
                                        else
                                        {
                                            //Trasposizione
                                            newSelect.append("<option value='" + series.secondAxis.desc + "'>" + series.secondAxis.desc + "</option>");
                                        }
                                        newSelect.val(-1);
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();
                                        newSelect.hide();
                                        
                                        //Nuova riga
                                        //Threshold field select
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="alrFieldSelM" class="col-md-1 control-label"><?php echo _("Thresholds target field"); ?></label>');
                                        newSelect = $('<select class="form-control" id="alrFieldSelM" name="alrFieldSelM">');
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();
                                        newSelect.hide();
                                        
                                        //Threshold look&feel
                                        newLabel = $('<label for="alrLookM" class="col-md-1 control-label">Thresholds look&feel</label>');
                                        newSelect = $('<select class="form-control" id="alrLookM" name="alrLookM">');
                                        newSelect.append('<option value="none">Tooltip only</option>');
                                        newSelect.append('<option value="lines">Lines</option>');
                                        newSelect.append('<option value="areas">Background areas</option>');
                                        newSelect.val(styleParameters.alrLook);
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();
                                        newSelect.hide();
                                        
                                        //Contenitore per tabella delle soglie
                                        addWidgetRangeTableContainerM = $('<div id="addWidgetRangeTableContainerM" class="row rowCenterContent"></div>');
                                        $("#specificParamsM").append(addWidgetRangeTableContainerM);
                                        addWidgetRangeTableContainerM.hide();
                                        
                                        //Listener per settaggio/desettaggio soglie relativo alla select "Set thresholds"
                                        $('#alrThrSelM').change(alrThrFlagMListener);
                                        
                                        if(currentParams === null)
                                        {
                                            $('#alrThrSelM').val("no");
                                            $("label[for='alrAxisSelM']").hide();
                                            $('#alrAxisSelM').val(-1);
                                            $('#alrAxisSelM').hide();
                                        //    $('#parametersM').val('');
                                            $('#parametersM').val(rowParams);
                                        }
                                        else
                                        {
                                            //ESPOSIZIONE DEI CAMPI
                                            $('#alrThrSelM').val("yes");
                                            $('#alrAxisSelM').val(currentParams.thresholdObject.target);
                                            $("label[for='alrAxisSelM']").show();
                                            $('#alrAxisSelM').parent().show();
                                            $('#alrAxisSelM').show();
                                            $("label[for='alrFieldSelM']").show();
                                            $('#alrFieldSelM').parent().show();
                                            $('#alrFieldSelM').show();
                                            $("label[for='alrLookM']").show();
                                            $('#alrLookM').parent().show();
                                            $('#alrLookM').show();
                                            $('#alrLookM').val(styleParameters.alrLook);
                                            //POPOLAMENTO DELLA SELECT DEI CAMPI
                                            alrAxisSelMListener();
                                            $('#addWidgetRangeTableContainerM').show();
                                            $('#parametersM').val(JSON.stringify(currentParams));
                                            //Listener per settaggio/desettaggio campi in base ad asse selezionato
                                            $('#alrAxisSelM').change(alrAxisSelMListener);
                                            //Listener per selezione campo
                                            $('#alrFieldSelM').change(alrFieldSelMListener);
                                        }
                                        $("#editMultiSeriesQueryTable i.fa-plus").click(addMultiSeriesQueryM);
					$('#TypicalTimeTrendM').on('change', function(){
                                            switch ($(this).find(":selected").val()){ 
                                                case "No":
                                                    $('#TrendTypeM').empty();
                                                    $('#ReferenceDateM').val("");
                                                    $('#TTTDate').empty();
                                                    $('#dayHourView').hide();
                                                    $('#dayHourViewL').hide();
                                                    $('#dayHourView').empty();
                                                    break;
                                                case "Yes":
                                                    $('#TrendTypeM').empty();
                                                    $('#TrendTypeM').append('<option value="dayHour">Day hour</option>');
                                                    $('#TrendTypeM').append('<option value="monthDay">Month day</option>');
                                                    $('#TrendTypeM').append('<option value="monthWeek">Month week</option>');
                                                    $('#TrendTypeM').val('');
                                                    break;
                                            }
                                        });
                                        
                                        $('#TrendTypeM').on('change', function(){
                                            switch ($(this).find(":selected").val()){ 
                                                case "dayHour":
                                                    $('#dayHourView').empty();
                                                    $('#dayHourView').append('<option value="weekview">week view</option>');
                                                    $('#dayHourView').append('<option value="dayview">day view</option>');
                                                    $('#dayHourView').show();  
                                                    $('#dayHourViewL').show();
                                                    break;
                                                default:
                                                    $('#dayHourView').hide();
                                                    $('#dayHourViewL').hide();
                                                    $('#dayHourView').empty();
                                                    break;
                                            }
                                        });
                                        
                                        $('.TypicalTimetrendC').on('change', function(){
                                            $('#TTTDate').empty();
                                            $.ajax({
                                                url: "../controllers/getWidgetParams.php",
                                                type: "GET",
                                                data: {
                                                    widgetName: name_widget_m
                                                },
                                                async: false,
                                                dataType: 'json',
                                                success: function (widgetData)
                                                {
                                                    $rowParameters = JSON.parse(widgetData.params.rowParameters);
                                                    dataOriginV = JSON.stringify($rowParameters[0]);
                                                    if ($('#TypicalTimeTrendM').val() == 'Yes' && $('#TrendTypeM').val() != '' && $('#TrendTypeM').val() != null && $('#ReferenceDateM').val() != '')
                                                    { 
                                                         
                                                    $.ajax({
                                                        url: "../controllers/aggregationSeriesProxy.php",
                                                        type: "POST",
                                                        data:
                                                        {
                                                            dataOrigin: dataOriginV,
                                                            index: 0,
                                                            timeRange: null,
                                                            field: $rowParameters[0].smField,
                                                            upperTime: null,//"2021-02-19T09:20:00",
                                                            typicaltrend: $('#TypicalTimeTrendM').val(),
                                                            trendtype: $('#TrendTypeM').val(), 
                                                            trenddate: $('#ReferenceDateM').val() 
                                                        },
                                                        async: false,
                                                        dataType: 'json',
                                                        success: function (data1)
                                                        {
                                                            if (IsJsonString(data1.data)) {
                                                                $arrayttt = JSON.parse(data1.data);
                                                                if ($arrayttt != null) {
                                                                    for (var m = 0; m < $arrayttt.length; m++) {
                                                                        $('#TTTDate').append('<option value="&from=' + $arrayttt[m].from + '&to=' + $arrayttt[m].to + '|&computationType=' + $arrayttt[m].computationType + '">' + $arrayttt[m].from + ' --> ' + $arrayttt[m].to + '(' + $arrayttt[m].computationType + ')' + '</option>');
                                                                    }
                                                                }
                                                            }
                                                        },error: function (errorData)
                                                        {
                                                            Data1 = null;
                                                            console.log("Error in data retrieval");
                                                            console.log(JSON.stringify(errorData));
                                                        }
                                                    });}
                                                }                                        
                                            });
                                        });

                                        if ($('#secondaryYAxisM').val() == "yes") {
                                            $('#seconYAx').show();
                                            $('.secYAxTd').show();
                                        } else {
                                            $('#seconYAx').hide();
                                            $('.secYAxTd').hide();
                                        }
										$.ajax({
                                                url: "../controllers/getTrustedUsers.php",
                                                data: {

                                                },
                                                type: "POST",
                                                async: true,
                                                dataType: 'json',
                                                success: function (data) {
                                                    if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
                                                        //Nuova riga
														//console.log('TRUSTED');
                                                        //Source Selection
                                                        newFormRow = $('<div class="row"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                                        newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
                                                        newSelect.append('<option value="no">no</option>');
                                                        newSelect.append('<option value="ckeditor">yes</option>');
                                                        newInnerDiv.append(newSelect);
                                                        newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        newLabel.show();
                                                        newInnerDiv.show();
                                                        newSelect.show();
                                                        $('#enableCKEditor').val(styleParameters.enableCKEditor);

                                                        //Nuova riga Tab Destro: CKEDITOR
                                                        //Modalità del widget (none, map, gis, link esterno)
                                                        newFormRow = $('<div class="row" id="ck_editor"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-12"></div>');
                                                        newBox = $('<div id="widgetEditor">');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
                                                        newBox.append('<?= _("Here you can insert Javascript code to be executed in the widget. Please save your script by clicking on the save button on the bottom.")?>');
                                                        newBox.append('</div></div>');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
                                                        newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
                                                        newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
                                                        newBox.append('</div></div></div>');
                                                        newInnerDiv.append(newBox);
                                                        //newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        //newLabel.show();
                                                        newInnerDiv.show();
                                                        //newInput.show();
                                                        $('#ck_editor').hide();

                                                        var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
                                                            allowedContent: true,
                                                            language: 'en',
                                                            contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
                                                            width: '100%'
                                                        });
														
														if ($('#enableCKEditor') != null && $('#enableCKEditor').val() == "ckeditor") {
															$('#ck_editor').show();
                                                            // if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
                                                            if (code != null && code != "null") {
                                                                var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                            } else {
                                                                var codeForCKEditor = $('<div>').text(prepareCkEditorTemplate(code), connections).html();
                                                            }
                                                            var text_ck_area = document.createElement("text_ck_area");
                                                            text_ck_area.innerHTML = codeForCKEditor;
                                                            var newInfoDecoded = text_ck_area.innerText;
                                                            //    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
                                                            CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                            //}
														}

                                                        $('#enableCKEditor').change(function () {
                                                            if ($('#enableCKEditor').val() === "ckeditor") {
                                                                $('#ck_editor').show();
                                                                //if (rowParams.substring(0, 8) != "https://" && rowParams.substring(0, 7) != "http://" && rowParams.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                                //$("#parametersM").val('{"mode": "ckeditor"}');
                                                                
                                                            } else {
                                                                $('#ck_editor').hide();
                                                                // $("#parametersM").val('');
                                                                
                                                            }
                                                        });

                                                        $('#sourceSelectionSaveBtn').click(function () {
                                                            var button = $(this);
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').show();
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');

                                                            var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();
                                                            /*if (newInfo.trim() === '') {
                                                                newInfo = null;
                                                            }   */

                                                            $.ajax({
                                                                url: "../controllers/updateWidget.php",
                                                                data: {
                                                                    action: "updateCkEditor",
                                                                    widgetName: name_widget_m,
                                                                    //    newText: newInfoDecoded
                                                                    newText: newInfo
                                                                },
                                                                type: "POST",
                                                                async: true,
                                                                dataType: 'json',
                                                                success: function (data) {
                                                                    if (data.detail === 'Ok') {
                                                                        alert('Saved!');
                                                                    } else {
                                                                        alert('Error');
                                                                    }
                                                                },
                                                                error: function (errorData) {
                                                                    alert('Error');
                                                                }
                                                            });
                                                        });
                                                    }
                                                },
                                                error: function (errorData) {
                                                    console.log('Error in retrieving Trusted Users.');
                                                }
                                            });
										//////////////////////////////////	

                                        break;

                                        case "widgetCalendar":
                                            var thrTables1 = new Array();
                                            var thrTables2 = new Array();
                                            var thrSeries, i, j, k, min, max, color, newTableRow, newTableCell, currentFieldIndex, currentSeriesIndex, colorsTable, newRow, newCell, newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan, addWidgetRangeTableContainer, barsColorsTableContainerM = null;
                                            var defaultColorsArray = ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'];
                                            var colorsArray = new Array();
                                            var metricId = $('#metricWidgetM').val();
                                            var metricData = getMetricData(metricId);
                                            if (metricData.data.length != 0 && (serviceUri == null || serviceUri == "")) {
                                                var seriesString = metricData.data[0].commit.author.series;
                                                var series = jQuery.parseJSON(seriesString);
                                            } else {
                                                var seriesDataArray = [];
                                                var seriesString = "";
                                                var series = null;
                                                var rowParamsArray = JSON.parse(rowParams);
                                                if (serviceUri) {
                                                    series = jQuery.parseJSON(serviceUri);
                                                } else {
                                                    for (var i = 0; i < rowParamsArray.length; i++) {
                                                        metricLabels = getMetricLabelsForBarSeries(rowParamsArray);
                                                        deviceLabels = getDeviceLabelsForBarSeries(rowParamsArray);
                                                        let mappedSeriesDataArray = buildBarSeriesArrayMap(seriesDataArray);
                                                        series = serializeDataForSeries(metricLabels, deviceLabels);
                                                    }
                                                }
                                            }

                                            removeWidgetProcessGeneralFields("editWidget");

                                            /*var metricLabels = [];
                                            var deviceLabels = [];

                                            if (rowParamsArray) {
                                                if (!serviceUri) {
                                                    // Caso New curvedLineSeries primo istanziamento
                                                    for (n = 0; n < rowParamsArray.length; n++) {
                                                        if (!metricLabels.includes(rowParamsArray[n].smField)) {
                                                            metricLabels.push(rowParamsArray[n].smField);
                                                        }

                                                        if (!deviceLabels.includes(rowParamsArray[n].metricName)) {
                                                            deviceLabels.push(rowParamsArray[n].metricName);
                                                        }
                                                    }
                                                } else {
                                                    deviceLabels = series.secondAxis.labels;
                                                }
                                            }*/

                                            //Funzione di settaggio dei globals per il file dashboard_configdash.js
                                            setGlobals(currentParams, thrTables1, thrTables2, series, $('#select-widget-m').val());

                                            //Costruzione THRTables dai parametri provenienti da DB (vuote se non ci sono soglie per quel campo, anche nel caso di nessuna soglia settata in assoluto
                                            buildThrTablesForEditWidget();

                                            //Rimozione eventuali campi del subform general per widget process
                                            removeWidgetProcessGeneralFields("editWidget");

                                            setEditMultiSeriesParameters(rowParamsArray);

                                            if(styleParamsRaw !== null) {
                                                styleParameters = JSON.parse(styleParamsRaw);
                                            }

                                            $("label[for='inputComuneWidgetM']").css("display", "");
                                            $("label[for='inputComuneWidgetM']").text("Context");
                                            $('#link_help_modal-add-widget-m').css("display", "");
                                            $('#inputComuneWidgetM').attr('disabled', true);
                                            $("label[for='inputTitleWidgetM']").html("Title");
                                            $("label[for='inputColorWidgetM']").html("Background color");
                                            $('#inputTitleWidgetM').attr('disabled', false);
                                            $('#select-frameColor-Widget-m').attr('disabled', false);
                                            $('#select-frameColor-Widget-m').prop('required', true);
                                            $('#select-IntTemp-Widget-m').attr('disabled', true);
                                            $('#select-IntTemp-Widget-m').prop('required', false);
                                            $('#inputFreqWidgetM').prop('disabled', false);
                                            $("#urlWidgetM").prop('disabled', false);
                                            $('#inputFontSizeM').prop('required', true);
                                            $('#inputFontSizeM').prop('disabled', false);
                                            $('#inputFontColorM').prop('required', true);
                                            $('#inputFontColorM').prop('disabled', false);
                                            $('#urlWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').prop('required', true);
                                            $('#inputUdmWidgetM').prop("required", false);
                                            $('#inputUdmWidgetM').attr("disabled", true);
                                            $('#inputUdmWidgetM').val("");
                                            $('#inputUdmPositionM').prop("required", false);
                                            $('#inputUdmPositionM').attr("disabled", true);
                                            $('#inputUdmPositionM').val(-1);

                                            //RIMOZIONE CAMPI PER TUTTI GLI ALTRI WIDGET
                                            $('#specificParamsM .row').remove();

                                            //Visualizzazione campi specifici per questo widget

                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);

                                            newLabel = $('<label for="meanSum" class="col-md-1 control-label">Operation</label>');
                                            newInnerDiv = $('<div class="col-md-2"></div>');
                                            newSelect = $('<select class="form-control" id="meanSum" name="meanSum" required>');
                                            newSelect.append('<option value="sum">Sum</option>');
                                            newSelect.append('<option value="mean">Average</option>');

                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newLabel.show();
                                            newInnerDiv.show();
                                            newSelect.show();

                                            $("#meanSum").val(styleParameters.meanSum);

                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);

                                            newLabel = $('<label for="calendarViewMode" class="col-md-1 control-label">View</label>');
                                            newInnerDiv = $('<div class="col-md-2"></div>');
                                            newSelect = $('<select class="form-control" id="calendarViewMode" name="calendarViewMode" required>');
                                            newSelect.append('<option value="monthly">Monthly</option>');
                                            newSelect.append('<option value="yearly">Yearly</option>');

                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newLabel.show();
                                            newInnerDiv.show();
                                            newSelect.show();

                                            $("#calendarViewMode").val(styleParameters.calendarViewMode);

                                            //Parametri specifici del widget
                                            /*if(styleParamsRaw !== null) {
                                                $("#xAxisDatasetM").val(styleParameters.xAxisDataset);
                                                $("#rowsLabelsFontSizeM").val(styleParameters.rowsLabelsFontSize);
                                                $("#rowsLabelsFontColorM").val(styleParameters.rowsLabelsFontColor);
                                                $("#widgetRowsLabelsFontColorM").css("background-color", styleParameters.rowsLabelsFontColor);
                                                $("#widgetRowsLabelsFontColorM").parent().parent().colorpicker({color: styleParameters.rowsLabelsFontColor, format: "rgba"});
                                                $("#colsLabelsFontSizeM").val(styleParameters.colsLabelsFontSize);
                                                $("#colsLabelsFontColorM").val(styleParameters.colsLabelsFontColor);
                                                $("#widgetColsLabelsFontColorM").css("background-color", styleParameters.colsLabelsFontColor);
                                                $("#widgetColsLabelsFontColorM").parent().parent().colorpicker({color: styleParameters.colsLabelsFontColor, format: "rgba"});
                                                $("#dataLabelsFontSizeM").val(styleParameters.dataLabelsFontSize);
                                                $("#dataLabelsFontColorM").val(styleParameters.dataLabelsFontColor);
                                                $("#widgetDataLabelsFontColorM").css("background-color", styleParameters.dataLabelsFontColor);
                                                $("#widgetDataLabelsFontColorM").parent().parent().colorpicker({color: styleParameters.dataLabelsFontColor, format: "rgba"});
                                                $("#legendFontSizeM").val(styleParameters.legendFontSize);
                                                $("#legendFontColorM").val(styleParameters.legendFontColor);
                                                $("#widgetLegendFontColorM").css("background-color", styleParameters.legendFontColor);
                                                $("#widgetLegendFontColorM").parent().parent().colorpicker({color: styleParameters.legendFontColor, format: "rgba"});
                                                $("#barsColorsSelectM").val(styleParameters.barsColorsSelect);
                                                $("#chartTypeM").val(styleParameters.chartType);
                                                $("#dataLabelsM").val(styleParameters.dataLabels);
                                                $("#lineWidthM").val(styleParameters.lineWidth);
                                                $("#alrLookM").val(styleParameters.alrLook);
                                                $("#xAxisLabel").val(styleParameters.xAxisLabel);
                                                $("#yAxisLabel").val(styleParameters.yAxisLabel);
                                            }*/

                                            //Contenitore per tabella dei colori
                                            barsColorsTableContainerM = $('<div id="barsColorsTableContainerM" class="row rowCenterContent"></div>');
                                            $("#specificParamsM").append(barsColorsTableContainerM);

                                        function updateWidgetBarSeriesColorsM(e, params) {
                                            var newColor = $(this).colorpicker('getValue');
                                            var index = parseInt($(this).parents('tr').index() - 1);
                                            colorsArray[index] = newColor;
                                            $("#barsColorsM").val(JSON.stringify(colorsArray));
                                        }

                                            colorsTable = $("<table class='table table-bordered table-condensed thrRangeTable'><tr><td>Series</td><td>Color</td></tr></table>");
                                            if (series) {
                                                for (var i in rowParamsArray) {
                                                    newRow = $('<tr></tr>');
                                                    newCell = $('<td>' + rowParamsArray[i].metricName + '</td>');
                                                    newRow.append(newCell);
                                                    newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                    newRow.append(newCell);
                                                    //Se l'attuale impostazione è per colori automatici, costruiamo JSON e tabella GUI con impostazioni di default, altrimenti con colori da DB
                                                    if (styleParameters.barsColorsSelect === 'auto') {
                                                        newRow.find('div.colorPicker').colorpicker({
                                                            color: defaultColorsArray[i % 10],
                                                            format: "rgba"
                                                        });
                                                        colorsArray.push(defaultColorsArray[i % 10]);
                                                    } else {
                                                        newRow.find('div.colorPicker').colorpicker({
                                                            color: styleParameters.barsColors[i],
                                                            format: "rgba"
                                                        });
                                                        colorsArray.push(styleParameters.barsColors[i]);
                                                    }

                                                    newRow.find('div.colorPicker').on('changeColor', updateWidgetBarSeriesColorsM);
                                                    colorsTable.append(newRow);
                                                }
                                            }

                                            $("#barsColorsM").val(JSON.stringify(colorsArray));
                                            $('#barsColorsTableContainerM').append(colorsTable);

                                            //Per prima visualizzazione in edit
                                            if($('#barsColorsSelectM').val() === "manual") {
                                                $('#barsColorsTableContainerM').show();
                                            } else {
                                                $('#barsColorsTableContainerM').hide();
                                            }

                                            if (rowParamsArray) {   // For NEW wdgetCurvedLineSeries Only
                                                //Nuova riga
                                                //Contenitore per tabella delle query
                                                var editMultiSeriesQueryTableContainer = $('<div id="editMultiSeriesQueryTableContainer" class="row rowCenterContent"></div>');
                                                var editMultiSeriesQueryTable = $("<table id='editMultiSeriesQueryTable' data-widgetType='calendar' class='table table-bordered table-condensed thrRangeTable'><col style='width:100px'><col style='width:136px'><col style='width:50px'><col style='width:76px'><col style='width:25px'><tr><td><br>Labels</td><td>Query ID or URI <br>(Empty for Dynamic Data from IOT-Apps)</td><td>Value Type<br>(Mandatory only for MyKPI & Sensor)</td><td><br>Color</td><td><a href='#'><i class='fa fa-plus' style='font-size:24px;color:#337ab7'></i></a></td></tr></table>");
                                                editMultiSeriesQueryTableContainer.append(editMultiSeriesQueryTable);
                                                $("#specificParamsM").append(editMultiSeriesQueryTableContainer);

                                                for (var i = 0; i < rowParamsArray.length; i++) {
                                                    newTableRow = $('<tr></tr>');

                                                    var placeholderStr = "";
                                                    if (rowParamsArray[i].label) {
                                                        placeholderStr = rowParamsArray[i].label;
                                                    } else {
                                                        placeholderStr = rowParamsArray[i].metricName + ' - ' + rowParamsArray[i].smField;
                                                    }

                                                    // Labels CELL
                                                    newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="labels"></a></td>');
                                                    newTableCell.find('a').editable({
                                                        emptytext: "Empty",
                                                        display: function (value, response) {
                                                            if (value.length > 30) {
                                                                $(this).html(value.substring(0, 30) + "...");
                                                            } else {
                                                                $(this).html(value);
                                                            }
                                                        },
                                                        value: placeholderStr
                                                    });
                                                    newTableRow.append(newTableCell);

                                                    // Query ID or URI CELL
                                                    newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="queryIDUrl"></td>');
                                                    newTableCell.find('a').editable({
                                                        emptytext: "Empty",
                                                        display: function (value, response) {
                                                            if (value.length > 45) {
                                                                $(this).html(value.substring(0, 45) + "...");
                                                            } else {
                                                                $(this).html(value);
                                                            }
                                                        },
                                                        value: rowParamsArray[i].serviceUri
                                                    });
                                                    newTableRow.append(newTableCell);

                                                    // Value Type CELL
                                                    newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="valueType"></td>');
                                                    newTableCell.find('a').editable({
                                                        emptytext: "Empty",
                                                        display: function (value, response) {
                                                            if (value.length > 12) {
                                                                $(this).html(value.substring(0, 12) + "...");
                                                            } else {
                                                                $(this).html(value);
                                                            }
                                                        },
                                                        value: rowParamsArray[i].smField
                                                    });
                                                    newTableRow.append(newTableCell);

                                                    function updateWidgetBarSeriesColorsM(e, params) {
                                                        var newColor = $(this).colorpicker('getValue');
                                                        var index = parseInt($(this).parents('tr').index() - 1);
                                                        colorsArray[index] = newColor;
                                                        $("#barsColorsM").val(JSON.stringify(colorsArray));
                                                    }

                                                    newTableCell = $('<td><div class="input-group colorPicker" data-param="lineColor"><input type="text" class="input form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                    newTableRow.append(newTableCell);
                                                    newTableRow.find('div.colorPicker').colorpicker({
                                                        color: styleParameters.barsColors[i],
                                                        format: "rgba"
                                                    });
                                                    colorsArray.push(styleParameters.barsColors[i]);

                                                    newTableRow.find('div.colorPicker').on('changeColor', editMultiSeriesUpdateParams);
                                                    colorsTable.append(newTableRow);
                                                    newTableRow.append(newTableCell);

                                                    newTableCell = $('<td><a><i class="fa fa-close" style="font-size:24px;color:red"></i></a></td>');
                                                    newTableCell.find('i').click(delMultiSeriesQueryM);
                                                    newTableRow.append(newTableCell);
                                                    newTableRow.find('a.toBeEdited').on('save', editMultiSeriesUpdateParams);
                                                    $("#editMultiSeriesQueryTable").append(newTableRow);
                                                }
                                            }

                                            //Codice di creazione soglie
                                            //Nuova riga
                                            //Set thresholds
                                            /*
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="alrThrSelM" class="col-md-1 control-label"><?php echo _("Set thresholds"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-2"></div>');
                                            newSelect = $('<select class="form-control" id="alrThrSelM" name="alrThrSelM" required>');
                                            newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                            newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newLabel.show();
                                            newInnerDiv.show();
                                            newSelect.show();

                                            //Threshold target select - Questa select viene nascosta o mostrata a seconda che nella "Set thresholds" si selezioni yes o no.
                                            newLabel = $('<label for="alrAxisSelM" class="col-md-1 control-label"><?php echo _("Thresholds target set"); ?></label>');
                                            newSelect = $('<select class="form-control" id="alrAxisSelM" name="alrAxisSelM"></select>');
                                            if($("#xAxisDatasetM").val() === series.firstAxis.desc) {
                                                //No trasposizione
                                                newSelect.append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                            } else {
                                                //Trasposizione
                                                newSelect.append("<option value='" + series.secondAxis.desc + "'>" + series.secondAxis.desc + "</option>");
                                            }
                                            newSelect.val(-1);
                                            newInnerDiv = $('<div class="col-md-2"></div>');
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newLabel.hide();
                                            newInnerDiv.hide();
                                            newSelect.hide();

                                            //Nuova riga
                                            //Threshold field select
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="alrFieldSelM" class="col-md-1 control-label"><?php echo _("Thresholds target field"); ?></label>');
                                            newSelect = $('<select class="form-control" id="alrFieldSelM" name="alrFieldSelM">');
                                            newInnerDiv = $('<div class="col-md-2"></div>');
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newLabel.hide();
                                            newInnerDiv.hide();
                                            newSelect.hide();

                                            //Threshold look&feel
                                            newLabel = $('<label for="alrLookM" class="col-md-1 control-label">Thresholds look&feel</label>');
                                            newSelect = $('<select class="form-control" id="alrLookM" name="alrLookM">');
                                            newSelect.append('<option value="none">Tooltip only</option>');
                                            newSelect.append('<option value="lines">Lines</option>');
                                            newSelect.append('<option value="areas">Background areas</option>');
                                            newSelect.val(styleParameters.alrLook);
                                            newInnerDiv = $('<div class="col-md-2"></div>');
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newLabel.hide();
                                            newInnerDiv.hide();
                                            newSelect.hide();

                                            //Contenitore per tabella delle soglie
                                            addWidgetRangeTableContainerM = $('<div id="addWidgetRangeTableContainerM" class="row rowCenterContent"></div>');
                                            $("#specificParamsM").append(addWidgetRangeTableContainerM);
                                            addWidgetRangeTableContainerM.hide();

                                            //Listener per settaggio/desettaggio soglie relativo alla select "Set thresholds"
                                            $('#alrThrSelM').change(alrThrFlagMListener);
                                            */

                                            if(currentParams === null) {
                                                $('#alrThrSelM').val("no");
                                                $("label[for='alrAxisSelM']").hide();
                                                $('#alrAxisSelM').val(-1);
                                                $('#alrAxisSelM').hide();
                                                $('#parametersM').val(rowParams);
                                            } else {
                                                //ESPOSIZIONE DEI CAMPI
                                                $('#alrThrSelM').val("yes");
                                                $('#alrAxisSelM').val(currentParams.thresholdObject.target);
                                                $("label[for='alrAxisSelM']").show();
                                                $('#alrAxisSelM').parent().show();
                                                $('#alrAxisSelM').show();
                                                $("label[for='alrFieldSelM']").show();
                                                $('#alrFieldSelM').parent().show();
                                                $('#alrFieldSelM').show();
                                                $("label[for='alrLookM']").show();
                                                $('#alrLookM').parent().show();
                                                $('#alrLookM').show();
                                                $('#alrLookM').val(styleParameters.alrLook);
                                                //POPOLAMENTO DELLA SELECT DEI CAMPI
                                                alrAxisSelMListener();
                                                $('#addWidgetRangeTableContainerM').show();
                                                $('#parametersM').val(JSON.stringify(currentParams));
                                                //Listener per settaggio/desettaggio campi in base ad asse selezionato
                                                $('#alrAxisSelM').change(alrAxisSelMListener);
                                                //Listener per selezione campo
                                                $('#alrFieldSelM').change(alrFieldSelMListener);
                                            }
                                            $("#editMultiSeriesQueryTable i.fa-plus").click(addMultiSeriesQueryM);
                                            break;

                                        case "widgetScatterSeries":
                                        //$("#inputComuneRowM").css("display", "");
                                        $("label[for='inputComuneWidgetM']").css("display", "");
                                        //$('#inputComuneWidgetM').css("display", "");
                                        //$("label[for='inputComuneWidgetM']").text("Context");
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-IntTemp-Widget-m').attr('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $("#urlWidgetM").prop('disabled', false);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#inputFontColorM').prop('disabled', false);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        //Parametri specifici del widget
                                        if(styleParamsRaw !== null) 
                                        {
                                            styleParameters = JSON.parse(styleParamsRaw);
                                            $("#rowsLabelsFontSizeM").val(styleParameters.rowsLabelsFontSize);
                                            $("#rowsLabelsFontColorM").val(styleParameters.rowsLabelsFontColor);
                                            $("#widgetRowsLabelsFontColorM").css("background-color", styleParameters.rowsLabelsFontColor);
                                            $("#widgetRowsLabelsFontColorM").parent().parent().colorpicker({color: styleParameters.rowsLabelsFontColor, format: "rgba"});
                                            $("#colsLabelsFontSizeM").val(styleParameters.colsLabelsFontSize);
                                            $("#colsLabelsFontColorM").val(styleParameters.colsLabelsFontColor);
                                            $("#widgetColsLabelsFontColorM").css("background-color", styleParameters.colsLabelsFontColor);
                                            $("#widgetColsLabelsFontColorM").parent().parent().colorpicker({color: styleParameters.colsLabelsFontColor, format: "rgba"});
                                            $("label[for='legendFontSizeM']").parent().show();
                                            $("#dataLabelsFontSizeM").val(styleParameters.dataLabelsFontSize);
                                            $("#dataLabelsFontColorM").val(styleParameters.dataLabelsFontColor);
                                            $("#widgetDataLabelsFontColorM").css("background-color", styleParameters.dataLabelsFontColor);
                                            $("#widgetDataLabelsFontColorM").parent().parent().colorpicker({color: styleParameters.dataLabelsFontColor, format: "rgba"});
                                            $("#legendFontSizeM").val(styleParameters.legendFontSize);
                                            $("#legendFontColorM").val(styleParameters.legendFontColor);
                                            $("#widgetLegendFontColorM").css("background-color", styleParameters.legendFontColor);
                                            $("#widgetLegendFontColorM").parent().parent().colorpicker({color: styleParameters.legendFontColor, format: "rgba"});
                                            $("#barsColorsSelectM").val(styleParameters.barsColorsSelect);
                                            $("#chartTypeM").val(styleParameters.chartType);
                                            $("#dataLabelsM").val(styleParameters.dataLabels);
                                            $("#dataLabelsRotationM").val(styleParameters.dataLabelsRotation);
                                        }
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        
                                        //RIMOZIONE CAMPI PER TUTTI GLI ALTRI WIDGET
                                        $('#specificParamsM .row').remove();
                                        
                                        //Visualizzazione campi specifici per questo widget
                                        $("label[for='rowsLabelsFontSizeM']").parent().show();
                                        $("label[for='rowsLabelsFontSizeM']").show();
                                        $("#rowsLabelsFontSizeM").show();

                                        $("label[for='rowsLabelsFontColorM']").show();
                                        $("#rowsLabelsFontColorM").show();
                                        //Questa falla con css sennò la mostra inline e non viene colorato!
                                        $("#widgetRowsLabelsFontColorM").css('display', 'block');

                                        $("label[for='colsLabelsFontSizeM']").parent().show();
                                        $("label[for='colsLabelsFontSizeM']").show();
                                        $("#colsLabelsFontSizeM").show();

                                        $("label[for='colsLabelsFontColorM']").show();
                                        $("#colsLabelsFontColorM").show();
                                        //Questa falla con css sennò la mostra inline e non viene colorato!
                                        $("#widgetColsLabelsFontColorM").css('display', 'block');
                                        
                                        $("label[for='dataLabelsFontSizeM']").parent().show();
                                        $("label[for='dataLabelsFontSizeM']").show();
                                        $("#dataLabelsFontSizeM").show();

                                        $("label[for='dataLabelsFontColorM']").show();
                                        $("#dataLabelsFontColorM").show();
                                        //Questa falla con css sennò la mostra inline e non viene colorato!
                                        $("#widgetDataLabelsFontColorM").css('display', 'block');
                                        $("#widgetDataLabelsFontColorM").colorpicker({color: '#000000', format: "rgba"});
                                        
                                        $("label[for='legendFontSizeM']").parent().show();
                                        $("label[for='legendFontSizeM']").show();
                                        $("#legendFontSizeM").show();

                                        $("label[for='legendFontColorM']").show();
                                        $("#legendFontColorM").show();
                                        //Questa falla con css sennò la mostra inline e non viene colorato!
                                        $("#widgetLegendFontColorM").css('display', 'block');
                                        
                                        $("label[for='barsColorsSelectM']").html("Markers colors");
                                        $("label[for='barsColorsSelectM']").parent().show();
                                        $("label[for='barsColorsSelectM']").show();
                                        $("#barsColorsSelectM").show();
                                        
                                        $("label[for='chartTypeM']").show();
                                        $("#chartTypeM").show();
                                        
                                        $("label[for='dataLabelsM']").parent().show();
                                        $("label[for='dataLabelsM']").show();
                                        $("#dataLabelsM").show();
                                        
                                        $("label[for='dataLabelsRotationM']").show();
                                        $("#dataLabelsRotationM").show();
                                        
                                        var metricId = $('#metricWidgetM').val();
                                        var metricData = getMetricData(metricId);
                                        var seriesString = metricData.data[0].commit.author.series;
                                        var series = jQuery.parseJSON(seriesString);
                                        var thrTables1 = new Array();
                                        var thrTables2 = new Array();
                                        var thrSeries = null;
                                        var i, j, k, min, max, color, newTableRow, newTableCell, currentFieldIndex, currentSeriesIndex = null;
                                        var colorsTable, newRow, newCell = null;
                                        var defaultColorsArray = ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'];
                                        var colorsArray = new Array();
                                        
                                        setGlobals(currentParams, thrTables1, thrTables2, series, $('#select-widget-m').val());
                                        
                                        function updateWidgetBarSeriesColorsM(e, params)
                                        {
                                            var newColor = $(this).colorpicker('getValue');
                                            var index = parseInt($(this).parents('tr').index() - 1);
                                            colorsArray[index] = newColor;
                                            $("#barsColorsM").val(JSON.stringify(colorsArray));
                                        }
                                        
                                        colorsTable = $("<table class='table table-bordered table-condensed thrRangeTable'><tr><td>Series</td><td>Color</td></tr></table>");
                                        for(var i in rowParamsArray)
                                        {
                                            newRow = $('<tr></tr>');
                                            newCell = $('<td>' + rowParamsArray[i].metricName + '</td>');
                                            newRow.append(newCell);
                                            newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                            newRow.append(newCell);
                                            //Se l'attuale impostazione è per colori automatici, costruiamo JSON e tabella GUI con impostazioni di default, altrimenti con colori da DB
                                            if(styleParameters.barsColorsSelect === 'auto')
                                            {
                                                newRow.find('div.colorPicker').colorpicker({color: defaultColorsArray[i%10], format: "rgba"});
                                                colorsArray.push(defaultColorsArray[i%10]);
                                            }
                                            else
                                            {
                                                newRow.find('div.colorPicker').colorpicker({color: styleParameters.barsColors[i], format: "rgba"});
                                                colorsArray.push(styleParameters.barsColors[i]);
                                            }
                                            
                                            newRow.find('div.colorPicker').on('changeColor', updateWidgetBarSeriesColorsM); 
                                            colorsTable.append(newRow);
                                        }
                                        
                                        $("#barsColorsM").val(JSON.stringify(colorsArray));
                                        
                                        $('#barsColorsTableContainerM').append(colorsTable);
                                        
                                        
                                        $('#barsColorsSelectM').change(function () 
                                        {
                                            if($('#barsColorsSelectM').val() === "manual")
                                            {
                                                $('#barsColorsTableContainerM').show();
                                            }
                                            else
                                            {
                                                $('#barsColorsTableContainerM').hide();
                                            }
                                        });
                                        
                                        //Per prima visualizzazione in edit
                                        $('#barsColorsSelectM').trigger("change"); 
                                        
                                        //Mostriamo il campo per settare o meno delle soglie
                                        $("label[for='alrThrFlagM']").parent().show();
                                        $("label[for='alrThrFlagM']").show();
                                        $('#alrThrFlagM').show();
                                        
                                        //Popolamento del select per gli assi
                                        $('#alrAxisSelM').empty();
                                        $('#alrAxisSelM').append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                        
                                        //Costruzione THRTables dai parametri provenienti da DB (vuote se non ci sono soglie per quel campo, anche nel caso di nessuna soglia settata in assoluto
                                        buildThrTablesForEditWidget();
                                        
                                        //Listener per settaggio/desettaggio soglie
                                        $('#alrThrFlagM').change(alrThrFlagMListener);
                                        
                                        //Listener per settaggio/desettaggio campi in base ad asse selezionato
                                        $('#alrAxisSelM').change(alrAxisSelMListener);
                                        
                                        //Listener per selezione campo
                                        $('#alrFieldSelM').change(alrFieldSelMListener);
                                        
                                        if(currentParams === null)
                                        {
                                            $('#alrThrFlagM').val("no");
                                            $('#alrAxisSelM').val(-1);
                                            $('#alrAxisSelM').hide();
                                            $("label[for='alrAxisSelM']").hide();
                                            $('#parametersM').val('');
                                        }
                                        else
                                        {
                                            //ESPOSIZIONE DEI CAMPI
                                            $('#alrThrFlagM').val("yes");
                                            $('#alrAxisSelM').val(currentParams.thresholdObject.target);
                                            $("label[for='alrFieldSelM']").parent().show();
                                            $('#alrAxisSelM').show();
                                            $("label[for='alrAxisSelM']").show();
                                            $('#alrFieldSelM').show();
                                            $("label[for='alrFieldSelM']").show();
                                            $("label[for='alrRangeColorM']").parent().show();
                                            $('#alrRangeColorM').show();
                                            $("label[for='alrRangeColorM']").show();
                                            $('#addWidgetRangeTableContainerM').show();
                                            
                                            //POPOLAMENTO DELLA SELECT COI CAMPI
                                            $('#alrAxisSelM').trigger("change");
                                            
                                            $('#parametersM').val(JSON.stringify(currentParams));
                                        }
                                        break;
            
                                    case "widgetBarSeries":
                                        var metricId = $('#metricWidgetM').val();
                                        var metricData = getMetricData(metricId);
                                        if (metricData.data.length != 0 && (serviceUri == null || serviceUri == "")) {
                                            var seriesString = metricData.data[0].commit.author.series;
                                            var series = jQuery.parseJSON(seriesString);
                                        } else {
                                            var seriesDataArray = [];
                                            var seriesString = "";
                                            var series = null;
                                            var rowParamsArray = JSON.parse(rowParams);
                                            if (serviceUri && IsJsonString(serviceUri)) {
                                                series = jQuery.parseJSON(serviceUri);
                                            } else {
                                                for (var i = 0; i < rowParamsArray.length; i++) {
                                                    let smUrl = "<?= $superServiceMapProxy ?>/api/v1/?serviceUri=" + rowParamsArray[i].metricId.split("serviceUri=")[1];
                                                    getSmartCitySensorValues(rowParamsArray, i, smUrl, null, false, function (extractedData) {

                                                        if (extractedData) {
                                                            seriesDataArray.push(extractedData);
                                                        } else {
                                                            console.log("Dati Smart City non presenti");
                                                            seriesDataArray.push(undefined);
                                                        }
                                                        //if (endFlag === true) {
                                                        // Alla fine quando si arriva all'ultimo record ottenuto dalle varie chiamate asincrone
                                                        if (rowParamsArray.length === seriesDataArray.length) {
                                                            let stopFlag = 1;
                                                            // DO FINAL SERIALIZATION
                                                            metricLabels = getMetricLabelsForBarSeries(rowParamsArray);
                                                            deviceLabels = getDeviceLabelsForBarSeries(rowParamsArray);
                                                            let mappedSeriesDataArray = buildBarSeriesArrayMap(seriesDataArray);
                                                            series = serializeSensorDataForBarSeries(mappedSeriesDataArray, metricLabels, deviceLabels);

                                                        }

                                                    });
                                                }
                                            }
                                        }
                                        var thrTables1 = new Array();
                                        var thrTables2 = new Array();
                                        var thrSeries,i, j, k, min, max, color, newTableRow, newTableCell, currentFieldIndex, currentSeriesIndex, colorsTable, newRow, newCell, newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan, addWidgetRangeTableContainer, barsColorsTableContainerM = null;
                                        var defaultColorsArray = ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'];
                                        var colorsArray = new Array();
                                        var metricLabels = [];
                                        var deviceLabels = [];

                                        if (rowParamsArray) {
                                            if (!serviceUri) {
                                                // Caso New BarSeries primo istanziamento
                                                for (n = 0; n < rowParamsArray.length; n++) {
                                                    if (!metricLabels.includes(rowParamsArray[n].metricType)) {
                                                        metricLabels.push(rowParamsArray[n].metricType);
                                                    }

                                                    if (!deviceLabels.includes(rowParamsArray[n].metricName)) {
                                                        deviceLabels.push(rowParamsArray[n].metricName);
                                                    }
                                                }
                                            } else {
                                                if (series.secondAxis.desc == "value name") {
                                                    deviceLabels = series.secondAxis.labels;
                                                } else {
                                                    deviceLabels = series.firstAxis.labels;
                                                }
                                            }
                                        }

                                        //Funzione di settaggio dei globals per il file dashboard_configdash.js
                                        setGlobals(currentParams, thrTables1, thrTables2, series, $('#select-widget-m').val());
                                        
                                        //Costruzione THRTables dai parametri provenienti da DB (vuote se non ci sono soglie per quel campo, anche nel caso di nessuna soglia settata in assoluto
                                        buildThrTablesForEditWidget();
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        if(styleParamsRaw !== null) 
                                        {
                                            styleParameters = JSON.parse(styleParamsRaw);
                                        }
                                        
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-IntTemp-Widget-m').attr('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $("#urlWidgetM").prop('disabled', false);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#inputFontColorM').prop('disabled', false);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        //RIMOZIONE CAMPI PER TUTTI GLI ALTRI WIDGET
                                        $('#specificParamsM .row').remove();

                                        //Group-by attribute
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="groupByAttrM" class="col-md-2 control-label">Group Bars by Attribute</label>');
                                        newInnerDiv = $('<div class="col-md-4"></div>');
                                        newSelect = $('<select class="form-control" id="groupByAttrM" name="groupByAttrM" required>');
                                    //    newSelect = $('<select class="form-control" id="groupByAttrM" name="groupByAttrM" required>');
                                        newSelect.append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                        newSelect.append("<option value='" + series.secondAxis.desc + "'>" + series.secondAxis.desc + "</option>");
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();

                                        newLabel = $('<label for="sortBarValuesM" id="sortBarValuesMLabel" class="col-md-2 control-label">Sort Bar Values</label>');
                                        newInnerDiv = $('<div class="col-md-3" id="sortBarValuesMCnt"></div>');
                                        newSelect = $('<select class="form-control" id="sortBarValuesM" name="sortBarValuesM"></select>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newSelect.append('<option value="ascendent">Ascendent</option>');
                                        newSelect.append('<option value="descendent">Descendent</option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();

                                        //Nuova riga
                                        //Rows labels font size
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="rowsLabelsFontSizeM" class="col-md-2 control-label"><?php echo _("Rows labels font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="rowsLabelsFontSizeM" name="rowsLabelsFontSizeM" required> ');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //Rows labels font color
                                        newLabel = $('<label for="rowsLabelsFontColorM" class="col-md-2 control-label"><?php echo _("Rows labels font color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="rowsLabelsFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="rowsLabelsFontColorM" name="rowsLabelsFontColorM" required><span class="input-group-addon"><i id="widgetRowsLabelsFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#rowsLabelsFontColorContainerM').show();
                                        $('#rowsLabelsFontColorM').show();
                                        $("#widgetRowsLabelsFontColorM").css('display', 'block');
                                        $("#widgetRowsLabelsFontColorM").parent().parent().parent().colorpicker({color: styleParameters.rowsLabelsFontColor, format: "rgba"});

                                        //Nuova riga
                                        //Cols labels font size
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="colsLabelsFontSizeM" class="col-md-2 control-label"><?php echo _("Cols labels font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="colsLabelsFontSizeM" name="colsLabelsFontSizeM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //Cols labels font color
                                        newLabel = $('<label for="colsLabelsFontColorM" class="col-md-2 control-label"><?php echo _("Cols labels font color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="colsLabelsFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="colsLabelsFontColorM" name="colsLabelsFontColorM" required><span class="input-group-addon"><i id="widgetColsLabelsFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#colsLabelsFontColorContainerM').show();
                                        $('#colsLabelsFontColorM').show();
                                        $("#widgetColsLabelsFontColorM").css('display', 'block');
                                        $("#widgetColsLabelsFontColorM").parent().parent().parent().colorpicker({color: styleParameters.colsLabelsFontColor, format: "rgba"});
                                        
                                        //Nuova riga
                                        //Data labels font size
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="dataLabelsFontSizeM" class="col-md-2 control-label"><?php echo _("Data labels font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="dataLabelsFontSizeM" name="dataLabelsFontSizeM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //Data labels font color
                                        newLabel = $('<label for="dataLabelsFontColorM" class="col-md-2 control-label"><?php echo _("Data labels font color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="dataLabelsFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="dataLabelsFontColorM" name="dataLabelsFontColorM" required><span class="input-group-addon"><i id="widgetDataLabelsFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#dataLabelsFontColorContainerM').show();
                                        $('#dataLabelsFontColorM').show();
                                        $("#widgetDataLabelsFontColorM").css('display', 'block');
                                        $("#widgetDataLabelsFontColorM").parent().parent().parent().colorpicker({color: styleParameters.dataLabelsFontColor, format: "rgba"});
                                        
                                        //Nuova riga
                                        //Legend font size
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="legendFontSizeM" class="col-md-2 control-label"><?php echo _("Legend font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="legendFontSizeM" name="legendFontSizeM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //Legend font color
                                        newLabel = $('<label for="legendFontColorM" class="col-md-2 control-label">Legend font color</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="legendFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="legendFontColorM" name="legendFontColorM" required><span class="input-group-addon"><i id="widgetLegendFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#legendFontColorContainerM').show();
                                        $('#legendFontColorM').show();
                                        $("#widgetLegendFontColorM").css('display', 'block');
                                        $("#widgetLegendFontColorM").parent().parent().parent().colorpicker({color: styleParameters.legendFontColor, format: "rgba"});
                                        
                                        //Nuova riga
                                        //Bars colors
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="barsColorsSelectM" class="col-md-2 control-label">Bars colors and labels</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="barsColorsSelectM" name="barsColorsSelectM"></select>');
                                        newSelect.append('<option value="manual">Manual</option>');
                                        newSelect.append('<option value="auto">Automatic</option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        
                                        $('#barsColorsSelectM').change(function() 
                                        {
                                            if($('#barsColorsSelectM').val() === "manual")
                                            {
                                                $('#barsColorsTableContainerM').show();
                                            }
                                            else
                                            {
                                                $('#barsColorsTableContainerM').hide();
                                            }
                                        });

                                        //Chart type
                                        newLabel = $('<label for="chartTypeM" class="col-md-2 control-label">Chart type</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="chartTypeM" name="chartTypeM"></select>');
                                        newSelect.append('<option value="horizontal">Horizontal bars</option>');
                                        newSelect.append('<option value="horizontalStacked">Horizontal stacked bars</option>');
                                        newSelect.append('<option value="vertical">Vertical bars</option>');
                                        newSelect.append('<option value="verticalStacked">Vertical stacked bars</option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        
                                        $('#chartTypeM').change(function()
                                        {
                                            let elem = document.getElementById("sortBarValuesMCnt");
                                            let labelElem = document.getElementById("sortBarValuesMLabel");

                                            if($('#chartTypeM').val().includes("Stacked")) {
                                                elem.style.display = "none";
                                                labelElem.style.display = "none";
                                            } else {
                                                elem.style.display = "block";
                                                labelElem.style.display = "block";
                                            }
                                        });

                                        //Nuova riga
                                        //Data labels
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="dataLabelsM" class="col-md-2 control-label">Data labels</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="dataLabelsM" name="dataLabelsM">');
                                        newSelect.append('<option value="no">No data labels</option>');
                                        newSelect.append('<option value="value">Value only</option>');
                                        newSelect.append('<option value="full">Field name and value</option>');
                                        newSelect.val("value");
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();

                                        //Data labels rotation
                                        newLabel = $('<label for="dataLabelsRotation" class="col-md-2 control-label">Data labels rotation</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="dataLabelsRotation" name="dataLabelsRotation"> ');
                                        newSelect.append('<option value="horizontal">Horizontal</option>');
                                        newSelect.append('<option value="verticalAsc">Vertical ascending</option>');
                                        newSelect.append('<option value="verticalDesc">Vertical descending</option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        
                                        //Parametri specifici del widget
                                        if(styleParamsRaw !== null) 
                                        {
                                            $("#rowsLabelsFontSizeM").val(styleParameters.rowsLabelsFontSize);
                                            $("#rowsLabelsFontColorM").val(styleParameters.rowsLabelsFontColor);
                                            $("#widgetRowsLabelsFontColorM").css("background-color", styleParameters.rowsLabelsFontColor);
                                            $("#widgetRowsLabelsFontColorM").parent().parent().colorpicker({color: styleParameters.rowsLabelsFontColor, format: "rgba"});
                                            $("#colsLabelsFontSizeM").val(styleParameters.colsLabelsFontSize);
                                            $("#colsLabelsFontColorM").val(styleParameters.colsLabelsFontColor);
                                            $("#widgetColsLabelsFontColorM").css("background-color", styleParameters.colsLabelsFontColor);
                                            $("#widgetColsLabelsFontColorM").parent().parent().colorpicker({color: styleParameters.colsLabelsFontColor, format: "rgba"});
                                            $("label[for='legendFontSizeM']").parent().show();
                                            $("#dataLabelsFontSizeM").val(styleParameters.dataLabelsFontSize);
                                            $("#dataLabelsFontColorM").val(styleParameters.dataLabelsFontColor);
                                            $("#widgetDataLabelsFontColorM").css("background-color", styleParameters.dataLabelsFontColor);
                                            $("#widgetDataLabelsFontColorM").parent().parent().colorpicker({color: styleParameters.dataLabelsFontColor, format: "rgba"});
                                            $("#legendFontSizeM").val(styleParameters.legendFontSize);
                                            $("#legendFontColorM").val(styleParameters.legendFontColor);
                                            $("#widgetLegendFontColorM").css("background-color", styleParameters.legendFontColor);
                                            $("#widgetLegendFontColorM").parent().parent().colorpicker({color: styleParameters.legendFontColor, format: "rgba"});
                                            $("#barsColorsSelectM").val(styleParameters.barsColorsSelect);
                                            $("#chartTypeM").val(styleParameters.chartType);
                                            $("#dataLabelsM").val(styleParameters.dataLabels);
                                            $("#dataLabelsRotationM").val(styleParameters.dataLabelsRotation);
                                            $("#sortBarValuesM").val(styleParameters.sortBarValuesM);
                                        }

                                        if($('#chartTypeM').val().includes("Stacked")) {
                                            document.getElementById("sortBarValuesMCnt").style.display = "none";
                                            document.getElementById("sortBarValuesMLabel").style.display = "none";
                                        } else {
                                            document.getElementById("sortBarValuesMCnt").style.display = "block";
                                            document.getElementById("sortBarValuesMLabel").style.display = "block";
                                        }
                                        
                                        //Contenitore per tabella dei colori
                                        barsColorsTableContainerM = $('<div id="barsColorsTableContainerM" class="row rowCenterContent"></div>');
                                        $("#specificParamsM").append(barsColorsTableContainerM);
                                        
                                        function updateWidgetBarSeriesColorsM(e, params)
                                        {
                                            var newColor = $(this).colorpicker('getValue');
                                            var index = parseInt($(this).parents('tr').index() - 1);
                                            colorsArray[index] = newColor;
                                            $("#barsColorsM").val(JSON.stringify(colorsArray));
                                        }
                                        
                                        function findLabel(arr, targetLab, ref) {
                                            var res = null;
                                            var target = "";
                                            if (ref == "value name") {
                                                target = "metricType";
                                            } else {
                                                target = "metricName"
                                            }
                                            for (let k in arr) {
                                                if (arr[k][target] == targetLab) {
                                                    return arr[k].label;
                                                }
                                            }
                                            return res;
                                        }
                                        
                                        setEditMultiSeriesParameters(rowParamsArray);
                                        if (document.getElementById("groupByAttrM").value == "value name") {
                                            colorsTable = $("<table class='table table-bordered table-condensed thrRangeTable'><tr><td>Series</td><td>Labels (in Chart Legend)</td><td>Color</td></tr></table>");
                                        } else {
                                            colorsTable = $("<table class='table table-bordered table-condensed thrRangeTable'><tr><td>Series</td><td>Color</td></tr></table>");
                                        }
                                        if (series) {
                                            for (var i in series.secondAxis.labels) {
                                                newRow = $('<tr></tr>');
                                                if (styleParameters.editDeviceLabels != null) {
                                                    let placeholderStr = "";
                                                    if (styleParameters.editDeviceLabels[i] && document.getElementById("groupByAttrM").value != "value name") {
                                                        placeholderStr = styleParameters.editDeviceLabels[i];
                                                        newCell = $('<td>' + styleParameters.editDeviceLabels[i] + '</td>');
                                                    } else {
                                                        placeholderStr =series.secondAxis.labels[i];
                                                        newCell = $('<td>' + series.secondAxis.labels[i] + '</td>');
                                                    }
                                                } else {
                                                    placeholderStr =series.secondAxis.labels[i];
                                                    newCell = $('<td>' + series.secondAxis.labels[i] + '</td>');
                                                }
                                                newRow.append(newCell);
                                                
                                                if (document.getElementById("groupByAttrM").value == "value name") {
                                                    var barPlaceholderStr = null;
                                                    barPlaceholderStr = findLabel(rowParamsArray, series.secondAxis.labels[i], document.getElementById("groupByAttrM").value);
                                                    newTableCell = $('<td><a href="#" class="toBeEdited" data-type="text" data-mode="popup" data-param="barLabels" data-groupattribute="' + document.getElementById("groupByAttrM").value + '"></a></td>');
                                                    newTableCell.find('a').editable({
                                                        emptytext: "Empty",
                                                        display: function (value, response) {
                                                            if (value.length > 50) {
                                                                $(this).html(value.substring(0, 50) + "...");
                                                            } else {
                                                                $(this).html(value);
                                                            }
                                                        },
                                                        value: barPlaceholderStr
                                                    });
                                                    newRow.append(newTableCell);
                                                }
                                                
                                                newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                newRow.append(newCell);
                                                //Se l'attuale impostazione è per colori automatici, costruiamo JSON e tabella GUI con impostazioni di default, altrimenti con colori da DB
                                                if (styleParameters.barsColorsSelect === 'auto') {
                                                    newRow.find('div.colorPicker').colorpicker({
                                                        color: defaultColorsArray[i % 10],
                                                        format: "rgba"
                                                    });
                                                    colorsArray.push(defaultColorsArray[i % 10]);
                                                } else {
                                                    newRow.find('div.colorPicker').colorpicker({
                                                        color: styleParameters.barsColors[i],
                                                        format: "rgba"
                                                    });
                                                    colorsArray.push(styleParameters.barsColors[i]);
                                                }

                                                newRow.find('div.colorPicker').on('changeColor', updateWidgetBarSeriesColorsM);
                                                newRow.find('a.toBeEdited').on('save', editMultiSeriesUpdateParams);
                                                colorsTable.append(newRow);
                                            }
                                        }
                                        
                                        $("#barsColorsM").val(JSON.stringify(colorsArray));
                                        $('#barsColorsTableContainerM').append(colorsTable);
                                        
                                        //Per prima visualizzazione in edit
                                        if($('#barsColorsSelectM').val() === "manual")
                                        {
                                            $('#barsColorsTableContainerM').show();
                                        }
                                        else
                                        {
                                            $('#barsColorsTableContainerM').hide();
                                        }

                                        // Nuove righe (labels per i devices)
                                        for (var n = 0; n < deviceLabels.length; n++) {
                                            newFormRow = $('<div class="row deviceLab"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="deviceLabelsM" class="col-md-2 control-label">Device/Entity #' + (n + 1).toString() + ' Label</label>');
                                            newInnerDiv = $('<div class="col-md-7"></div>');
                                            var placeholderStr = "";
                                            if (styleParameters.editDeviceLabels != null) {
                                                if (styleParameters.editDeviceLabels.length == deviceLabels.length) {
                                                    placeholderStr = styleParameters.editDeviceLabels[n];
                                                } else {
                                                    // flipped case
                                                    placeholderStr = deviceLabels[n];
                                                }
                                            } else {
                                                placeholderStr = deviceLabels[n];
                                            }
                                            //    newInput = $('<input type="text" class="form-control" id="deviceLabelsM_' + n + '" name="deviceLabelsM_' + n + '" placeholder="' + placeholderStr + '">');
                                            newInput = $('<input type="text" class="form-control" id="deviceLabelsM_' + n + '" name="deviceLabelsM_' + n + '" value = "' + placeholderStr + '">');
                                            //    newInput = $('<input type="text" class="form-control" id="deviceLabelsM_' + n + '" name="deviceLabelsM" required placeholder="' + deviceLabels[n] + '">');
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newLabel.show();
                                            newInnerDiv.show();
                                            newInput.show();

                                            // Show Content on Load
                                            newLabel = $('<label for="showContentLoadM" class="col-md-1 control-label"><?php echo _("Show CSBL Content on Load"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-1"></div>');
                                            newSelect = $('<select class="form-control" id="showContentLoadM" name="showContentLoadM">');
                                            newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                            newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                            newSelect.val(styleParameters.showContentLoadM);
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newLabel.show();
                                            newInnerDiv.show();
                                            newSelect.show();
                                            
                                        }

                                        if (document.getElementById("groupByAttrM").value == "value name") {
                                            let elems = document.getElementsByClassName("deviceLab");

                                            [].forEach.call(elems, function (elem) {
                                              //  if($('#groupByAttrM').val() === "value name")
                                              //      elem.style.display = "none";
                                              //  else if ($('#groupByAttrM').val() === "value type") {
                                                    elem.style.display = "block";
                                              //  }
                                            });
                                        }

                                        
										//Nuova Riga - CalendarM
										newFormRow = $('<div class="row deviceLab"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="calendarM" class="col-md-2 control-label">Show Calendar Button</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="calendarM" name="calendarM">');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newSelect.val("value");
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
										$("#calendarM").val(styleParameters.calendarM);
										//console.log("#calendarM: "+styleParameters.calendarM);
										//Codice di creazione soglie
                                        //Nuova riga
                                        //Set thresholds
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="alrThrSelM" class="col-md-2 control-label"><?php echo _("Set thresholds"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="alrThrSelM" name="alrThrSelM" required>');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();

                                        //Threshold target select - Questa select viene nascosta o mostrata a seconda che nella "Set thresholds" si selezioni yes o no.
                                        newLabel = $('<label for="alrAxisSelM" class="col-md-2 control-label"><?php echo _("Thresholds target set"); ?></label>');
                                        newSelect = $('<select class="form-control" id="alrAxisSelM" name="alrAxisSelM"></select>');
                                        if (series) {
                                            newSelect.append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                        }
                                        newSelect.val(-1);
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();
                                        newSelect.hide();
                                        
                                        //Nuova riga
                                        //Threshold field select
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="alrFieldSelM" class="col-md-2 control-label"><?php echo _("Thresholds target field"); ?></label>');
                                        newSelect = $('<select class="form-control" id="alrFieldSelM" name="alrFieldSelM">');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();
                                        newSelect.hide();
                                        
                                        //Contenitore per tabella delle soglie
                                        addWidgetRangeTableContainerM = $('<div id="addWidgetRangeTableContainerM" class="row rowCenterContent"></div>');
                                        $("#specificParamsM").append(addWidgetRangeTableContainerM);
                                        addWidgetRangeTableContainerM.hide();
                                        
                                        //Listener per settaggio/desettaggio soglie relativo alla select "Set thresholds"
                                        $('#alrThrSelM').change(alrThrFlagMListener);
                                        
                                        if(currentParams === null)
                                        {
                                            $('#alrThrSelM').val("no");
                                            $("label[for='alrAxisSelM']").hide();
                                            $('#alrAxisSelM').val(-1);
                                            $('#alrAxisSelM').hide();
                                            $('#parametersM').val('');
                                        }
                                        else
                                        {
                                            //ESPOSIZIONE DEI CAMPI
                                            $('#alrThrSelM').val("yes");
                                            $('#alrAxisSelM').val(currentParams.thresholdObject.target);
                                            $("label[for='alrAxisSelM']").show();
                                            $('#alrAxisSelM').parent().show();
                                            $('#alrAxisSelM').show();
                                            $("label[for='alrFieldSelM']").show();
                                            $('#alrFieldSelM').parent().show();
                                            $('#alrFieldSelM').show();
                                            //POPOLAMENTO DELLA SELECT DEI CAMPI
                                            alrAxisSelMListener();
                                            $('#addWidgetRangeTableContainerM').show();
                                            $('#parametersM').val(JSON.stringify(currentParams));
                                            //Listener per settaggio/desettaggio campi in base ad asse selezionato
                                            $('#alrAxisSelM').change(alrAxisSelMListener);
                                            //Listener per selezione campo
                                            $('#alrFieldSelM').change(alrFieldSelMListener);
                                        }

                                        removeWidgetProcessGeneralFields("editWidget");
										//////////////CK EDITOR BAR SERIES
															$.ajax({
                                                url: "../controllers/getTrustedUsers.php",
                                                data: {

                                                },
                                                type: "POST",
                                                async: true,
                                                dataType: 'json',
                                                success: function (data) {
                                                    if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
                                                        //Nuova riga
														//console.log('TRUSTED');
                                                        //Source Selection
                                                        newFormRow = $('<div class="row"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                                        newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
                                                        newSelect.append('<option value="no">no</option>');
                                                        newSelect.append('<option value="ckeditor">yes</option>');
                                                        newInnerDiv.append(newSelect);
                                                        newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        newLabel.show();
                                                        newInnerDiv.show();
                                                        newSelect.show();
                                                        $('#enableCKEditor').val(styleParameters.enableCKEditor);

                                                        //Nuova riga Tab Destro: CKEDITOR
                                                        //Modalità del widget (none, map, gis, link esterno)
                                                        newFormRow = $('<div class="row" id="ck_editor"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-12"></div>');
                                                        newBox = $('<div id="widgetEditor">');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
                                                        newBox.append('<?= _("Here you can insert Javascript code to be executed in the widget. Please save your script by clicking on the save button on the bottom.")?>');
                                                        newBox.append('</div></div>');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
                                                        newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
                                                        newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
                                                        newBox.append('</div></div></div>');
                                                        newInnerDiv.append(newBox);
                                                        //newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        //newLabel.show();
                                                        newInnerDiv.show();
                                                        //newInput.show();
                                                        $('#ck_editor').hide();

                                                        var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
                                                            allowedContent: true,
                                                            language: 'en',
                                                            contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
                                                            width: '100%'
                                                        });
														
														if ($('#enableCKEditor') != null && $('#enableCKEditor').val() == "ckeditor") {
															$('#ck_editor').show();
                                                                //$('#enableCKEditor').val("ckeditor");
                                                                // if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
                                                            if (code != null && code != "null") {
                                                                var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                            } else {
                                                                var codeForCKEditor = $('<div>').text(prepareCkEditorTemplate(code), connections).html();
                                                            }
                                                            var text_ck_area = document.createElement("text_ck_area");
                                                            text_ck_area.innerHTML = codeForCKEditor;
                                                            var newInfoDecoded = text_ck_area.innerText;
                                                            //    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
                                                            CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                            //}
														}

                                                    /*    let par = (JSON.stringify(currentParams));
                                                        if (par && !par.includes("latLng") && !par.includes("null")) {
                                                            $("#parametersM").val(JSON.stringify(currentParams));
                                                            if ((currentParams['mode'] == "ckeditor")||(code !== null)) {
                                                                $('#ck_editor').show();
                                                                $('#enableCKEditor').val("ckeditor");
                                                                // if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    //    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                            }
                                                        }   */
														

                                                        $('#enableCKEditor').change(function () {
                                                            if ($('#enableCKEditor').val() === "ckeditor") {
                                                                $('#ck_editor').show();
                                                                //if (rowParams.substring(0, 8) != "https://" && rowParams.substring(0, 7) != "http://" && rowParams.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                                //$("#parametersM").val('{"mode": "ckeditor"}');
																
                                                            } else {
                                                                $('#ck_editor').hide();
                                                            //    $("#parametersM").val('');
                                                            }
                                                        });

                                                        $('#sourceSelectionSaveBtn').click(function () {
                                                            var button = $(this);
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').show();
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');

                                                            var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();
                                                            //var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].document.getBody().getText();
                                                            /*if (newInfo.trim() === '') {
                                                                newInfo = null;
                                                            }   */

                                                            $.ajax({
                                                                url: "../controllers/updateWidget.php",
                                                                data: {
                                                                    action: "updateCkEditor",
                                                                    widgetName: name_widget_m,
                                                                    //    newText: newInfoDecoded
                                                                    newText: newInfo
                                                                },
                                                                type: "POST",
                                                                async: true,
                                                                dataType: 'json',
                                                                success: function (data) {
                                                                    if (data.detail === 'Ok') {
                                                                        alert('Saved!');
                                                                    } else {
                                                                        alert('Error');
                                                                    }
                                                                },
                                                                error: function (errorData) {
                                                                    alert('Error');
                                                                }
                                                            });
                                                        });
                                                    }
                                                },
                                                error: function (errorData) {
                                                    console.log('Error in retrieving Trusted Users.');
                                                }
                                            });
										/////////////
                                        break;
										
										
            
                                        case "widgetTable":
                                        var metricId = $('#metricWidgetM').val();
                                        var metricData = getMetricData(metricId);
                                     //   var seriesString = metricData.data[0].commit.author.series;
                                     //   var series = jQuery.parseJSON(seriesString);

                                        if (metricData.data.length != 0 && (serviceUri == null || serviceUri == "")) {
                                            var seriesString = metricData.data[0].commit.author.series;
                                            var series = jQuery.parseJSON(seriesString);
                                        } else {
                                            var seriesDataArray = [];
                                            var seriesString = "";
                                            var series = null;
                                            var rowParamsArray = JSON.parse(rowParams);
                                            if (serviceUri && IsJsonString(serviceUri)) {
                                                series = jQuery.parseJSON(serviceUri);
                                            } else {
                                                for (var i = 0; i < rowParamsArray.length; i++) {
                                                    let smUrl = "<?= $superServiceMapProxy ?>/api/v1/?serviceUri=" + rowParamsArray[i].metricId.split("serviceUri=")[1];
                                                    getSmartCitySensorValues(rowParamsArray, i, smUrl, null, false, function (extractedData) {

                                                        if (extractedData) {
                                                            seriesDataArray.push(extractedData);
                                                        } else {
                                                            console.log("Dati Smart City non presenti");
                                                            seriesDataArray.push(undefined);
                                                        }
                                                        //if (endFlag === true) {
                                                        // Alla fine quando si arriva all'ultimo record ottenuto dalle varie chiamate asincrone
                                                        if (rowParamsArray.length === seriesDataArray.length) {
                                                            let stopFlag = 1;
                                                            // DO FINAL SERIALIZATION
                                                            metricLabels = getMetricLabelsForBarSeries(rowParamsArray);
                                                            deviceLabels = getDeviceLabelsForBarSeries(rowParamsArray);
                                                            let mappedSeriesDataArray = buildBarSeriesArrayMap(seriesDataArray);
                                                            series = serializeSensorDataForBarSeries(mappedSeriesDataArray, metricLabels, deviceLabels);

                                                        }

                                                    });
                                                }
                                            }
                                        }

                                        if (rowParamsArray) {
                                            if (!serviceUri) {
                                                // Caso New BarSeries primo istanziamento
                                                for (n = 0; n < rowParamsArray.length; n++) {
                                                    if (!metricLabels.includes(rowParamsArray[n].metricType)) {
                                                        metricLabels.push(rowParamsArray[n].metricType);
                                                    }

                                                    if (!deviceLabels.includes(rowParamsArray[n].metricName)) {
                                                        deviceLabels.push(rowParamsArray[n].metricName);
                                                    }
                                                }
                                            } else {
                                                if (series.secondAxis.desc == "value name") {
                                                    deviceLabels = series.secondAxis.labels;
                                                } else {
                                                    deviceLabels = series.firstAxis.labels;
                                                }
                                            }
                                        }

                                        var thrTables1 = new Array();
                                        var thrTables2 = new Array();
                                        var i, j, k, min, max, color, newTableRow, newTableCell, currentFieldIndex, currentSeriesIndex, thrSeries, newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan, addWidgetRangeTableContainer = null;
                                        
                                        //Funzione di settaggio dei globals per il file dashboard_configdash.js
                                        setGlobals(currentParams, thrTables1, thrTables2, series, $('#select-widget-m').val());
                                        
                                        //Costruzione THRTables dai parametri provenienti da DB (vuote se non ci sono soglie per quel campo, anche nel caso di nessuna soglia settata in assoluto
                                        buildThrTablesForEditWidget();
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        
                                        if(styleParamsRaw !== null) 
                                        {
                                            styleParameters = JSON.parse(styleParamsRaw);
                                        }
                                        
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-IntTemp-Widget-m').attr('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $("#urlWidgetM").prop('disabled', false);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#inputFontColorM').prop('disabled', false);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        removeWidgetProcessGeneralFields("editWidget");
                                        
                                        //RIMOZIONE CAMPI PER TUTTI GLI ALTRI WIDGET
                                        $('#specificParamsM .row').remove();
                                        
                                        //Visualizzazione campi specifici per questo widget
                                        //Nuova riga
                                        //Select show first cell
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="showTableFirstCellM" class="col-md-2 control-label"><?php echo _("Show first cell"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="showTableFirstCellM" name="showTableFirstCellM" required></select>');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();

                                        //First cell font size
                                        //Nuova riga
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="tableFirstCellFontSizeM" class="col-md-2 control-label"><?php echo _("First cell font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="tableFirstCellFontSizeM" name="tableFirstCellFontSizeM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();
                                        
                                        //First cell font color
                                        newLabel = $('<label for="tableFirstCellFontColorM" class="col-md-2 control-label"><?php echo _("First cell font color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="tableFirstCellFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="tableFirstCellFontColorM" name="tableFirstCellFontColorM" required><span class="input-group-addon"><i id="widgetFirstCellFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#tableFirstCellFontColorContainerM').show();
                                        $('#tableFirstCellFontColorM').show();
                                        $("#widgetFirstCellFontColorM").css('display', 'block');
                                        $("#widgetFirstCellFontColorM").parent().parent().parent().colorpicker({color: styleParameters.tableFirstCellFontColor, format: "rgba"});
                                        
                                        //Nuova riga
                                        //Rows labels font size
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="rowsLabelsFontSizeM" class="col-md-2 control-label"><?php echo _("Rows labels font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="rowsLabelsFontSizeM" name="rowsLabelsFontSizeM" required> ');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //Rows labels font color
                                        newLabel = $('<label for="rowsLabelsFontColorM" class="col-md-2 control-label"><?php echo _("Rows labels font color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="rowsLabelsFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="rowsLabelsFontColorM" name="rowsLabelsFontColorM" required><span class="input-group-addon"><i id="widgetRowsLabelsFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#rowsLabelsFontColorContainerM').show();
                                        $('#rowsLabelsFontColorM').show();
                                        $("#widgetRowsLabelsFontColorM").css('display', 'block');
                                        $("#widgetRowsLabelsFontColorM").parent().parent().parent().colorpicker({color: styleParameters.rowsLabelsFontColor, format: "rgba"});

                                        //Nuova riga
                                        //Cols labels font size
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="colsLabelsFontSizeM" class="col-md-2 control-label"><?php echo _("Cols labels font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="colsLabelsFontSizeM" name="colsLabelsFontSizeM" required>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //Cols labels font color
                                        newLabel = $('<label for="colsLabelsFontColorM" class="col-md-2 control-label"><?php echo _("Cols labels font color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="colsLabelsFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="colsLabelsFontColorM" name="colsLabelsFontColorM" required><span class="input-group-addon"><i id="widgetColsLabelsFontColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#colsLabelsFontColorContainerM').show();
                                        $('#colsLabelsFontColorM').show();
                                        $("#widgetColsLabelsFontColorM").css('display', 'block');
                                        $("#widgetColsLabelsFontColorM").parent().parent().parent().colorpicker({color: styleParameters.colsLabelsFontColor, format: "rgba"});
                                    
                                        //Nuova riga
                                        //Rows labels background color
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="rowsLabelsBckColorM" class="col-md-2 control-label"><?php echo _("Rows labels backgr. color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="rowsLabelsBckColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="rowsLabelsBckColorM" name="rowsLabelsBckColorM" required><span class="input-group-addon"><i id="widgetRowsLabelsBckColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#rowsLabelsBckColorContainerM').show();
                                        $('#rowsLabelsBckColorM').show();
                                        $("#widgetRowsLabelsBckColorM").css('display', 'block');
                                        $("#widgetRowsLabelsBckColorM").parent().parent().parent().colorpicker({color: styleParameters.rowsLabelsBckColor, format: "rgba"});


                                        //Cols labels background color
                                        newLabel = $('<label for="colsLabelsBckColorM" class="col-md-2 control-label"><?php echo _("Cols labels backgr. color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="colsLabelsBckColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="colsLabelsBckColorM" name="colsLabelsBckColorM" required><span class="input-group-addon"><i id="widgetColsLabelsBckColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#colsLabelsBckColorContainerM').show();
                                        $('#colsLabelsBckColorM').show();
                                        $("#widgetColsLabelsBckColorM").css('display', 'block');
                                        $("#widgetColsLabelsBckColorM").parent().parent().parent().colorpicker({color: styleParameters.colsLabelsBckColor, format: "rgba"});
                                        
                                        //Nuova riga
                                        //Table borders
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="tableBordersM" class="col-md-2 control-label"><?php echo _("Table borders"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="tableBordersM" name="tableBordersM"></select>');
                                        newSelect.append('<option value="no">No borders</option>');
                                        newSelect.append('<option value="horizontal">Horizontal borders only</option>');
                                        newSelect.append('<option value="all">All borders</option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();

                                        //Table borders color
                                        newLabel = $('<label for="tableBordersColorM" class="col-md-2 control-label"><?php echo _("Table borders color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="tableBordersColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="tableBordersColorM" name="tableBordersColorM" required><span class="input-group-addon"><i id="widgetTableBordersColorM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        $('#tableBordersColorContainerM').show();
                                        $('#tableBordersColorM').show();
                                        $("#widgetTableBordersColorM").css('display', 'block');
                                        $("#widgetTableBordersColorM").parent().parent().parent().colorpicker({color: styleParameters.tableBordersColor, format: "rgba"});

                                        // Color Maps for Table Columns, on the bottom-right panel
                                        let legend = $('<legend class="legend-form-group">Table Columns Color Maps</legend>');
                                        $("#specificParamsMRight").append(legend);

                                        var allColorMaps = [];
                                        var heatmapBaseUrl = "<?= $heatmapUrl ?>";
                                        let colorMapJson = null;
                                        if (styleParameters.colorMaps != null) {
                                            if (styleParameters.colorMaps != "" && styleParameters.colorMaps != "[]") {
                                                colorMapJson = JSON.parse(styleParameters.colorMaps);
                                            }
                                        }
                                        getAllColorMaps(heatmapBaseUrl, function(maps) {

                                            if(maps) {
                                                allColorMaps = maps.sort();
                                                for (let n = 0; n < series.firstAxis.labels.length; n++) {
                                                    //Nuova riga
                                                    //Color Maps for Table Columns
                                                    newFormRow = $('<div class="row"></div>');
                                                    $("#specificParamsMRight").append(newFormRow);
                                                    newLabel = $('<label for="tableColorMapsM" class="col-md-4 control-label">Col # ' + n + ' (' + series.firstAxis.labels[n] + ') Color Map</label>');
                                                    newInnerDiv = $('<div class="col-md-4"></div>');
                                                    newSelect = $('<select class="form-control" id="showColorMapM' + n + '" name="showColorMapM' + n + '"></select>');
                                                    newSelect.append('<option value="null"> </option>');
                                                    for (let m = 0; m < allColorMaps.length; m++) {
                                                        newSelect.append('<option value="' + allColorMaps[m] + '">' + allColorMaps[m] + '</option>');
                                                    }
                                                    newInnerDiv.append(newSelect);
                                                    let newInnerDiv2 = $('<div class="col-md-3"></div>');
                                                //    let selectedColorMap = $('#showColorMapM').find(":selected").text();
                                                    let previewBtn = $('<button onclick="previewColorMap(' + n + ')" type="button" id="colorMapPreview" class="btn confirmBtn" style=" margin-left: 5px; float: left"><a href="#colorMapImg" class="button">Preview</a></button>');
                                                    newInnerDiv2.append(previewBtn);
                                                    newFormRow.append(newLabel);
                                                    newFormRow.append(newInnerDiv);
                                                    newFormRow.append(newInnerDiv2);
                                                    newLabel.show();
                                                    newInnerDiv.show();
                                                    newSelect.show();
                                                    let hasColorMap = false;
                                                    let selectedVal = null;
                                                    if (colorMapJson != null) {
                                                        for (let j = 0; j < colorMapJson.length; j++) {
                                                            if (colorMapJson[j].id == n) {
                                                                hasColorMap = true;
                                                                selectedVal = colorMapJson[j].name;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    if (hasColorMap) {
                                                        //    $('#showColorMapM' + n + ' option[value="' +  selectedVal + '"]').attr("selected",true);
                                                        $('#showColorMapM' + n).val(selectedVal);
                                                    }
                                                }
                                                newFormRow = $('<div class="row"></div>');
                                                $("#specificParamsMRight").append(newFormRow);
                                                newLabel = $('<label for="colorMapPreviewM" class="col-md-4 control-label">ColorMap Preview</label>');
                                                newInnerDiv = $('<div id="colorMapImg" class="col-md-4" style="border:1px solid; border-color:silver;"></div>');
                                                let previewImg = $('<img id="imgPreviewM" style="height:100%; display:block; margin-left:auto; margin-right:auto; margin-bottom:10%; margin-top:10%; border:1px solid;">');
                                                newInnerDiv.append(previewImg);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);
                                                newLabel.show();
                                                newInnerDiv.show();
                                            }
                                            else
                                            {
                                                console.log("Error in retrieveing Color Maps");
                                            }

                                        });

                                        if(styleParamsRaw !== null) 
                                        {
                                            $("#showTableFirstCellM").val(styleParameters.showTableFirstCell);
                                            $("#tableFirstCellFontSizeM").val(styleParameters.tableFirstCellFontSize);
                                            $("#tableFirstCellFontColorM").val(styleParameters.tableFirstCellFontColor);
                                            $("#widgetFirstCellFontColorM").css("background-color", styleParameters.tableFirstCellFontColor);
                                            $("#rowsLabelsFontSizeM").val(styleParameters.rowsLabelsFontSize);
                                            $("#rowsLabelsFontColorM").val(styleParameters.rowsLabelsFontColor);
                                            $("#widgetRowsLabelsFontColorM").css("background-color", styleParameters.rowsLabelsFontColor);
                                            $("#colsLabelsFontSizeM").val(styleParameters.colsLabelsFontSize);
                                            $("#colsLabelsFontColorM").val(styleParameters.colsLabelsFontColor);
                                            $("#widgetColsLabelsFontColorM").css("background-color", styleParameters.colsLabelsFontColor);
                                            $("#rowsLabelsBckColorM").val(styleParameters.rowsLabelsBckColor);
                                            $("#widgetRowsLabelsBckColorM").css("background-color", styleParameters.rowsLabelsBckColor);
                                            $("#colsLabelsBckColorM").val(styleParameters.colsLabelsBckColor);
                                            $("#widgetColsLabelsBckColorM").css("background-color", styleParameters.colsLabelsBckColor);
                                            $("#tableBordersM").val(styleParameters.tableBorders);
                                            $("#tableBordersColorM").val(styleParameters.tableBordersColor);
                                            $("#widgetTableBordersColorM").css("background-color", styleParameters.tableBordersColor);
                                        }

                                        // Nuove righe (labels per i devices)
                                        if (deviceLabels != null) {
                                            for (var n = 0; n < deviceLabels.length; n++) {
                                                newFormRow = $('<div class="row"></div>');
                                                $("#specificParamsM").append(newFormRow);
                                                newLabel = $('<label for="deviceLabelsM" class="col-md-2 control-label">Value Name #' + (n + 1).toString() + ' Label</label>');
                                                newInnerDiv = $('<div class="col-md-7"></div>');
                                                var placeholderStr = "";
                                                if (styleParameters.editDeviceLabels != null) {
                                                    if (styleParameters.editDeviceLabels.length == deviceLabels.length) {
                                                        placeholderStr = styleParameters.editDeviceLabels[n];
                                                    } else {
                                                        // flipped case
                                                        placeholderStr = deviceLabels[n];
                                                    }
                                                } else {
                                                    placeholderStr = deviceLabels[n];
                                                }
                                                //    newInput = $('<input type="text" class="form-control" id="deviceLabelsM_' + n + '" name="deviceLabelsM_' + n + '" placeholder="' + placeholderStr + '">');
                                                newInput = $('<input type="text" class="form-control" id="deviceLabelsM_' + n + '" name="deviceLabelsM_' + n + '" value = "' + placeholderStr + '">');
                                                //    newInput = $('<input type="text" class="form-control" id="deviceLabelsM_' + n + '" name="deviceLabelsM" required placeholder="' + deviceLabels[n] + '">');
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);
                                                newLabel.show();
                                                newInnerDiv.show();
                                                newInput.show();
                                            }
                                        }

                                        //Nuova riga
                                        //Set thresholds
                                    /*    newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="alrThrSelM" class="col-md-2 control-label"><?php echo _("Set thresholds"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="alrThrSelM" name="alrThrSelM" required>');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newSelect.val('no');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();   */
										
                                        
                                        //Listener per settaggio/desettaggio soglie relativo alla select "Set thresholds"
                                        $('#alrThrSelM').change(alrThrFlagMListener);
                                        
                                        //Threshold target select - Questa select viene nascosta o mostrata a seconda che nella "Set thresholds" si selezioni yes o no.
                                        newLabel = $('<label for="alrAxisSelM" class="col-md-2 control-label"><?php echo _("Thresholds target set"); ?></label>');
                                        newSelect = $('<select class="form-control" id="alrAxisSelM" name="alrAxisSelM"></select>');
                                        newSelect.append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                        newSelect.append("<option value='" + series.secondAxis.desc + "'>" + series.secondAxis.desc + "</option>");
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();
                                        newSelect.hide();
                                        
                                        //Nuova riga
                                        //Threshold field select
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="alrFieldSelM" class="col-md-2 control-label"><?php echo _("Thresholds target field"); ?></label>');
                                        newSelect = $('<select class="form-control" id="alrFieldSelM" name="alrFieldSelM">');
                                        newInnerDiv = $('<div class="col-md-2"></div>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.hide();
                                        newInnerDiv.hide();
                                        newSelect.hide();
                                        
                                        //Contenitore per tabella delle soglie
                                        addWidgetRangeTableContainerM = $('<div id="addWidgetRangeTableContainerM" class="row rowCenterContent"></div>');
                                        $("#specificParamsM").append(addWidgetRangeTableContainerM);
                                        addWidgetRangeTableContainerM.hide();
                                        
                                        if(currentParams === null)
                                        {
                                            $('#alrThrSelM').val("no");
                                            $("label[for='alrAxisSelM']").hide();
                                            $('#alrAxisSelM').val(-1);
                                            $('#alrAxisSelM').hide();
                                            $('#parametersM').val('');
                                        }
                                        else
                                        {
                                            //ESPOSIZIONE DEI CAMPI
                                            $('#alrThrSelM').val("yes");
                                            $('#alrAxisSelM').val(currentParams.thresholdObject.target);
                                            $("label[for='alrAxisSelM']").show();
                                            $('#alrAxisSelM').parent().show();
                                            $('#alrAxisSelM').show();
                                            $('#alrAxisSelM').change(alrAxisSelMListener);
                                            $("label[for='alrFieldSelM']").show();
                                            $('#alrFieldSelM').parent().show();
                                            $('#alrFieldSelM').show();
                                            //POPOLAMENTO DELLA SELECT DEI CAMPI
                                            $('#alrAxisSelM').trigger("change");
                                            $('#alrFieldSelM').change(alrFieldSelMListener);
                                            $('#addWidgetRangeTableContainerM').show();
                                            $('#parametersM').val(JSON.stringify(currentParams));
                                        }
                                        break;
                                       
                                        case "widgetProcess":
                                        //In questo caso mostriamo tutti i campi ad hoc del Process, sicuramente valorizzati in modifica
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-IntTemp-Widget-m').attr('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $("#urlWidgetM").prop('disabled', false);
                                        $('#inputFontSizeM').prop('required', false);
                                        $('#inputFontSizeM').val('');
                                        $('#inputFontSizeM').prop('disabled', true);
                                        $('#inputFontColorM').prop('required', false);
                                        $('#inputFontColorM').val('');
                                        $('#inputFontColorM').prop('disabled', true);
                                        $('#widgetFontColorM').css("background-color", "#eeeeee");
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        $("#xAxisDatasetM").prop('required', false);
                                        $("#lineWidthM").prop('required', false);
                                        $("#alrLookM").prop('required', false);
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        
                                        //Reperimento elenco dei jobs groups per scheduler
                                        for(var i = 0; i < elencoScheduler.length; i++)
                                        {
                                            $.ajax({
                                                url: "getJobs.php",
                                                data: {action: "getJobGroupsForScheduler", host: elencoScheduler[i].ip, user: elencoScheduler[i].user, pass: elencoScheduler[i].pass},
                                                type: "POST",
                                                async: false,
                                                dataType: 'json',
                                                success: function (data) 
                                                {
                                                    for(var j = 0; j < data.length; j++) 
                                                    {
                                                        elencoJobsGroupsPerScheduler[i][j] = data[j].id;
                                                    }
                                                }
                                            });
                                        }
                                        
                                        //Campo scheduler
                                        $("#schedulerRowM").css("display", "");
                                        $("label[for='inputSchedulerWidgetM']").css("display", "");
                                        $('#inputSchedulerWidgetDivM').css("display", "");
                                        $('#inputSchedulerWidgetGroupDivM').css("display", "");
                                        $('#inputSchedulerWidgetM').css("display", "");
                                        $('#inputSchedulerWidgetM').val(parameters.schedulerName);
                                        $('#inputSchedulerWidgetM').trigger("change");
                                        
                                        //Job areas solo se presente
                                        if(parameters.jobArea !== "")
                                        {
                                            $('#jobsAreasRowM').css("display", "");
                                            $("label[for='inputJobsAreasWidgetM']").css("display", "");
                                            $('#inputJobsAreasWidgetDivM').css("display", "");
                                            $('#inputJobsAreasWidgetGroupDivM').css("display", "");
                                            $('#inputJobsAreasWidgetM').css("display", "");
                                            $('#inputJobsAreasWidgetM').val(parameters.jobArea);
                                            $('#inputJobsAreasWidgetM').trigger("change");
                                        }
                                        else
                                        {
                                            $('#jobsAreasRowM').css("display", "none");
                                            $("label[for='inputJobsAreasWidgetM']").css("display", "none");
                                            $('#inputJobsAreasWidgetDivM').css("display", "none");
                                            $('#inputJobsAreasWidgetGroupDivM').css("display", "none");
                                            $('#inputJobsAreasWidgetM').css("display", "none");
                                        }
                                        
                                        //Job group
                                        $('#jobsGroupsRowM').css("display", "");
                                        $("label[for='inputJobsGroupsWidgetM']").css("display", "");
                                        $('#inputJobsGroupsWidgetDivM').css("display", "");
                                        $('#inputJobsGroupsWidgetGroupDivM').css("display", "");
                                        $('#inputJobsGroupsWidgetM').css("display", "");
                                        $('#inputJobsGroupsWidgetM').val(parameters.jobGroup);
                                        $('#inputJobsGroupsWidgetM').trigger("change");
                                        
                                        //Job name
                                        $('#jobsNamesRowM').css("display", "");
                                        $("label[for='inputJobsNamesWidgetM']").css("display", "");
                                        $('#inputJobsNamesWidgetDivM').css("display", "");
                                        $('#inputJobsNamesWidgetGroupDivM').css("display", "");
                                        $('#inputJobsNamesWidgetM').css("display", "");
                                        $('#inputJobsNamesWidgetM').val(parameters.jobName);
                                        $('#inputJobsNamesWidgetM').trigger("change");
                                        break;
                                        
                                    case "widgetProtezioneCivile":
                                        if(styleParamsRaw !== null) 
                                        {
                                            styleParameters = JSON.parse(styleParamsRaw);
                                        }
                                       
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').val('Protezione civile');
                                        $('#inputTitleWidgetM').attr('disabled', true);
                                        $('#inputTitleWidgetM').prop('required', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-IntTemp-Widget-m').attr('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $('#inputFontSizeM').prop('required', false);
                                        $('#inputFontSizeM').prop('disabled', true);
                                        $('#inputFontSizeM').val("");
                                        $("#widgetFontColorM").parent().parent().colorpicker({color: "#eeeeee", format: "rgba"});
                                        $("#widgetFontColorM").css("background-color", "#eeeeee");
                                        $('#inputFontColorM').val("");
                                        $('#inputFontColorM').attr('disabled', true);
                                        $('#inputFontColorM').prop('required', false);
                                        $('#urlWidgetM').attr('disabled', true);
                                        $('#urlWidgetM').prop('required', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', true);
                                        $('#inputHeaderFontColorWidgetM').prop('required', false);
                                        $('#inputHeaderFontColorWidgetM').val("");
                                        $('#widgetHeaderFontColorM').css("background-color", "#eeeeee");
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        
                                        //Nuova riga
                                        //Default tab
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="inputDefaultTabM" class="col-md-2 control-label"><?php echo _("Default tab"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="inputDefaultTabM" name="inputDefaultTabM"></select>');
                                        newSelect.append('<option value="0">General</option>');
                                        newSelect.append('<option value="1">Meteo</option>');
                                        newSelect.append('<option value="-1">None (automatic switch)</option>');
                                        newSelect.val(data['defaultTab']);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        
                                        //Meteo tab font size
                                       newLabel = $('<label for="meteoTabFontSizeM" class="col-md-2 control-label"><?php echo _("Meteo tab font size"); ?></label>');
                                       newInnerDiv = $('<div class="col-md-3"></div>');
                                       newInput = $('<input type="text" class="form-control" id="meteoTabFontSizeM" name="meteoTabFontSizeM"></input>');
                                       //newInput.val("10");
                                       newInnerDiv.append(newInput);
                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);
                                       newLabel.show();
                                       newInnerDiv.show();
                                       newInput.show();

                                       //Nuova riga
                                       //General tab font size
                                       newFormRow = $('<div class="row"></div>');
                                       $("#specificParamsM").append(newFormRow);
                                       newLabel = $('<label for="genTabFontSizeM" class="col-md-2 control-label"><?php echo _("General tab font size"); ?></label>');
                                       newInnerDiv = $('<div class="col-md-3"></div>');
                                       newInput = $('<input type="text" class="form-control" id="genTabFontSizeM" name="genTabFontSizeM"></input>');
                                       //newInput.val("12");
                                       newInnerDiv.append(newInput);
                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);
                                       newLabel.show();
                                       newInnerDiv.show();
                                       newInput.show();

                                       //General tab font color
                                       newLabel = $('<label for="genTabFontColorM" class="col-md-2 control-label"><?php echo _("General tab font color"); ?></label>');
                                       newInnerDiv = $('<div class="col-md-3"></div>');
                                       newInput = $('<div id="genTabFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="genTabFontColorM" name="genTabFontColorM" required><span class="input-group-addon"><i id="widgetGenTabFontColorM"></i></span></div>');
                                       newInnerDiv.append(newInput);
                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);
                                       newLabel.show();
                                       newInnerDiv.show();
                                       $('#genTabFontColorContainerM').show();
                                       $('#genTabFontColorM').show();
                                       $("#genTabFontColorM").css('display', 'block');
                                       $("#genTabFontColorM").prop("required", true);
                                       $("#genTabFontColorM").attr("disabled", false);
                                       
                                        if(styleParamsRaw !== null) 
                                        {
                                            $("#meteoTabFontSizeM").val(styleParameters.meteoTabFontSize);
                                            $("#genTabFontSizeM").val(styleParameters.genTabFontSize);
                                            $("#widgetGenTabFontColorM").parent().parent().colorpicker({color: styleParameters.genTabFontColor, format: "rgba"});
                                        }
                                        
                                        break;

                                        case "widgetProtezioneCivileFirenze":
                                            if(styleParamsRaw !== null)
                                            {
                                                styleParameters = JSON.parse(styleParamsRaw);
                                            }

                                            $('#link_help_modal-add-widget-m').css("display", "");
                                            $('#inputTitleWidgetM').val('Protezione civile Firenze');
                                            $('#inputTitleWidgetM').attr('disabled', true);
                                            $('#inputTitleWidgetM').prop('required', false);
                                            $("label[for='inputTitleWidgetM']").html("Title");
                                            $("label[for='inputColorWidgetM']").html("Background color");
                                            $('#select-frameColor-Widget-m').attr('disabled', false);
                                            $('#select-frameColor-Widget-m').prop('required', true);
                                            $('#select-IntTemp-Widget-m').attr('disabled', true);
                                            $('#select-IntTemp-Widget-m').prop('required', false);
                                            $('#inputFreqWidgetM').prop('disabled', false);
                                            $('#inputComuneWidgetM').attr('disabled', true);
                                            $('#inputFontSizeM').prop('required', false);
                                            $('#inputFontSizeM').prop('disabled', true);
                                            $('#inputFontSizeM').val("");
                                            $("#widgetFontColorM").parent().parent().colorpicker({color: "#eeeeee", format: "rgba"});
                                            $("#widgetFontColorM").css("background-color", "#eeeeee");
                                            $('#inputFontColorM').val("");
                                            $('#inputFontColorM').attr('disabled', true);
                                            $('#inputFontColorM').prop('required', false);
                                            $('#urlWidgetM').attr('disabled', true);
                                            $('#urlWidgetM').prop('required', false);
                                            $('#inputHeaderFontColorWidgetM').attr('disabled', true);
                                            $('#inputHeaderFontColorWidgetM').prop('required', false);
                                            $('#inputHeaderFontColorWidgetM').val("");
                                            $('#widgetHeaderFontColorM').css("background-color", "#eeeeee");
                                            $('#inputUdmWidgetM').prop("required", false);
                                            $('#inputUdmWidgetM').attr("disabled", true);
                                            $('#inputUdmWidgetM').val("");
                                            $('#inputUdmPositionM').prop("required", false);
                                            $('#inputUdmPositionM').attr("disabled", true);
                                            $('#inputUdmPositionM').val(-1);

                                            //Parametri specifici del widget
                                            $('#specificParamsM .row').remove();

                                            //Rimozione eventuali campi del subform general per widget process
                                            removeWidgetProcessGeneralFields("editWidget");

                                            //Nuova riga
                                            //Default tab
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="inputDefaultTabM" class="col-md-2 control-label"><?php echo _("Default tab"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newSelect = $('<select class="form-control" id="inputDefaultTabM" name="inputDefaultTabM"></select>');
                                            newSelect.append('<option value="0">General</option>');
                                            newSelect.append('<option value="1">Meteo</option>');
                                            newSelect.append('<option value="-1">None (automatic switch)</option>');
                                            newSelect.val(data['defaultTab']);
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newLabel.show();
                                            newInnerDiv.show();
                                            newSelect.show();

                                            //Meteo tab font size
                                            newLabel = $('<label for="meteoTabFontSizeM" class="col-md-2 control-label"><?php echo _("Meteo tab font size"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newInput = $('<input type="text" class="form-control" id="meteoTabFontSizeM" name="meteoTabFontSizeM"></input>');
                                            //newInput.val("10");
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newLabel.show();
                                            newInnerDiv.show();
                                            newInput.show();

                                            //Nuova riga
                                            //General tab font size
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="genTabFontSizeM" class="col-md-2 control-label"><?php echo _("General tab font size"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newInput = $('<input type="text" class="form-control" id="genTabFontSizeM" name="genTabFontSizeM"></input>');
                                            //newInput.val("12");
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newLabel.show();
                                            newInnerDiv.show();
                                            newInput.show();

                                            //General tab font color
                                            newLabel = $('<label for="genTabFontColorM" class="col-md-2 control-label"><?php echo _("General tab font color"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newInput = $('<div id="genTabFontColorContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="genTabFontColorM" name="genTabFontColorM" required><span class="input-group-addon"><i id="widgetGenTabFontColorM"></i></span></div>');
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newLabel.show();
                                            newInnerDiv.show();
                                            $('#genTabFontColorContainerM').show();
                                            $('#genTabFontColorM').show();
                                            $("#genTabFontColorM").css('display', 'block');
                                            $("#genTabFontColorM").prop("required", true);
                                            $("#genTabFontColorM").attr("disabled", false);

                                            if(styleParamsRaw !== null)
                                            {
                                                $("#meteoTabFontSizeM").val(styleParameters.meteoTabFontSize);
                                                $("#genTabFontSizeM").val(styleParameters.genTabFontSize);
                                                $("#widgetGenTabFontColorM").parent().parent().colorpicker({color: styleParameters.genTabFontColor, format: "rgba"});
                                            }

                                            break;

                                    case "widgetButton":
                                       if(styleParamsRaw !== null) 
                                        {
                                            styleParameters = JSON.parse(styleParamsRaw);
                                        }
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Button text");
                                        $("label[for='inputColorWidgetM']").html("Button color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').attr('disabled', false);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontColorM').attr('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#select-frameColor-Widget-m').attr('disabled', true);
                                        $('#select-frameColor-Widget-m').prop('required', false);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').val('');
                                        $('#inputFreqWidgetM').prop('disabled', true);
                                        $('#inputFreqWidgetM').prop('required', false);
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', true);
                                        $('#inputHeaderFontColorWidgetM').prop('required', false);
                                        $('#inputHeaderFontColorWidgetM').val("");
                                        $('#widgetHeaderFontColorM').css("background-color", "#eeeeee");
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        
                                       //Nuova riga
                                       //Border radius and button image yes/no
                                       newFormRow = $('<div class="row"></div>');
                                       newLabel = $('<label for="editWidgetBtnRadius" class="col-md-2 control-label"><?php echo _("Border radius"); ?></label>');
                                       newInnerDiv = $('<div class="col-md-3"></div>');
                                       var newControl = $('<input id="editWidgetBtnRadius" name="editWidgetBtnRadius" data-slider-id="editWidgetBtnRadiusSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1" data-slider-value="0"/>');
                                       newInnerDiv.append(newControl);
                                       newInnerDiv.find('#editWidgetBtnRadius').bootstrapSlider({
                                          value: styleParameters.borderRadius,
                                          formatter: function(value) {
                                             return value + "%";
                                          }
                                       });
                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);

                                       newLabel = $('<label for="editWidgetBtnImgSelect" class="col-md-2 control-label"><?php echo _("Button image"); ?></label>');
                                       newInnerDiv = $('<div class="col-md-3"></div>');
                                       newSelect = $('<select id="editWidgetBtnImgSelect" name="editWidgetBtnImgSelect" class="form-control"></select>');
                                       newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                       newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                       newSelect.val("no");
                                       newInnerDiv.append(newSelect);
                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);
                                       
                                       if(styleParamsRaw !== null) 
                                       {
                                           newSelect.val(styleParameters.hasImage);
                                       }
                                       
                                       $("#specificParamsM").append(newFormRow);
                                       
                                       //Nuova riga
                                       //Button image file chooser
                                       newFormRow = $('<div class="row"></div>');
                                       newFormRow.hide();
                                       newLabel = $('<label for="editWidgetBtnFile" class="col-md-2 control-label"><?php echo _("Image file"); ?></label>');
                                       newInnerDiv = $('<div class="col-md-8"></div>');
                                       var btnImgMaxSize = $('<input type="hidden" name="MAX_FILE_SIZE" value="1000000" />');
                                       newInnerDiv.append(btnImgMaxSize);
                                       var newControl = $('<div class="input-group"><label class="input-group-btn"><span class="btn btn-primary">Browse<input id="editWidgetBtnFile" name="editWidgetBtnFile" type="file" style="display: none;" accept="image/*"></span></label><input id="editWidgetBtnFilename" type="text" class="form-control" readonly=""></div>');

                                       newInnerDiv.append(newControl);
                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);
                                       $("#specificParamsM").append(newFormRow);

                                       newControl.find("input[type=file]").change(function() 
                                       {
                                          var filename = $(this).val().replace(/\\/g, '/').replace(/.*\//, '');
                                          $("#editWidgetBtnFilename").val(filename);
                                       });
                                       
                                       if(styleParameters.hasImage === 'yes')
                                       {
                                          newFormRow.show();
                                       }

                                       //Nuova riga
                                       //Button image width and height
                                       newFormRow = $('<div class="row"></div>');
                                       newFormRow.hide();
                                       newLabel = $('<label for="editWidgetBtnImgWidth" class="col-md-2 control-label"><?php echo _("Image width"); ?></label>');
                                       newInnerDiv = $('<div class="col-md-3"></div>');
                                       var newControl = $('<input id="editWidgetBtnImgWidth" name="editWidgetBtnImgWidth" data-slider-id="editWidgetBtnImgWidthSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                       newInnerDiv.append(newControl);
                                       
                                       var widthValue = null;
                                       if(styleParameters.hasImage === 'yes')
                                       {
                                          widthValue = styleParameters.imageWidth;
                                       }
                                       else
                                       {
                                          widthValue = 100;
                                       }
                                       
                                       newInnerDiv.find('#editWidgetBtnImgWidth').bootstrapSlider({
                                          value: widthValue,
                                          formatter: function(value) {
                                             return value + "%";
                                          }
                                       });
                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);

                                       newLabel = $('<label for="editWidgetBtnImgHeight" class="col-md-2 control-label"><?php echo _("Image height"); ?></label>');
                                       newInnerDiv = $('<div class="col-md-3"></div>');
                                       var newControl = $('<input id="editWidgetBtnImgHeight" name="editWidgetBtnImgHeight" data-slider-id="editWidgetBtnImgHeightSlider" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1" data-slider-value="100"/>');
                                       newInnerDiv.append(newControl);
                                       
                                       var heightValue = null;
                                       if(styleParameters.hasImage === 'yes')
                                       {
                                          heightValue = styleParameters.imageHeight;
                                       }
                                       else
                                       {
                                          heightValue = 100;
                                       }
                                       newInnerDiv.find('#editWidgetBtnImgHeight').bootstrapSlider({
                                          value: heightValue,
                                          formatter: function(value) {
                                             return value + "%";
                                          }
                                       });
                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);
                                       $("#specificParamsM").append(newFormRow);
                                       
                                       if(styleParameters.hasImage === 'yes')
                                       {
                                          newFormRow.show();
                                       }

                                       $("#editWidgetBtnImgSelect").off();
                                       $("#editWidgetBtnImgSelect").change(function(){
                                          if($(this).val() === 'yes')
                                          {
                                             $("#specificParamsM div.row").eq(1).show();
                                             $("#specificParamsM div.row").eq(2).show();
                                          }
                                          else
                                          {
                                             $("#specificParamsM div.row").eq(1).hide();
                                             $("#specificParamsM div.row").eq(2).hide();
                                          }
                                       });
                                       
                                       
                                        //Nuova riga
                                        //Target widgets per cambio metrica
                                        
                                        //JSON degli eventi da mostrare su ogni widget target di questo widget events
                                        var targetsJson = currentParams;
                                        $("#parametersM").val(JSON.stringify(targetsJson));
                                        
                                        newFormRow = $('<div class="row"></div>');
                                        newLabel = $('<label for="editWidgetChangeMetricWidgets" class="col-md-2 control-label">Available widgets for metric change</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select name="editWidgetChangeMetricWidgets" class="form-control" id="editWidgetChangeMetricWidgets"></select>');

                                        var widgetId, widgetTitle = null;
                                        var widgetsNumber = 0;

                                        $("li.gs_w").each(function(){
                                           if((!$(this).attr("id").includes("Alarms"))&&(!$(this).attr("id").includes("Button"))&&(!$(this).attr("id").includes("Clock"))&&(!$(this).attr("id").includes("EvacuationPlans"))&&(!$(this).attr("id").includes("Events"))&&(!$(this).attr("id").includes("ExternalContent"))&&(!$(this).attr("id").includes("FirstAid"))&&(!$(this).attr("id").includes("GenericContent"))&&(!$(this).attr("id").includes("MapBusPosition"))&&(!$(this).attr("id").includes("NetworkAnalysis"))&&(!$(this).attr("id").includes("PrevMeteo"))&&(!$(this).attr("id").includes("Process"))&&(!$(this).attr("id").includes("ProtezioneCivile"))&&(!$(this).attr("id").includes("ProtezioneCivileFirenze"))&&(!$(this).attr("id").includes("Resources"))&&(!$(this).attr("id").includes("Sce"))&&(!$(this).attr("id").includes("Separator"))&&(!$(this).attr("id").includes("ServiceMap"))&&(!$(this).attr("id").includes("SmartDS"))&&(!$(this).attr("id").includes("StateRideAtaf"))&&(!$(this).attr("id").includes("TrafficEvents"))&&(!$(this).attr("id").includes("TrendMentions"))&&(!$(this).attr("id").includes("Twitter")))
                                           {
                                              widgetId = $(this).attr("id");
                                              widgetTitle = $(this).find("div.titleDiv").html();
                                              newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                              widgetsNumber++;
                                           }
                                        });
                                        
                                        newSelect.val(-1);
                                        
                                        if(widgetsNumber > 0)
                                        {
                                           newInnerDiv.append(newSelect);
                                        }
                                        else
                                        {
                                            newInnerDiv.append('<span id="editWidgetChangeMetricWidgetsNoneMsg">None</span>')
                                        }

                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);

                                        newLabel = $('<label for="editWidgetChangeMetricMetrics" class="col-md-2 control-label">Available metrics for selected widget</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select name="editWidgetChangeMetricMetrics" class="form-control" id="editWidgetChangeMetricMetrics"></select>');
                                        newInnerDiv.append(newSelect);
                                        newInnerDiv.append('<span id="editWidgetChangeMetricMetricsNoneMsg">None</span>');
                                        newSelect.hide();
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);

                                        $("#specificParamsM").append(newFormRow);
                                        
                                        $("#editWidgetChangeMetricMetricsNoneMsg").hide();
                                        $("#editWidgetChangeMetricMetrics").hide();

                                        if(widgetsNumber > 0)
                                        {
                                           $("#editWidgetChangeMetricWidgets").change(function(){
                                               if($(this).val() !== -1)
                                               {
                                                   //Repere delle metriche applicabili a quel widget
                                                   $.ajax({
                                                        url: "process-form.php",
                                                        type: "GET",
                                                        data: {
                                                            getMetricsForWidgetType: true,
                                                            widgetId: $("#editWidgetChangeMetricWidgets").val()
                                                        },
                                                        async: true,
                                                        //dataType: 'json',
                                                        success: function(metricsList) 
                                                        {
                                                            metricsList = JSON.parse(metricsList);
                                                            $("#editWidgetChangeMetricMetrics").empty();

                                                            if(metricsList.length === 0)
                                                            {
                                                                $("#editWidgetChangeMetricMetrics").hide();
                                                                $("#editWidgetChangeMetricMetricsNoneMsg").show();
                                                            }
                                                            else
                                                            {
                                                                $("#editWidgetChangeMetricMetrics").append('<option value="noMetricChange">No metric change</option>');
                                                                for(var i = 0; i < metricsList.length; i++)
                                                                {
                                                                    $("#editWidgetChangeMetricMetrics").append('<option value="' + metricsList[i] + '">' + metricsList[i] + '</option>');
                                                                }

                                                                $("#editWidgetChangeMetricMetrics").val(targetsJson.changeMetricTargetsJson[$("#editWidgetChangeMetricWidgets").val()]);
                                                                $("#editWidgetChangeMetricMetricsNoneMsg").hide();
                                                                $("#editWidgetChangeMetricMetrics").show();
                                                            }
                                                        },
                                                        error: function(errorData)
                                                        {
                                                           $("#editWidgetChangeMetricMetrics").hide();
                                                           $("#editWidgetChangeMetricMetricsNoneMsg").show();
                                                           console.log("Errore in caricamento metriche caricabili per widget target");
                                                           console.log(JSON.stringify(errorData));
                                                        }
                                                    });
                                               }
                                               else
                                               {
                                                   $("#editWidgetChangeMetricMetrics").hide();
                                                   $("#editWidgetChangeMetricMetricsNoneMsg").show();
                                               }
                                           }); 

                                           $("#editWidgetChangeMetricMetrics").change(function(){
                                               targetsJson.changeMetricTargetsJson[$("#editWidgetChangeMetricWidgets").val()] = $(this).val();
                                               $("#parametersM").val(JSON.stringify(targetsJson));
                                           });
                                        }
                                        else
                                        {
                                            $("#editWidgetChangeMetricMetrics").hide();
                                            $("#editWidgetChangeMetricMetricsNoneMsg").show();
                                        }
                                       
                                       //Nuova riga
                                       //Show/hide text + target widgets per geolocation
                                       newFormRow = $('<div class="row"></div>');
                                       
                                       newLabel = $('<label for="editWidgetShowButtonText" class="col-md-2 control-label">Show button text</label>');
                                       newInnerDiv = $('<div class="col-md-3"></div>');
                                       newSelect = $('<select name="editWidgetShowButtonText" class="form-control" id="editWidgetShowButtonText"></select>');
                                       newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                       newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                       newInnerDiv.append(newSelect);
                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);
                                       newSelect.val(styleParameters.showText);
                                       
                                       newLabel = $('<label for="editWidgetGeolocationWidgets" class="col-md-2 control-label">Available widgets to show link content</label>');
                                       newInnerDiv = $('<div class="col-md-3"></div>');
                                       newSelect = $('<select name="editWidgetGeolocationWidgets" class="form-control" id="editWidgetGeolocationWidgets" multiple></select>');

                                       var widgetId, widgetTitle = null;
                                       var widgetsNumber = 0;
                                       
                                       $("li.gs_w").each(function(){
                                          if($(this).attr("id").includes("ExternalContent")&&($(this).find("div.widget").attr("data-role") !== "gisTarget")&&($(this).find("div.widget").attr("data-role") !== "map"))
                                          {
                                             widgetId = $(this).attr("id");
                                             widgetTitle = $(this).find("div.titleDiv").html();
                                             newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                             widgetsNumber++;
                                          }
                                       });

                                       if(widgetsNumber > 0)
                                       {
                                          newInnerDiv.append(newSelect);
                                       }
                                       else
                                       {
                                          newInnerDiv.append("None");
                                       }

                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);
                                       $("#specificParamsM").append(newFormRow);
                                       newLabel.show();
                                       newInnerDiv.show();


                                        //Nuova riga - PANTALEO
                                        //Open in New Tab or Not
                                        newFormRow = $('<div class="row"></div>');

                                        newLabel = $('<label for="editWidgetOpenNewTab" class="col-md-2 control-label"><?php echo _("Open Web Link in a New Tab"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select name="editWidgetOpenNewTab" class="form-control" id="editWidgetOpenNewTab"></select>');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newSelect.val(styleParameters.openNewTab);

                                        $("#specificParamsM").append(newFormRow);
                                        newLabel.show();
                                        newInnerDiv.show();

                                        newLabel = $('<label for="editWidgetShadow" class="col-md-2 control-label">View Button Shadow</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select name="editWidgetShadow" class="form-control" id="editWidgetShadow"></select>');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newSelect.val(styleParameters.shadow);
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel.show();
                                        newInnerDiv.show();


                                       if(widgetsNumber > 0)
                                       {
                                          $('#editWidgetGeolocationWidgets').selectpicker({
                                             actionsBox: true, 
                                             width: "auto"
                                          });
                                          
                                          $('#editWidgetGeolocationWidgets').selectpicker('val', targetsJson.geoTargetsJson);

                                          $('#editWidgetGeolocationWidgets').on('changed.bs.select', function (e) 
                                          {
                                             if($(this).val() === null)
                                             {
                                                targetsJson.geoTargetsJson = [];
                                             }
                                             else
                                             {
                                                targetsJson.geoTargetsJson = $(this).val();
                                             }
                                             $("#parametersM").val(JSON.stringify(targetsJson));
                                          });
                                       }
                                       /////////////////CKEDOTOR BUTTON
                                       $.ajax({
                                                url: "../controllers/getTrustedUsers.php",
                                                data: {

                                                },
                                                type: "POST",
                                                async: true,
                                                dataType: 'json',
                                                success: function (data) {
                                                    if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
                                                        //Nuova riga
														console.log('TRUSTED');
                                                        //Source Selection
                                                        newFormRow = $('<div class="row"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                                        newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
                                                        newSelect.append('<option value="no">no</option>');
                                                        newSelect.append('<option value="ckeditor">yes</option>');
                                                        newInnerDiv.append(newSelect);
                                                        newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        newLabel.show();
                                                        newInnerDiv.show();
                                                        newSelect.show();

                                                        //Nuova riga Tab Destro: CKEDITOR
                                                        //Modalità del widget (none, map, gis, link esterno)
                                                        newFormRow = $('<div class="row" id="ck_editor"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-12"></div>');
                                                        newBox = $('<div id="widgetEditor">');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
                                                        newBox.append('<?= _("Here you can insert Javascript code to be executed in the widget. Please save your script by clicking on the save button on the bottom.")?>');
                                                        newBox.append('</div></div>');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
                                                        newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
                                                        newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
                                                        newBox.append('</div></div></div>');
                                                        newInnerDiv.append(newBox);
                                                        //newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        //newLabel.show();
                                                        newInnerDiv.show();
                                                        //newInput.show();
                                                        $('#ck_editor').hide();

                                                        var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
                                                            allowedContent: true,
                                                            language: 'en',
                                                            contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
                                                            width: '100%'
                                                        });
														
														if (code != null && code != "null") {
															$('#ck_editor').show();
                                                                $('#enableCKEditor').val("ckeditor");
                                                                // if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    //    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
														}

                                                        let par = (JSON.stringify(currentParams));
                                                        if (par && !par.includes("latLng") && !par.includes("null")) {
                                                            $("#parametersM").val(JSON.stringify(currentParams));
                                                            if ((currentParams['mode'] == "ckeditor")||(code !== null)) {
                                                                $('#ck_editor').show();
                                                                $('#enableCKEditor').val("ckeditor");
                                                                // if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    //    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                            }
                                                        }

                                                        $('#enableCKEditor').change(function () {
                                                            if ($('#enableCKEditor').val() === "ckeditor") {
                                                                $('#ck_editor').show();
                                                                //if (rowParams.substring(0, 8) != "https://" && rowParams.substring(0, 7) != "http://" && rowParams.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                                //ckmod
                                                                //$("#parametersM").val('{"mode": "ckeditor"}');
                                                                currentParams['mode'] = "ckeditor";
                                                            } else {
                                                                $('#ck_editor').hide();
                                                                //$("#parametersM").val('');
                                                                currentParams['mode'] = "";
                                                            }
                                                        });

                                                        $('#sourceSelectionSaveBtn').click(function () {
                                                            var button = $(this);
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').show();
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');

                                                            var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();
                                                            /*if (newInfo.trim() === '') {
                                                                newInfo = null;
                                                            }   */

                                                            $.ajax({
                                                                url: "../controllers/updateWidget.php",
                                                                data: {
                                                                    action: "updateCkEditor",
                                                                    widgetName: name_widget_m,
                                                                    //    newText: newInfoDecoded
                                                                    newText: newInfo
                                                                },
                                                                type: "POST",
                                                                async: true,
                                                                dataType: 'json',
                                                                success: function (data) {
                                                                    if (data.detail === 'Ok') {
                                                                        alert('Saved!');
                                                                    } else {
                                                                        alert('Error');
                                                                    }
                                                                },
                                                                error: function (errorData) {
                                                                    alert('Error');
                                                                }
                                                            });
                                                        });
                                                    }
                                                },
                                                error: function (errorData) {
                                                    console.log('Error in retrieving Trusted Users.');
                                                }
                                            });
										//////////////////////////////////
                                       break;
                                        
                                    case "widgetGenericContent":
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', false);
                                        $('#inputFontSizeM').val('');
                                        $('#inputFontSizeM').prop('disabled', true);
                                        $('#inputFontColorM').attr('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        break;        
                                        
                                    case "widgetSingleContent":
                                        if(styleParamsRaw !== null)
                                        {
                                            styleParameters = JSON.parse(styleParamsRaw);
                                        } else {
                                            styleParameters = "";
                                        }
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').attr('disabled', false);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontColorM').attr('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                    //    $('#inputUdmWidgetM').prop("required", true);
                                        $('#inputUdmWidgetM').attr("disabled", false);
                                        $('#inputUdmPositionM').prop("required", true);
                                        $('#inputUdmPositionM').attr("disabled", false);
                                        $("#inputUdmPositionM").val(data['udmPos']);
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        
                                        //Campo di registrazione widget sul Notificatore
                                        editWidgetGeneratorRegisterField(data['notificatorRegistered'], data['notificatorEnabled'], data['param_w']);

                                        if (data['udm'] != null) {
                                            var displayedUdm = data['udm'].replace(/<script[^>]*>([\S\s]*?)<\/script>/gmi, '');
                                            displayedUdm = displayedUdm.replace(/<\/?\w(?:[^"'>]|"[^"]*"|'[^']*')*>/gmi, '');
                                            displayedUdm = displayedUdm.replace(/&deg;/g, "°");
                                            displayedUdm = displayedUdm.replace(/&num;/g, "#");
                                            displayedUdm = displayedUdm.replace(/&dollar;/g, "$");
                                            displayedUdm = displayedUdm.replace(/&percnt;/g, "%");
                                            displayedUdm = displayedUdm.replace(/&pound;/g, "£");
                                            displayedUdm = displayedUdm.replace(/&lt;/g, "<");
                                            displayedUdm = displayedUdm.replace(/&gt;/g, ">");
                                            displayedUdm = displayedUdm.replace(/&agrave;/g, "à");
                                            displayedUdm = displayedUdm.replace(/&egrave;/g, "è");
                                            displayedUdm = displayedUdm.replace(/&eacute;/g, "é");
                                            displayedUdm = displayedUdm.replace(/&igrave;/g, "ì");
                                            displayedUdm = displayedUdm.replace(/&ograve;/g, "ò");
                                            displayedUdm = displayedUdm.replace(/&ugrave;/g, "ù");
                                            displayedUdm = displayedUdm.replace(/&micro;/g, "µ");
                                            displayedUdm = displayedUdm.replace(/&sol;/g, "/");
                                            displayedUdm = displayedUdm.replace(/&bsol;/g, "\\");
                                            displayedUdm = displayedUdm.replace(/&lpar;/g, "(");
                                            displayedUdm = displayedUdm.replace(/&rpar;/g, ")");
                                            displayedUdm = displayedUdm.replace(/&lsqb;/g, "[");
                                            displayedUdm = displayedUdm.replace(/&rsqb;/g, "]");
                                            displayedUdm = displayedUdm.replace(/&lcub;/g, "{");
                                            displayedUdm = displayedUdm.replace(/&rcub;/g, "}");
                                            displayedUdm = displayedUdm.replace(/&Hat;/g, "^");
                                            $("#inputUdmWidgetM").val(displayedUdm);
                                        } else {
                                            $("#inputUdmWidgetM").val("");
                                        }

                                        //Open in New Tab or Not
                                        newFormRow = $('<div class="row"></div>');

                                        newLabel = $('<label for="editWidgetOpenNewTab" class="col-md-2 control-label"><?php echo _("Open Web Link in a New Tab"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select name="editWidgetOpenNewTab" class="form-control" id="editWidgetOpenNewTab"></select>');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newSelect.val(styleParameters.openNewTab);

                                        // Show Content on Load
                                        newLabel = $('<label for="showContentLoadM" class="col-md-2 control-label"><?php echo _("Show CSBL Content on Load"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="showContentLoadM" name="showContentLoadM">');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newSelect.val(styleParameters.showContentLoadM);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();

                                        $("#specificParamsM").append(newFormRow);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        break;
									
                                        
                                    case "widgetBarContent":
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').attr('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        
                                        //Campo di registrazione widget sul Notificatore
                                        editWidgetGeneratorRegisterField(data['notificatorRegistered'], data['notificatorEnabled'], data['param_w']);
                                        break;
                                        
                                    case "widgetColumnContent":
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').attr('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        
                                        //Campo di registrazione widget sul Notificatore
                                        editWidgetGeneratorRegisterField(data['notificatorRegistered'], data['notificatorEnabled'], data['param_w']);
                                        break;
                                        
                                        case "widgetGaugeChart":
                                        if(styleParamsRaw !== null)
                                        {
                                            styleParameters = JSON.parse(styleParamsRaw);
                                        }
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontSizeM').val(data.fontSize);
                                        $('#inputFontColorM').attr('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", false);
                                    //    $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val("");
                                      //  $("#inputUdmPositionM").val(data['udmPos']);

                                        if (data['udm'] != null) {
                                            var displayedUdm = data['udm'].replace(/<script[^>]*>([\S\s]*?)<\/script>/gmi, '');
                                            displayedUdm = displayedUdm.replace(/<\/?\w(?:[^"'>]|"[^"]*"|'[^']*')*>/gmi, '');
                                            displayedUdm = displayedUdm.replace(/&deg;/g, "°");
                                            displayedUdm = displayedUdm.replace(/&num;/g, "#");
                                            displayedUdm = displayedUdm.replace(/&dollar;/g, "$");
                                            displayedUdm = displayedUdm.replace(/&percnt;/g, "%");
                                            displayedUdm = displayedUdm.replace(/&pound;/g, "£");
                                            displayedUdm = displayedUdm.replace(/&lt;/g, "<");
                                            displayedUdm = displayedUdm.replace(/&gt;/g, ">");
                                            displayedUdm = displayedUdm.replace(/&agrave;/g, "à");
                                            displayedUdm = displayedUdm.replace(/&egrave;/g, "è");
                                            displayedUdm = displayedUdm.replace(/&eacute;/g, "é");
                                            displayedUdm = displayedUdm.replace(/&igrave;/g, "ì");
                                            displayedUdm = displayedUdm.replace(/&ograve;/g, "ò");
                                            displayedUdm = displayedUdm.replace(/&ugrave;/g, "ù");
                                            displayedUdm = displayedUdm.replace(/&micro;/g, "µ");
                                            displayedUdm = displayedUdm.replace(/&sol;/g, "/");
                                            displayedUdm = displayedUdm.replace(/&bsol;/g, "\\");
                                            displayedUdm = displayedUdm.replace(/&lpar;/g, "(");
                                            displayedUdm = displayedUdm.replace(/&rpar;/g, ")");
                                            displayedUdm = displayedUdm.replace(/&lsqb;/g, "[");
                                            displayedUdm = displayedUdm.replace(/&rsqb;/g, "]");
                                            displayedUdm = displayedUdm.replace(/&lcub;/g, "{");
                                            displayedUdm = displayedUdm.replace(/&rcub;/g, "}");
                                            displayedUdm = displayedUdm.replace(/&Hat;/g, "^");
                                        }
                                        $("#inputUdmWidgetM").val(displayedUdm);

                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();

                                        //Set min value
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="setMinValueM" class="col-md-2 control-label">Set Min Value</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="setMinValueM" name="setMinValueM">');
                                        if (styleParameters != null) {
                                            newInput.val(styleParameters.setMinValue);
                                        }
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        //Set max value
                                        newLabel = $('<label for="setMaxValueM" class="col-md-2 control-label">Set Max Value</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="setMaxValueM" name="setMaxValueM">');
                                        if (styleParameters != null) {
                                            newInput.val(styleParameters.setMaxValue);
                                        }
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);

                                        //Set precision (# of decimal places)
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="setDecimalPlacesM" class="col-md-2 control-label">Set # of Decimal Places</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="setDecimalPlacesM" name="setDecimalPlacesM">');
                                        if (styleParameters != null) {
                                            newInput.val(styleParameters.setDecimalPlaces);
                                        }
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);

                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        
                                        //Campo di registrazione widget sul Notificatore
                                        editWidgetGeneratorRegisterField(data['notificatorRegistered'], data['notificatorEnabled'], data['param_w']);

                                        break;
                                        
                                    case "widgetPieChart":
                                        var metricId = $('#metricWidgetM').val();
                                        var metricData = getMetricData(metricId);
                                        var seriesString, series, newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan, newHiddenColors, newColorsTableContainer, newColorsTable1Container, newColorsTable2Container, colorsTable1M, colorsTable2M, valuesNum, newRow, newCell, thrSimpleTables, thrTables1, thrTables2, i, j, k, min, max, color, newTableRow, newTableCell, currentFieldIndex, currentSeriesIndex, thrSeries, colorsTable = null;
                                        var defaultColorsArray = ['#ffcc00', '#33ccff', '#00ff00', '#ff99ff', '#cc6600', '#0066ff', '#ff3300', '#cc9900', '#9900cc', '#003300'];
                                        var colorsArray1M = [];
                                        var colorsArray2M = [];
                                        var table1Shown = false;
                                        var table2Shown = false;
                                        
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').val("");
                                        $('#inputFontSizeM').prop('required', false);
                                        $('#inputFontSizeM').prop('disabled', true);
                                        $('#inputFontColorM').val("");
                                        $('#inputFontColorM').attr('disabled', true);
                                        $('#inputFontColorM').prop('required', false);
                                        $('#widgetFontColorM').css("background-color", "#EEEEEE");
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);

                                        if (metricData.data.length != 0 && (serviceUri == null || serviceUri == "")) {
                                            var seriesString = metricData.data[0].commit.author.series;
                                            var series = jQuery.parseJSON(seriesString);
                                        } else {
                                            var seriesDataArray = [];
                                            var seriesString = "";
                                            var series = null;
                                            var rowParamsArray = JSON.parse(rowParams);
                                            if (serviceUri) {
                                                series = jQuery.parseJSON(serviceUri);
                                            } else {
                                                for (var i = 0; i < rowParamsArray.length; i++) {
                                                    let smUrl = "<?= $superServiceMapProxy ?>/api/v1/?serviceUri=" + rowParamsArray[i].metricId.split("serviceUri=")[1];
                                                    getSmartCitySensorValues(rowParamsArray, i, smUrl, null, false, function (extractedData) {

                                                        if (extractedData) {
                                                            seriesDataArray.push(extractedData);
                                                        } else {
                                                            console.log("Dati Smart City non presenti");
                                                            seriesDataArray.push(undefined);
                                                        }
                                                        //if (endFlag === true) {
                                                        // Alla fine quando si arriva all'ultimo record ottenuto dalle varie chiamate asincrone
                                                        if (rowParamsArray.length === seriesDataArray.length) {
                                                            let stopFlag = 1;
                                                            // DO FINAL SERIALIZATION
                                                            metricLabels = getMetricLabelsForBarSeries(rowParamsArray);
                                                            deviceLabels = getDeviceLabelsForBarSeries(rowParamsArray);
                                                            let mappedSeriesDataArray = buildBarSeriesArrayMap(seriesDataArray);
                                                            series = serializeSensorDataForBarSeries(mappedSeriesDataArray, metricLabels, deviceLabels);

                                                        }

                                                    });
                                                }
                                            }
                                        }

                                        if(metricType != null) {
                                            if (metricType.indexOf('Percentuale') >= 0) {

                                            } else {
                                                seriesString = metricData.data[0].commit.author.series;
                                                series = jQuery.parseJSON(seriesString);
                                            }
                                        }

                                        if(styleParamsRaw !== null) 
                                        {
                                            styleParameters = JSON.parse(styleParamsRaw); 
                                        }

                                        if (rowParamsArray) {
                                            if (!serviceUri) {
                                                // Caso New PieChart primo istanziamento
                                                for (n = 0; n < rowParamsArray.length; n++) {
                                                    if (!metricLabels.includes(rowParamsArray[n].metricType)) {
                                                        metricLabels.push(rowParamsArray[n].metricType);
                                                    }

                                                    if (!deviceLabels.includes(rowParamsArray[n].metricName)) {
                                                        deviceLabels.push(rowParamsArray[n].metricName);
                                                    }
                                                }
                                            } else {
                                                if (series.secondAxis.desc == "value name") {
                                                    deviceLabels = series.secondAxis.labels;
                                                } else {
                                                    deviceLabels = series.firstAxis.labels;
                                                }
                                            }
                                        }

                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        removeWidgetProcessGeneralFields("editWidget");

                                        //Group-by attribute
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="groupByAttrM" class="col-md-2 control-label">Group by Attribute (Inner Pie)</label>');
                                        newInnerDiv = $('<div class="col-md-4"></div>');
                                        newSelect = $('<select class="form-control" id="groupByAttrM" name="groupByAttrM" required>');
                                        newSelect.append("<option value='" + series.secondAxis.desc + "'>" + series.secondAxis.desc + "</option>");
                                        newSelect.append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();

                                    /*    $('#groupByAttrM').change(function()
                                        {
                                            let elems = document.getElementsByClassName("deviceLab");

                                            [].forEach.call(elems, function (elem) {
                                            //    if($('#groupByAttrM').val() === "value name") {    // FLIP VELUE-TYPE
                                                if($('#groupByAttrM').val() === "value type") {
                                                    elem.style.display = "none";
                                            //    } else if ($('#groupByAttrM').val() === "value type") {
                                                } else if ($('#groupByAttrM').val() === "value name") {
                                                    elem.style.display = "block";
                                                }
                                            });

                                        });*/
                                        
                                        //Legend font size e font color
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="legendFontSizeM" class="col-md-2 control-label"><?php echo _("Legend font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="legendFontSizeM" name="legendFontSizeM" required>');
                                        newInput.val(styleParameters.legendFontSize);
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel = $('<label for="legendFontColorM" class="col-md-2 control-label">Legend font color</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<div id="legendFontColorPickerContainerM" class="input-group"><input type="text" class="form-control demo-1 demo-auto" id="legendFontColorPickerM" name="legendFontColorPickerM" required><span class="input-group-addon"><i id="widgetLegendFontColorPickerM"></i></span></div>');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        $("#widgetLegendFontColorPickerM").css('display', 'block');
                                        $("#widgetLegendFontColorPickerM").parent().parent().parent().colorpicker({color: styleParameters.legendFontColor, format: "rgba"});
                                        
                                        //Nuova riga
                                        //Datalabels distance (se Percentuale) oppure Datalabels (se Series)
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        if(metricType != null) {
                                            if (metricType.indexOf('Percentuale') >= 0) {
                                                newLabel = $('<label for="dataLabelsDistanceM" class="col-md-2 control-label">Data labels distance</label>');
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                newInput = $('<input type="text" class="form-control" id="dataLabelsDistanceM" name="dataLabelsDistanceM" required>');
                                                newInput.val(styleParameters.dataLabelsDistance);
                                                newInnerDiv.append(newInput);
                                            } else if (metricType === 'Series') {
                                                newLabel = $('<label for="dataLabelsM" class="col-md-2 control-label">Data labels for <i>' + series.firstAxis.desc + '</i></label>');
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                newSelect = $('<select class="form-control" id="dataLabelsM" name="dataLabelsM"></select>');
                                                newSelect.append('<option value="no">No data labels</option>');
                                                newSelect.append('<option value="value">Value only</option>');
                                                newSelect.append('<option value="full">Field name and value</option>');
                                                newSelect.val(styleParameters.dataLabels);
                                                newInnerDiv.append(newSelect);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);
                                            }
                                        } else {
                                            newLabel = $('<label for="dataLabelsM" class="col-md-2 control-label">Data labels for <i>' + series.firstAxis.desc + '</i></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newSelect = $('<select class="form-control" id="dataLabelsM" name="dataLabelsM"></select>');
                                            newSelect.append('<option value="no">No data labels</option>');
                                            newSelect.append('<option value="value">Value only</option>');
                                            newSelect.append('<option value="full">Field name and value</option>');
                                            newSelect.val(styleParameters.dataLabels);
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                        }
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        //Data labels font size
                                        newLabel = $('<label for="dataLabelsFontSizeM" class="col-md-2 control-label"><?php echo _("Data labels font size"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="dataLabelsFontSizeM" name="dataLabelsFontSizeM" required>');
                                        newInput.val(styleParameters.dataLabelsFontSize);
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        //Nuova riga
                                        //Data labels distances per widget series
                                        if(metricType != null) {
                                            if (metricType === 'Series') {
                                                newFormRow = $('<div class="row"></div>');
                                                $("#specificParamsM").append(newFormRow);
                                                //Data labels distance per anello più interno
                                                newLabel = $('<label for="dataLabelsDistance1M" class="col-md-2 control-label">Data labels distance for <i>' + series.secondAxis.desc + '</i></label>');
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                newInput = $('<input type="text" class="form-control" id="dataLabelsDistance1M" name="dataLabelsDistance1M" required>');
                                                newInput.val(styleParameters.dataLabelsDistance1);
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);

                                                //Data labels distance per anello più esterno
                                                newLabel = $('<label for="dataLabelsDistance2M" class="col-md-2 control-label">Data labels distance for <i>' + series.firstAxis.desc + '</i></label>');
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                newInput = $('<input type="text" class="form-control" id="dataLabelsDistance2M" name="dataLabelsDistance2M" required>');
                                                newInput.val(styleParameters.dataLabelsDistance2);
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);
                                            }
                                        } else {
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            //Data labels distance per anello più interno
                                            newLabel = $('<label for="dataLabelsDistance1M" class="col-md-2 control-label">Data labels distance for <i>' + series.secondAxis.desc + '</i></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newInput = $('<input type="text" class="form-control" id="dataLabelsDistance1M" name="dataLabelsDistance1M" required>');
                                            newInput.val(styleParameters.dataLabelsDistance1);
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            //Data labels distance per anello più esterno
                                            newLabel = $('<label for="dataLabelsDistance2M" class="col-md-2 control-label">Data labels distance for <i>' + series.firstAxis.desc + '</i></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newInput = $('<input type="text" class="form-control" id="dataLabelsDistance2M" name="dataLabelsDistance2M" required>');
                                            newInput.val(styleParameters.dataLabelsDistance2);
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                        }
                                        
                                        //Nuova riga
                                        //Data labels font color
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="dataLabelsFontColorM" class="col-md-2 control-label"><?php echo _("Data labels font color"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInputGroup = $('<div class="input-group color-choice">');
                                        newInput = $('<input type="text" class="form-control" id="dataLabelsFontColorM" name="dataLabelsFontColorM" required>');
                                        newSpan = $('<span class="input-group-addon"><i id="widgetDataLabelsFontColorM"></i></span>');
                                        newInputGroup.append(newInput);
                                        newInputGroup.append(newSpan);
                                        newInnerDiv.append(newInputGroup);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newInnerDiv.colorpicker({color: styleParameters.dataLabelsFontColor, format: "rgba"});
                                        
                                        //Inner radius 1
                                        if(metricType != null) {
                                            if (metricType.indexOf('Percentuale') >= 0) {
                                                newLabel = $('<label for="innerRadius1M" class="col-md-2 control-label"><?php echo _("Inner radius (%)"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                newInput = $('<input type="text" class="form-control" id="innerRadius1M" name="innerRadius1M" required>');
                                                newInput.val(styleParameters.innerRadius1);
                                            } else if (metricType === 'Series') {
                                                newLabel = $('<label for="innerRadius1M" class="col-md-2 control-label">Inner radius for <i>' + series.secondAxis.desc + '</i> (%)</label>');
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                newInput = $('<input type="text" class="form-control" id="innerRadius1M" name="innerRadius1M" required>');
                                                newInput.val(styleParameters.innerRadius1);
                                            }
                                        } else {
                                            newLabel = $('<label for="innerRadius1M" class="col-md-2 control-label">Inner radius for <i>' + series.secondAxis.desc + '</i> (%)</label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newInput = $('<input type="text" class="form-control" id="innerRadius1M" name="innerRadius1M" required>');
                                            newInput.val(styleParameters.innerRadius1);
                                        }
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        //Nuova riga
                                        //Questi raggi sono solo per la versione series
                                        if(metricType != null) {
                                            if (metricType === 'Series') {
                                                //Outer radius 1
                                                newFormRow = $('<div class="row"></div>');
                                                $("#specificParamsM").append(newFormRow);
                                                newLabel = $('<label for="outerRadius1M" class="col-md-2 control-label">Outer radius for <i>' + series.secondAxis.desc + '</i> (%)</label>');
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                newInput = $('<input type="text" class="form-control" id="outerRadius1M" name="outerRadius1M" required>');
                                                newInput.val(styleParameters.outerRadius1);
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);

                                                //Inner radius 2
                                                newLabel = $('<label for="innerRadius2M" class="col-md-2 control-label">Inner radius for <i>' + series.firstAxis.desc + '</i> (%)</label>');
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                newInput = $('<input type="text" class="form-control" id="innerRadius2M" name="innerRadius2M" required>');
                                                newInput.val(styleParameters.innerRadius2);
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);
                                            }
                                        } else {
                                            //Outer radius 1
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="outerRadius1M" class="col-md-2 control-label">Outer radius for <i>' + series.secondAxis.desc + '</i> (%)</label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newInput = $('<input type="text" class="form-control" id="outerRadius1M" name="outerRadius1M" required>');
                                            newInput.val(styleParameters.outerRadius1);
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            //Inner radius 2
                                            newLabel = $('<label for="innerRadius2M" class="col-md-2 control-label">Inner radius for <i>' + series.firstAxis.desc + '</i> (%)</label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newInput = $('<input type="text" class="form-control" id="innerRadius2M" name="innerRadius2M" required>');
                                            newInput.val(styleParameters.innerRadius2);
                                            newInnerDiv.append(newInput);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                        }
                                        
                                        //Nuova riga
                                        //Start angle
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="startAngleM" class="col-md-2 control-label"><?php echo _("Start angle (°)"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="startAngleM" name="startAngleM" required>');
                                        newInput.val(styleParameters.startAngle);
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);

                                        //End angle
                                        newLabel = $('<label for="endAngleM" class="col-md-2 control-label"><?php echo _("End angle (°)"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="endAngleM" name="endAngleM" required>');
                                        newInput.val(styleParameters.endAngle);
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        //Nuova riga
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        //Center Y
                                        newLabel = $('<label for="centerYM" class="col-md-2 control-label"><?php echo _("Diagram center Y(%)"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="centerYM" name="centerYM" required>');
                                        newInput.val(styleParameters.centerY);
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        //Select per colori automatici/manuali
                                        if(metricType != null) {
                                            if (metricType.indexOf('Percentuale') >= 0) {
                                                newLabel = $('<label for="colorsSelect1M" class="col-md-2 control-label"><?php echo _("Slices colors"); ?></label>');
                                            } else if (metricType === 'Series') {
                                                newLabel = $('<label for="colorsSelect1M" class="col-md-2 control-label">Slices colors for <i>' + series.secondAxis.desc + '</i></label>');
                                            }
                                        } else {
                                            newLabel = $('<label for="colorsSelect1M" class="col-md-2 control-label">Slices colors for <i>' + series.secondAxis.desc + '</i></label>');
                                        }
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="colorsSelect1M" name="colorsSelect1M"></select>');
                                        newSelect.append('<option value="auto">Automatic</option>');
                                        newSelect.append('<option value="manual">Manual</option>');
                                        newSelect.val(styleParameters.colorsSelect1);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);

                                        //Campo hidden per i colori
                                        newHiddenColors = $('<input type="hidden" id="colors1M" name="colors1M">');
                                        $("#specificParamsM").append(newHiddenColors);
                                        newHiddenColors = $('<input type="hidden" id="colors2M" name="colors2M">');
                                        $("#specificParamsM").append(newHiddenColors);

                                        //Div contenitore per la tabella dei colori
                                        newColorsTableContainer = $('<div id="colorsTableContainerM" class="row rowCenterContent" style="width: 100%; margin-left: 0px;"></div>');
                                        newColorsTable1Container = $('<div id="colorsTable1ContainerM" style="width: 100%; float: left;"></div>');
                                        newColorsTable2Container = $('<div id="colorsTable2ContainerM" style="width: 100%; float: left;"></div>');
                                        newColorsTableContainer.append(newColorsTable1Container);
                                        
                                        function updateWidgetPieChartColors1M(e, params)
                                        {
                                            var newColor = $(this).colorpicker('getValue');
                                            var index = parseInt($(this).parents('tr').index() - 1);
                                            colorsArray1M[index] = newColor;
                                            $("#colors1M").val(JSON.stringify(colorsArray1M));
                                        }
                                        
                                        function updateWidgetPieChartColors2M(e, params)
                                        {
                                            var newColor = $(this).colorpicker('getValue');
                                            var index = parseInt($(this).parents('tr').index() - 1);
                                            colorsArray2M[index] = newColor;
                                            $("#colors2M").val(JSON.stringify(colorsArray2M));
                                        }
                                        
                                        //Aggiunta al form dei campi per parametri specifici
                                        if (metricType != null) {
                                            if (metricType.indexOf('Percentuale') >= 0) {
                                                $("#specificParamsM").append(newColorsTableContainer);

                                                newColorsTable1Container.hide();
                                                newColorsTableContainer.hide();

                                                //Form per dati tradizionali percentuali
                                                var valuePerc = [];
                                                var descriptions = [];
                                                valuePerc[0] = metricData.data[0].commit.author.value_perc1;
                                                valuePerc[1] = metricData.data[0].commit.author.value_perc2;
                                                valuePerc[2] = metricData.data[0].commit.author.value_perc3;

                                                colorsTable1M = $("<table class='table table-bordered table-condensed thrRangeTable' style='width: 100%;'><tr><td>Field</td><td>Color</td></tr></table>");

                                                //Costruiamo la tabella dei colori e il corrispondente JSON una tantum e mostriamola/nascondiamola a seconda di cosa sceglie l'utente, per non perdere eventuali colori immessi in precedenza.
                                                if ((valuePerc[0] !== null) && (valuePerc[1] !== null) && (valuePerc[2] !== null)) {
                                                    valuesNum = 3;
                                                    descriptions[0] = metricData.data[0].commit.author.field1Desc;
                                                    descriptions[1] = metricData.data[0].commit.author.field2Desc;
                                                    descriptions[2] = metricData.data[0].commit.author.field3Desc;
                                                } else if ((valuePerc[0] !== null) && (valuePerc[1] !== null) && (valuePerc[2] === null)) {
                                                    valuesNum = 2;
                                                    descriptions[0] = metricData.data[0].commit.author.field1Desc;
                                                    descriptions[1] = metricData.data[0].commit.author.field2Desc;
                                                } else if ((valuePerc[0] !== null) && (valuePerc[1] === null) && (valuePerc[2] === null)) {
                                                    valuesNum = 1;
                                                    descriptions[0] = metricData.data[0].commit.author.field1Desc;
                                                }

                                                //Costruzione tabella dei colori iniziale
                                                for (var i = 0; i < valuesNum; i++) {
                                                    colorsArray1M[i] = styleParameters.colors1[i];
                                                    newRow = $('<tr></tr>');
                                                    //newCell = $('<td>Value ' + parseInt(i+1) + '</td>');
                                                    newCell = $('<td>' + descriptions[i] + '</td>');
                                                    newRow.append(newCell);
                                                    newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                    newRow.append(newCell);
                                                    newRow.find('div.colorPicker').colorpicker({
                                                        color: colorsArray1M[i],
                                                        format: "rgba"
                                                    });
                                                    newRow.find('div.colorPicker').on('changeColor', updateWidgetPieChartColors1M);
                                                    colorsTable1M.append(newRow);
                                                }

                                                if (valuesNum === 1) {
                                                    colorsArray1M[1] = styleParameters.colors1[1];
                                                    newRow = $('<tr></tr>');
                                                    newCell = $('<td>Complementary</td>');
                                                    newRow.append(newCell);
                                                    newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                    newRow.append(newCell);
                                                    newRow.find('div.colorPicker').colorpicker({
                                                        color: colorsArray1M[1],
                                                        format: "rgba"
                                                    });
                                                    newRow.find('div.colorPicker').on('changeColor', updateWidgetPieChartColors1M);
                                                    colorsTable1M.append(newRow);
                                                }

                                                $("#colors1M").val(JSON.stringify(colorsArray1M));
                                                newColorsTable1Container.append(colorsTable1M);
                                                colorsTable1M.hide();
                                            } else if (metricType === 'Series') {
                                                //Nuova riga
                                                newFormRow = $('<div class="row"></div>');
                                                $("#specificParamsM").append(newFormRow);
                                                newLabel = $('<label for="colorsSelect2M" class="col-md-2 control-label">Slices colors for <i>' + series.firstAxis.desc + '</i></label>');
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                newSelect = $('<select class="form-control" id="colorsSelect2M" name="colorsSelect2M"></select>');
                                                newSelect.append('<option value="auto"><?php echo _("Automatic"); ?></option>');
                                                newSelect.append('<option value="manual"><?php echo _("Manual"); ?></option>');
                                                newSelect.val(styleParameters.colorsSelect2);
                                                newInnerDiv.append(newSelect);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);

                                                newColorsTableContainer.append(newColorsTable2Container);

                                                $("#specificParamsM").append(newColorsTableContainer);

                                                newColorsTable1Container.hide();
                                                newColorsTable2Container.hide();
                                                newColorsTableContainer.hide();

                                                //Form per dati Series
                                                colorsTable1M = $("<table class='table table-bordered table-condensed thrRangeTable' style='width: 100%;'><tr><td>Fields of set <b>" + series.secondAxis.desc + "</b></td><td>Color</td></tr></table>");
                                                colorsTable2M = $("<table class='table table-bordered table-condensed thrRangeTable' style='width: 100%;'><tr><td>Fields of set <b>" + series.firstAxis.desc + "</b></td><td>Color</td></tr></table>");

                                                //Costruiamo la tabella dei colori e il corrispondente JSON una tantum e mostriamola/nascondiamola a seconda di cosa sceglie l'utente, per non perdere eventuali colori immessi in precedenza.
                                                for (var i = 0; i < series.secondAxis.labels.length; i++) {
                                                    colorsArray1M[i] = styleParameters.colors1[i];
                                                    newRow = $('<tr></tr>');
                                                    newCell = $('<td>' + series.secondAxis.labels[i] + '</td>');
                                                    newRow.append(newCell);
                                                    newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                    newRow.append(newCell);
                                                    newRow.find('div.colorPicker').colorpicker({
                                                        color: colorsArray1M[i],
                                                        format: "rgba"
                                                    });
                                                    newRow.find('div.colorPicker').on('changeColor', updateWidgetPieChartColors1M);
                                                    colorsTable1M.append(newRow);
                                                }

                                                for (var i = 0; i < series.firstAxis.labels.length; i++) {
                                                    colorsArray2M[i] = styleParameters.colors2[i];
                                                    newRow = $('<tr></tr>');
                                                    newCell = $('<td>' + series.firstAxis.labels[i] + '</td>');
                                                    newRow.append(newCell);
                                                    newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                    newRow.append(newCell);
                                                    newRow.find('div.colorPicker').colorpicker({
                                                        color: colorsArray2M[i],
                                                        format: "rgba"
                                                    });
                                                    newRow.find('div.colorPicker').on('changeColor', updateWidgetPieChartColors2M);
                                                    colorsTable2M.append(newRow);
                                                }

                                                $("#colors1M").val(JSON.stringify(colorsArray1M));
                                                newColorsTable1Container.append(colorsTable1M);
                                                $("#colors2M").val(JSON.stringify(colorsArray2M));
                                                newColorsTable2Container.append(colorsTable2M);
                                                colorsTable1M.hide();
                                                colorsTable2M.hide();
                                            }
                                        } else {
                                            //Nuova riga
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="colorsSelect2M" class="col-md-2 control-label">Slices colors for <i>' + series.firstAxis.desc + '</i></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newSelect = $('<select class="form-control" id="colorsSelect2M" name="colorsSelect2M"></select>');
                                            newSelect.append('<option value="auto">Automatic</option>');
                                            newSelect.append('<option value="manual">Manual</option>');
                                            newSelect.val(styleParameters.colorsSelect2);
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newColorsTableContainer.append(newColorsTable2Container);

                                            $("#specificParamsM").append(newColorsTableContainer);

                                            newColorsTable1Container.hide();
                                            newColorsTable2Container.hide();
                                            newColorsTableContainer.hide();

                                            //Form per dati Series
                                            colorsTable1M = $("<table class='table table-bordered table-condensed thrRangeTable' style='width: 100%;'><tr><td>Fields of set <b>" + series.secondAxis.desc + "</b></td><td>Color</td></tr></table>");
                                            colorsTable2M = $("<table class='table table-bordered table-condensed thrRangeTable' style='width: 100%;'><tr><td>Fields of set <b>" + series.firstAxis.desc + "</b></td><td>Color</td></tr></table>");

                                            //Costruiamo la tabella dei colori e il corrispondente JSON una tantum e mostriamola/nascondiamola a seconda di cosa sceglie l'utente, per non perdere eventuali colori immessi in precedenza.
                                            for (var i = 0; i < series.secondAxis.labels.length; i++) {
                                                if (styleParameters.colors1 != null)
                                                    colorsArray1M[i] = styleParameters.colors1[i];
                                                newRow = $('<tr></tr>');
                                                if (styleParameters.editDeviceLabels != null) {
                                                    if (styleParameters.editDeviceLabels[i] && document.getElementById("groupByAttrM").value == "value name") {
                                                        newCell = $('<td>' + styleParameters.editDeviceLabels[i] + '</td>');
                                                    } else {
                                                        newCell = $('<td>' + series.secondAxis.labels[i] + '</td>');
                                                    }
                                                } else {
                                                    newCell = $('<td>' + series.secondAxis.labels[i] + '</td>');
                                                }
                                                newRow.append(newCell);
                                                newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                newRow.append(newCell);
                                                newRow.find('div.colorPicker').colorpicker({
                                                    color: colorsArray1M[i],
                                                    format: "rgba"
                                                });
                                                newRow.find('div.colorPicker').on('changeColor', updateWidgetPieChartColors1M);
                                                colorsTable1M.append(newRow);
                                            }

                                            for (var i = 0; i < series.firstAxis.labels.length; i++) {
                                                if (styleParameters.colors2 != null)
                                                    colorsArray2M[i] = styleParameters.colors2[i];
                                                newRow = $('<tr></tr>');
                                                if (styleParameters.editDeviceLabels != null) {
                                                    if (styleParameters.editDeviceLabels[i] && document.getElementById("groupByAttrM").value == "value type") {
                                                        newCell = $('<td>' + styleParameters.editDeviceLabels[i] + '</td>');
                                                    } else {
                                                        newCell = $('<td>' + series.firstAxis.labels[i] + '</td>');
                                                    }
                                                } else {
                                                    newCell = $('<td>' + series.firstAxis.labels[i] + '</td>');
                                                }
                                                newRow.append(newCell);
                                                newCell = $('<td><div class="input-group colorPicker"><input type="text" class="form-control"><span class="input-group-addon"><i class="thePicker"></i></span></div></td>');
                                                newRow.append(newCell);
                                                newRow.find('div.colorPicker').colorpicker({
                                                    color: colorsArray2M[i],
                                                    format: "rgba"
                                                });
                                                newRow.find('div.colorPicker').on('changeColor', updateWidgetPieChartColors2M);
                                                colorsTable2M.append(newRow);
                                            }

                                            $("#colors1M").val(JSON.stringify(colorsArray1M));
                                            newColorsTable1Container.append(colorsTable1M);
                                            $("#colors2M").val(JSON.stringify(colorsArray2M));
                                            newColorsTable2Container.append(colorsTable2M);
                                            colorsTable1M.hide();
                                            colorsTable2M.hide();
                                        }
                                        
                                        if($("#colorsSelect1M").val() === 'manual')
                                        {
                                            $('#colorsTableContainerM').css("display", "block");
                                            $('#colorsTable1ContainerM').css("display", "block");
                                            colorsTable1M.css("display", "");
                                            table1Shown = true;
                                        }
                                        else
                                        {
                                            colorsTable1M.css("display", "none");
                                            $('#colorsTable1ContainerM').css("display", "none");
                                            table1Shown = false;
                                            if(table2Shown === false)
                                            {
                                                $('#colorsTableContainerM').css("display", "none");
                                            }
                                        }

                                        if (metricType != null) {
                                            if (metricType === 'Series') {
                                                if ($("#colorsSelect2M").val() === 'manual') {
                                                    $('#colorsTableContainerM').css("display", "block");
                                                    $('#colorsTable2ContainerM').css("display", "block");
                                                    colorsTable2M.css("display", "");
                                                    table2Shown = true;
                                                } else {
                                                    colorsTable2M.css("display", "none");
                                                    $('#colorsTable2ContainerM').css("display", "none");
                                                    table2Shown = false;
                                                    if (table1Shown === false) {
                                                        $('#colorsTableContainerM').css("display", "none");
                                                    }
                                                }
                                            }
                                        } else {
                                            if ($("#colorsSelect2M").val() === 'manual') {
                                                $('#colorsTableContainerM').css("display", "block");
                                                $('#colorsTable2ContainerM').css("display", "block");
                                                colorsTable2M.css("display", "");
                                                table2Shown = true;
                                            } else {
                                                colorsTable2M.css("display", "none");
                                                $('#colorsTable2ContainerM').css("display", "none");
                                                table2Shown = false;
                                                if (table1Shown === false) {
                                                    $('#colorsTableContainerM').css("display", "none");
                                                }
                                            }
                                        }
                                        
                                        $('#colorsSelect1M').change(function () 
                                        {
                                            if($('#colorsSelect1M').val() === "manual")
                                            {
                                                $('#colorsTableContainerM').css("display", "block");
                                                $('#colorsTable1ContainerM').css("display", "block");
                                                colorsTable1M.css("display", "");
                                                table1Shown = true;
                                            }
                                            else
                                            {
                                                colorsTable1M.css("display", "none");
                                                $('#colorsTable1ContainerM').css("display", "none");
                                                table1Shown = false;
                                                if(table2Shown === false)
                                                {
                                                    $('#colorsTableContainerM').css("display", "none");
                                                }
                                            }
                                        });

                                        if (metricType != null) {
                                            if (metricType === 'Series') {
                                                $('#colorsSelect2M').change(function () {
                                                    if ($('#colorsSelect2M').val() === "manual") {
                                                        $('#colorsTableContainerM').css("display", "block");
                                                        $('#colorsTable2ContainerM').css("display", "block");
                                                        colorsTable2M.css("display", "");
                                                        table2Shown = true;
                                                    } else {
                                                        colorsTable2M.css("display", "none");
                                                        $('#colorsTable2ContainerM').css("display", "none");
                                                        table2Shown = false;
                                                        if (table1Shown === false) {
                                                            $('#colorsTableContainerM').css("display", "none");
                                                        }
                                                    }
                                                });
                                            }
                                        } else {
                                            $('#colorsSelect2M').change(function () {
                                                if ($('#colorsSelect2M').val() === "manual") {
                                                    $('#colorsTableContainerM').css("display", "block");
                                                    $('#colorsTable2ContainerM').css("display", "block");
                                                    colorsTable2M.css("display", "");
                                                    table2Shown = true;
                                                } else {
                                                    colorsTable2M.css("display", "none");
                                                    $('#colorsTable2ContainerM').css("display", "none");
                                                    table2Shown = false;
                                                    if (table1Shown === false) {
                                                        $('#colorsTableContainerM').css("display", "none");
                                                    }
                                                }
                                            });
                                        }
                                        
                                        //Codice costruzione soglie
                                        if (metricType != null) {
                                            if (metricType.indexOf('Percentuale') >= 0) {
                                                //Tabelle editabili delle soglie
                                                thrSimpleTables = new Array();

                                                setSimpleGlobals(currentParams, thrSimpleTables, valuePerc, descriptions);

                                                //Costruzione THRTables dai parametri provenienti da DB (vuote se non ci sono soglie per quel campo, anche nel caso di nessuna soglia settata in assoluto
                                                buildThrTablesForEditWidgetSimple();

                                                //Nuova riga
                                                //Set thresholds
                                                newFormRow = $('<div class="row"></div>');
                                                $("#specificParamsM").append(newFormRow);
                                                newLabel = $('<label for="alrThrSelM" class="col-md-2 control-label"><?php echo _("Set thresholds"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                newSelect = $('<select class="form-control" id="alrThrSelM" name="alrThrSelM" required>');
                                                newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                                newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                                newInnerDiv.append(newSelect);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);
                                                newLabel.show();
                                                newInnerDiv.show();
                                                newSelect.show();

                                                //Listener per settaggio/desettaggio soglie relativo alla select "Set thresholds"
                                                $('#alrThrSelM').change(alrThrFlagMListenerSimple);

                                                //Threshold field select
                                                newLabel = $('<label for="alrFieldSelM" class="col-md-2 control-label"><?php echo _("Thresholds target field"); ?></label>');
                                                newSelect = $('<select class="form-control" id="alrFieldSelM" name="alrFieldSelM">');
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                newInnerDiv.append(newSelect);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);
                                                newLabel.hide();
                                                newInnerDiv.hide();
                                                newSelect.hide();

                                                //Contenitore per tabella delle soglie
                                                addWidgetRangeTableContainerM = $('<div id="addWidgetRangeTableContainerM" class="row rowCenterContent"></div>');
                                                $("#specificParamsM").append(addWidgetRangeTableContainerM);
                                                addWidgetRangeTableContainerM.hide();

                                                if (currentParams === null) {
                                                    $('#alrThrSelM').val("no");
                                                    $('#parametersM').val('');
                                                } else {
                                                    //ESPOSIZIONE DEI CAMPI
                                                    $('#alrThrSelM').val("yes");
                                                    $("label[for='alrFieldSelM']").show();
                                                    $('#alrFieldSelM').parent().show();
                                                    $('#alrFieldSelM').show();
                                                    //POPOLAMENTO DELLA SELECT DEI CAMPI
                                                    for (var i = 0; i < descriptions.length; i++) {
                                                        $('#alrFieldSelM').append("<option value='" + descriptions[i] + "'>" + descriptions[i] + "</option>");
                                                    }
                                                    $('#alrFieldSelM').val(-1);
                                                    $('#addWidgetRangeTableContainerM').show();
                                                    $('#parametersM').val(JSON.stringify(currentParams));
                                                    //Listener per selezione campo
                                                    $('#alrFieldSelM').change(alrFieldSelMListenerSimple);
                                                }
                                            } else if (metricType === 'Series') {
                                                thrTables1 = new Array();
                                                thrTables2 = new Array();
                                                setGlobals(currentParams, thrTables1, thrTables2, series, $('#select-widget-m').val());

                                                //Costruzione THRTables dai parametri provenienti da DB (vuote se non ci sono soglie per quel campo, anche nel caso di nessuna soglia settata in assoluto
                                                buildThrTablesForEditWidget();

                                                //Codice di creazione soglie
                                                //Nuova riga
                                                //Set thresholds
                                                newFormRow = $('<div class="row"></div>');
                                                $("#specificParamsM").append(newFormRow);
                                                newLabel = $('<label for="alrThrSelM" class="col-md-2 control-label"><?php echo _("Set thresholds"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                newSelect = $('<select class="form-control" id="alrThrSelM" name="alrThrSelM" required>');
                                                newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                                newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                                newInnerDiv.append(newSelect);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);
                                                newLabel.show();
                                                newInnerDiv.show();
                                                newSelect.show();

                                                //Threshold target select - Questa select viene nascosta o mostrata a seconda che nella "Set thresholds" si selezioni yes o no.
                                                newLabel = $('<label for="alrAxisSelM" class="col-md-2 control-label"><?php echo _("Thresholds target set"); ?></label>');
                                                newSelect = $('<select class="form-control" id="alrAxisSelM" name="alrAxisSelM"></select>');
                                                newSelect.append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                                newSelect.val(-1);
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                newInnerDiv.append(newSelect);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);
                                                newLabel.hide();
                                                newInnerDiv.hide();
                                                newSelect.hide();

                                                //Nuova riga
                                                //Threshold field select
                                                newFormRow = $('<div class="row"></div>');
                                                $("#specificParamsM").append(newFormRow);
                                                newLabel = $('<label for="alrFieldSelM" class="col-md-2 control-label"><?php echo _("Thresholds target field"); ?></label>');
                                                newSelect = $('<select class="form-control" id="alrFieldSelM" name="alrFieldSelM">');
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                newInnerDiv.append(newSelect);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);
                                                newLabel.hide();
                                                newInnerDiv.hide();
                                                newSelect.hide();

                                                //Contenitore per tabella delle soglie
                                                addWidgetRangeTableContainerM = $('<div id="addWidgetRangeTableContainerM" class="row rowCenterContent"></div>');
                                                $("#specificParamsM").append(addWidgetRangeTableContainerM);
                                                addWidgetRangeTableContainerM.hide();

                                                //Listener per settaggio/desettaggio soglie relativo alla select "Set thresholds"
                                                $('#alrThrSelM').change(alrThrFlagMListener);

                                                if (currentParams === null) {
                                                    $('#alrThrSelM').val("no");
                                                    $("label[for='alrAxisSelM']").hide();
                                                    $('#alrAxisSelM').val(-1);
                                                    $('#alrAxisSelM').hide();
                                                    $('#parametersM').val('');
                                                } else {
												 if (currentParams.hasOwnProperty(thresholdObject)){
                                                    //ESPOSIZIONE DEI CAMPI
                                                    $('#alrThrSelM').val("yes");
                                                    $('#alrAxisSelM').val(currentParams.thresholdObject.target);
                                                    $("label[for='alrAxisSelM']").show();
                                                    $('#alrAxisSelM').parent().show();
                                                    $('#alrAxisSelM').show();
                                                    $("label[for='alrFieldSelM']").show();
                                                    $('#alrFieldSelM').parent().show();
                                                    $('#alrFieldSelM').show();
                                                    //POPOLAMENTO DELLA SELECT DEI CAMPI
                                                    alrAxisSelMListener();
                                                    $('#addWidgetRangeTableContainerM').show();
                                                    $('#parametersM').val(JSON.stringify(currentParams));
                                                    //Listener per settaggio/desettaggio campi in base ad asse selezionato
                                                    $('#alrAxisSelM').change(alrAxisSelMListener);
                                                    //Listener per selezione campo
                                                    $('#alrFieldSelM').change(alrFieldSelMListener);
													}
                                                }
                                            }
                                        } else {
                                            thrTables1 = new Array();
                                            thrTables2 = new Array();
                                            setGlobals(currentParams, thrTables1, thrTables2, series, $('#select-widget-m').val());

                                            //Costruzione THRTables dai parametri provenienti da DB (vuote se non ci sono soglie per quel campo, anche nel caso di nessuna soglia settata in assoluto
                                            buildThrTablesForEditWidget();

                                            // Nuove righe (labels per i devices)
                                            for (var n = 0; n < deviceLabels.length; n++) {
                                                newFormRow = $('<div class="row deviceLab"></div>');
                                                $("#specificParamsM").append(newFormRow);
                                                newLabel = $('<label for="deviceLabelsM" class="col-md-2 control-label">Value Name #' + (n + 1).toString() + ' Label</label>');
                                                newInnerDiv = $('<div class="col-md-7"></div>');
                                                var placeholderStr = "";
                                                if (styleParameters.editDeviceLabels != null) {
                                                    if (styleParameters.editDeviceLabels.length == deviceLabels.length) {
                                                        placeholderStr = styleParameters.editDeviceLabels[n];
                                                    } else {
                                                        // flipped case
                                                        placeholderStr = deviceLabels[n];
                                                    }
                                                } else {
                                                    placeholderStr = deviceLabels[n];
                                                }
                                                //    newInput = $('<input type="text" class="form-control" id="deviceLabelsM_' + n + '" name="deviceLabelsM_' + n + '" placeholder="' + placeholderStr + '">');
                                                newInput = $('<input type="text" class="form-control" id="deviceLabelsM_' + n + '" name="deviceLabelsM_' + n + '" value = "' + placeholderStr + '">');
                                                //    newInput = $('<input type="text" class="form-control" id="deviceLabelsM_' + n + '" name="deviceLabelsM" required placeholder="' + deviceLabels[n] + '">');
                                                newInnerDiv.append(newInput);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);
                                                newLabel.show();
                                                newInnerDiv.show();
                                                newInput.show();
                                            }

                                        //    if (document.getElementById("groupByAttrM").value == "value name") {
                                                let elems = document.getElementsByClassName("deviceLab");

                                                [].forEach.call(elems, function (elem) {
                                                 //   if($('#groupByAttrM').val() === "value type")
                                                 //       elem.style.display = "none";
                                                 //   else if ($('#groupByAttrM').val() === "value name") {
                                                        elem.style.display = "block";
                                                 //   }
                                                });
                                         //   }

                                            //Codice di creazione soglie
                                            //Nuova riga
                                            //Set thresholds
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="alrThrSelM" class="col-md-2 control-label"><?php echo _("Set thresholds"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newSelect = $('<select class="form-control" id="alrThrSelM" name="alrThrSelM" required>');
                                            newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                            newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newLabel.show();
                                            newInnerDiv.show();
                                            newSelect.show();

                                            //Threshold target select - Questa select viene nascosta o mostrata a seconda che nella "Set thresholds" si selezioni yes o no.
                                            newLabel = $('<label for="alrAxisSelM" class="col-md-2 control-label"><?php echo _("Thresholds target set"); ?></label>');
                                            newSelect = $('<select class="form-control" id="alrAxisSelM" name="alrAxisSelM"></select>');
                                            newSelect.append("<option value='" + series.firstAxis.desc + "'>" + series.firstAxis.desc + "</option>");
                                            newSelect.val(-1);
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newLabel.hide();
                                            newInnerDiv.hide();
                                            newSelect.hide();

                                            //Nuova riga
                                            //Threshold field select
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="alrFieldSelM" class="col-md-2 control-label"><?php echo _("Thresholds target field"); ?></label>');
                                            newSelect = $('<select class="form-control" id="alrFieldSelM" name="alrFieldSelM">');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newLabel.hide();
                                            newInnerDiv.hide();
                                            newSelect.hide();

                                            //Contenitore per tabella delle soglie
                                            addWidgetRangeTableContainerM = $('<div id="addWidgetRangeTableContainerM" class="row rowCenterContent"></div>');
                                            $("#specificParamsM").append(addWidgetRangeTableContainerM);
                                            addWidgetRangeTableContainerM.hide();

                                            //Listener per settaggio/desettaggio soglie relativo alla select "Set thresholds"
                                            $('#alrThrSelM').change(alrThrFlagMListener);

                                            if (currentParams === null) {
                                                $('#alrThrSelM').val("no");
                                                $("label[for='alrAxisSelM']").hide();
                                                $('#alrAxisSelM').val(-1);
                                                $('#alrAxisSelM').hide();
                                                $('#parametersM').val('');
                                            } else {
												if (currentParams.hasOwnProperty(thresholdObject)){
                                                //ESPOSIZIONE DEI CAMPI
                                                $('#alrThrSelM').val("yes");
                                                $('#alrAxisSelM').val(currentParams.thresholdObject.target);
                                                $("label[for='alrAxisSelM']").show();
                                                $('#alrAxisSelM').parent().show();
                                                $('#alrAxisSelM').show();
                                                $("label[for='alrFieldSelM']").show();
                                                $('#alrFieldSelM').parent().show();
                                                $('#alrFieldSelM').show();
                                                //POPOLAMENTO DELLA SELECT DEI CAMPI
                                                alrAxisSelMListener();
                                                $('#addWidgetRangeTableContainerM').show();
                                                $('#parametersM').val(JSON.stringify(currentParams));
                                                //Listener per settaggio/desettaggio campi in base ad asse selezionato
                                                $('#alrAxisSelM').change(alrAxisSelMListener);
                                                //Listener per selezione campo
                                                $('#alrFieldSelM').change(alrFieldSelMListener);
												}
                                            }
                                        }
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                      ///INSERT CKEDITOR IN PIECHART
									  console.log('currentParams: ');
									  console.log(currentParams);
															$.ajax({
                                                url: "../controllers/getTrustedUsers.php",
                                                data: {

                                                },
                                                type: "POST",
                                                async: true,
                                                dataType: 'json',
                                                success: function (data) {
                                                    if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
                                                        //Nuova riga
														console.log('TRUSTED PIECHART');
                                                        //Source Selection
                                                        newFormRow = $('<div class="row"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                                        newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
                                                        newSelect.append('<option value="no">no</option>');
                                                        newSelect.append('<option value="ckeditor">yes</option>');
                                                        newInnerDiv.append(newSelect);
                                                        newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        newLabel.show();
                                                        newInnerDiv.show();
                                                        newSelect.show();

                                                        //Nuova riga Tab Destro: CKEDITOR
                                                        //Modalità del widget (none, map, gis, link esterno)
                                                        newFormRow = $('<div class="row" id="ck_editor"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-12"></div>');
                                                        newBox = $('<div id="widgetEditor">');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
                                                        newBox.append('<?= _("Here you can insert Javascript code to be executed in the widget. Please save your script by clicking on the save button on the bottom.")?>');
                                                        newBox.append('</div></div>');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
                                                        newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
                                                        newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
                                                        newBox.append('</div></div></div>');
                                                        newInnerDiv.append(newBox);
                                                        //newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        //newLabel.show();
                                                        newInnerDiv.show();
                                                        //newInput.show();
                                                        $('#ck_editor').hide();

                                                        var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
                                                            allowedContent: true,
                                                            language: 'en',
                                                            contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
                                                            width: '100%'
                                                        });
														//alert(code);
														//console.log(code);
														if (code != null && code != "null") {
															$('#ck_editor').show();
                                                                $('#enableCKEditor').val("ckeditor");
                                                                // if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                } else {
                                                                    var codeForCKEditor = $('<div>').text(prepareCkEditorTemplate(code), connections).html();
                                                                }
                                                                var text_ck_area = document.createElement("text_ck_area");
                                                                text_ck_area.innerHTML = codeForCKEditor;
                                                                var newInfoDecoded = text_ck_area.innerText;
                                                                //    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
                                                                CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                //}
														}

                                                        let par = (JSON.stringify(currentParams));
														console.log('JSON.stringify(currentParams):');
														console.log(currentParams);
                                                        if (par && !par.includes("latLng") && !par.includes("null")) {
                                                            $("#parametersM").val(JSON.stringify(currentParams));
                                                            if ((currentParams['mode'] == "ckeditor")||(code != null && code != "")) {
															//if (code != null && code != "null") {
                                                                $('#ck_editor').show();
                                                                $('#enableCKEditor').val("ckeditor");
                                                                // if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    //    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                            }
                                                        }

                                                        $('#enableCKEditor').change(function () {
															
                                                            if ($('#enableCKEditor').val() === "ckeditor") {
                                                                $('#ck_editor').show();
                                                                //if (rowParams.substring(0, 8) != "https://" && rowParams.substring(0, 7) != "http://" && rowParams.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                                //$("#parametersM").val('{"mode": "ckeditor"}');
                                                            } else {
                                                                $('#ck_editor').hide();
                                                                $("#parametersM").val('');
                                                            }
                                                        });

                                                        $('#sourceSelectionSaveBtn').click(function () {
                                                            var button = $(this);
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').show();
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');

                                                            var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();
                                                            /*if (newInfo.trim() === '') {
                                                                newInfo = null;
                                                            }   */

                                                            $.ajax({
                                                                url: "../controllers/updateWidget.php",
                                                                data: {
                                                                    action: "updateCkEditor",
                                                                    widgetName: name_widget_m,
                                                                    //    newText: newInfoDecoded
                                                                    newText: newInfo
                                                                },
                                                                type: "POST",
                                                                async: true,
                                                                dataType: 'json',
                                                                success: function (data) {
                                                                    if (data.detail === 'Ok') {
                                                                        alert('Saved!');
                                                                    } else {
                                                                        alert('Error');
                                                                    }
                                                                },
                                                                error: function (errorData) {
                                                                    alert('Error');
                                                                }
                                                            });
                                                        });
                                                    }
                                                },
                                                error: function (errorData) {
                                                    console.log('Error in retrieving Trusted Users.');
                                                }
                                            });
										///									  
									 break;
                                    case "widgetSce":
                                        //$("#inputComuneRowM").css("display", "");
                                        //$("label[for='inputComuneWidgetM']").css("display", "");
                                        //$("label[for='inputComuneWidgetM']").text("Context");
                                        //$('#inputComuneWidgetM').css("display", "");
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', false);
                                        $('#inputFontSizeM').prop('disabled', true);
                                        $('#inputFontSizeM').val('');
                                        $('#inputFontColorM').attr('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        break;
                                        
                                    case "widgetSmartDS":
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').attr('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#inputComuneWidgetM').attr('disabled', true);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        
                                        if(data['municipality_metric_widget'] === null) 
                                        {
                                            $('#inputComuneWidgetM').attr('disabled', true);
                                        } 
                                        else 
                                        {
                                            $('#inputComuneWidgetM').attr('disabled', false);
                                        }
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        break;
                                        
                                    case "widgetTimeTrend":
                                        if(styleParamsRaw !== null)
                                        {
                                            styleParameters = JSON.parse(styleParamsRaw);
                                        } else {
                                            styleParameters = "";
                                        }
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').attr('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-IntTemp-Widget-m').prop('disabled', false);
                                        $('#select-IntTemp-Widget-m').attr('required', true);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", false);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val("");

                                        $("#inputUdmPositionM").val(data['udmPos']);

                                        if (data['udm'] != null) {
                                            var displayedUdm = data['udm'].replace(/<script[^>]*>([\S\s]*?)<\/script>/gmi, '');
                                            displayedUdm = displayedUdm.replace(/<\/?\w(?:[^"'>]|"[^"]*"|'[^']*')*>/gmi, '');
                                            displayedUdm = displayedUdm.replace(/&deg;/g, "Â°");
                                            displayedUdm = displayedUdm.replace(/&num;/g, "#");
                                            displayedUdm = displayedUdm.replace(/&dollar;/g, "$");
                                            displayedUdm = displayedUdm.replace(/&percnt;/g, "%");
                                            displayedUdm = displayedUdm.replace(/&pound;/g, "Â£");
                                            displayedUdm = displayedUdm.replace(/&lt;/g, "<");
                                            displayedUdm = displayedUdm.replace(/&gt;/g, ">");
                                            displayedUdm = displayedUdm.replace(/&agrave;/g, "Ã ");
                                            displayedUdm = displayedUdm.replace(/&egrave;/g, "Ã¨");
                                            displayedUdm = displayedUdm.replace(/&eacute;/g, "Ã©");
                                            displayedUdm = displayedUdm.replace(/&igrave;/g, "Ã¬");
                                            displayedUdm = displayedUdm.replace(/&ograve;/g, "Ã²");
                                            displayedUdm = displayedUdm.replace(/&ugrave;/g, "Ã¹");
                                            displayedUdm = displayedUdm.replace(/&micro;/g, "Âµ");
                                            displayedUdm = displayedUdm.replace(/&sol;/g, "/");
                                            displayedUdm = displayedUdm.replace(/&bsol;/g, "\\");
                                            displayedUdm = displayedUdm.replace(/&lpar;/g, "(");
                                            displayedUdm = displayedUdm.replace(/&rpar;/g, ")");
                                            displayedUdm = displayedUdm.replace(/&lsqb;/g, "[");
                                            displayedUdm = displayedUdm.replace(/&rsqb;/g, "]");
                                            displayedUdm = displayedUdm.replace(/&lcub;/g, "{");
                                            displayedUdm = displayedUdm.replace(/&rcub;/g, "}");
                                            displayedUdm = displayedUdm.replace(/&Hat;/g, "^");
                                        }
                                        $("#inputUdmWidgetM").val(displayedUdm);
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        
                                        if(data['municipality_metric_widget'] == null) 
                                        {
                                            $('#inputComuneWidgetM').attr('disabled', true);
                                        } 
                                        else 
                                        {
                                            $('#inputComuneWidgetM').attr('disabled', false);
                                        }
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        
                                        //Campo di registrazione widget sul Notificatore
                                        editWidgetGeneratorRegisterField(data['notificatorRegistered'], data['notificatorEnabled'], data['param_w']);

                                        //Open in New Tab or Not
                                        newFormRow = $('<div class="row"></div>');

                                        newLabel = $('<label for="editWidgetOpenNewTab" class="col-md-2 control-label"><?php echo _("Open Web Link in a New Tab"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select name="editWidgetOpenNewTab" class="form-control" id="editWidgetOpenNewTab"></select>');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newSelect.val(styleParameters.openNewTab);
                                        //$("#specificParamsM").append(newFormRow);

                                        if ("<?= $_SESSION['loggedRole'] ?>" == "RootAdmin") {
                                            newLabel = $('<label for="exportM" class="col-md-2 control-label"><?php echo _("Export Chart Data"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newSelect = $('<select name="exportM" class="form-control" id="exportM"></select>');
                                            newSelect.append('<option value="enabled"><?php echo _("Enabled"); ?></option>');
                                            newSelect.append('<option value="disabled"><?php echo _("Disabled"); ?></option>');
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            //newLabel.show();
                                            //newInnerDiv.show();
                                            //newSelect.show();
                                            newSelect.val(styleParameters.exportM);
                                        }
                                        $("#specificParamsM").append(newFormRow);

                                        //View UDM
                                        newFormRow = $('<div class="row"></div>');
                                        newLabel = $('<label for="viewUdm" class="col-md-2 control-label">Visualize U/M</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select name="viewUdm" class="form-control" id="viewUdm"></select>');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        if (styleParameters.viewUdm != null) {
                                            newSelect.val(styleParameters.viewUdm);
                                        } else {
                                            newSelect.val("yes");
                                        }
                                    //    newSelect.val(styleParameters.viewUdm);
                                    //    $("#specificParamsM").append(newFormRow);

                                        // UDM x-Offset
                                        newLabel = $('<label for="xOffsetUdm" class="col-md-2 control-label">U/M x-offset (px)</label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="xOffsetUdm" name="xOffsetUdm">');
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                     //   newLabel.show();
                                    //    newInnerDiv.show();
                                        newInput.show();
                                        if (styleParameters.xOffsetUdm != null) {
                                            newInput.val(styleParameters.xOffsetUdm);
                                        } else {
                                            newInput.val("25");
                                        }
                                        //    newSelect.val(styleParameters.viewUdm);
                                        $("#specificParamsM").append(newFormRow);

                                        newLabel.show();
                                        newInnerDiv.show();
										/////////CKEDITOR TIME TREND////////
												$.ajax({
                                                url: "../controllers/getTrustedUsers.php",
                                                data: {

                                                },
                                                type: "POST",
                                                async: true,
                                                dataType: 'json',
                                                success: function (data) {
                                                    if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
                                                        //Nuova riga
														console.log('TRUSTED');
                                                        //Source Selection
                                                        newFormRow = $('<div class="row"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                                        newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
                                                        newSelect.append('<option value="no">no</option>');
                                                        newSelect.append('<option value="ckeditor">yes</option>');
                                                        newInnerDiv.append(newSelect);
                                                        newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        newLabel.show();
                                                        newInnerDiv.show();
                                                        newSelect.show();

                                                        //Nuova riga Tab Destro: CKEDITOR
                                                        //Modalità del widget (none, map, gis, link esterno)
                                                        newFormRow = $('<div class="row" id="ck_editor"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-12"></div>');
                                                        newBox = $('<div id="widgetEditor">');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
                                                        newBox.append('<?= _("Here you can insert Javascript code to be executed in the widget. Please save your script by clicking on the save button on the bottom.")?>');
                                                        newBox.append('</div></div>');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
                                                        newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
                                                        newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
                                                        newBox.append('</div></div></div>');
                                                        newInnerDiv.append(newBox);
                                                        //newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        //newLabel.show();
                                                        newInnerDiv.show();
                                                        //newInput.show();
                                                        $('#ck_editor').hide();

                                                        var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
                                                            allowedContent: true,
                                                            language: 'en',
                                                            contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
                                                            width: '100%'
                                                        });
														
														if (code != null && code != "null") {
															$('#ck_editor').show();
                                                                $('#enableCKEditor').val("ckeditor");
                                                                // if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    //    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
														}

                                                        let par = (JSON.stringify(currentParams));
                                                        if (par && !par.includes("latLng") && !par.includes("null")) {
                                                            $("#parametersM").val(JSON.stringify(currentParams));
                                                            if ((currentParams['mode'] == "ckeditor")||(code !== null)) {
                                                                $('#ck_editor').show();
                                                                $('#enableCKEditor').val("ckeditor");
                                                                // if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    //console.log(code);
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    //    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }else{
                                                                    //console.log('vuoto');
                                                                }
                                                            }
                                                        }

                                                        $('#enableCKEditor').change(function () {
                                                            if ($('#enableCKEditor').val() === "ckeditor") {
                                                                $('#ck_editor').show();
                                                                //if (rowParams.substring(0, 8) != "https://" && rowParams.substring(0, 7) != "http://" && rowParams.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                                $("#parametersM").val('{"mode": "ckeditor"}');
                                                            } else {
                                                                $('#ck_editor').hide();
                                                                $("#parametersM").val('');
                                                            }
                                                        });

                                                        $('#sourceSelectionSaveBtn').click(function () {
                                                            var button = $(this);
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').show();
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');

                                                            var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();
                                                            /*if (newInfo.trim() === '') {
                                                                newInfo = null;
                                                            }   */

                                                            $.ajax({
                                                                url: "../controllers/updateWidget.php",
                                                                data: {
                                                                    action: "updateCkEditor",
                                                                    widgetName: name_widget_m,
                                                                    //    newText: newInfoDecoded
                                                                    newText: newInfo
                                                                },
                                                                type: "POST",
                                                                async: true,
                                                                dataType: 'json',
                                                                success: function (data) {
                                                                    if (data.detail === 'Ok') {
                                                                        alert('Saved!');
                                                                    } else {
                                                                        alert('Error');
                                                                    }
                                                                },
                                                                error: function (errorData) {
                                                                    alert('Error');
                                                                }
                                                            });
                                                        });
                                                    }
                                                },
                                                error: function (errorData) {
                                                    console.log('Error in retrieving Trusted Users.');
                                                }
                                            });
										//////////////////////////////////
										
										////////////////////
                                        break;

                                    
                                    case "widgetTimeTrendCompare":
                                        if(styleParamsRaw !== null)
                                        {
                                            styleParameters = JSON.parse(styleParamsRaw);
                                        } else {
                                            styleParameters = "";
                                        }
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').attr('disabled', false);
                                        $('#inputFontColorM').prop('required', true);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val("4 Ore");
                                        $('#select-IntTemp-Widget-m').prop('disabled', false);
                                        $('#select-IntTemp-Widget-m').attr('required', true);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        
                                        if(data['municipality_metric_widget'] === null) 
                                        {
                                            $('#inputComuneWidgetM').attr('disabled', true);
                                        } 
                                        else 
                                        {
                                            $('#inputComuneWidgetM').attr('disabled', false);
                                        }
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        
                                        //Campo di registrazione widget sul Notificatore
                                        editWidgetGeneratorRegisterField(data['notificatorRegistered'], data['notificatorEnabled'], data['param_w']);
                                        //Open in New Tab or Not
                                        newFormRow = $('<div class="row"></div>');

                                        newLabel = $('<label for="editWidgetOpenNewTab" class="col-md-2 control-label"><?php echo _("Open Web Link in a New Tab"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select name="editWidgetOpenNewTab" class="form-control" id="editWidgetOpenNewTab"></select>');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newSelect.val(styleParameters.openNewTab);
                                        
                                        // Show Content on Load
                                        newLabel = $('<label for="showContentLoadM" class="col-md-2 control-label"><?php echo _("Show CSBL Content on Load"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="showContentLoadM" name="showContentLoadM">');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newSelect.val(styleParameters.showContentLoadM);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();

                                        $("#specificParamsM").append(newFormRow);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        
                                        newFormRow = $('<div class="row"></div>');

                                        newLabel = $('<label for="editWidgetComparePeriod" class="col-md-2 control-label"><?php echo _("Compare Period"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-9"></div>');
                                        newSelect = $('<select name="editWidgetComparePeriod" class="form-control" id="editWidgetComparePeriod"></select>');
                                        
                                        switch ($('#select-IntTemp-Widget-m').val())
                                        {
                                            
                                            case "4 Ore":
                                                newSelect.append('<option value="4 previous hours"><?php echo _("4 previous hours"); ?></option>');
                                                newSelect.append('<option value="4 hours day before"><?php echo _("4 hours day before"); ?></option>');
                                                break;
                                            case "12 Ore":
                                                newSelect.append('<option value="12 previous hours"><?php echo _("12 previous hours"); ?></option>');
                                                newSelect.append('<option value="12 hours day before"><?php echo _("12 hours day before"); ?></option>');
                                                break;
                                            case "Giornaliera":
                                                newSelect.append('<option value="previous day"><?php echo _("previous day"); ?></option>');
                                                newSelect.append('<option value="same day previous week"><?php echo _("same day previous week"); ?></option>');
                                                newSelect.append('<option value="same day previous month"><?php echo _("same day previous month"); ?></option>');
                                                break;
                                            case "Settimanale":
                                                newSelect.append('<option value="previous week"><?php echo _("previous week"); ?></option>');
                                                newSelect.append('<option value="previous week starting Monday"><?php echo _("previous week starting Monday"); ?></option>');
                                                break;
                                            case "Mensile":
                                                newSelect.append('<option value="previous month"><?php echo _("previous month"); ?></option>');
                                                newSelect.append('<option value="previous month - day 1"><?php echo _("previous month - day 1"); ?></option>');
                                                newSelect.append('<option value="same month prev year - day 1"><?php echo _("same month prev year - day 1"); ?></option>');
                                                break;
                                            case "Semestrale":
                                                newSelect.append('<option value="previous 6 months"><?php echo _("previous 6 months"); ?></option>');
                                                newSelect.append('<option value="previous 6 months - day 1 of prev 6 months"><?php echo _("previous 6 months - day 1 of prev 6 months"); ?></option>');
                                                newSelect.append('<option value="same 6 months of prev year - day 1"><?php echo _("same 6 months of prev year - day 1"); ?></option>');
                                                newSelect.append('<option value="same 6 months of prev year - day 1 month 1 or 7"><?php echo _("same 6 months of prev year - day 1 month 1 or 7"); ?></option>');
                                                break;
                                            case "Annuale":
                                                newSelect.append('<option value="previous year"><?php echo _("previous year"); ?></option>');
                                                newSelect.append('<option value="previous year - day 1 of prev year"><?php echo _("previous year - day 1 of prev year"); ?></option>');
                                                newSelect.append('<option value="previous year - month 1"><?php echo _("previous year - month 1"); ?></option>');
                                                break;
                                            case "2 Anni":
                                                newSelect.append('<option value="previous 2 years"><?php echo _("previous 2 years"); ?></option>');
                                                break;
                                            case "10 Anni":
                                                newSelect.append('<option value="previous 10 years"><?php echo _("previous 10 years"); ?></option>');
                                                break;
                                        }
                                       
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newSelect.val(data['temporal_compare_widget']);
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        break;
                                        
                                    case "widgetEvents":
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', true);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontColorM').val('');
                                        $('#inputFontColorM').prop('required', false);
                                        $('#inputFontColorM').prop('disabled', true);
                                        $('#widgetFontColorM').css("background-color", "#eeeeee");
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#urlWidgetM').attr('disabled', true);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                       //Rimozione eventuali campi del subform general per widget process
                                       removeWidgetProcessGeneralFields("editWidget");
                                       
                                       //Parametri specifici del widget
                                       $('#specificParamsM .row').remove();
                                       var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan, addWidgetRangeTableContainer = null;
                                       
                                       //New row
                                       //Widget mode
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="widgetEventsModeM" class="col-md-2 control-label"><?php echo _("Widget mode"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="widgetEventsModeM" name="widgetEventsModeM"></select>');
                                        newSelect.append('<option value="list">List</option>');
                                        newSelect.append('<option value="searchAndList">Search filter, results on list</option>');
                                        newSelect.append('<option value="searchAndMap">Search filter, results on map</option>');
                                        newSelect.append('<option value="searchAndListAndMap">Search filter, results on list and map</option>');
                                        newSelect.val(data['viewMode']);
                                        newFormRow.append(newLabel);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newInnerDiv);

                                       //Nuova riga
                                       newFormRow = $('<div class="row"></div>');
                                       $("#specificParamsM").append(newFormRow);

                                       newLabel = $('<label for="editWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                       newInnerDiv = $('<div class="col-md-3"></div>');
                                       newSelect = $('<select class="form-control" id="editWidgetGeolocationWidgets" name="editWidgetGeolocationWidgets"></select>');

                                       var widgetId, widgetTitle = null;
                                       var widgetsNumber = 0;
                                       
                                       //JSON degli eventi da mostrare su ogni widget target di questo widget events
                                       var targetEventsJson = currentParams;
                                       $("#parametersM").val(JSON.stringify(targetEventsJson));

                                       $("li.gs_w").each(function(){
                                          if($(this).attr("id").includes("ExternalContent")&&($(this).find("div.widget").attr("data-role") === "map"))
                                          {
                                             widgetId = $(this).attr("id");
                                             widgetTitle = $(this).find("div.titleDiv").html();
                                             newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                             widgetsNumber++;
                                          }
                                       });

                                       if(widgetsNumber > 0)
                                       {
                                          newInnerDiv.append(newSelect);
                                       }
                                       else
                                       {
                                          newInnerDiv.append("None");
                                       }

                                       newFormRow.append(newLabel);
                                       newFormRow.append(newInnerDiv);
                                       $("#specificParamsM").append(newFormRow);
                                       newLabel.show();
                                       newInnerDiv.show();

                                       if(widgetsNumber > 0)
                                       {
                                          newSelect.show();
                                          newSelect.val(-1);
                                          newLabel = $('<label for="editWidgetEventTypes" class="col-md-2 control-label"><?php echo _("Events to show on selected map"); ?></label>');
                                          newInnerDiv = $('<div class="col-md-3"></div>');
                                          var eventTypeSelect = $('<select name="editWidgetEventTypes" class="form-control" id="editWidgetEventTypes" multiple></select>');
                                          eventTypeSelect.append('<option value="Altri eventi">Altri eventi</option>');
                                          eventTypeSelect.append('<option value="Aperture straordinarie, visite guidate">Aperture straordinarie, visite guidate</option>');
                                          eventTypeSelect.append('<option value="Estate Fiorentina">Estate Fiorentina</option>');
                                          eventTypeSelect.append('<option value="Fiere, mercati">Fiere, mercati</option>');
                                          eventTypeSelect.append('<option value="Film festival">Film festival</option>');
                                          eventTypeSelect.append('<option value="Mostre">Mostre</option>');
                                          eventTypeSelect.append('<option value="Musica classica, opera e balletto">Musica classica, opera e balletto</option>');
                                          eventTypeSelect.append('<option value="Musica rock, jazz, pop, contemporanea">Musica rock, jazz, pop, contemporanea</option>');
                                          eventTypeSelect.append('<option value="News">News</option>');
                                          eventTypeSelect.append('<option value="Readings, Conferenze, Convegni">Readings, Conferenze, Convegni</option>');
                                          eventTypeSelect.append('<option value="Readings, incontri letterari, conferenze">Readings, incontri letterari, conferenze</option>');
                                          eventTypeSelect.append('<option value="Sport">Sport</option>');
                                          eventTypeSelect.append('<option value="Teatro">Teatro</option>');
                                          eventTypeSelect.append('<option value="Tradizioni popolari">Tradizioni popolari</option>');
                                          eventTypeSelect.append('<option value="Walking">Walking</option>');
                                          eventTypeSelect.val(-1);
                                          newFormRow.append(newLabel);
                                          newInnerDiv.append(eventTypeSelect);
                                          newFormRow.append(newInnerDiv);
                                          newLabel.hide();
                                          newInnerDiv.hide();

                                          $('#editWidgetEventTypes').selectpicker({
                                             actionsBox: true, 
                                             width: "auto"
                                          });

                                          $('#editWidgetEventTypes').on('changed.bs.select', function (e) 
                                          {
                                             if($(this).val() === null)
                                             {
                                                targetEventsJson[$("#editWidgetGeolocationWidgets").val()] = [];
                                             }
                                             else
                                             {
                                                targetEventsJson[$("#editWidgetGeolocationWidgets").val()] = $(this).val();
                                             }
                                             $("#parametersM").val(JSON.stringify(targetEventsJson));
                                          });

                                          $("#editWidgetGeolocationWidgets").change(function(){
                                             newLabel.show();
                                             newInnerDiv.show();
                                             $('#editWidgetEventTypes').selectpicker('val', targetEventsJson[$("#editWidgetGeolocationWidgets").val()]);
                                          });
                                       }
                                        break;

                                        case "widgetEventsNew":
                                            $('#link_help_modal-add-widget-m').css("display", "");
                                            $('#inputTitleWidgetM').attr('disabled', false);
                                            $("label[for='inputTitleWidgetM']").html("Title");
                                            $("label[for='inputColorWidgetM']").html("Background color");
                                            $('#inputColorWidgetM').attr('disabled', false);
                                            $('#inputColorWidgetM').prop('required', true);
                                            $('#inputFontSizeM').prop('required', true);
                                            $('#inputFontSizeM').prop('disabled', false);
                                            $('#inputFontColorM').val('');
                                            $('#inputFontColorM').prop('required', false);
                                            $('#inputFontColorM').prop('disabled', true);
                                            $('#widgetFontColorM').css("background-color", "#eeeeee");
                                            $('#select-frameColor-Widget-m').attr('disabled', false);
                                            $('#select-frameColor-Widget-m').prop('required', true);
                                            $('#select-frameColor-Widget-m').val('');
                                            $('#select-IntTemp-Widget-m').val(-1);
                                            $('#select-IntTemp-Widget-m').prop('disabled', true);
                                            $('#select-IntTemp-Widget-m').prop('required', false);
                                            $('#inputFreqWidgetM').prop('disabled', false);
                                            $('#inputFreqWidgetM').prop('required', true);
                                            $('#urlWidgetM').attr('disabled', true);
                                            $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').prop('required', true);
                                            $('#inputUdmWidgetM').prop("required", false);
                                            $('#inputUdmWidgetM').attr("disabled", true);
                                            $('#inputUdmWidgetM').val("");
                                            $('#inputUdmPositionM').prop("required", false);
                                            $('#inputUdmPositionM').attr("disabled", true);
                                            $('#inputUdmPositionM').val(-1);

                                            //Rimozione eventuali campi del subform general per widget process
                                            removeWidgetProcessGeneralFields("editWidget");

                                            //Parametri specifici del widget
                                            $('#specificParamsM .row').remove();
                                            var newFormRow, newLabel, newInnerDiv, newInputGroup, newSelect, newInput, newSpan,
                                                addWidgetRangeTableContainer = null;

                                            //New row
                                            //Widget mode
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="widgetEventsModeM" class="col-md-2 control-label"><?php echo _("Widget mode"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newSelect = $('<select class="form-control" id="widgetEventsModeM" name="widgetEventsModeM"></select>');
                                            newSelect.append('<option value="list">List</option>');
                                            newSelect.append('<option value="searchAndList"><?php echo _("Search filter, results on list"); ?></option>');
                                            newSelect.append('<option value="searchAndMap"><?php echo _("Search filter, results on map"); ?></option>');
                                            newSelect.append('<option value="searchAndListAndMap"><?php echo _("Search filter, results on list and map"); ?></option>');
                                            newSelect.val(data['viewMode']);
                                            newFormRow.append(newLabel);
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newInnerDiv);

                                            //Nuova riga
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);

                                            newLabel = $('<label for="editWidgetGeolocationWidgets" class="col-md-2 control-label"><?php echo _("Available geolocation widgets"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newSelect = $('<select class="form-control" id="editWidgetGeolocationWidgets" name="editWidgetGeolocationWidgets"></select>');

                                            var widgetId, widgetTitle = null;
                                            var widgetsNumber = 0;

                                            //JSON degli eventi da mostrare su ogni widget target di questo widget events
                                            var targetEventsJson = currentParams;
                                            $("#parametersM").val(JSON.stringify(targetEventsJson));

                                            $("li.gs_w").each(function () {
                                                if ($(this).attr("id") != null) {
                                                    if ($(this).attr("id").includes("widgetMap")) {
                                                        widgetId = $(this).attr("id");
                                                        widgetTitle = $(this).find("div.titleDiv").html();
                                                        newSelect.append('<option value="' + widgetId + '">' + widgetTitle + '</option>');
                                                        widgetsNumber++;
                                                    }
                                                }
                                            });

                                            if (widgetsNumber > 0) {
                                                newInnerDiv.append(newSelect);
                                            }
                                            else {
                                                newInnerDiv.append("None");
                                            }

                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel.show();
                                            newInnerDiv.show();

                                            if (widgetsNumber > 0) {
                                                newSelect.show();
                                                newSelect.val(-1);
                                                newLabel = $('<label for="editWidgetEventTypes" class="col-md-2 control-label"><?php echo _("Events to show on selected map"); ?></label>');
                                                newInnerDiv = $('<div class="col-md-3"></div>');
                                                var eventTypeSelect = $('<select name="editWidgetEventTypes" class="form-control" id="editWidgetEventTypes" multiple></select>');
                                                eventTypeSelect.append('<option value="Altri eventi">Altri eventi</option>');
                                                eventTypeSelect.append('<option value="Aperture straordinarie, visite guidate">Aperture straordinarie, visite guidate</option>');
                                                eventTypeSelect.append('<option value="Estate Fiorentina">Estate Fiorentina</option>');
                                                eventTypeSelect.append('<option value="Fiere, mercati">Fiere, mercati</option>');
                                                eventTypeSelect.append('<option value="Film festival">Film festival</option>');
                                                eventTypeSelect.append('<option value="Mostre">Mostre</option>');
                                                eventTypeSelect.append('<option value="Musica classica, opera e balletto">Musica classica, opera e balletto</option>');
                                                eventTypeSelect.append('<option value="Musica rock, jazz, pop, contemporanea">Musica rock, jazz, pop, contemporanea</option>');
                                                eventTypeSelect.append('<option value="News">News</option>');
                                                eventTypeSelect.append('<option value="Readings, Conferenze, Convegni">Readings, Conferenze, Convegni</option>');
                                                eventTypeSelect.append('<option value="Readings, incontri letterari, conferenze">Readings, incontri letterari, conferenze</option>');
                                                eventTypeSelect.append('<option value="Sport">Sport</option>');
                                                eventTypeSelect.append('<option value="Teatro">Teatro</option>');
                                                eventTypeSelect.append('<option value="Tradizioni popolari">Tradizioni popolari</option>');
                                                eventTypeSelect.append('<option value="Walking">Walking</option>');
                                                eventTypeSelect.val(-1);
                                                newFormRow.append(newLabel);
                                                newInnerDiv.append(eventTypeSelect);
                                                newFormRow.append(newInnerDiv);
                                                newLabel.hide();
                                                newInnerDiv.hide();

                                                $('#editWidgetEventTypes').selectpicker({
                                                    actionsBox: true,
                                                    width: "auto",
                                                    size: "auto"
                                                });

                                                $('#editWidgetEventTypes').on('changed.bs.select', function (e) {
                                                    if ($(this).val() === null) {
                                                        targetEventsJson[$("#editWidgetGeolocationWidgets").val()] = [];
                                                    }
                                                    else {
                                                        targetEventsJson[$("#editWidgetGeolocationWidgets").val()] = $(this).val();
                                                    }
                                                    $("#parametersM").val(JSON.stringify(targetEventsJson));
                                                });

                                                $("#editWidgetGeolocationWidgets").change(function () {
                                                    newLabel.show();
                                                    newInnerDiv.show();
                                                    $('#editWidgetEventTypes').selectpicker('val', targetEventsJson[$("#editWidgetGeolocationWidgets").val()]);
                                                });
                                            }
                                            break;

                                    case "widgetTrendMentions":
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', false);
                                        $('#inputFontSizeM').prop('disabled', true);
                                        $('#inputFontSizeM').val('');
                                        $('#inputFontColorM').val('');
                                        $('#inputFontColorM').prop('required', false);
                                        $('#inputFontColorM').prop('disabled', true);
                                        $('#widgetFontColorM').css("background-color", "#eeeeee");
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#urlWidgetM').attr('disabled', true);
                                        $('#inputComuneWidgetM').attr("disabled", true);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        
                                        //Nuova riga
                                        //Default tab
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="inputDefaultTabM" class="col-md-2 control-label"><?php echo _("Default tab"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="inputDefaultTabM" name="inputDefaultTabM"></select>');
                                        newSelect.append('<option value="0">Trends</option>');
                                        newSelect.append('<option value="1">Quotes</option>');
                                        newSelect.append('<option value="-1">None (automatic switch)</option>');
                                        newSelect.val(data['defaultTab']);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        break;
                                        
                                    case "widgetPrevMeteo":
                                        $("#inputComuneRowM").show();
                                        $("label[for='inputComuneWidgetM']").css("display", "");
                                        $("label[for='inputComuneWidgetM']").text("City (autosuggestion)");
                                        $('#inputComuneWidgetM').css("display", "");
                                        $('#inputComuneWidgetM').attr('disabled', false);
                                        $('#inputComuneWidgetM').attr('autocomplete', 'on');
                                        $('#inputComuneWidgetM').prop('required', true);
                                        $('#inputComuneWidgetM').autocomplete({
                                            source: comuniLammaArray,
                                            autoFocus: false,
                                            minLength: 1,
                                            delay: 500,
                                        }).data("ui-autocomplete")._resizeMenu = function(){
                                            var ul = this.menu.element;
                                            ul.outerWidth(this.element.outerWidth() + 30);
                                            ul.css("max-height", "300px");
                                            ul.css("overflow-x", "auto");
                                            ul.css("overflow-y", "auto");
                                        };
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', false);
                                        $('#inputFontSizeM').prop('required', false);
                                        $('#inputFontSizeM').prop('disabled', true);
                                        $('#inputFontSizeM').val('');
                                        $('#inputFontColorM').prop('required', true);
                                        $('#inputFontColorM').prop('disabled', false);
                                        $('#widgetFontColorM').css("background-color", "#" + data['fontColor']);
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', false);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', false);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputComuneWidgetM').attr("disabled", false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        
                                        //Nuova riga
                                        //Orientation
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="orientationM" class="col-md-2 control-label"><?php echo _("Widget mode"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="orientationM" name="orientationM"></select>');
                                        newSelect.append('<option value="horizontal"><?php echo _("Horizontal"); ?></option>');
                                        newSelect.append('<option value="vertical"><?php echo _("Vertical"); ?></option>');
                                        newSelect.append('<option value="verticalCompact"><?php echo _("VerticalCompact"); ?></option>');
                                        newSelect.append('<option value="today"><?php echo _("Today only"); ?></option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        if(styleParamsRaw !== null) 
                                        {
                                            styleParameters = JSON.parse(styleParamsRaw); 
                                            newSelect.val(styleParameters.orientation);
                                        }
                                        
                                        newLabel = $('<label for="languageM" class="col-md-2 control-label"><?php echo _("Language"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="languageM" name="languageM"></select>');
                                        newSelect.append('<option value="english">English</option>');
                                        newSelect.append('<option value="italian">Italian</option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        if(styleParamsRaw !== null) 
                                        {
                                            newSelect.val(styleParameters.language);
                                        }
                                        
                                        //Nuova riga
                                        //Space occupation
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="todayDimM" class="col-md-2 control-label"><?php echo _("Today box dimension"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        var newControl = $('<input id="todayDim" name="todayDimM" data-slider-id="todayDimSliderM" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="1"/>');
                                        newInnerDiv.append(newControl);
                                        newInnerDiv.find('#todayDim').bootstrapSlider({
                                           formatter: function(value) {
                                              return value + "%";
                                           }, 
                                           value: styleParameters.todayDim
                                        });
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        //Background option
                                        newLabel = $('<label for="backgroundModeM" class="col-md-2 control-label"><?php echo _("Background mode"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="backgroundModeM" name="backgroundModeM"></select>');
                                        newSelect.append('<option value="color"><?php echo _("Color"); ?></option>');
                                        newSelect.append('<option value="auto"><?php echo _("Automatic picture"); ?></option>');
                                        newSelect.val(styleParameters.backgroundMode);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        //Nuova riga
                                        //Icon type
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="iconSetM" class="col-md-2 control-label"><?php echo _("Weather symbols"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="iconSetM" name="iconSetM"></select>');
                                        newSelect.append('<option value="multiColor"><?php echo _("Images"); ?></option>');
                                        newSelect.append('<option value="singleColor"><?php echo _("Icons"); ?></option>');
                                        newSelect.val(styleParameters.iconSet);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        break;
                                        
                                    case "widgetServiceMap":
                                        //$("#inputComuneRowM").css("display", "");
                                        //$("label[for='inputComuneWidgetM']").css("display", "");
                                        //$("label[for='inputComuneWidgetM']").text("Context");
                                        //$('#inputComuneWidgetM').css("display", "");
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', false);
                                        $('#inputFontSizeM').prop('required', false);
                                        $('#inputFontSizeM').prop('disabled', true);
                                        $('#inputFontSizeM').val('');
                                        $('#inputFontColorM').val('');
                                        $('#inputFontColorM').prop('required', false);
                                        $('#inputFontColorM').prop('disabled', true);
                                        $('#widgetFontColorM').css("background-color", "#eeeeee");
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', false);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').val("");
                                        $('#inputFreqWidgetM').prop('disabled', true);
                                        $('#inputFreqWidgetM').prop('required', false);
                                        $('#urlWidgetM').attr('disabled', true);
                                        $('#urlWidgetM').prop('required', false);
                                        $('#urlWidgetM').val('');
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        break; 
                                        
                                        case "widgetSpeedometer":
                                        if(styleParamsRaw !== null)
                                        {
                                            styleParameters = JSON.parse(styleParamsRaw);
                                        }
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', false);
                                        $('#inputFontSizeM').prop('required', false);
                                        $('#inputFontSizeM').prop('disabled', true);
                                        $('#inputFontSizeM').val('');
                                        $('#inputFontColorM').val('');
                                        $('#inputFontColorM').prop('required', false);
                                        $('#inputFontColorM').prop('disabled', true);
                                        $('#widgetFontColorM').css("background-color", "#eeeeee");
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', false);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#urlWidgetM').prop('required', false);
                                        $('#urlWidgetM').val('');
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        if(data['municipality_metric_widget'] === null) 
                                        {
                                            $('#inputComuneWidgetM').attr('disabled', true);
                                        } 
                                        else 
                                        {
                                            $('#inputComuneWidgetM').attr('disabled', false);
                                        }
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();

                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();

                                        //Set min value
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="setMinValueM" class="col-md-2 control-label"><?php echo _("Set Min Value"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="setMinValueM" name="setMinValueM">');
                                        if (styleParameters != null) {
                                            newInput.val(styleParameters.setMinValue);
                                        }
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        //Set max value
                                        newLabel = $('<label for="setMaxValueM" class="col-md-2 control-label"><?php echo _("Set Max Value"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="setMaxValueM" name="setMaxValueM">');
                                        if (styleParameters != null) {
                                            newInput.val(styleParameters.setMaxValue);
                                        }
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        
                                        //Campo di registrazione widget sul Notificatore
                                        editWidgetGeneratorRegisterField(data['notificatorRegistered'], data['notificatorEnabled'], data['param_w']);
                                        break;
                                        
                                    case "widgetStateRideAtaf":
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', true);
                                        $('#inputFontSizeM').prop('required', false);
                                        $('#inputFontSizeM').prop('disabled', true);
                                        $('#inputFontSizeM').val('');
                                        $('#inputFontColorM').val('');
                                        $('#inputFontColorM').prop('required', false);
                                        $('#inputFontColorM').prop('disabled', true);
                                        $('#widgetFontColorM').css("background-color", "#eeeeee");
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', true);
                                        $('#inputUdmM').attr('disabled', true);
                                        $('#inputUdmM').prop('required', false);
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', true);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        if(data['municipality_metric_widget'] === null) 
                                        {
                                            $('#inputComuneWidgetM').attr('disabled', true);
                                        } 
                                        else 
                                        {
                                            $('#inputComuneWidgetM').attr('disabled', false);
                                        }
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        
                                        //Nuova riga
                                        //Default tab
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="inputDefaultTabM" class="col-md-2 control-label"><?php echo _("Default tab"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="inputDefaultTabM" name="inputDefaultTabM"></select>');
                                        newSelect.append('<option value="0">Stato</option>');
                                        newSelect.append('<option value="1">Linee monitorate</option>');
                                        newSelect.append('<option value="2">Dati</option>');
                                        newSelect.append('<option value="-1">None (automatic switch)</option>');
                                        newSelect.val(data['defaultTab']);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        break;

                                        case "widgetMap":
                                            if(styleParamsRaw !== null)
                                            {
                                                styleParameters = JSON.parse(styleParamsRaw);
                                            }
                                            //Rimozione eventuali campi del subform general per widget process
                                            removeWidgetProcessGeneralFields("editWidget");

                                            var gisTargetCenterParametersM = null;
                                            $('#urlWidgetM').attr('disabled', false);
                                            // $('#urlWidgetM').prop('required', true);
                                            $("#titleLabelM").html("Title");
                                            $("#bckColorLabelM").html("Background color");
                                            $('#inputColorWidgetM').val("");
                                            $('#inputColorWidgetM').attr('disabled', false);
                                            $('#inputColorWidgetM').attr('required', true);
                                            $('#color_widget_M').css("background-color", "#eeeeee");
                                            $('#inputFontSizeM').val("");
                                            $('#inputFontSizeM').attr('disabled', true);
                                            $('#inputFontColorM').val("");
                                            $('#inputFontColorM').attr('disabled', true);
                                            $('#widgetFontColorM').css("background-color", "#eeeeee");
                                            $('#link_help_modal-add-widgetM').css("display", "");
                                            $('#inputFrameColorWidgetM').attr('disabled', false);
                                            $('#inputFrameColorWidgetM').val('#eeeeee');
                                            $('#inputFrameColorWidgetM').prop('required', false);
                                            $('#select-IntTemp-Widget-m').val(-1);
                                            $('#select-IntTemp-Widget-m').attr('disabled', true);
                                            $('#select-IntTemp-Widget-m').prop('required', false);
                                            $('#inputFreqWidgetM').attr('disabled', true);
                                            $('#inputFreqWidgetM').val("");
                                            $('#inputFreqWidgetM').prop('required', false);
                                            $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').prop('required', true);
                                            $('#inputUdmWidgetM').prop("required", false);
                                            $('#inputUdmWidgetM').attr("disabled", true);
                                            $('#inputUdmWidgetM').val("");
                                            $('#inputUdmPositionM').prop("required", false);
                                            $('#inputUdmPositionM').attr("disabled", true);
                                            $('#inputUdmPositionM').val(-1);

                                            //Parametri specifici del widget
                                            $('#specificParamsM .row').remove();

                                            //Nuova riga
                                            //Centro della mappa per modalità GIS target
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label class="col-md-2 control-label"><?php echo _("Start lat"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-2">' +
                                                '<input type="text" id="gisTargetCenterLatM" class="form-control"/>' +
                                                +'</div>');
                                            newInnerDiv.css("padding-left", "0px");
                                            newInnerDiv.css("padding-right", "0px");
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newLabel = $('<label class="col-md-2 control-label"><?php echo _("Start lng"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-2">' +
                                                '<input type="text" id="gisTargetCenterLngM" class="form-control"/>' +
                                                +'</div>');
                                            newInnerDiv.css("padding-left", "0px");
                                            newInnerDiv.css("padding-right", "0px");
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newLabel = $('<label class="col-md-2 control-label"><?php echo _("Start zoom"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-2">' +
                                                '<input type="text" id="gisTargetCenterZoomM" class="form-control"/>' +
                                                +'</div>');
                                            newLabel.css("padding-left", "8px");
                                            newLabel.css("padding-right", "8px");
                                            newInnerDiv.css("padding-left", "0px");
                                            newInnerDiv.css("padding-right", "0px");
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newInnerDiv = $('<div id="gisTargetCenterMapDivM" class="col-md-12"></div>');
                                            newFormRow.append(newInnerDiv);

                                            //Nuova riga
                                            //Show Orthomaps
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="showOrthomapsM" class="col-md-2 control-label"><?php echo _("Show Orthomaps Controls"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newSelect = $('<select class="form-control" id="showOrthomapsM" name="showOrthomapsM"></select>');
                                            newSelect.append('<option style="display:none">');
                                            newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                            newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                            if (styleParameters != null) {
                                                if (styleParameters.showOrthomaps) {
                                                    newSelect.val(styleParameters.showOrthomaps);
                                                }
                                            }
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            //Default Orthomap
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="defaultOrthomapM" id="defaultOrthomapLabelM" class="col-md-2 control-label"><?php echo _("Default Orthomap"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newSelect = $('<select class="form-control" id="defaultOrthomapM" name="defaultOrthomapM"></select>');
                                            newSelect.append('<option style="display:none">');
                                         //   newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                         //   newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                            var jsonOrthomaps = null;
                                            if (styleParameters != null) {
                                               if (styleParameters.showOrthomaps && currentParams.dropdownMenu) {
                                                    if (styleParameters.showOrthomaps == 'yes') {
                                                        for (let j = 0; j < currentParams.dropdownMenu.length; j++) {
                                                            newSelect.append('<option value="' + currentParams.dropdownMenu[j].id + '">' + currentParams.dropdownMenu[j].label + '</option>');
                                                        }
                                                    }
                                                }
                                                if (styleParameters.defaultOrthomap) {
                                                    newSelect.val(styleParameters.defaultOrthomap);
                                                }
                                            }
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            if ($('#showOrthomapsM').val() === "yes") {
                                                $('#defaultOrthomapM').show();
                                                $('#defaultOrthomapLabelM').show();
                                            } else {
                                                $('#defaultOrthomapM').hide();
                                                $('#defaultOrthomapLabelM').hide();
                                            }

                                            $('#showOrthomapsM').change(function()
                                            {
                                                if($('#showOrthomapsM').val() === "yes")
                                                {
                                                    $('#defaultOrthomapM').show();
                                                    $('#defaultOrthomapLabelM').show();
                                                    if (currentParams.dropdownMenu) {
                                                        for (let j = 0; j < currentParams.dropdownMenu.length; j++) {
                                                            newSelect.append('<option value="' + currentParams.dropdownMenu[j].id + '">' + currentParams.dropdownMenu[j].label + '</option>');
                                                        }
                                                    } else {
                                                        getOrthomaps(data.name_widget, function(extractedOrthomaps) {
                                                            for (let j = 0; j < extractedOrthomaps[0].length; j++) {
                                                                for (var key in extractedOrthomaps[0][j]) {
                                                                    // check if the property/key is defined in the object itself, not in parent
                                                                    if (extractedOrthomaps[0][j].hasOwnProperty(key)) {
                                                                        $('#defaultOrthomapM').append('<option value="' + key + '">' + extractedOrthomaps[0][j][key] + '</option>');
                                                                    }
                                                                }
                                                            }
                                                        });
                                                    }
                                                }
                                                else
                                                {
                                                    $('#defaultOrthomapM').hide();
                                                    $('#defaultOrthomapLabelM').hide();
                                                }
                                            });

                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="wsConnect" class="col-md-2 control-label"><?php echo _("Connect to WS"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newSelect = $('<select class="form-control" id="wsConnect" name="wsConnect"></select>');
                                            newSelect.append('<option style="display:none">');
                                            newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                            newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                            if (currentParams != null) {
                                                if (currentParams.wsConnect) {
                                                    newSelect.val(currentParams.wsConnect);
                                                }
                                            }
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            $('#wsConnect').change(function() {
                                                gisTargetCenterParametersM.wsConnect = $("#wsConnect").val();
                                                $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                            });
                                            
                                            //Nuova riga
                                            //Full screen controls
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="enableFullscreenModalM" class="col-md-2 control-label"><?php echo _("Enable fullscreen in a popup"); ?></label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newSelect = $('<select class="form-control" id="enableFullscreenModalM" name="enableFullscreenModalM"></select>');
                                            newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                            newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            gisTargetCenterParametersM = currentParams;
                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                            $("#widgetModeM").val(data.url);
                                            $("#urlWidgetM").parents("div.row").hide();

                                            //gisTargetCenterParametersM = currentParams;
                                            //$("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                            $("#inputShowTitleM").val("yes");
                                            $("#enableFullscreenTabM").val("yes");

                                            $("#gisTargetCenterLatM").val(gisTargetCenterParametersM.latLng[0]);
                                            $("#gisTargetCenterLngM").val(gisTargetCenterParametersM.latLng[1]);
                                            $("#gisTargetCenterZoomM").val(gisTargetCenterParametersM.zoom);
                                            $('#coordsCollectionUriM').parents("div.row").show();

                                            if (gisTargetCenterMapDivRefM === null) {
                                                $("#gisTargetCenterLatM").parents("div.row").show();
                                                $("#gisTargetCenterMapDivM").parents("div.row").show();

                                                //Bisogna aspettare che il modale sia completamente in posizione e visibile, sennò il load della mappa dà problemi di visualizzazione dei tiles
                                                setTimeout(function () {
                                                    gisTargetCenterMapDivM = "gisTargetCenterMapDivM";
                                                    gisTargetCenterMapDivRefM = L.map(gisTargetCenterMapDivM).setView(gisTargetCenterParametersM.latLng, gisTargetCenterParametersM.zoom);

                                                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                                        attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                                                        maxZoom: 18
                                                    }).addTo(gisTargetCenterMapDivRefM);
                                                    gisTargetCenterMapDivRefM.attributionControl.setPrefix('');

                                                    gisTargetCenterMapDivRefM.off("zoom");
                                                    gisTargetCenterMapDivRefM.on("zoom", function () {
                                                        $("#gisTargetCenterZoomM").val(gisTargetCenterMapDivRefM.getZoom());
                                                        gisTargetCenterParametersM.zoom = $("#gisTargetCenterZoomM").val();
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });

                                                    $("#gisTargetCenterZoomM").off("input");
                                                    $("#gisTargetCenterZoomM").on("input", function (event) {
                                                        gisTargetCenterMapDivRefM.setZoom($(this).val());
                                                        gisTargetCenterParametersM.zoom = $("#gisTargetCenterZoomM").val();
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });

                                                    gisTargetCenterMapDivRefM.off("move");
                                                    gisTargetCenterMapDivRefM.on("move", function () {
                                                        $("#gisTargetCenterLatM").val(gisTargetCenterMapDivRefM.getCenter().lat);
                                                        $("#gisTargetCenterLngM").val(gisTargetCenterMapDivRefM.getCenter().lng);
                                                        gisTargetCenterParametersM.latLng[0] = $("#gisTargetCenterLatM").val();
                                                        gisTargetCenterParametersM.latLng[1] = $("#gisTargetCenterLngM").val();
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });

                                                    $("#gisTargetCenterLatM").off("input");
                                                    $("#gisTargetCenterLatM").on("input", function (event) {
                                                        gisTargetCenterParametersM.latLng[0] = $("#gisTargetCenterLatM").val();
                                                        gisTargetCenterMapDivRefM.panTo(gisTargetCenterParametersM.latLng);
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });

                                                    $("#gisTargetCenterLngM").off("input");
                                                    $("#gisTargetCenterLngM").on("input", function (event) {
                                                        gisTargetCenterParametersM.latLng[1] = $("#gisTargetCenterLngM").val();
                                                        gisTargetCenterMapDivRefM.panTo(gisTargetCenterParametersM.latLng);
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });

                                                    if (gisTargetCenterParametersM.coordsCollectionUri !== null) {
                                                        $('#coordsCollectionUriM').val(gisTargetCenterParametersM.coordsCollectionUri);
                                                    }

                                                    $('#coordsCollectionUriM').change(function () {
                                                        gisTargetCenterParametersM.coordsCollectionUri = $(this).val();
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });
                                                }, 900);
                                            }
											///////////CK EDITOR SERVICE MAP///////////
											$.ajax({
                                                url: "../controllers/getTrustedUsers.php",
                                                data: {

                                                },
                                                type: "POST",
                                                async: true,
                                                dataType: 'json',
                                                success: function (data) {
                                                    if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
                                                        //Nuova riga
														console.log('TRUSTED');
                                                        //Source Selection
                                                        newFormRow = $('<div class="row"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                                        newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
                                                        newSelect.append('<option value="no">no</option>');
                                                        newSelect.append('<option value="ckeditor">yes</option>');
                                                        newInnerDiv.append(newSelect);
                                                        newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        newLabel.show();
                                                        newInnerDiv.show();
                                                        newSelect.show();

                                                        //Nuova riga Tab Destro: CKEDITOR
                                                        //Modalità del widget (none, map, gis, link esterno)
                                                        newFormRow = $('<div class="row" id="ck_editor"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-12"></div>');
                                                        newBox = $('<div id="widgetEditor">');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
                                                        newBox.append('<?= _("Here you can insert Javascript code to be executed in the widget. Please save your script by clicking on the save button on the bottom.")?>');
                                                        newBox.append('</div></div>');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
                                                        newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
                                                        newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
                                                        newBox.append('</div></div></div>');
                                                        newInnerDiv.append(newBox);
                                                        //newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        //newLabel.show();
                                                        newInnerDiv.show();
                                                        //newInput.show();
                                                        $('#ck_editor').hide();

                                                        var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
                                                            allowedContent: true,
                                                            language: 'en',
                                                            contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
                                                            width: '100%'
                                                        });
														
                                                    //if (code != null && code != "null") {
                                                    if (gisTargetCenterParametersM.mode == "ckeditor") {
                                                        $('#ck_editor').show();
                                                            $('#enableCKEditor').val("ckeditor");
                                                            // if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
                                                            if (code != null && code != "null") {
                                                                var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                            } else {
                                                                var codeForCKEditor = $('<div>').text(prepareCkEditorTemplate(code), connections).html();
                                                            }
                                                            var text_ck_area = document.createElement("text_ck_area");
                                                            text_ck_area.innerHTML = codeForCKEditor;
                                                            var newInfoDecoded = text_ck_area.innerText;
                                                            //    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
                                                            CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                            //}
                                                    }

                                                        let par = (JSON.stringify(currentParams));
                                                        if (par && !par.includes("latLng") && !par.includes("null")) {
                                                            //$("#parametersM").val(JSON.stringify(currentParams));
                                                            //if ((currentParams['mode'] == "ckeditor")||(code !== null)) {
                                                            if (gisTargetCenterParametersM.mode == "ckeditor") {
                                                                $('#ck_editor').show();
                                                                $('#enableCKEditor').val("ckeditor");
                                                                // if (code.substring(0, 8) != "https://" && code.substring(0, 7) != "http://" && code.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    //    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(codeForCKEditor);
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                            }
                                                        }

                                                        $('#enableCKEditor').change(function () {
                                                            if ($('#enableCKEditor').val() === "ckeditor") {
                                                                $('#ck_editor').show();
                                                                //if (rowParams.substring(0, 8) != "https://" && rowParams.substring(0, 7) != "http://" && rowParams.substring(0, 3) != "NR_") {
                                                                if (code != null && code != "null") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                }
                                                                //$("#parametersM").val('{"mode": "ckeditor"}');
                                                                gisTargetCenterParametersM.mode = "ckeditor";
                                                                $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                            } else {
                                                                $('#ck_editor').hide();
                                                                //$("#parametersM").val('');
                                                                gisTargetCenterParametersM.mode = "";
                                                                $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                            }
                                                        });

                                                        $('#sourceSelectionSaveBtn').click(function () {
                                                            var button = $(this);
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').show();
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');

                                                            var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();
                                                            /*if (newInfo.trim() === '') {
                                                                newInfo = null;
                                                            }   */

                                                            $.ajax({
                                                                url: "../controllers/updateWidget.php",
                                                                data: {
                                                                    action: "updateCkEditor",
                                                                    widgetName: name_widget_m,
                                                                    //    newText: newInfoDecoded
                                                                    newText: newInfo
                                                                },
                                                                type: "POST",
                                                                async: true,
                                                                dataType: 'json',
                                                                success: function (data) {
                                                                    if (data.detail === 'Ok') {
                                                                        alert('Saved!');
                                                                    } else {
                                                                        alert('Error');
                                                                    }
                                                                },
                                                                error: function (errorData) {
                                                                    alert('Error');
                                                                }
                                                            });
                                                        });
                                                    }
                                                },
                                                error: function (errorData) {
                                                    console.log('Error in retrieving Trusted Users.');
                                                }
                                            });
										//////////////////////////////////	
                                            break;

                                        case "widget3DMapDeckTest":    
                                        case "widget3DMapDeck":
                                            if(styleParamsRaw !== null)
                                            {
                                                styleParameters = JSON.parse(styleParamsRaw);
                                            }
                                            //Rimozione eventuali campi del subform general per widget process
                                            removeWidgetProcessGeneralFields("editWidget");

                                            var gisTargetCenterParametersM = null;
                                            $('div.modalContentWidgetForm').css("width", "135%");
                                            $('div.modalContentWidgetForm').css("left", "50%");
                                            $('div.modalContentWidgetForm').css("margin-left", "-65%");
                                            $('div.wellCustomFooter').css("width", "100%");
                                            $('div.wellCustom2right').css("width", $('div.wellCustom2right').width() * 1.5);
                                            $('#specificParamsM').css('width', '100%');
                                            $('#urlWidgetM').attr('disabled', false);
                                            //$('#urlWidgetM').prop('required', true);
                                            $("#titleLabelM").html("Title");
                                            $("#bckColorLabelM").html("Background color");
                                            $('#inputColorWidgetM').val("");
                                            $('#inputColorWidgetM').attr('disabled', false);
                                            $('#inputColorWidgetM').attr('required', true);
                                            $('#color_widget_M').css("background-color", "#eeeeee");
                                            $('#inputFontSizeM').val("");
                                            $('#inputFontSizeM').attr('disabled', true);
                                            $('#inputFontColorM').val("");
                                            $('#inputFontColorM').attr('disabled', true);
                                            $('#widgetFontColorM').css("background-color", "#eeeeee");
                                            $('#link_help_modal-add-widgetM').css("display", "");
                                            $('#inputFrameColorWidgetM').attr('disabled', false);
                                            $('#inputFrameColorWidgetM').val('#eeeeee');
                                            $('#inputFrameColorWidgetM').prop('required', false);
                                            $('#select-IntTemp-Widget-m').val(-1);
                                            $('#select-IntTemp-Widget-m').attr('disabled', true);
                                            $('#select-IntTemp-Widget-m').prop('required', false);
                                            $('#inputFreqWidgetM').attr('disabled', true);
                                            $('#inputFreqWidgetM').val("");
                                            $('#inputFreqWidgetM').prop('required', false);
                                            $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').prop('required', true);
                                            $('#inputUdmWidgetM').prop("required", false);
                                            $('#inputUdmWidgetM').attr("disabled", true);
                                            $('#inputUdmWidgetM').val("");
                                            $('#inputUdmPositionM').prop("required", false);
                                            $('#inputUdmPositionM').attr("disabled", true);
                                            $('#inputUdmPositionM').val(-1);

                                            //Parametri specifici del widget
                                            $('#specificParamsM .row').remove();

                                            //Nuova riga
                                            //Centro della mappa per modalitÃ  GIS target
                                            const leftDiv = $('<div></div>');
                                            leftDiv.css('width', '40%');
                                            leftDiv.css('float', 'left');
                                            $('#specificParamsM').append(leftDiv);
                                            const rightDiv = $('<div></div>');
                                            rightDiv.css('width', '60%');
                                            rightDiv.css('float', 'left');
                                            $('#specificParamsM').append(rightDiv);

                                            rightDiv.css('padding', '0px 20px');
                                            
                                            // left div
                                            newFormRow = $('<div class="row"></div>');
                                            leftDiv.append(newFormRow);
                                            newLabel = $('<label class="col-md-2 control-label">Latitude</label>');
                                            newInnerDiv = $('<div class="col-md-2">' +
                                                '<input type="text" id="gisTargetCenterLatM" class="form-control"/>' +
                                                '</div>');
                                            newLabel.css("padding-right", "8px");
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newLabel = $('<label class="col-md-2 control-label">Longitude</label>');
                                            newInnerDiv = $('<div class="col-md-2">' +
                                                '<input type="text" id="gisTargetCenterLngM" class="form-control"/>' +
                                                '</div>');
                                            newLabel.css("padding-right", "8px");
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newLabel = $('<label class="col-md-2 control-label">Zoom</label>');
                                            newInnerDiv = $('<div class="col-md-2">' +
                                                '<input type="text" id="gisTargetCenterZoomM" class="form-control"/>' +
                                                '</div>');
                                            newLabel.css("padding-right", "8px");
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newFormRow = $('<div class="row"></div>');
                                            leftDiv.append(newFormRow);
                                            newLabel = $('<label class="col-md-2 control-label">Tilt</label>');
                                            newInnerDiv = $('<div class="col-md-2">' +
                                                '<input type="text" id="gisTargetCenterPitchM" class="form-control"/>' +
                                                '</div>');
                                            newLabel.css("padding-right", "8px");
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newLabel = $('<label class="col-md-2 control-label">Rotation</label>');
                                            newInnerDiv = $('<div class="col-md-2">' +
                                                '<input type="text" id="gisTargetCenterBearingM" class="form-control"/>' +
                                                '</div>');
                                            newLabel.css("padding-right", "8px");
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newLabel = $('<label class="col-md-2 control-label">3D/2D</label>');
                                            newInnerDiv = $('<div class="col-md-2"></div>');
                                            newLabel.css("padding-right", "8px");
                                            newSelect = $('<select class="form-control" id="mapType"></select>');
                                            newSelect.append('<option value="3D">3D</option>');
                                            newSelect.append('<option value="2D">2D</option>');
                                            //newSelect.val()
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            newSelect.on('change', function() {
                                                const value = $('#mapType').val();
                                                gisTargetCenterParametersM.mapType = value;
                                                $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                console.log('set ' + value);
                                            });

                                            newFormRow = $('<div class="row"></div>');
                                            leftDiv.append(newFormRow);
                                            newInnerDiv = $('<div id="gisTargetCenter3DMapDeckDivM" class="col-md-12"></div>');
                                            newInnerDiv.css('height', '175px');
                                            //newInnerDiv.css('margin-top', '10px');
                                            newFormRow.append(newInnerDiv);

                                            var deck = snap4deck.deck;
                                            var map3d;
                                            var layers = {
                                                orthomaps: null,
                                                building: null,
                                                crest: null,
                                            };
                                            var lightData = {};

                                            //right div
                                            // navigation
                                            const nav = $('<nav class="nav"></nav>');
                                            rightDiv.append(nav);
                                            nav.css('height', '50px');
                                            function createNavLinkMenu(name) {
                                                const link = $(`<a class="nav-link">${name}</a>`);
                                                link.css('font-size', '1.5em');
                                                link.css('margin-right', '20px');
                                                link.css('cursor', 'pointer');
                                                link.css('text-decoration', 'none');
                                                const linkDiv = $(`<div id="${name.toLowerCase()}LinkDiv"></div>`);
                                                linkDiv.css('display', 'none');
                                                link.on('click', () => {
                                                    for (let div of rightDiv.children().toArray()) {
                                                        if ($(div).is('nav') == false) {
                                                            $(div).css('display', 'none');
                                                        }
                                                    } 
                                                    linkDiv.css('display', 'block');
                                                });
                                                nav.append(link);
                                                rightDiv.append(linkDiv);
                                                return [link, linkDiv];
                                            }

                                            const [orthomapsLink, orthomapsDiv] = createNavLinkMenu("Orhtomaps");
                                            const [terrainLink, terrainDiv] = createNavLinkMenu("Terrain");
                                            const [buildingsLink, buildingsDiv] = createNavLinkMenu("Buildings");
                                            const [lightsLink, lightsDiv] = createNavLinkMenu("Lights");
                                            // const [crestLink, crestDiv] = createNavLinkMenu("Crest");
                                            // const [skyLink, skyDiv] = createNavLinkMenu("Sky");

                                            orthomapsDiv.css('display', 'block');

                                            // orthomaps
                                            // show menu Orthomap
                                            newFormRow = $('<div class="row"></div>');
                                            orthomapsDiv.append(newFormRow);
                                            newLabel = $('<label for="showMenuOrthomapM" class="col-md-3 control-label">Show Orthomaps Menu</label>');
                                            const showMenuOrthomapCheck = $('<input id="showMenuOrthomapM" style="margin: 8px 0 0 15px;" type="checkbox"/>');
                                            newFormRow.append(newLabel);
                                            newFormRow.append(showMenuOrthomapCheck);

                                            newFormRow = $('<div class="row"></div>');
                                            orthomapsDiv.append(newFormRow);
                                            newLabel = $('<label for="defaultOrthomapM" id="defaultOrthomapLabelM" class="col-md-3 control-label">Default Orthomap</label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newSelect = $('<select class="form-control" id="defaultOrthomapM" name="defaultOrthomapM"></select>');
                                            var jsonOrthomaps = null;
                                            if (styleParameters != null) {
                                               if (styleParameters.showOrthomaps && currentParams.dropdownMenu) {
                                                    if (styleParameters.showOrthomaps == 'yes') {
                                                        for (let j = 0; j < currentParams.dropdownMenu.length; j++) {
                                                            newSelect.append('<option value="' + currentParams.dropdownMenu[j].id + '">' + currentParams.dropdownMenu[j].label + '</option>');
                                                        }
                                                    }
                                                }
                                                if (styleParameters.defaultOrthomap) {
                                                    newSelect.val(styleParameters.defaultOrthomap);
                                                }
                                            }
                                            // const orthomapsMenu = styleParameters.dropdownMenu;
                                            newSelect.on('change', () => {
                                                const select = $('#defaultOrthomapM')[0];
                                                const value = select.value;
                                                let url = '';
                                                for (let orthomap of currentParams.dropdownMenu) {
                                                    if (value === orthomap.id) {
                                                        url = orthomap.linkUrl;
                                                        break;
                                                    }
                                                }
                                                layers.orthomaps = createTileLayer(url.replace('{s}', 'a'));
                                                updateLayers();
                                            });
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            if (currentParams.dropdownMenu) {
                                                for (let j = 0; j < currentParams.dropdownMenu.length; j++) {
                                                    newSelect.append('<option value="' + currentParams.dropdownMenu[j].id + '">' + currentParams.dropdownMenu[j].label + '</option>');
                                                }
                                            } else {
                                                getOrthomaps(data.name_widget, function(extractedOrthomaps) {
                                                    for (let j = 0; j < extractedOrthomaps[0].length; j++) {
                                                        for (var key in extractedOrthomaps[0][j]) {
                                                            // check if the property/key is defined in the object itself, not in parent
                                                            if (extractedOrthomaps[0][j].hasOwnProperty(key)) {
                                                                $('#defaultOrthomapM').append('<option value="' + key + '">' + extractedOrthomaps[0][j][key] + '</option>');
                                                            }
                                                        }
                                                    }
                                                });
                                            }

                                            // TODO: add dynamic orthomaps

                                            // Terrain
                                            newFormRow = $('<div class="row" style="text-align: right;" ></div>');
                                            addBtn = $('<button type="button" class="btn btn-outline-success"><i style="color: green;" class="fa fa-plus"></i></button>');
                                            addBtn.on('click', () => {
                                                createNewTerrainQueryLine();
                                            });
                                            newFormRow.append(addBtn);
                                            terrainDiv.append(newFormRow);

                                            listTerrainDiv = $('<div id="listTerrainDiv" style="overflow-y: scroll; height: 390px;"></div>');
                                            terrainDiv.append(listTerrainDiv);
                                            var terrainCount = 0;
                                            function expandBB({target}) {
                                                let display = target.checked ? "block" : "none";
                                                $(`#showBBTP${target.id.split('TP')[1]}`).css('display', display);
                                            }
                                            function removeTerrain(terrainItem) {
                                                terrainItem.remove();
                                                terrainCount--;
                                                let terrainPriority = parseInt(terrainItem[0].id.split('TP')[1]);
                                                let terrainItems = $('#listTerrainDiv').children();
                                                for (let i = terrainPriority - 1; i < terrainItems.length; i++) {
                                                    let itemToModify = terrainItems[i];
                                                    itemToModify.id = `terrainItemTP${terrainPriority}`;
                                                    let inputs = $(`#${itemToModify.id} input`);
                                                    for (let i = 0; i < inputs.length; i++) {
                                                        let input = inputs[i];
                                                        input.id = input.id.replace(`TP${terrainPriority + 1}`, `TP${terrainPriority}`);
                                                        input.name = input.name.replace(`TP${terrainPriority + 1}`, `TP${terrainPriority}`);
                                                    }
                                                    inputs = $(`#${itemToModify.id} button`);
                                                    for (let i = 0; i < inputs.length; i++) {
                                                        let input = inputs[i];
                                                        input.id = input.id.replace(`TP${terrainPriority + 1}`, `TP${terrainPriority}`);
                                                    }
                                                    $(`#terrainLabelTP${terrainPriority + 1}`).attr('id', `terrainLabelTP${terrainPriority}`);
                                                    $(`#terrainLabelTP${terrainPriority}`).text(`Terrain Priority TP${terrainPriority}`);
                                                    $(`#showBBTP${terrainPriority + 1}`).attr('id', `showBBTP${terrainPriority}`);

                                                    terrainPriority++;
                                                }
                                            }
                                            function createNewTerrainQueryLine(terrainItemValue) {
                                                terrainCount++;
                                                // TODO: finish this
                                                let terrainId = `TP${terrainCount}`;
                                                if (terrainItemValue) 
                                                    terrainId = terrainItemValue.id;
                                                let terrainItem = $(`<div id="terrainItem${terrainId}"></div>`);
                                                newFormRow = $('<div class="row"></div>');
                                                newLabel = $(`<label id="terrainLabel${terrainId}" class="col-md-2 control-label" for="">Terrain Priority ${terrainId}</label>`);  
                                                removeBtn = $(`<button id="remove${terrainId}" type="button" class="btn btn-outline-danger" style="float: right;"><i style="color: red;" class="fa fa-minus"></i></button>`);
                                                removeBtn.on('click', () => {
                                                    removeTerrain(terrainItem);
                                                });
                                                newFormRow.append(newLabel);
                                                newFormRow.append(removeBtn);
                                                terrainItem.append(newFormRow);
                                                
                                                newFormRow = $('<div class="row"></div>');
                                                newLabel = $(`<label class="col-md-1 control-label" for="gisTargetTerrainQuery${terrainId}">Query</label>`);  
                                                newInput = $(`<div class="col-md-8" style="width: 91%; padding: 0;"><input type="text" style="width: 100%;" id="gisTargetTerrainQuery${terrainId}" name="gisTargetTerrainQuery${terrainId}" /></div>`)
                                                if (terrainItemValue) 
                                                    newInput.children().val(terrainItemValue.query);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInput);
                                                terrainItem.append(newFormRow);

                                                newFormRow = $('<div class="row"></div>');
                                                newLabel = $(`<label class="col-md-1 control-label" for="gisTargetRedEncoding${terrainId}">Red</label>`);  
                                                newInput = $(`<div class="col-md-2"><input type="text" style="width: 100%;" id="gisTargetRedEncoding${terrainId}" name="gisTargetRedEncoding${terrainId}" /></div>`)
                                                if (terrainItemValue) 
                                                    newInput.children().val(terrainItemValue.elevationDecoder.rScaler);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInput);
                                                newLabel = $(`<label class="col-md-1 control-label" for="gisTargetGreenEncoding${terrainId}">Green</label>`);  
                                                newInput = $(`<div class="col-md-2"><input type="text" style="width: 100%;" id="gisTargetGreenEncoding${terrainId}" name="gisTargetGreenEncoding${terrainId}" /></div>`)
                                                if (terrainItemValue) 
                                                    newInput.children().val(terrainItemValue.elevationDecoder.gScaler);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInput);
                                                newLabel = $(`<label class="col-md-1 control-label" for="gisTargetBlueEncoding${terrainId}">Blue</label>`);  
                                                newInput = $(`<div class="col-md-2"><input type="text" style="width: 100%;" id="gisTargetBlueEncoding${terrainId}" name="gisTargetBlueEncoding${terrainId}" /></div>`)
                                                if (terrainItemValue) 
                                                    newInput.children().val(terrainItemValue.elevationDecoder.bScaler);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInput);
                                                newLabel = $(`<label class="col-md-1 control-label" for="gisTargetOffsetEncoding${terrainId}">Offset</label>`);  
                                                newInput = $(`<div class="col-md-2"><input type="text" style="width: 100%;" id="gisTargetOffsetEncoding${terrainId}" name="gisTargetOffsetEncoding${terrainId}" /></div>`)
                                                if (terrainItemValue) 
                                                    newInput.children().val(terrainItemValue.elevationDecoder.offset);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInput);
                                                terrainItem.append(newFormRow);

                                                newFormRow = $('<div class="row"></div>');
                                                newLabel = $(`<label for="terrainHasBB${terrainId}" class="col-md-2 control-label">Has bounding box</label>`);
                                                const terrainHasBBCheck = $(`<input id="terrainHasBB${terrainId}" name="terrainHasBB${terrainId}" style="margin: 8px 0 0 15px;" type="checkbox"/>`);
                                                // terrainHasBBCheck.on("change", expandBB);
                                                terrainHasBBCheck.on("change", (event) => {
                                                    expandBB(event);
                                                });
                                                newFormRow.append(newLabel);
                                                newFormRow.append(terrainHasBBCheck);
                                                terrainItem.append(newFormRow);
                                                newFormRow = $(`<div class="row" id="showBB${terrainId}" style="display: none;"></div>`);
                                                newLabel = $(`<label class="col-md-1 control-label" for="gisTargetNorthBB${terrainId}">North</label>`);  
                                                newInput = $(`<div class="col-md-2"><input type="text" style="width: 100%;" id="gisTargetNorthBB${terrainId}" name="gisTargetNorthBB${terrainId}" /></div>`)
                                                if (terrainItemValue && terrainItemValue.bbox)
                                                    newInput.children().val(terrainItemValue.bbox.north);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInput);
                                                newLabel = $(`<label class="col-md-1 control-label" for="gisTargetEastBB${terrainId}">East</label>`);  
                                                newInput = $(`<div class="col-md-2"><input type="text" style="width: 100%;" id="gisTargetEastBB${terrainId}" name="gisTargetEastBB${terrainId}" /></div>`)
                                                if (terrainItemValue && terrainItemValue.bbox)
                                                    newInput.children().val(terrainItemValue.bbox.east);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInput);
                                                newLabel = $(`<label class="col-md-1 control-label" for="gisTargetSouthBB${terrainId}">South</label>`);  
                                                newInput = $(`<div class="col-md-2"><input type="text" style="width: 100%;" id="gisTargetSouthBB${terrainId}" name="gisTargetSouthBB${terrainId}" /></div>`)
                                                if (terrainItemValue && terrainItemValue.bbox)
                                                    newInput.children().val(terrainItemValue.bbox.south);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInput);
                                                newLabel = $(`<label class="col-md-1 control-label" for="gisTargetWestBB${terrainId}">West</label>`);  
                                                newInput = $(`<div class="col-md-2"><input type="text" style="width: 100%;" id="gisTargetWestBB${terrainId}" name="gisTargetWestBB${terrainId}" /></div>`)
                                                if (terrainItemValue && terrainItemValue.bbox)
                                                    newInput.children().val(terrainItemValue.bbox.west);
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInput);
                                                terrainItem.append(newFormRow);
                                                listTerrainDiv.append(terrainItem);
                                                if (terrainItemValue && terrainItemValue.bbox) {
                                                    terrainHasBBCheck.click();
                                                    $(`#showBB${terrainId}`).css('display', 'block');
                                                }
                                            }

                                            for (let key in styleParameters.terrains) {
                                                let terrainItem = styleParameters.terrains[key];
                                                createNewTerrainQueryLine({
                                                    id: key,
                                                    ...terrainItem
                                                });
                                            }

                                            // buildings
                                            function rgbaToArray(rgba) {
                                                var array = rgba.replace(/[^\d,.]/g, '').split(',');
                                                for (var i = 0; i < array.length; i++)
                                                    array[i] = parseFloat(array[i]);
                                                array[3] = parseInt(array[3] * 255);
                                                return array;
                                            }

                                            const defaultBuildingData = '../widgets/layers/edificato/aggregated_buildings.geojson';
                                            var buildingColor = [255, 102, 0, 255];
                                            const buildingMappingColor = {
                                                "Default": [255, 102, 0, 255],
                                                "Cult": [255, 255, 255, 255],
                                                "Culture": [0, 255, 0, 255],
                                                "PublicService": [0, 0, 255, 255],
                                                "Shopping": [0, 255, 255, 255],
                                                "Station": [255, 0, 255, 255],
                                                "University": [255, 110, 243, 255],
                                                "HealthCare": [181, 0, 0, 255],
                                                "School": [110, 255, 156, 255],
                                                "Bank": [92, 92, 92, 255],
                                            }
                                            if (styleParameters && styleParameters.buildingColors) {
                                                for (let key in styleParameters.buildingColors) {
                                                    let rgba = styleParameters.buildingColors[key];
                                                    if (rgba) {
                                                        let array = rgbaToArray(rgba);
                                                        buildingMappingColor[key] = array;
                                                    }
                                                }
                                            }
                                            const supportedBuildings = {
                                                none: {
                                                    displayedName: 'No Buildings',
                                                    id: 'menu-no-building',
                                                    action: () => {}
                                                },
                                                google: {
                                                    displayedName: 'Google Tile',
                                                    id: 'menu-google-tile',
                                                    action: () => {
                                                    }
                                                },
                                                grid_building_tiled: {
                                                    displayedName: 'Building New Tiled',
                                                    id: 'menu-grid-building-tiled',
                                                    action: () => {
                                                    },
                                                },
                                                extruded: {
                                                    displayedName: 'Extruded Buildings',
                                                    id: 'menu-extruded-building',
                                                    action: () => {
                                                        loadAggregatedBuildings();
                                                    },
                                                },
                                            }

                                            function updateBuildingColor(querySelector, buildingColorValue) {
                                                if (map3d != null) {
                                                    var input = $(querySelector).val();
                                                    const rgba = input.replace(/[^\d,.]/g, '').split(',');
                                                    for (var i = 0; i < rgba.length; i++)
                                                        rgba[i] = parseFloat(rgba[i]);
                                                    rgba[3] = parseInt(rgba[3] * 255);
                                                    return rgba
                                                }
                                            }

                                            function createAggregationColorInput(name) {
                                                newLabel = $(`<label class="col-md-2 control-label">${name} color</label>`);
                                                newInnerDiv = $(`<div class="col-md-4"><div class="input-group">` +
                                                    `<input type="text" id="gisTargetBuilding${name}ColorM" name="gisTargetBuilding${name}ColorM" class="form-control"/>` +
                                                    `<span class="input-group-addon"><i id="widgetBuilding${name}ColorM"></i></span>` +
                                                    '</div></div>');
                                                newInnerDiv.colorpicker({color: `rgba(${buildingMappingColor[name][0]}, ${buildingMappingColor[name][1]}, ${buildingMappingColor[name][2]}, ${buildingMappingColor[name][3]/255})`, format: 'rgba'});
                                                newInnerDiv.on('changeColor', function() {
                                                    buildingMappingColor[name] = updateBuildingColor(`#gisTargetBuilding${name}ColorM`);
                                                    layers.building = createAggregatedBuildingLayer({
                                                        data: '../widgets/layers/edificato/aggregated_buildings.geojson',
                                                    });
                                                    updateLayers();
                                                });
                                                newFormRow.append(newLabel);
                                                newFormRow.append(newInnerDiv);
                                            }

                                            newFormRow = $('<div class="row"></div>');
                                            buildingsDiv.append(newFormRow);
                                            newLabel = $('<label class="col-md-2 control-label">Building Type</label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newSelect = $('<select class="form-control" id="buildingTypeM" name="buildingTypeM"></select>');
                                            for (let buildingType in supportedBuildings) {
                                                newSelect.append(`<option value="${buildingType}">${supportedBuildings[buildingType].displayedName}</option>`);
                                            }
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);
                                            if (styleParameters != null && styleParameters.buildingType != null) {
                                                newSelect.val(styleParameters.buildingType);
                                            }
                                            createAggregationColorInput('Default');

                                            newFormRow = $('<div class="row"></div>');
                                            buildingsDiv.append(newFormRow);
                                            createAggregationColorInput('Cult');
                                            createAggregationColorInput('Culture');
                                            newFormRow = $('<div class="row"></div>');
                                            buildingsDiv.append(newFormRow);
                                            createAggregationColorInput('PublicService');
                                            createAggregationColorInput('Shopping');
                                            newFormRow = $('<div class="row"></div>');
                                            buildingsDiv.append(newFormRow);
                                            createAggregationColorInput('Station');
                                            createAggregationColorInput('University');
                                            newFormRow = $('<div class="row"></div>');
                                            buildingsDiv.append(newFormRow);
                                            createAggregationColorInput('HealthCare');
                                            createAggregationColorInput('School');
                                            newFormRow = $('<div class="row"></div>');
                                            buildingsDiv.append(newFormRow);
                                            createAggregationColorInput('Bank');

                                            // Lights
                                            var lightOn = true;
                                            var directionalLightIntensity = 1;
                                            var directionalLigthRGB = [255, 255, 255];
                                            var ambientLightIntensity = 1;
                                            var ambientLigthRGB = [255, 255, 255];

                                            newFormRow = $('<div class="row"></div>');
                                            lightsDiv.append(newFormRow);
                                            newLabel = $('<label class="col-md-2 control-label">Use dynamic light</label>');
                                            newInnerDiv = $('<div class="col-md-4"></div>');
                                            newSelect = $('<select class="form-control" id="useLightingM" name="useLightingM"></select>');
                                            newSelect.append('<option value="yes">Yes</option>');
                                            newSelect.append('<option value="no">No</option>');
                                            newInnerDiv.append(newSelect);
                                            newInnerDiv.on('change', () => {
                                                lightOn = $('#useLightingM').val() == 'yes' ? true : false;
                                                reloadLight();
                                            });
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newLabel = $('<label id="lightTimestampLabelM" class="col-md-2 control-label">Timestamp</label>');
                                            newInnerDiv = $('<div class="col-md-4">' +
                                                '<input type="datetime-local" id="lightTimestampM" name="lightTimestampM" class="datetime-control"/>' +
                                                '</div>');
                                            newInnerDiv.on('input', () => {
                                                reloadLight();
                                            });
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newFormRow = $('<div id="lightOptions" class="row"></div>');
                                            lightsDiv.append(newFormRow);
                                            newLabel = $('<label class="col-md-2 control-label">Directional light color</label>');
                                            newInnerDiv = $('<div class="col-md-4"><div class="input-group">' +
                                                '<input type="text" id="directionalLightColorM" name="directionalLightColorM" class="form-control"/>' +
                                                '<span class="input-group-addon"><i id="widgetDirectionalLightColorM"></i></span>' +
                                                '</div></div>');
                                            newInnerDiv.colorpicker({color: 'rgb(255, 255, 255)', format: 'rgb'});
                                            newInnerDiv.on('changeColor', () => {
                                                var input = $('#directionalLightColorM').val();
                                                const rgb = input.replace(/[^\d,.]/g, '').split(',');
                                                for (var i = 0; i < rgb.length; i++)
                                                    rgb[i] = parseInt(rgb[i]);
                                                directionalLigthRGB = rgb
                                                reloadLight();
                                            });
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newLabel = $('<label class="col-md-2 control-label">Ambient light color</label>');
                                            newInnerDiv = $('<div class="col-md-4"><div class="input-group">' +
                                                '<input type="text" id="ambientLightColorM" name="ambientLightColorM" class="form-control"/>' +
                                                '<span class="input-group-addon"><i id="widgetAmbientLightColorM"></i></span>' +
                                                '</div></div>');
                                            newInnerDiv.colorpicker({color: 'rgb(255, 255, 255)', format: 'rgb'});
                                            newInnerDiv.on('changeColor', function() {
                                                var input = $('#ambientLightColorM').val();
                                                const rgb = input.replace(/[^\d,.]/g, '').split(',');
                                                for (var i = 0; i < rgb.length; i++)
                                                    rgb[i] = parseInt(rgb[i]);
                                                ambientLigthRGB = rgb
                                                reloadLight();
                                            });
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newFormRow = $('<div class="row"></div>');
                                            lightsDiv.append(newFormRow);
                                            newInnerDiv = $('<div class="col-md-6"><div class="input-group">' +
                                                '<input id="directionalLightIntensityM" name="directionalLightIntensityM" type="range" class="vertical-slider">' +
                                                '</div></div>');
                                            newInnerDiv.on('input', () => {
                                                const selectedSlider = $('#directionalLightIntensityM')[0];
                                                const value = parseFloat(selectedSlider.value);
                                                $(selectedSlider).css('background-image', `linear-gradient(90deg, goldenrod ${value}%, #d3d3d3 ${value}%)`);
                                                // directionalLightIntensity = (value / 100) * 3 + 0.5;
                                                directionalLightIntensity = (value / 100) * 2;
                                                reloadLight();
                                            });
                                            newFormRow.append(newInnerDiv);

                                            newInnerDiv = $('<div class="col-md-6"><div class="input-group">' +
                                                '<input id="ambientLightIntensityM" name="ambientLightIntensityM" type="range" class="vertical-slider">' +
                                                '</div></div>');
                                            newInnerDiv.on('input', () => {
                                                const selectedSlider = $('#ambientLightIntensityM')[0];
                                                const value = parseFloat(selectedSlider.value);
                                                $(selectedSlider).css('background-image', `linear-gradient(90deg, goldenrod ${value}%, #d3d3d3 ${value}%)`);
                                                // ambientLightIntensity = (value / 100) * 3 + 0.5;
                                                ambientLightIntensity = (value / 100) * 2;
                                                reloadLight();
                                            });
                                            newFormRow.append(newInnerDiv);

                                            if (styleParameters && styleParameters.useLighting && styleParameters.useLighting == 'yes') {
                                                $('#useLightingM').val('yes');
                                                $('#lightTimestampM').val(styleParameters.lightTimestamp);
                                                $('#directionalLightColorM').val(styleParameters.directionalLightColor);
                                                let dli = parseInt(styleParameters.directionalLightIntensity);
                                                $('#directionalLightIntensityM').val(dli);
                                                $('#directionalLightIntensityM').css('background-image', `linear-gradient(90deg, goldenrod ${dli}%, #d3d3d3 ${dli}%)`);
                                                $('#ambientLightColorM').val(styleParameters.ambientLightColor);
                                                let ali = parseInt(styleParameters.ambientLightIntensity);
                                                $('#ambientLightIntensityM').val(ali);
                                                $('#ambientLightIntensityM').css('background-image', `linear-gradient(90deg, goldenrod ${ali}%, #d3d3d3 ${ali}%)`);
                                            } else {
                                                $('#useLightingM').val('no');
                                            }

                                            gisTargetCenterParametersM = currentParams;
                                            if (gisTargetCenterParametersM.mapType == null || gisTargetCenterParametersM.mapType == '') {
                                                gisTargetCenterParametersM.mapType = '3D';
                                            }
                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                            $("#widgetModeM").val(data.url);
                                            $("#urlWidgetM").parents("div.row").hide();

                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                            $("#inputShowTitleM").val("yes");
                                            $("#enableFullscreenTabM").val("yes");

                                            console.log('gis target params');
                                            console.log(gisTargetCenterParametersM);

                                            $("#gisTargetCenterLatM").val(gisTargetCenterParametersM.latLng[0]);
                                            $("#gisTargetCenterLngM").val(gisTargetCenterParametersM.latLng[1]);
                                            $("#gisTargetCenterZoomM").val(gisTargetCenterParametersM.zoom);
                                            $("#gisTargetCenterPitchM").val(gisTargetCenterParametersM.pitch || 30);
                                            $("#gisTargetCenterBearingM").val(gisTargetCenterParametersM.bearing || 0);
                                            $("#mapType").val(gisTargetCenterParametersM.mapType);
                                            $('#coordsCollectionUriM').parents("div.row").show();

                                            function createLights() {
                                                const input = $('#lightTimestampM')[0].value;
                                                const h24toSeconds = 86400;

                                                var now;
                                                if (input == '')
                                                    now = Date.now();
                                                else
                                                    now = Date.parse(input);

                                                const sunLight = new deck._SunLight({
                                                    timestamp: now,
                                                    color: directionalLigthRGB,
                                                    intensity: directionalLightIntensity,
                                                    // _shadow: shadowsOn,
                                                });
                                                const ambientLight = new deck.AmbientLight({
                                                    color: ambientLigthRGB,
                                                    intensity: ambientLightIntensity
                                                });

                                                return new deck.LightingEffect({
                                                    ambientLight,
                                                    sunLight,
                                                });
                                            }

                                            function reloadLight(effectsOn) {
                                                if (lightOn) {
                                                    const lights = createLights();
                                                    map3d.setProps({
                                                        effects: [lights],
                                                        // _animate: shadowsOn,
                                                    });
                                                } else {
                                                    map3d.setProps({
                                                        effects: [],
                                                    });
                                                }
                                            }
                                            function formatDatetime(timestamp) {
                                                const datetime = new Date(timestamp);
                                                const year = datetime.getFullYear();
                                                const month = formatNumberDate(datetime.getMonth());
                                                const day = formatNumberDate(datetime.getDate());
                                                const hour = formatNumberDate(datetime.getHours());
                                                const minute = formatNumberDate(datetime.getMinutes());
                                                const ris = `${year}-${month}-${day}T${hour}:${minute}`;
                                                console.log('dateformat: ' + ris);
                                                return ris;
                                            }
                                            function formatNumberDate(number) {
                                                if (number == 0) {
                                                    return '00';
                                                } else if (number < 10) {
                                                    return `0${number}`;
                                                } else {
                                                    return `${number}`;
                                                }
                                            }
                                            function createTileLayer(data, id = 'map-layer') {
                                                return new deck.TileLayer({
                                                    id: id,
                                                    // https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Tile_servers
                                                    data: data,
                                            
                                                    minZoom: 0,
                                                    maxZoom: 20,
                                                    tileSize: 256,
                                                    opacity: 1,
                                                    pickable: true,
                                            
                                                    renderSubLayers: props => {
                                                        const {
                                                            bbox: { west, south, east, north }
                                                        } = props.tile;
                                            
                                                        return new deck.BitmapLayer(props, {
                                                            data: null,
                                                            image: props.data,
                                                            bounds: [west, south, east, north]
                                                        });
                                                    },
                                                });
                                            }

                                            function updateLayers() {
                                                map3d.setProps({
                                                    layers: [
                                                        layers.orthomaps,
                                                        layers.building,
                                                        layers.crest
                                                    ],
                                                });
                                            }

                                            function createGeoJSONLayer(props) {
                                                return new deck.GeoJsonLayer({
                                                    id: 'geojson-layer',
                                                    extruded: true,
                                                    pickable: true,
                                                    stroked: true,
                                                    filled: true,
                                                    lineWidthScale: 20,
                                                    lineWidthMinPixels: 10,
                                                    getFillColor: [255, 0, 0, 200],
                                                    getLineColor: [0, 0, 0],
                                                    getElevation: f => f.properties.height,
                                                    autoHighlight: true,
                                                    highlightColor: [255, 0, 0, 200],
                                                    getPointRadius: 100,
                                                    getLineWidth: 100,
                                                    ...props
                                                });
                                            }

                                            function createAggregatedBuildingLayer(props) {
                                                return createGeoJSONLayer({
                                                    id: 'aggregated-building-layer',
                                                    getFillColor: (d) => d.properties.type ? buildingMappingColor[d.properties.type] : buildingMappingColor['Default'],
                                                    autoHighlight: false,
                                                    updateTriggers: {
                                                        getFillColor: {
                                                            b1: buildingMappingColor["Default"],
                                                            b2: buildingMappingColor["Cult"],
                                                            b3: buildingMappingColor["Culture"], 
                                                            b4: buildingMappingColor["PublicService"], 
                                                            b5: buildingMappingColor["Shopping"], 
                                                            b6: buildingMappingColor["Station"], 
                                                            b7: buildingMappingColor["University"], 
                                                            b8: buildingMappingColor["HealthCare"], 
                                                            b9: buildingMappingColor["School"], 
                                                            b10: buildingMappingColor["Bank"], 
                                                        }
                                                    },
                                                    ...props,
                                                });
                                            }

                                            if (gisTargetCenterMapDivRefM === null) {
                                                $("#gisTargetCenterLatM").parents("div.row").show();
                                                $("#gisTargetCenterMapDivM").parents("div.row").show();
                                                    gisTargetCenter3DMapDeckDivM = "gisTargetCenter3DMapDeckDivM";
                                                    const lightTileData = 'https://c.tile.openstreetmap.org/{z}/{x}/{y}.png';
                                                    layers.orthomaps = createTileLayer(lightTileData);
                                                    if (styleParameters && styleParameters.defaultOrthomap && currentParams && currentParams.dropdownMenu) {
                                                        for (let key in currentParams.dropdownMenu) {
                                                            if (currentParams.dropdownMenu[key].id == styleParameters.defaultOrthomap) {
                                                                layers.orthomaps = createTileLayer(currentParams.dropdownMenu[key].linkUrl.replace('{s}', 'c'));
                                                            }
                                                        }
                                                    }
                                                    layers.building = createAggregatedBuildingLayer({
                                                        data: '../widgets/layers/edificato/aggregated_buildings.geojson',
                                                    });
                                                    const height = $("#" + gisTargetCenter3DMapDeckDivM).height();
                                                    const width = $("#" + gisTargetCenter3DMapDeckDivM).width();

                                                    const latitude = gisTargetCenterParametersM.latLng[0] || 43.769562;
                                                    const longitude = gisTargetCenterParametersM.latLng[1] || 11.255814;
                                                    const zoom = gisTargetCenterParametersM.zoom || 15;
                                                    const pitch = gisTargetCenterParametersM.pitch || 30;
                                                    const bearing = gisTargetCenterParametersM.bearing || 0;
                                                    var currentViewState = {
                                                            altitude: 1.5,
                                                            latitude,
                                                            longitude, 
                                                            zoom,
                                                            maxZoom: 18,
                                                            minZoom: 1,
                                                            pitch,
                                                            maxPitch: 75,
                                                            bearing,
                                                            height: height,
                                                            width: width,
                                                    };
                                                    map3d = new deck.Deck({
                                                        mapStyle: 'https://basemaps.cartocdn.com/gl/positron-nolabels-gl-style/style.json',
                                                        viewState: currentViewState,
                                                        controller: true,
                                                        parent: document.getElementById(gisTargetCenter3DMapDeckDivM),
                                                        layers: [
                                                            layers.orthomaps,
                                                            layers.building,
                                                        ],
                                                        onViewStateChange: ({ viewState }) => {
                                                            $("#gisTargetCenterZoomM").val(viewState.zoom);
                                                            $("#gisTargetCenterLatM").val(viewState.latitude);
                                                            $("#gisTargetCenterLngM").val(viewState.longitude);
                                                            $("#gisTargetCenterPitchM").val(viewState.pitch);
                                                            $("#gisTargetCenterBearingM").val(viewState.bearing);

                                                            gisTargetCenterParametersM.zoom = viewState.zoom;
                                                            gisTargetCenterParametersM.latLng[0] = viewState.latitude;
                                                            gisTargetCenterParametersM.latLng[1] = viewState.longitude;
                                                            gisTargetCenterParametersM.pitch = viewState.pitch;
                                                            gisTargetCenterParametersM.bearing = viewState.bearing;
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));

                                                            map3d.setProps({
                                                                viewState: viewState,
                                                            });
                                                            return viewState;
                                                        },
                                                    });
                                                    reloadLight();
                                                    
                                                    // appling styling
                                                    leftDiv.css("height", "490px");
                                                    rightDiv.css("height", "490px");
                                                    $(`#${gisTargetCenter3DMapDeckDivM}`).parent().css("height", "calc(100% - 98px");
                                                    $(`#${gisTargetCenter3DMapDeckDivM}`).parent().css("padding", "0");

                                                    $(`#${gisTargetCenter3DMapDeckDivM}`).css("height", "100%");
                                                    $(`#${gisTargetCenter3DMapDeckDivM}`).css("padding", "0");

                                                    function createTileLayer(data, id = 'map-layer') {
                                                        return new deck.TileLayer({
                                                            id: id,
                                                            // https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Tile_servers
                                                            data: data,
                                                    
                                                            minZoom: 0,
                                                            maxZoom: 20,
                                                            tileSize: 256,
                                                            opacity: 1,
                                                            pickable: true,
                                                    
                                                            renderSubLayers: props => {
                                                                const {
                                                                    bbox: { west, south, east, north }
                                                                } = props.tile;
                                                    
                                                                return new deck.BitmapLayer(props, {
                                                                    data: null,
                                                                    image: props.data,
                                                                    bounds: [west, south, east, north]
                                                                });
                                                            },
                                                        });
                                                    }

                                                    function createBuildingLayer(data, color, id = 'building-layer') {
                                                        return new deck.GeoJsonLayer({
                                                            id: id,
                                                            data: data,
                                                            extruded: true,
                                                            // pickable: true,
                                                            stroked: false,
                                                            filled: true,
                                                            lineWidthScale: 20,
                                                            lineWidthMinPixels: 2,
                                                            //getFillColor: [255, 102, 0, 255],
                                                            getFillColor: color,
                                                            getLineColor: [255, 255, 255],
                                                            getElevation: f => f.properties.height,
                                                            getRadius: 100,
                                                            getLineWidth: 1,
                                                        });
                                                    }

                                                    $("#gisTargetCenterZoomM").off("input");
                                                    $("#gisTargetCenterZoomM").on("input", function (event) {
                                                        gisTargetCenterParametersM.zoom = $("#gisTargetCenterZoomM").val();
                                                        var currViewState = map3d.props.viewState;
                                                        map3d.setProps({
                                                            viewState: {
                                                                ...currViewState,
                                                                zoom: parseFloat(gisTargetCenterParametersM.zoom),
                                                            }
                                                        });
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });

                                                    $("#gisTargetCenterPitchM").off("input");
                                                    $("#gisTargetCenterPitchM").on("input", function (event) {
                                                        gisTargetCenterParametersM.pitch = $("#gisTargetCenterPitchM").val();
                                                        var currViewState = map3d.props.viewState;
                                                        map3d.setProps({
                                                            viewState: {
                                                                ...currViewState,
                                                                pitch: parseFloat(gisTargetCenterParametersM.pitch),
                                                            }
                                                        });
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });

                                                    $("#gisTargetCenterBearingM").off("input");
                                                    $("#gisTargetCenterBearingM").on("input", function (event) {
                                                        gisTargetCenterParametersM.bearing = $("#gisTargetCenterBearingM").val();
                                                        var currViewState = map3d.props.viewState;
                                                        map3d.setProps({
                                                            viewState: {
                                                                ...currViewState,
                                                                bearing: parseFloat(gisTargetCenterParametersM.bearing),
                                                            }
                                                        });
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });

                                                    $("#gisTargetCenterLatM").off("input");
                                                    $("#gisTargetCenterLatM").on("input", function (event) {
                                                        gisTargetCenterParametersM.latLng[0] = $("#gisTargetCenterLatM").val();
                                                        var currViewState = map3d.props.viewState;
                                                        map3d.setProps({
                                                            viewState: {
                                                                ...currViewState,
                                                                latitude: parseFloat(gisTargetCenterParametersM.latLng[0]),
                                                            }
                                                        });
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });

                                                    $("#gisTargetCenterLngM").off("input");
                                                    $("#gisTargetCenterLngM").on("input", function (event) {
                                                        console.log($("#gisTargetCenterLngM").val());
                                                        console.log($(this).val());
                                                        gisTargetCenterParametersM.latLng[1] = $("#gisTargetCenterLngM").val();
                                                        var currViewState = map3d.props.viewState;
                                                        map3d.setProps({
                                                            viewState: {
                                                                ...currViewState,
                                                                longitude: parseFloat(gisTargetCenterParametersM.latLng[1]),
                                                            }
                                                        });
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });

                                                    $("#gisTargetBuildingColorM").off("input");
                                                    $("#gisTargetBuildingColorM").on("input", function (event) {
                                                        console.log($("#gisTargetBuildingColorM").val());
                                                        console.log(map3d);
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });

                                                    $("#gisTargetBuildingColorM").off("changeColor");
                                                    $("#gisTargetBuildingColorM").on("changeColor", function (event) {
                                                        console.log("building color changed");
                                                        console.log($("#gisTargetBuildingColorM").val());
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });

                                                    if (gisTargetCenterParametersM.coordsCollectionUri !== null) {
                                                        $('#coordsCollectionUriM').val(gisTargetCenterParametersM.coordsCollectionUri);
                                                    }

                                                    $('#coordsCollectionUriM').change(function () {
                                                        gisTargetCenterParametersM.coordsCollectionUri = $(this).val();
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });
                                                // }, 700);
                                            }
                                                
                                            break;
                                            
                                        /*
                                        case "widget3DMap":
                                            //Rimozione eventuali campi del subform general per widget process
                                            removeWidgetProcessGeneralFields("editWidget");

                                            var gisTargetCenterParametersM = null;
                                            $('#urlWidgetM').attr('disabled', false);
                                            $('#urlWidgetM').prop('required', true);
                                            $("#titleLabelM").html("Title");
                                            $("#bckColorLabelM").html("Background color");
                                            $('#inputColorWidgetM').val("");
                                            $('#inputColorWidgetM').attr('disabled', false);
                                            $('#inputColorWidgetM').attr('required', true);
                                            $('#color_widget_M').css("background-color", "#eeeeee");
                                            $('#inputFontSizeM').val("");
                                            $('#inputFontSizeM').attr('disabled', true);
                                            $('#inputFontColorM').val("");
                                            $('#inputFontColorM').attr('disabled', true);
                                            $('#widgetFontColorM').css("background-color", "#eeeeee");
                                            $('#link_help_modal-add-widgetM').css("display", "");
                                            $('#inputFrameColorWidgetM').attr('disabled', false);
                                            $('#inputFrameColorWidgetM').val('#eeeeee');
                                            $('#inputFrameColorWidgetM').prop('required', false);
                                            $('#select-IntTemp-Widget-m').val(-1);
                                            $('#select-IntTemp-Widget-m').attr('disabled', true);
                                            $('#select-IntTemp-Widget-m').prop('required', false);
                                            $('#inputFreqWidgetM').attr('disabled', true);
                                            $('#inputFreqWidgetM').val("");
                                            $('#inputFreqWidgetM').prop('required', false);
                                            $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                            $('#inputHeaderFontColorWidgetM').prop('required', true);
                                            $('#inputUdmWidgetM').prop("required", false);
                                            $('#inputUdmWidgetM').attr("disabled", true);
                                            $('#inputUdmWidgetM').val("");
                                            $('#inputUdmPositionM').prop("required", false);
                                            $('#inputUdmPositionM').attr("disabled", true);
                                            $('#inputUdmPositionM').val(-1);

                                            //Parametri specifici del widget
                                            $('#specificParamsM .row').remove();

                                            //Nuova riga
                                            //Centro della mappa per modalità GIS target
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label class="col-md-2 control-label">Start lat</label>');
                                            newInnerDiv = $('<div class="col-md-2">' +
                                                '<input type="text" id="gisTargetCenterLatM" class="form-control"/>' +
                                                +'</div>');
                                            newInnerDiv.css("padding-left", "0px");
                                            newInnerDiv.css("padding-right", "0px");
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newLabel = $('<label class="col-md-2 control-label">Start lng</label>');
                                            newInnerDiv = $('<div class="col-md-2">' +
                                                '<input type="text" id="gisTargetCenterLngM" class="form-control"/>' +
                                                +'</div>');
                                            newInnerDiv.css("padding-left", "0px");
                                            newInnerDiv.css("padding-right", "0px");
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newLabel = $('<label class="col-md-2 control-label">Start zoom</label>');
                                            newInnerDiv = $('<div class="col-md-2">' +
                                                '<input type="text" id="gisTargetCenterZoomM" class="form-control"/>' +
                                                +'</div>');
                                            newLabel.css("padding-left", "8px");
                                            newLabel.css("padding-right", "8px");
                                            newInnerDiv.css("padding-left", "0px");
                                            newInnerDiv.css("padding-right", "0px");
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newInnerDiv = $('<div id="gisTargetCenterMapDivM" class="col-md-12"></div>');
                                            newFormRow.append(newInnerDiv);

                                            //Nuova riga
                                            //Full screen controls
                                            newFormRow = $('<div class="row"></div>');
                                            $("#specificParamsM").append(newFormRow);
                                            newLabel = $('<label for="enableFullscreenModalM" class="col-md-2 control-label">Enable fullscreen in a popup</label>');
                                            newInnerDiv = $('<div class="col-md-3"></div>');
                                            newSelect = $('<select class="form-control" id="enableFullscreenModalM" name="enableFullscreenModalM"></select>');
                                            newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                            newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                            newInnerDiv.append(newSelect);
                                            newFormRow.append(newLabel);
                                            newFormRow.append(newInnerDiv);

                                            gisTargetCenterParametersM = currentParams;
                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                            $("#widgetModeM").val(data.url);
                                            $("#urlWidgetM").parents("div.row").hide();

                                            gisTargetCenterParametersM = currentParams;
                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                            $("#inputShowTitleM").val("yes");
                                            $("#enableFullscreenTabM").val("yes");

                                            $("#gisTargetCenterLatM").val(gisTargetCenterParametersM.latLng[0]);
                                            $("#gisTargetCenterLngM").val(gisTargetCenterParametersM.latLng[1]);
                                            $("#gisTargetCenterZoomM").val(gisTargetCenterParametersM.zoom);
                                            $('#coordsCollectionUriM').parents("div.row").show();

                                            if (gisTargetCenterMapDivRefM === null) {
                                                $("#gisTargetCenterLatM").parents("div.row").show();
                                                $("#gisTargetCenterMapDivM").parents("div.row").show();

                                                //Bisogna aspettare che il modale sia completamente in posizione e visibile, sennò il load della mappa dà problemi di visualizzazione dei tiles
                                                setTimeout(function () {
                                                    gisTargetCenterMapDivM = "gisTargetCenterMapDivM";
                                                    gisTargetCenterMapDivRefM = L.map(gisTargetCenterMapDivM).setView(gisTargetCenterParametersM.latLng, gisTargetCenterParametersM.zoom);

                                                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                                        attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                                                        maxZoom: 18
                                                    }).addTo(gisTargetCenterMapDivRefM);
                                                    gisTargetCenterMapDivRefM.attributionControl.setPrefix('');

                                                    gisTargetCenterMapDivRefM.off("zoom");
                                                    gisTargetCenterMapDivRefM.on("zoom", function () {
                                                        $("#gisTargetCenterZoomM").val(gisTargetCenterMapDivRefM.getZoom());
                                                        gisTargetCenterParametersM.zoom = $("#gisTargetCenterZoomM").val();
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });

                                                    $("#gisTargetCenterZoomM").off("input");
                                                    $("#gisTargetCenterZoomM").on("input", function (event) {
                                                        gisTargetCenterMapDivRefM.setZoom($(this).val());
                                                        gisTargetCenterParametersM.zoom = $("#gisTargetCenterZoomM").val();
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });

                                                    gisTargetCenterMapDivRefM.off("move");
                                                    gisTargetCenterMapDivRefM.on("move", function () {
                                                        $("#gisTargetCenterLatM").val(gisTargetCenterMapDivRefM.getCenter().lat);
                                                        $("#gisTargetCenterLngM").val(gisTargetCenterMapDivRefM.getCenter().lng);
                                                        gisTargetCenterParametersM.latLng[0] = $("#gisTargetCenterLatM").val();
                                                        gisTargetCenterParametersM.latLng[1] = $("#gisTargetCenterLngM").val();
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });

                                                    $("#gisTargetCenterLatM").off("input");
                                                    $("#gisTargetCenterLatM").on("input", function (event) {
                                                        gisTargetCenterParametersM.latLng[0] = $("#gisTargetCenterLatM").val();
                                                        gisTargetCenterMapDivRefM.panTo(gisTargetCenterParametersM.latLng);
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });

                                                    $("#gisTargetCenterLngM").off("input");
                                                    $("#gisTargetCenterLngM").on("input", function (event) {
                                                        gisTargetCenterParametersM.latLng[1] = $("#gisTargetCenterLngM").val();
                                                        gisTargetCenterMapDivRefM.panTo(gisTargetCenterParametersM.latLng);
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });

                                                    if (gisTargetCenterParametersM.coordsCollectionUri !== null) {
                                                        $('#coordsCollectionUriM').val(gisTargetCenterParametersM.coordsCollectionUri);
                                                    }

                                                    $('#coordsCollectionUriM').change(function () {
                                                        gisTargetCenterParametersM.coordsCollectionUri = $(this).val();
                                                        $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                    });
                                                }, 350);
                                            }


                                            break;
                                            */
                                    
                                    case "widgetGisWFS":
                                    //METTERE QUI IL CASE
                                    removeWidgetProcessGeneralFields("editWidget");                                       
                                        var gisTargetCenterParametersM = null;
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#urlWidgetM').prop('required', true);
                                        $("#titleLabelM").html("Title"); 
                                        $("#bckColorLabelM").html("Background color");
                                        $('#inputColorWidgetM').val("");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').attr('required', true);
                                        $('#color_widget_M').css("background-color", "#eeeeee");
                                        $('#inputFontSizeM').val("");
                                        $('#inputFontSizeM').attr('disabled', true);
                                        $('#inputFontColorM').val("");
                                        $('#inputFontColorM').attr('disabled', true);
                                        $('#widgetFontColorM').css("background-color", "#eeeeee");
                                        $('#link_help_modal-add-widgetM').css("display", "");
                                        $('#inputFrameColorWidgetM').attr('disabled', false);
                                        $('#inputFrameColorWidgetM').val('#eeeeee');
                                        $('#inputFrameColorWidgetM').prop('required', false);
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').attr('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').attr('disabled', true);
                                        $('#inputFreqWidgetM').val("");
                                        $('#inputFreqWidgetM').prop('required', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();                                       
                                        //Nuova riga
                                        //Modalità del widget (none, map, gis, link esterno)
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="widgetModeM" class="col-md-2 control-label"><?php echo _("Widget mode"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="widgetModeM" name="widgetModeM"></select>');
                                        newSelect.append('<option value="link"><?php echo _("Web link"); ?></option>');
                                        newSelect.append('<option value="map"><?php echo _("Map"); ?></option>');
                                        newSelect.append('<option value="gisTarget"><?php echo _("Selector target"); ?></option>');
                                        newSelect.append('<option value="selectorWebTarget"><?php echo _("Selector Web target"); ?></option>');
                                        newSelect.append('<option value="none"><?php echo _("None"); ?></option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);                                        
                                        //Nuova riga
                                        //Centro della mappa per modalità GIS target
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label class="col-md-2 control-label"><?php echo _("Start lat"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-2">' +
                                                          '<input type="text" id="gisTargetCenterLatM" class="form-control"/>' +
                                                        +'</div>');
                                        newInnerDiv.css("padding-left", "0px");
                                        newInnerDiv.css("padding-right", "0px");
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);                                          
                                        newLabel = $('<label class="col-md-2 control-label"><?php echo _("Start lng"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-2">' +
                                                          '<input type="text" id="gisTargetCenterLngM" class="form-control"/>' +
                                                        +'</div>');
                                        newInnerDiv.css("padding-left", "0px");
                                        newInnerDiv.css("padding-right", "0px");        
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);                                       
                                        newLabel = $('<label class="col-md-2 control-label"><?php echo _("Start zoom"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-2">' +
                                                          '<input type="text" id="gisTargetCenterZoomM" class="form-control"/>' +
                                                        +'</div>');
                                        newLabel.css("padding-left", "8px");
                                        newLabel.css("padding-right", "8px");        
                                        newInnerDiv.css("padding-left", "0px");
                                        newInnerDiv.css("padding-right", "0px");        
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newFormRow.hide();                                       
                                        //Nuova riga
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newInnerDiv = $('<div id="gisTargetCenterMapDivM" class="col-md-12"></div>');
                                        newFormRow.append(newInnerDiv);
                                        newFormRow.hide();
                                        //Nuova riga
                                        //Full screen controls
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="enableFullscreenTabM" class="col-md-2 control-label"><?php echo _("Enable fullscreen in new tab"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="enableFullscreenTabM" name="enableFullscreenTabM"></select>');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newSelect.val(data['enableFullscreenTab']);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel = $('<label for="enableFullscreenModalM" class="col-md-2 control-label"><?php echo _("Enable fullscreen in a popup"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="enableFullscreenModalM" name="enableFullscreenModalM"></select>');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);                                       
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="coordsCollectionUriM" class="col-md-2 control-label"><?php echo _("Coords collection URI"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-4"></div>');
                                        newSelect = $('<input type="text" class="form-control" id="coordsCollectionUriM" name="coordsCollectionUriM"/>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        $('#coordsCollectionUriM').parents("div.row").hide();                                       
                                        //Nuova riga
                                        //Zoom controls visibility
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="inputControlsVisibilityM" class="col-md-2 control-label"><?php echo _("Zoom controls visibility"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="inputControlsVisibilityM" name="inputControlsVisibilityM"></select>');
                                        newSelect.append('<option value="alwaysVisible">Always visible</option>');
                                        newSelect.append('<option value="hidden">Hidden</option>');
                                        newSelect.val(data['controlsVisibility']);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();
                                        //Zoom factor - Lo si edita soltanto dai controlli grafici
                                        newLabel = $('<label for="inputZoomFactorM" class="col-md-2 control-label"><?php echo _("Zoom factor (%)"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="inputZoomFactorM" name="inputZoomFactorM" required>');
                                        newInput.val(data['zoomFactor']*100);
                                        newInput.attr('disabled', true);
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();
                                        //Nuova riga
                                        //Zoom controls position
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="inputControlsPositionM" class="col-md-2 control-label"><?php echo _("Zoom controls position"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="inputControlsPositionM" name="inputControlsPositionM"></select>');
                                        newSelect.append('<option value="topLeft"><?php echo _("Top left"); ?></option>');
                                        newSelect.append('<option value="topCenter"><?php echo _("Top center"); ?></option>');
                                        newSelect.append('<option value="topRight"><?php echo _("Top right"); ?></option>');
                                        newSelect.append('<option value="middleRight"><?php echo _("Middle right"); ?></option>');
                                        newSelect.append('<option value="bottomRight"><?php echo _("Bottom right"); ?></option>');
                                        newSelect.append('<option value="bottomMiddle"><?php echo _("Bottom middle"); ?></option>');
                                        newSelect.append('<option value="bottomLeft"><?php echo _("Bottom left"); ?></option>');
                                        newSelect.append('<option value="middleLeft"><?php echo _("Middle left"); ?></option>');
                                        newSelect.val(data['controlsPosition']);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();                                        
                                        $("#widgetModeM").change(function(){
                                            switch($(this).val())
                                            {
                                                case "link":
                                                    $("#urlWidgetM").parents("div.row").show();
                                                    $('#enableFullscreenTabM').attr('disabled', false);
                                                    $("#inputControlsVisibilityM").parents("div.row").show();
                                                    $("#inputControlsPositionM").parents("div.row").show();
                                                    $("#enableFullscreenTabM").val("yes");
                                                    $("#inputControlsVisibilityM").val("alwaysVisible");
                                                    $("#inputZoomFactorM").val("100");
                                                    $("#inputControlsPositionM").val("topLeft");
                                                    $("#gisTargetCenterLatM").parents("div.row").hide();
                                                    $("#gisTargetCenterMapDivM").parents("div.row").hide();
                                                    $('#coordsCollectionUriM').parents("div.row").hide();
                                                    break;
                                                case "map":
                                                    $("#urlWidgetM").val("map");
                                                    $("#urlWidgetM").parents("div.row").hide();
                                                    $('#enableFullscreenTabM').attr('disabled', true);
                                                    $("#inputControlsVisibilityM").parents("div.row").hide();
                                                    $("#inputControlsPositionM").parents("div.row").hide();
                                                    $("#enableFullscreenTabM").val("no");
                                                    $("#inputControlsVisibilityM").val("hidden");
                                                    $("#inputZoomFactorM").val("100");
                                                    $("#inputControlsPositionM").val("topLeft");
                                                    $("#gisTargetCenterLatM").parents("div.row").hide();
                                                    $("#gisTargetCenterMapDivM").parents("div.row").hide();
                                                    $('#coordsCollectionUriM').parents("div.row").hide();
                                                    break;                                                    
                                                case "selectorWebTarget":
                                                    $("#urlWidgetM").parents("div.row").show();
                                                    $('#enableFullscreenTabM').attr('disabled', false);
                                                    $("#inputControlsVisibilityM").parents("div.row").show();
                                                    $("#inputControlsPositionM").parents("div.row").show();
                                                    $("#enableFullscreenTabM").val("yes");
                                                    $("#inputControlsVisibilityM").val("alwaysVisible");
                                                    $("#inputZoomFactorM").val("100");
                                                    $("#inputControlsPositionM").val("topLeft");
                                                    $("#gisTargetCenterLatM").parents("div.row").hide();
                                                    $("#gisTargetCenterMapDivM").parents("div.row").hide();
                                                    $('#coordsCollectionUriM').parents("div.row").hide();
                                                    break;     
                                                case "gisTarget":
                                                    $("#urlWidgetM").val("gisTarget");
                                                    $("#urlWidgetM").parents("div.row").hide();
                                                    $('#enableFullscreenTabM').attr('disabled', true);
                                                    $("#inputControlsVisibilityM").parents("div.row").hide();
                                                    $("#inputControlsPositionM").parents("div.row").hide();
                                                    $("#enableFullscreenTabM").val("no");
                                                    $("#inputControlsVisibilityM").val("hidden");
                                                    $("#inputZoomFactorM").val("100");
                                                    $("#inputControlsPositionM").val("topLeft");
                                                    $("#gisTargetCenterLatM").parents("div.row").show();
                                                    $("#gisTargetCenterDivM").parents("div.row").show();                                                    
                                                    gisTargetCenterParametersM = currentParams;
                                                    $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));                                           
                                                    if(gisTargetCenterMapDivRefM === null)
                                                    {
                                                        gisTargetCenterMapDivM = "gisTargetCenterMapDivM";
                                                        var coordinate = gisTargetCenterParametersM.latLng[1]+','+gisTargetCenterParametersM.latLng[0];
                                                        gisTargetCenterMapDivRefM = L.map(gisTargetCenterMapDivM).setView(gisTargetCenterParametersM.latLng, gisTargetCenterParametersM.zoom);                                          
                                                        //
                                                        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                                           attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                                                           maxZoom: 18
                                                        }).addTo(gisTargetCenterMapDivRefM);
                                                        gisTargetCenterMapDivRefM.attributionControl.setPrefix('');
                                                        gisTargetCenterMapDivRefM.off("zoom");
                                                        gisTargetCenterMapDivRefM.on("zoom", function(){
                                                            $("#gisTargetCenterZoomM").val(gisTargetCenterMapDivRefM.getZoom());
                                                            gisTargetCenterParametersM.zoom = $("#gisTargetCenterZoomM").val();
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });
                                                        $("#gisTargetCenterZoomM").off("input");
                                                        $("#gisTargetCenterZoomM").on("input", function(event){
                                                            gisTargetCenterMapDivRefM.setZoom($(this).val());
                                                            gisTargetCenterParametersM.zoom = $("#gisTargetCenterZoomM").val();
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });
                                                        gisTargetCenterMapDivRefM.off("move");
                                                        gisTargetCenterMapDivRefM.on("move", function(){
                                                            $("#gisTargetCenterLatM").val(gisTargetCenterMapDivRefM.getCenter().lat);
                                                            $("#gisTargetCenterLngM").val(gisTargetCenterMapDivRefM.getCenter().lng);
                                                            //$("#gisTargetCenterLatM").val(gisTargetCenterMapDivRefM.getCenter().lng);
                                                             //$("#gisTargetCenterLngM").val(gisTargetCenterMapDivRefM.getCenter().lat);
                                                            //
                                                            gisTargetCenterParametersM.latLng[0] = $("#gisTargetCenterLatM").val();
                                                            gisTargetCenterParametersM.latLng[1] = $("#gisTargetCenterLngM").val();
                                                            //gisTargetCenterParametersM.latLng[1] = $("#gisTargetCenterLatM").val();
                                                            //gisTargetCenterParametersM.latLng[0] = $("#gisTargetCenterLngM").val();
                                                            //
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });
                                                        $("#gisTargetCenterLatM").off("input");
                                                        $("#gisTargetCenterLatM").on("input", function(event){
                                                            gisTargetCenterParametersM.latLng[0] = $("#gisTargetCenterLatM").val();
                                                            //gisTargetCenterParametersM.latLng[1] = $("#gisTargetCenterLatM").val();
                                                            gisTargetCenterMapDivRefM.panTo(gisTargetCenterParametersM.latLng);
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });
                                                        $("#gisTargetCenterLngM").off("input");
                                                        $("#gisTargetCenterLngM").on("input", function(event){
                                                            gisTargetCenterParametersM.latLng[1] = $("#gisTargetCenterLngM").val();
                                                            //gisTargetCenterParametersM.latLng[0] = $("#gisTargetCenterLngM").val();
                                                            gisTargetCenterMapDivRefM.panTo(gisTargetCenterParametersM.latLng);
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });
                                                    }
                                                    break;
                                                case "none":
                                                    $("#urlWidgetM").val("none");
                                                    $("#urlWidgetM").parents("div.row").hide();
                                                    $('#enableFullscreenTabM').attr('disabled', true);
                                                    $("#inputControlsVisibilityM").parents("div.row").hide();
                                                    $("#inputControlsPositionM").parents("div.row").hide();
                                                    $("#enableFullscreenTabM").val("no");
                                                    $("#inputControlsVisibilityM").val("hidden");
                                                    $("#inputZoomFactorM").val("100");
                                                    $("#inputControlsPositionM").val("topLeft");
                                                    $("#inputShowTitleM").val("yes");
                                                    $("#gisTargetCenterLatM").parents("div.row").hide();
                                                    $("#gisTargetCenterMapDivM").parents("div.row").hide();
                                                    break;    
                                            }
                                        });                                     
										if((data.url !== null)&&(data.url !== 'null')&&(data.url !== undefined))
										{
											if(data.url.includes("selectorWebTarget"))
                                        {
                                            $("#widgetModeM").val("selectorWebTarget");
                                            $("#urlWidgetM").parents("div.row").show();
                                        }
                                        else
                                        {
                                            switch(data.url)
                                            {
                                                case "gisTarget": case "map": case "none":
                                                    $("#widgetModeM").val(data.url);
                                                    $("#urlWidgetM").parents("div.row").hide();
                                                    break; 
                                                default:
                                                    $("#widgetModeM").val("link");  
                                                    $("#urlWidgetM").parents("div.row").show();
                                                    break;
                                            }
                                        }                                       
                                        switch($('#urlWidgetM').val())
                                        {
                                            case "map":
                                                $('#enableFullscreenTabM').attr('disabled', true);
                                                $("#inputControlsVisibilityM").parents("div.row").hide();
                                                $("#inputControlsPositionM").parents("div.row").hide();
                                                $("#inputShowTitleM").val("yes");
                                                $("#enableFullscreenTabM").val("no");
                                                $("#gisTargetCenterLatM").parents("div.row").hide();
                                                $("#gisTargetCenterMapDivM").parents("div.row").hide();
                                                break;
                                            case "gisTarget":
                                                gisTargetCenterParametersM = currentParams;
                                                $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                $('#enableFullscreenTabM').attr('disabled', true);
                                                $("#inputControlsVisibilityM").parents("div.row").hide();
                                                $("#inputControlsPositionM").parents("div.row").hide();
                                                $("#inputShowTitleM").val("yes");
                                                $("#enableFullscreenTabM").val("no");                                               
                                                $("#gisTargetCenterLatM").val(gisTargetCenterParametersM.latLng[0]);
                                                $("#gisTargetCenterLngM").val(gisTargetCenterParametersM.latLng[1]);
                                                //$("#gisTargetCenterLatM").val(gisTargetCenterParametersM.latLng[1]);
                                                //$("#gisTargetCenterLngM").val(gisTargetCenterParametersM.latLng[0]);
                                                //
                                                $("#gisTargetCenterZoomM").val(gisTargetCenterParametersM.zoom);
                                                $('#coordsCollectionUriM').parents("div.row").show();                                               
                                                if(gisTargetCenterMapDivRefM === null)
                                                {
                                                    $("#gisTargetCenterLatM").parents("div.row").show();
                                                    $("#gisTargetCenterMapDivM").parents("div.row").show();                                                    
                                                    //Bisogna aspettare che il modale sia completamente in posizione e visibile, sennò il load della mappa dà problemi di visualizzazione dei tiles
                                                    setTimeout(function(){
                                                        gisTargetCenterMapDivM = "gisTargetCenterMapDivM";
                                                        //gisTargetCenterMapDivRefM = L.map(gisTargetCenterMapDivM).setView(gisTargetCenterParametersM.latLng, gisTargetCenterParametersM.zoom);
                                                        var coordinate =[];
                                                        coordinate[0] = gisTargetCenterParametersM.latLng[1];
                                                        coordinate[1] = gisTargetCenterParametersM.latLng[0];
                                                        console.log(coordinate);
                                                        gisTargetCenterMapDivRefM = L.map(gisTargetCenterMapDivM).setView(coordinate, gisTargetCenterParametersM.zoom);
                                                        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                                           attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                                                           maxZoom: 18
                                                        }).addTo(gisTargetCenterMapDivRefM);
                                                        gisTargetCenterMapDivRefM.attributionControl.setPrefix('');                                                        
                                                        gisTargetCenterMapDivRefM.off("zoom");
                                                        gisTargetCenterMapDivRefM.on("zoom", function(){
                                                            $("#gisTargetCenterZoomM").val(gisTargetCenterMapDivRefM.getZoom());
                                                            gisTargetCenterParametersM.zoom = $("#gisTargetCenterZoomM").val();
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });
                                                        $("#gisTargetCenterZoomM").off("input");
                                                        $("#gisTargetCenterZoomM").on("input", function(event){
                                                            gisTargetCenterMapDivRefM.setZoom($(this).val());
                                                            gisTargetCenterParametersM.zoom = $("#gisTargetCenterZoomM").val();
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });
                                                        gisTargetCenterMapDivRefM.off("move");
                                                        gisTargetCenterMapDivRefM.on("move", function(){
                                                            $("#gisTargetCenterLatM").val(gisTargetCenterMapDivRefM.getCenter().lat);
                                                            $("#gisTargetCenterLngM").val(gisTargetCenterMapDivRefM.getCenter().lng);
                                                            gisTargetCenterParametersM.latLng[0] = $("#gisTargetCenterLatM").val();
                                                            gisTargetCenterParametersM.latLng[1] = $("#gisTargetCenterLngM").val();
                                                            //$("#gisTargetCenterLatM").val(gisTargetCenterMapDivRefM.getCenter().lng);
                                                            //$("#gisTargetCenterLngM").val(gisTargetCenterMapDivRefM.getCenter().lat);
                                                           // gisTargetCenterParametersM.latLng[1] = $("#gisTargetCenterLatM").val();
                                                            //gisTargetCenterParametersM.latLng[0] = $("#gisTargetCenterLngM").val();
                                                            ////
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });
                                                        $("#gisTargetCenterLatM").off("input");
                                                        $("#gisTargetCenterLatM").on("input", function(event){
                                                            //gisTargetCenterParametersM.latLng[1] = $("#gisTargetCenterLatM").val();
                                                            gisTargetCenterParametersM.latLng[0] = $("#gisTargetCenterLatM").val();
                                                            gisTargetCenterMapDivRefM.panTo(gisTargetCenterParametersM.latLng);
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });
                                                        $("#gisTargetCenterLngM").off("input");
                                                        $("#gisTargetCenterLngM").on("input", function(event){
                                                            gisTargetCenterParametersM.latLng[1] = $("#gisTargetCenterLngM").val();
                                                            //gisTargetCenterParametersM.latLng[0] = $("#gisTargetCenterLngM").val();
                                                            //
                                                            gisTargetCenterMapDivRefM.panTo(gisTargetCenterParametersM.latLng);
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });                                                       
                                                        if(gisTargetCenterParametersM.coordsCollectionUri !== null)
                                                        {
                                                            $('#coordsCollectionUriM').val(gisTargetCenterParametersM.coordsCollectionUri);
                                                        }                                                        
                                                        $('#coordsCollectionUriM').change(function(){
                                                            gisTargetCenterParametersM.coordsCollectionUri = $(this).val();
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });
                                                        //
                                                        var new_json = '{"latLng":['+gisTargetCenterParametersM.latLng[1]+','+gisTargetCenterParametersM.latLng[0]+'],"zoom":'+gisTargetCenterParametersM.zoom+'}';
                                                        $("#parametersM").val(new_json);
                                                        //
                                                    }, 350);
                                                }
                                                break;

                                            case "none":
                                                $('#enableFullscreenTabM').attr('disabled', true);
                                                $("#inputControlsVisibilityM").parents("div.row").hide();
                                                $("#inputControlsPositionM").parents("div.row").hide();
                                                $("#inputShowTitleM").val("yes");
                                                $("#enableFullscreenTabM").val("no");
                                                $("#gisTargetCenterLatM").parents("div.row").hide();
                                                $("#gisTargetCenterMapDivM").parents("div.row").hide();
                                                break;    
                                                
                                            default:
                                                $('#enableFullscreenTabM').attr('disabled', false);
                                                $("#inputControlsVisibilityM").parents("div.row").show();
                                                $("#inputControlsPositionM").parents("div.row").show();
                                                $("#inputShowTitleM").val(data['showTitle']);
                                                $("#enableFullscreenTabM").val(data['enableFullscreenTab']);
                                                $("#gisTargetCenterLatM").parents("div.row").hide();
                                                $("#gisTargetCenterMapDivM").parents("div.row").hide();
                                                break;    
                                        }
										}
										
                                        
										if($('#metricWidgetM').val() !== 'ExternalContent')
										{
											$('#widgetModeM').attr('disabled', true);
										}
										
                                        break;
                                    //////////////FINE CASE OPENLAYERS
                                    case "widgetExternalContent":
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        
                                        var gisTargetCenterParametersM = null;
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#urlWidgetM').prop('required', true);
                                        $("#titleLabelM").html('<? _("Title")?>'); 
                                        $("#bckColorLabelM").html('<? _("Background color")?>');
                                        $('#inputColorWidgetM').val("");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').attr('required', true);
                                        $('#color_widget_M').css("background-color", "#eeeeee");
                                        $('#inputFontSizeM').val("");
                                        $('#inputFontSizeM').attr('disabled', true);
                                        $('#inputFontColorM').val("");
                                        $('#inputFontColorM').attr('disabled', true);
                                        $('#widgetFontColorM').css("background-color", "#eeeeee");
                                        $('#link_help_modal-add-widgetM').css("display", "");
                                        $('#inputFrameColorWidgetM').attr('disabled', false);
                                        $('#inputFrameColorWidgetM').val('#eeeeee');
                                        $('#inputFrameColorWidgetM').prop('required', false);
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').attr('disabled', true);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').attr('disabled', true);
                                        $('#inputFreqWidgetM').val("");
                                        $('#inputFreqWidgetM').prop('required', false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        
                                        //Nuova riga
                                        //Modalità del widget (none, map, gis, link esterno)
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="widgetModeM" class="col-md-2 control-label"><?php echo _("Widget mode"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="widgetModeM" name="widgetModeM"></select>');
                                        newSelect.append('<option value="link"><?php echo _("Web link"); ?></option>');
                                        newSelect.append('<option value="map"><?php echo _("Map"); ?></option>');
                                        newSelect.append('<option value="gisTarget"><?php echo _("Selector target"); ?></option>');
                                        newSelect.append('<option value="selectorWebTarget"><?php echo _("Selector Web target"); ?></option>');
                                        newSelect.append('<option value="none"><?php echo _("None"); ?></option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        //Nuova riga
                                        //Centro della mappa per modalità GIS target
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label class="col-md-2 control-label"><?php echo _("Start lat"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-2">' +
                                                          '<input type="text" id="gisTargetCenterLatM" class="form-control"/>' +
                                                        +'</div>');
                                        newInnerDiv.css("padding-left", "0px");
                                        newInnerDiv.css("padding-right", "0px");
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);   
                                        
                                        newLabel = $('<label class="col-md-2 control-label"><?php echo _("Start lng"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-2">' +
                                                          '<input type="text" id="gisTargetCenterLngM" class="form-control"/>' +
                                                        +'</div>');
                                        newInnerDiv.css("padding-left", "0px");
                                        newInnerDiv.css("padding-right", "0px");        
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        newLabel = $('<label class="col-md-2 control-label"><?php echo _("Start zoom"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-2">' +
                                                          '<input type="text" id="gisTargetCenterZoomM" class="form-control"/>' +
                                                        +'</div>');
                                        newLabel.css("padding-left", "8px");
                                        newLabel.css("padding-right", "8px");        
                                        newInnerDiv.css("padding-left", "0px");
                                        newInnerDiv.css("padding-right", "0px");        
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newFormRow.hide();
                                        
                                        //Nuova riga
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newInnerDiv = $('<div id="gisTargetCenterMapDivM" class="col-md-12"></div>');
                                        newFormRow.append(newInnerDiv);
                                        newFormRow.hide();

                                        //Nuova riga
                                        //Full screen controls
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="enableFullscreenTabM" class="col-md-2 control-label"><?php echo _("Enable fullscreen in new tab"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="enableFullscreenTabM" name="enableFullscreenTabM"></select>');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newSelect.val(data['enableFullscreenTab']);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);

                                        newLabel = $('<label for="enableFullscreenModalM" class="col-md-2 control-label"><?php echo _("Enable fullscreen in a popup"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="enableFullscreenModalM" name="enableFullscreenModalM"></select>');
                                        newSelect.append('<option value="yes"><?php echo _("Yes"); ?></option>');
                                        newSelect.append('<option value="no"><?php echo _("No"); ?></option>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="coordsCollectionUriM" class="col-md-2 control-label"><?php echo _("Coords collection URI"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-4"></div>');
                                        newSelect = $('<input type="text" class="form-control" id="coordsCollectionUriM" name="coordsCollectionUriM"/>');
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        $('#coordsCollectionUriM').parents("div.row").hide();
                                        
                                        //Nuova riga
                                        //Zoom controls visibility
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="inputControlsVisibilityM" class="col-md-2 control-label"><?php echo _("Zoom controls visibility"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="inputControlsVisibilityM" name="inputControlsVisibilityM"></select>');
                                        newSelect.append('<option value="alwaysVisible"><?php echo _("Always visible"); ?></option>');
                                        newSelect.append('<option value="hidden">Hidden</option>');
                                        newSelect.val(data['controlsVisibility']);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();

                                        //Zoom factor - Lo si edita soltanto dai controlli grafici
                                        newLabel = $('<label for="inputZoomFactorM" class="col-md-2 control-label"><?php echo _("Zoom factor (%)"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newInput = $('<input type="text" class="form-control" id="inputZoomFactorM" name="inputZoomFactorM" required>');
                                        newInput.val(data['zoomFactor']*100);
                                        newInput.attr('disabled', true);
                                        newInnerDiv.append(newInput);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newInput.show();

                                        //Nuova riga
                                        //Zoom controls position
                                        newFormRow = $('<div class="row"></div>');
                                        $("#specificParamsM").append(newFormRow);
                                        newLabel = $('<label for="inputControlsPositionM" class="col-md-2 control-label"><?php echo _("Zoom controls position"); ?></label>');
                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                        newSelect = $('<select class="form-control" id="inputControlsPositionM" name="inputControlsPositionM"></select>');
                                        newSelect.append('<option value="topLeft"><?php echo _("Top left"); ?></option>');
                                        newSelect.append('<option value="topCenter"><?php echo _("Top center"); ?></option>');
                                        newSelect.append('<option value="topRight"><?php echo _("Top right"); ?></option>');
                                        newSelect.append('<option value="middleRight"><?php echo _("Middle right"); ?></option>');
                                        newSelect.append('<option value="bottomRight"><?php echo _("Bottom right"); ?></option>');
                                        newSelect.append('<option value="bottomMiddle"><?php echo _("Bottom middle"); ?></option>');
                                        newSelect.append('<option value="bottomLeft"><?php echo _("Bottom left"); ?></option>');
                                        newSelect.append('<option value="middleLeft"><?php echo _("Middle left"); ?></option>');
                                        newSelect.val(data['controlsPosition']);
                                        newInnerDiv.append(newSelect);
                                        newFormRow.append(newLabel);
                                        newFormRow.append(newInnerDiv);
                                        newLabel.show();
                                        newInnerDiv.show();
                                        newSelect.show();

                                        //if (data.url != "map" && data.url != "gisTarget" && !data.url.includes("selectorWebTarget")) {
                                        if (data.url != "map" && data.url != "gisTarget") {    

                                            $.ajax({
                                                url: "../controllers/getTrustedUsers.php",
                                                data: {

                                                },
                                                type: "POST",
                                                async: true,
                                                dataType: 'json',
                                                success: function (data) {
                                                    if (!currentParams || currentParams.length == 0) {
                                                        currentParams = {
                                                            mode: '',
                                                            svgCKEditor: ''
                                                        };
                                                    }
                                                    if (data['detail'] == "Ok" && data['trustedUsers'].includes("<?= $dashboardEditorName ?>")) {
                                                        //Nuova riga
                                                        //Source Selection
                                                        newFormRow = $('<div class="row"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="enableCKEditor" class="col-md-2 control-label"><?php echo _("Enable CK Editor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                                        newSelect = $('<select class="form-control" id="enableCKEditor" name="enableCKEditor"></select>');
                                                        newSelect.append('<option value="no">no</option>');
                                                        newSelect.append('<option value="ckeditor">yes</option>');
                                                        if (currentParams && currentParams['mode']) {
                                                            newSelect.val(currentParams['mode']);
                                                        }
                                                        newInnerDiv.append(newSelect);
                                                        newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        newLabel.show();
                                                        newInnerDiv.show();
                                                        newSelect.show();

                                                        newLabel = $('<label for="svgCKEditor" class="col-md-2 control-label"><?php echo _("SVG Mode"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-3"></div>');
                                                        newSelect = $('<select class="form-control" id="svgCKEditor" name="svgCKEditor"></select>');
                                                        newSelect.append('<option value="no">no</option>');
                                                        newSelect.append('<option value="svgMode">yes</option>');
                                                        if (currentParams && currentParams['svgCKEditor']) {
                                                            newSelect.val(currentParams['svgCKEditor']);
                                                        }
                                                        newInnerDiv.append(newSelect);
                                                        newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        

                                                        //Nuova riga Tab Destro: CKEDITOR
                                                        //Modalità del widget (none, map, gis, link esterno)
                                                        newFormRow = $('<div class="row" id="ck_editor"></div>');
                                                        $("#specificParamsMRight").append(newFormRow);
                                                        newLabel = $('<label for="widgetCkEditor" class="col-md-2 control-label"><?php echo _("Widget CKEditor"); ?></label>');
                                                        newInnerDiv = $('<div class="col-md-12"></div>');
                                                        newBox = $('<div id="widgetEditor">');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12 centerWithFlex" style="font-weight: bold; color: white; margin-bottom: 15px;">');
                                                        newBox.append('<?= _("Here you can insert HTML text to be shown in the widget. Please save your script by clicking on the save button on the bottom.")?>');
                                                        newBox.append('</div></div>');
                                                        newBox.append('<div class="row">');
                                                        newBox.append('<div class="col-xs-12" style="padding-left: 0px !important; padding-right: 0px !important;">');
                                                        newBox.append('<textarea id ="widgetInfoEditorExtCont" name="widgetInfoEditorExtCont" rows="20"></textarea>');
                                                        newBox.append('<div class="compactMenuBtns"><button type="button" class="compactMenuConfirmBtn" id="sourceSelectionSaveBtn"><i class="fa fa-floppy-o" aria-hidden="true"></i></button> </div>')
                                                        newBox.append('</div></div></div>');
                                                        newInnerDiv.append(newBox);
                                                        //newFormRow.append(newLabel);
                                                        newFormRow.append(newInnerDiv);
                                                        //newLabel.show();
                                                        newInnerDiv.show();
                                                        //newInput.show();
                                                        $('#ck_editor').hide();

                                                        var editor = CKEDITOR.replace('widgetInfoEditorExtCont', {
                                                            allowedContent: true,
                                                            language: 'en',
                                                            contentsCss: 'body {font-family: "Montserrat", sans-serif, Arial, Verdana, "Trebuchet MS";font-size: 13px;color: black;background-color: white;margin: 20px;}',
                                                            width: '100%'
                                                        });

                                                        let par = (JSON.stringify(currentParams));
                                                        if (par && !par.includes("latLng") && !par.includes("null")) {
                                                            $("#parametersM").val(JSON.stringify(currentParams));
                                                            if (currentParams['mode'] == "ckeditor") {
                                                                $('#ck_editor').show();
                                                                $('#enableCKEditor').val("ckeditor");
                                                                //if (rowParams.substring(0, 8) != "https://" && rowParams.substring(0, 7) != "http://" && rowParams.substring(0, 3) != "NR_") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    //    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(rowParamsForCKEditor);
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                //}
                                                                $('#svgCKEditor').show();
                                                            }
                                                        }

                                                        $('#enableCKEditor').change(function () {
                                                            if ($('#enableCKEditor').val() === "ckeditor") {
                                                                $('#ck_editor').show();
                                                                //if (rowParams.substring(0, 8) != "https://" && rowParams.substring(0, 7) != "http://" && rowParams.substring(0, 3) != "NR_") {
                                                                    var codeForCKEditor = $('<div>').text(checkCsblEncoding(code,connections)).html();
                                                                    var text_ck_area = document.createElement("text_ck_area");
                                                                    text_ck_area.innerHTML = codeForCKEditor;
                                                                    var newInfoDecoded = text_ck_area.innerText;
                                                                    CKEDITOR.instances['widgetInfoEditorExtCont'].setData(newInfoDecoded);
                                                                //}
                                                                // $("#parametersM").val('{"mode": "ckeditor"}');
                                                                currentParams['mode'] = "ckeditor";
                                                            } else {
                                                                $('#ck_editor').hide();
                                                                //$("#parametersM").val('');
                                                                currentParams['mode'] = '';
                                                            }
                                                            $("#parametersM").val(JSON.stringify(currentParams));
                                                        });
                                                        
                                                        $('#svgCKEditor').change(function () {
                                                            if ($('#svgCKEditor').val() === "svgMode") {
                                                                currentParams['svgCKEditor'] = "svgMode";
                                                            } else {
                                                                currentParams['svgCKEditor'] = 'no';
                                                            }
                                                            $("#parametersM").val(JSON.stringify(currentParams));
                                                        });

                                                        $('#sourceSelectionSaveBtn').click(function () {
                                                            var button = $(this);
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').show();
                                                            $('#widgetInfoModalFooter div.compactMenuMsg').html('Saving&nbsp;<i class="fa fa-circle-o-notch fa-spin" style="font-size:14px"></i>');

                                                            var newInfo = CKEDITOR.instances['widgetInfoEditorExtCont'].getData();
                                                            /*if (newInfo.trim() === '') {
                                                                newInfo = null;
                                                            }   */

                                                            $.ajax({
                                                                url: "../controllers/updateWidget.php",
                                                                data: {
                                                                    action: "updateCkEditor",
                                                                    widgetName: name_widget_m,
                                                                    //    newText: newInfoDecoded
                                                                    newText: newInfo
                                                                },
                                                                type: "POST",
                                                                async: true,
                                                                dataType: 'json',
                                                                success: function (data) {
                                                                    if (data.detail === 'Ok') {
                                                                        alert('Saved!');
                                                                    } else {
                                                                        alert('Error');
                                                                    }
                                                                },
                                                                error: function (errorData) {
                                                                    alert('Error');
                                                                }
                                                            });
                                                        });
                                                    }
                                                },
                                                error: function (errorData) {
                                                    console.log('Error in retrieving Trusted Users.');
                                                }
                                            });

                                        }

                                        $("#widgetModeM").change(function(){
                                            switch($(this).val())
                                            {
                                                case "link":
                                                    $("#urlWidgetM").parents("div.row").show();
                                                    $('#enableFullscreenTabM').attr('disabled', false);
                                                    $("#inputControlsVisibilityM").parents("div.row").show();
                                                    $("#inputControlsPositionM").parents("div.row").show();
                                                    $("#enableFullscreenTabM").val("yes");
                                                    $("#inputControlsVisibilityM").val("alwaysVisible");
                                                    $("#inputZoomFactorM").val("100");
                                                    $("#inputControlsPositionM").val("topLeft");
                                                    $("#gisTargetCenterLatM").parents("div.row").hide();
                                                    $("#gisTargetCenterMapDivM").parents("div.row").hide();
                                                    $('#coordsCollectionUriM').parents("div.row").hide();
                                                    break;

                                                case "map":
                                                    $("#urlWidgetM").val("map");
                                                    $("#urlWidgetM").parents("div.row").hide();
                                                    $('#enableFullscreenTabM').attr('disabled', true);
                                                    $("#inputControlsVisibilityM").parents("div.row").hide();
                                                    $("#inputControlsPositionM").parents("div.row").hide();
                                                    $("#enableFullscreenTabM").val("no");
                                                    $("#inputControlsVisibilityM").val("hidden");
                                                    $("#inputZoomFactorM").val("100");
                                                    $("#inputControlsPositionM").val("topLeft");
                                                    $("#gisTargetCenterLatM").parents("div.row").hide();
                                                    $("#gisTargetCenterMapDivM").parents("div.row").hide();
                                                    $('#coordsCollectionUriM').parents("div.row").hide();
                                                    break;
                                                    
                                                case "selectorWebTarget":
                                                    $("#urlWidgetM").val('{"homepage":"about:blank","widgetMode":"selectorWebTarget"}');
                                                    $("#urlWidgetM").parents("div.row").show();
                                                    $('#enableFullscreenTabM').attr('disabled', false);
                                                    $("#inputControlsVisibilityM").parents("div.row").show();
                                                    $("#inputControlsPositionM").parents("div.row").show();
                                                    $("#enableFullscreenTabM").val("yes");
                                                    $("#inputControlsVisibilityM").val("alwaysVisible");
                                                    $("#inputZoomFactorM").val("100");
                                                    $("#inputControlsPositionM").val("topLeft");
                                                    $("#gisTargetCenterLatM").parents("div.row").hide();
                                                    $("#gisTargetCenterMapDivM").parents("div.row").hide();
                                                    $('#coordsCollectionUriM').parents("div.row").hide();
                                                    break;     

                                                case "gisTarget":
                                                    $("#urlWidgetM").val("gisTarget");
                                                    $("#urlWidgetM").parents("div.row").hide();
                                                    $('#enableFullscreenTabM').attr('disabled', true);
                                                    $("#inputControlsVisibilityM").parents("div.row").hide();
                                                    $("#inputControlsPositionM").parents("div.row").hide();
                                                    $("#enableFullscreenTabM").val("no");
                                                    $("#inputControlsVisibilityM").val("hidden");
                                                    $("#inputZoomFactorM").val("100");
                                                    $("#inputControlsPositionM").val("topLeft");
                                                    $("#gisTargetCenterLatM").parents("div.row").show();
                                                    $("#gisTargetCenterDivM").parents("div.row").show();
                                                    
                                                    gisTargetCenterParametersM = currentParams;
                                                    $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                           
                                                    if(gisTargetCenterMapDivRefM === null)
                                                    {
                                                        gisTargetCenterMapDivM = "gisTargetCenterMapDivM";
                                                        gisTargetCenterMapDivRefM = L.map(gisTargetCenterMapDivM).setView(gisTargetCenterParametersM.latLng, gisTargetCenterParametersM.zoom);

                                                        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                                           attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                                                           maxZoom: 18
                                                        }).addTo(gisTargetCenterMapDivRefM);
                                                        gisTargetCenterMapDivRefM.attributionControl.setPrefix('');

                                                        gisTargetCenterMapDivRefM.off("zoom");
                                                        gisTargetCenterMapDivRefM.on("zoom", function(){
                                                            $("#gisTargetCenterZoomM").val(gisTargetCenterMapDivRefM.getZoom());
                                                            gisTargetCenterParametersM.zoom = $("#gisTargetCenterZoomM").val();
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });

                                                        $("#gisTargetCenterZoomM").off("input");
                                                        $("#gisTargetCenterZoomM").on("input", function(event){
                                                            gisTargetCenterMapDivRefM.setZoom($(this).val());
                                                            gisTargetCenterParametersM.zoom = $("#gisTargetCenterZoomM").val();
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });

                                                        gisTargetCenterMapDivRefM.off("move");
                                                        gisTargetCenterMapDivRefM.on("move", function(){
                                                            $("#gisTargetCenterLatM").val(gisTargetCenterMapDivRefM.getCenter().lat);
                                                            $("#gisTargetCenterLngM").val(gisTargetCenterMapDivRefM.getCenter().lng);
                                                            gisTargetCenterParametersM.latLng[0] = $("#gisTargetCenterLatM").val();
                                                            gisTargetCenterParametersM.latLng[1] = $("#gisTargetCenterLngM").val();
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });

                                                        $("#gisTargetCenterLatM").off("input");
                                                        $("#gisTargetCenterLatM").on("input", function(event){
                                                            gisTargetCenterParametersM.latLng[0] = $("#gisTargetCenterLatM").val();
                                                            gisTargetCenterMapDivRefM.panTo(gisTargetCenterParametersM.latLng);
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });

                                                        $("#gisTargetCenterLngM").off("input");
                                                        $("#gisTargetCenterLngM").on("input", function(event){
                                                            gisTargetCenterParametersM.latLng[1] = $("#gisTargetCenterLngM").val();
                                                            gisTargetCenterMapDivRefM.panTo(gisTargetCenterParametersM.latLng);
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });
                                                    }
                                                    break;

                                                case "none":
                                                    $("#urlWidgetM").val("none");
                                                    $("#urlWidgetM").parents("div.row").hide();
                                                    $('#enableFullscreenTabM').attr('disabled', true);
                                                    $("#inputControlsVisibilityM").parents("div.row").hide();
                                                    $("#inputControlsPositionM").parents("div.row").hide();
                                                    $("#enableFullscreenTabM").val("no");
                                                    $("#inputControlsVisibilityM").val("hidden");
                                                    $("#inputZoomFactorM").val("100");
                                                    $("#inputControlsPositionM").val("topLeft");
                                                    $("#inputShowTitleM").val("yes");
                                                    $("#gisTargetCenterLatM").parents("div.row").hide();
                                                    $("#gisTargetCenterMapDivM").parents("div.row").hide();
                                                    break;    
                                            }
                                        });
                                        
										if((data.url !== null)&&(data.url !== 'null')&&(data.url !== undefined))
										{
											if(data.url.includes("selectorWebTarget"))
                                        {
                                            $("#widgetModeM").val("selectorWebTarget");
                                            $("#urlWidgetM").parents("div.row").show();
                                        }
                                        else
                                        {
                                            switch(data.url)
                                            {
                                                case "gisTarget": case "map": case "none":
                                                    $("#widgetModeM").val(data.url);
                                                    $("#urlWidgetM").parents("div.row").hide();
                                                    break; 

                                                default:
                                                    $("#widgetModeM").val("link");  
                                                    $("#urlWidgetM").parents("div.row").show();
                                                    break;
                                            }
                                        }
                                        
                                        switch($('#urlWidgetM').val())
                                        {
                                            case "map":
                                                $('#enableFullscreenTabM').attr('disabled', true);
                                                $("#inputControlsVisibilityM").parents("div.row").hide();
                                                $("#inputControlsPositionM").parents("div.row").hide();
                                                $("#inputShowTitleM").val("yes");
                                                $("#enableFullscreenTabM").val("no");
                                                $("#gisTargetCenterLatM").parents("div.row").hide();
                                                $("#gisTargetCenterMapDivM").parents("div.row").hide();
                                                break;

                                            case "gisTarget":
                                                gisTargetCenterParametersM = currentParams;
                                                if (gisTargetCenterParametersM != null) {
                                                    $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                }
                                                $('#enableFullscreenTabM').attr('disabled', true);
                                                $("#inputControlsVisibilityM").parents("div.row").hide();
                                                $("#inputControlsPositionM").parents("div.row").hide();
                                                $("#inputShowTitleM").val("yes");
                                                $("#enableFullscreenTabM").val("no");
                                                if (gisTargetCenterParametersM != null) {
                                                    $("#gisTargetCenterLatM").val(gisTargetCenterParametersM.latLng[0]);
                                                    $("#gisTargetCenterLngM").val(gisTargetCenterParametersM.latLng[1]);
                                                    $("#gisTargetCenterZoomM").val(gisTargetCenterParametersM.zoom);
                                                }
                                                $('#coordsCollectionUriM').parents("div.row").show();
                                                
                                                if(gisTargetCenterMapDivRefM === null)
                                                {
                                                    $("#gisTargetCenterLatM").parents("div.row").show();
                                                    $("#gisTargetCenterMapDivM").parents("div.row").show();
                                                    
                                                    //Bisogna aspettare che il modale sia completamente in posizione e visibile, sennò il load della mappa dà problemi di visualizzazione dei tiles
                                                    setTimeout(function(){
                                                        gisTargetCenterMapDivM = "gisTargetCenterMapDivM";
                                                        gisTargetCenterMapDivRefM = L.map(gisTargetCenterMapDivM).setView(gisTargetCenterParametersM.latLng, gisTargetCenterParametersM.zoom);

                                                        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                                           attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                                                           maxZoom: 18
                                                        }).addTo(gisTargetCenterMapDivRefM);
                                                        gisTargetCenterMapDivRefM.attributionControl.setPrefix('');
                                                        
                                                        gisTargetCenterMapDivRefM.off("zoom");
                                                        gisTargetCenterMapDivRefM.on("zoom", function(){
                                                            $("#gisTargetCenterZoomM").val(gisTargetCenterMapDivRefM.getZoom());
                                                            gisTargetCenterParametersM.zoom = $("#gisTargetCenterZoomM").val();
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });

                                                        $("#gisTargetCenterZoomM").off("input");
                                                        $("#gisTargetCenterZoomM").on("input", function(event){
                                                            gisTargetCenterMapDivRefM.setZoom($(this).val());
                                                            gisTargetCenterParametersM.zoom = $("#gisTargetCenterZoomM").val();
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });

                                                        gisTargetCenterMapDivRefM.off("move");
                                                        gisTargetCenterMapDivRefM.on("move", function(){
                                                            $("#gisTargetCenterLatM").val(gisTargetCenterMapDivRefM.getCenter().lat);
                                                            $("#gisTargetCenterLngM").val(gisTargetCenterMapDivRefM.getCenter().lng);
                                                            gisTargetCenterParametersM.latLng[0] = $("#gisTargetCenterLatM").val();
                                                            gisTargetCenterParametersM.latLng[1] = $("#gisTargetCenterLngM").val();
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });

                                                        $("#gisTargetCenterLatM").off("input");
                                                        $("#gisTargetCenterLatM").on("input", function(event){
                                                            gisTargetCenterParametersM.latLng[0] = $("#gisTargetCenterLatM").val();
                                                            gisTargetCenterMapDivRefM.panTo(gisTargetCenterParametersM.latLng);
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });

                                                        $("#gisTargetCenterLngM").off("input");
                                                        $("#gisTargetCenterLngM").on("input", function(event){
                                                            gisTargetCenterParametersM.latLng[1] = $("#gisTargetCenterLngM").val();
                                                            gisTargetCenterMapDivRefM.panTo(gisTargetCenterParametersM.latLng);
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });
                                                        
                                                        if(gisTargetCenterParametersM.coordsCollectionUri !== null)
                                                        {
                                                            $('#coordsCollectionUriM').val(gisTargetCenterParametersM.coordsCollectionUri);
                                                        }
                                                        
                                                        $('#coordsCollectionUriM').change(function(){
                                                            gisTargetCenterParametersM.coordsCollectionUri = $(this).val();
                                                            $("#parametersM").val(JSON.stringify(gisTargetCenterParametersM));
                                                        });
                                                    }, 350);
                                                }
                                                break;

                                            case "none":
                                                $('#enableFullscreenTabM').attr('disabled', true);
                                                $("#inputControlsVisibilityM").parents("div.row").hide();
                                                $("#inputControlsPositionM").parents("div.row").hide();
                                                $("#inputShowTitleM").val("yes");
                                                $("#enableFullscreenTabM").val("no");
                                                $("#gisTargetCenterLatM").parents("div.row").hide();
                                                $("#gisTargetCenterMapDivM").parents("div.row").hide();
                                                break;    
                                                
                                            default:
                                                $('#enableFullscreenTabM').attr('disabled', false);
                                                $("#inputControlsVisibilityM").parents("div.row").show();
                                                $("#inputControlsPositionM").parents("div.row").show();
                                                $("#inputShowTitleM").val(data['showTitle']);
                                                $("#enableFullscreenTabM").val(data['enableFullscreenTab']);
                                                $("#gisTargetCenterLatM").parents("div.row").hide();
                                                $("#gisTargetCenterMapDivM").parents("div.row").hide();
                                                break;    
                                        }
										}
										
                                        
										if($('#metricWidgetM').val() !== 'ExternalContent')
										{
											$('#widgetModeM').attr('disabled', true);
										}
										
                                        break;

                                    default:
                                        $('#link_help_modal-add-widget-m').css("display", "");
                                        $('#inputTitleWidgetM').attr('disabled', false);
                                        $("label[for='inputTitleWidgetM']").html("Title");
                                        $("label[for='inputColorWidgetM']").html("Background color");
                                        $('#inputColorWidgetM').attr('disabled', false);
                                        $('#inputColorWidgetM').prop('required', false);
                                        $('#inputFontSizeM').prop('required', false);
                                        $('#inputFontSizeM').prop('disabled', false);
                                        $('#inputFontSizeM').val('');
                                        $('#inputFontColorM').val('');
                                        $('#inputFontColorM').prop('required', false);
                                        $('#inputFontColorM').prop('disabled', false);
                                        $('#widgetFontColorM').css("background-color", "#eeeeee");
                                        $('#select-frameColor-Widget-m').attr('disabled', false);
                                        $('#select-frameColor-Widget-m').prop('required', false);
                                        $('#select-frameColor-Widget-m').val('');
                                        $('#select-IntTemp-Widget-m').val(-1);
                                        $('#select-IntTemp-Widget-m').prop('disabled', false);
                                        $('#select-IntTemp-Widget-m').prop('required', false);
                                        $('#inputFreqWidgetM').prop('disabled', false);
                                        $('#inputFreqWidgetM').prop('required', false);
                                        $('#urlWidgetM').attr('disabled', false);
                                        $('#inputComuneWidgetM').attr("disabled", false);
                                        $('#inputHeaderFontColorWidgetM').attr('disabled', false);
                                        $('#inputHeaderFontColorWidgetM').prop('required', true);
                                        $('#inputUdmWidgetM').prop("required", false);
                                        $('#inputUdmWidgetM').attr("disabled", true);
                                        $('#inputUdmWidgetM').val("");
                                        $('#inputUdmPositionM').prop("required", false);
                                        $('#inputUdmPositionM').attr("disabled", true);
                                        $('#inputUdmPositionM').val(-1);
                                        if(data['municipality_metric_widget'] == null) 
                                        {
                                            $('#inputComuneWidgetM').attr('disabled', true);
                                        } 
                                        else 
                                        {
                                            $('#inputComuneWidgetM').attr('disabled', false);
                                        }
                                        
                                        //Parametri specifici del widget
                                        $('#specificParamsM .row').remove();
                                        //Rimozione eventuali campi del subform general per widget process
                                        removeWidgetProcessGeneralFields("editWidget");
                                        break;
                                    }//Fine switch($('#select-widget-m').val())
                                }//Fine else caso data viewer
                                
                                dimMapRaw = data['dimMap'];
                                
                                if((dimMapRaw != null) && (dimMapRaw != "null") && (typeof dimMapRaw != "undefined") && (dimMapRaw != ""))
                                 {
                                    dimMap = JSON.parse(dimMapRaw);
                                 }
                                
                                if(dimMap == null)
                                {
                                    $("#inputRows-m").off();
                                    var min_col_m = parseInt(data['min_col']);                               
                                    var max_col_m = parseInt(data['max_col']);
                                    var min_row_m = parseInt(data['min_row']);
                                    var max_row_m = parseInt(data['max_row']);

                                    if (min_row_m === max_row_m)
                                    {
                                        $("#inputRows-m").append('<option>' + max_row_m + '</option>');
                                        $("#inputRows-m").val(data['size_rows_widget']);
                                    } 
                                    else
                                    {
                                        for (var c = min_row_m; c <= max_row_m; c++)
                                        {
                                            $("#inputRows-m").append('<option>' + c + '</option>');
                                        }
                                        $("#inputRows-m").val(data['size_rows_widget']);
                                    }
                                    
                                    if (min_col_m === max_col_m)
                                    {
                                        $("#inputColumn-m").append('<option>' + min_col_m + '</option>');
                                        $("#inputColumn-m").val(data['size_columns_widget']);
                                    } 
                                    else
                                    {
                                        for (var v = min_col_m; v <= max_col_m; v++)
                                        {
                                            $("#inputColumn-m").append('<option>' + v + '</option>');
                                        }
                                        $("#inputColumn-m").val(data['size_columns_widget']);
                                    }
                                    
                                }
                                else
                                {
                                    //Codice per dim vincolate.
                                    var z;
                                    var selectedIndex = null;
                                    
                                    $("#inputRows-m").empty();
                                    $("#inputRows-m").empty();
                                    
                                    for(z = 0; z < dimMap.dimMap.length; z++)
                                    {
                                        $("#inputRows-m").append('<option>' + dimMap.dimMap[z].rows + '</option>');
                                    }
                                    
                                    $("#inputRows-m").val(data['size_rows_widget']);
                                    $("#inputColumn-m").append('<option>' + data['size_columns_widget'] + '</option>');
                                    $("#inputColumn-m").val(data['size_columns_widget']);

                                    $("#inputRows-m").off();

                                    $("#inputRows-m").change(function() {
                                            selectedIndex = $("#inputRows-m").prop("selectedIndex");
                                            $("#inputColumn-m").empty();
                                            $("#inputColumn-m").append('<option>' + dimMap.dimMap[selectedIndex].cols + '</option>');
                                    });
                                }  
                                
								if((data.url !== null)&&(data.url !== 'null')&&(data.url !== undefined))
							    {
								    if(data.url.includes("selectorWebTarget"))
									{
									//	$("#urlWidgetM").val(JSON.parse(data.url).homepage);
									}
									else
									{
										$("#urlWidgetM").val(data['url']);
									}		
								}
								
                                //Impostazion colore principale del widget
                                if((!data['color_widget']) || (data['color_widget'] == ""))
                                {
                                    $("#inputColorWidgetM").val("#ffffff");
                                    $("#color_widget_M").css("background-color", "#ffffff");
                                    $("#widgetColorPickerContainer").colorpicker('setValue', '#ffffff');
                                } 
                                else 
                                {
                                    $("#widgetColorPickerContainer").colorpicker('setValue', data['color_widget']);
                                }
                                
                                //Impostazion colore del frame del widget
                                if((!data['frame_color']) || (data['frame_color'] == ""))
                                {
                                    $("#widgetFrameColorPickerContainer").colorpicker({
                                        format: "rgba",
                                        color: "#EEEEEE"
                                    });
                                } 
                                else 
                                {
                                    $("#widgetFrameColorPickerContainer").colorpicker({
                                        format: "rgba",
                                        color: data['frame_color']
                                    });
                                }
                                
                                if((!data['headerFontColor']) || (data['headerFontColor'] == ""))
                                {
                                    $("#widgetFrameFontColorPickerContainer").colorpicker({
                                        format: "rgba",
                                        color: "#000000"
                                    });
                                } 
                                else 
                                {
                                    $("#widgetFrameFontColorPickerContainer").colorpicker({
                                        format: "rgba",
                                        color: data['headerFontColor']
                                    });
                                }
                                
                                
                                
                                //dimensioni range
                                /*if(data['metrics_prop'][0]['timeRangeOption_metric_widget'] == 0) 
                                {
                                    //Div parametri: vecchio codice commentato in attesa di introdurre il nuovo form
                                    $("#value_range_m").hide();
                                } 
                                else if (data['metrics_prop'][0]['timeRangeOption_metric_widget'] == 1) 
                                {
                                    //Div parametri: vecchio codice commentato in attesa di introdurre il nuovo form
                                    $("#value_range_m").show();
                                    $("#textarea-range-value_m").val(data['param_w']);
                                    var dividi_json = data['param_w'];
                                    if (dividi_json) 
                                    {
                                        var obj = JSON.parse(dividi_json);
                                        $('#input-min_range_m').val(obj['rangeMin']);
                                        $('#input-max_range_m').val(obj['rangeMax']);
                                    } 
                                    else 
                                    {
                                        $("#textarea-range-value_m").empty();
                                        $('#input-min_range_m').val('');
                                        $('#input-max_range_m').val('');
                                    }
                                }*/
                                
                                $('#modal-modify-widget').modal('show');
                            },
                            error: function (errorMsg) 
                            {
                                console.log("Error calling get_data.php --> get_param_widget");
                                console.log(errorMsg);
                            }
                        });
                    });
                    
                    //Listener in modifica widget per il menu degli scheduler che carica le jobs areas e/o i jobs groups 
                    $('#inputSchedulerWidgetM').change(update_select_scheduler = function () 
                    {
                        if($('#inputSchedulerWidgetM').css("display") != "none")
                        {
                            var selectedIndex = $('#inputSchedulerWidgetM').prop('selectedIndex');
                            $("#schedulerNameM").val(elencoScheduler[selectedIndex].name);
                            $("#hostM").val(elencoScheduler[selectedIndex].ip);
                            $("#userM").val(elencoScheduler[selectedIndex].user);
                            $("#passM").val(elencoScheduler[selectedIndex].pass);
                            $.ajax({
                                url: "get_data.php",
                                data: {action: "getJobAreas", schedulerId: elencoScheduler[selectedIndex].id},
                                type: "GET",
                                async: false,
                                dataType: 'json',
                                success: function (data) 
                                {
                                    $('#inputJobsAreasWidgetM').empty();
                                    $('#inputJobsGroupsWidgetM').empty();
                                    $('#inputJobsNamesWidgetM').empty();
                                    if(data[0].id == "none")
                                    {
                                        //Nessuna JOBS AREA
                                        $('#jobsAreasRowM').css("display", "none");
                                        $("label[for='inputJobsAreasWidgetM']").css("display", "none");
                                        $('#inputJobsAreasWidgetDivM').css("display", "none");
                                        $('#inputJobsAreasWidgetGroupDivM').css("display", "none");
                                        $('#inputJobsAreasWidgetM').css("display", "none");
                                        
                                        //Caricamento dei jobs groups per lo scheduler selezionato.
                                        $('#inputJobsGroupsWidgetM').empty();
                                        for(var i = 0; i < elencoJobsGroupsPerScheduler[selectedIndex].length; i++)
                                        {
                                            $('#inputJobsGroupsWidgetM').append('<option>' + elencoJobsGroupsPerScheduler[selectedIndex][i] + '</option>');
                                        }
                                        
                                        //Viene mostrato il campo per i jobs groups dello scheduler selezionato
                                        $('#jobsGroupsRowM').css("display", "");
                                        $('#inputJobsGroupsWidgetGroupDivM').css("display", "");
                                        $('#inputJobsGroupsWidgetDivM').css("display", "");
                                        $("label[for='inputJobsGroupsWidgetM']").css("display", "");
                                        $('#inputJobsGroupsWidgetM').css("display", "");
                                        $('#inputJobsGroupsWidgetM').prop('selectedIndex', -1);
                                        
                                        //Viene mostrato il campo dei jobs names per il group selezionato
                                        $('#jobsNamesRowM').css("display", "");
                                        $('#inputJobsNamesWidgetDivM').css("display", "");
                                        $('#inputJobsNamesWidgetGroupDivM').css("display", "");
                                        $("label[for='inputJobsNamesWidgetM']").css("display", "");
                                        $('#inputJobsNamesWidgetM').css("display", "");
                                        $('#inputJobsNamesWidgetM').prop('selectedIndex', -1);
                                    }
                                    else
                                    {
                                        //Ramo con le jobs areas
                                        
                                        //Non mostrare i job groups per scheduler
                                        $('#jobsGroupsRowM').css("display", "none");
                                        $('#inputJobsGroupsWidgetGroupDivM').css("display", "none");
                                        $('#inputJobsGroupsWidgetDivM').css("display", "none");
                                        $("label[for='inputJobsGroupsWidgetM']").css("display", "none");
                                        $('#inputJobsGroupsWidgetM').css("display", "none");
                                        
                                        //Mostrare le JOBS AREAS
                                        $('#jobsAreasRowM').css("display", "");
                                        $("label[for='inputJobsAreasWidgetM']").css("display", "");
                                        $('#inputJobsAreasWidgetDivM').css("display", "");
                                        $('#inputJobsAreasWidgetGroupDivM').css("display", "");
                                        $('#inputJobsAreasWidgetM').css("display", "");
                                        $('#inputJobsAreasWidgetM').empty();
                                        for(var i = 0; i < data.length; i++)
                                        {
                                            $('#inputJobsAreasWidgetM').append('<option>' + data[i]['name'] + '</option>');
                                        }
                                        $('#inputJobsAreasWidgetM').prop("selectedIndex", -1);
                                        
                                        //Viene mostrato il campo per i jobs groups della job area selezionata
                                        $('#jobsGroupsRowM').css("display", "");
                                        $('#inputJobsGroupsWidgetGroupDivM').css("display", "");
                                        $('#inputJobsGroupsWidgetDivM').css("display", "");
                                        $("label[for='inputJobsGroupsWidgetM']").css("display", "");
                                        $('#inputJobsGroupsWidgetM').css("display", "");
                                        $('#inputJobsGroupsWidgetM').prop('selectedIndex', -1);
                                    }

                                },
                                error: function (errorMsg) 
                                {
                                    console.log("Error calling get_data.php --> getJobAreas");
                                    console.log(errorMsg);
                                }
                            });    
                        }
                    }).change();
                    
                    //Listener in modifica widget per il menu delle job areas che carica i jobs groups 
                    $('#inputJobsAreasWidgetM').change(update_select_scheduler = function ()
                    {
                       if($('#inputJobsAreasWidgetM').css("display") !== "none")
                       {
                           $('#inputJobsGroupsWidgetM').empty();
                           var selectedSchedulerIndex = $('#inputSchedulerWidgetM').prop('selectedIndex');
                           var areaSelected = $('#inputJobsAreasWidgetM').val();
                           $("#jobAreaM").val(areaSelected);
                           var keyword = null;
                           switch(areaSelected)
                           {
                                case "Stato linee ATAF":
                                   keyword = "linea";
                                   break;
                                   
                                case "Check RT":
                                   keyword = "check";
                                   break;
                                   
                                case "Eventi a Firenze":
                                   keyword = "Eventi";
                                   break;
                                   
                                case "Parcheggi":
                                   keyword = "parcheggi";
                                   break;
                                   
                                case "Previsioni meteo":
                                   keyword = "meteo";
                                   break;
                                   
                                case "Sensori":
                                   keyword = "sensori";
                                   break;   
                           }
                           $.ajax({
                                url: "getJobs.php",
                                data: {action: "getJobGroupsForJobArea", 
                                       host: elencoScheduler[selectedSchedulerIndex].ip, 
                                       user: elencoScheduler[selectedSchedulerIndex].user, 
                                       pass: elencoScheduler[selectedSchedulerIndex].pass,
                                       keyword: keyword
                                   },
                                type: "POST",
                                async: false,
                                dataType: 'json',
                                success: function (data) 
                                {
                                    $('#inputJobsGroupsWidgetM').empty();
                                    for(var j = 0; j < data.length; j++) 
                                    {
                                        $('#inputJobsGroupsWidgetM').append('<option>' + data[j].jobGroup + '</option>');
                                    }
                                    $('#inputJobsGroupsWidgetM').prop('selectedIndex', -1);
                                    //Viene mostrato il campo dei jobs names per il group selezionato
                                    $('#jobsNamesRowM').css("display", "");
                                    $('#inputJobsNamesWidgetDivM').css("display", "");
                                    $('#inputJobsNamesWidgetGroupDivM').css("display", "");
                                    $("label[for='inputJobsNamesWidgetM']").css("display", "");
                                    $('#inputJobsNamesWidgetM').css("display", "");
                                    $('#inputJobsNamesWidgetM').prop('selectedIndex', -1);
                                }
                            });
                           
                       }
                    }).change();
                    
                    //Listener in modifica widget per il menu dei job groups che carica i jobs names 
                    $('#inputJobsGroupsWidgetM').change(update_select_scheduler = function () 
                    {
                        if($('#inputJobsGroupsWidgetM').css("display") != "none")
                        {
                            $('#inputJobsNamesWidgetM').empty();
                            var selectedScheduler = $('#inputSchedulerWidgetM').prop('selectedIndex');
                            var selectedGroup = $('#inputJobsGroupsWidgetM').val();
                            $("#jobGroupM").val(selectedGroup);
                            //Reperimento elenco dei jobs names per il job group selezionato
                            $.ajax({
                                url: "getJobs.php",
                                data: {
                                    action: "getJobNamesForJobGroup", 
                                    host: elencoScheduler[selectedScheduler].ip, 
                                    user: elencoScheduler[selectedScheduler].user, 
                                    pass: elencoScheduler[selectedScheduler].pass,
                                    jobGroup: selectedGroup
                                },
                                type: "POST",
                                async: false,
                                dataType: 'json',
                                success: function (data) 
                                {
                                    $('#inputJobsNamesWidgetM').empty();
                                    for(var j = 0; j < data.length; j++) 
                                    {
                                        $('#inputJobsNamesWidgetM').append('<option>' + data[j].jobName + '</option>');
                                    }
                                    $('#inputJobsNamesWidgetM').prop('selectedIndex', -1);
                                },
                                error: function (errorMsg) 
                                {
                                   console.log("Error calling getJobs.php --> getJobNamesForJobGroup");
                                   console.log(errorMsg);
                                }
                            });
                        }
                    }).change();
                    
                   //Listener in modifica widget per il menu dei job names che valorizza il campo di form col job name scelto
                   $('#inputJobsNamesWidgetM').change(update_select_scheduler = function () 
                    {
                        if($('#inputJobsNamesWidgetM').css("display") != "none")
                        {
                            $('#jobNameM').val($('#inputJobsNamesWidgetM').val());
                        }
                    }).change();

                    $('.color-choice').colorpicker({
                        format: "rgba"
                    });
                    
                    $("#widgetColorPickerContainer").colorpicker({
                        format: "rgba"
                    });

                    $('#form-setting-widget').submit(function () {
                        $('#select-widget').removeAttr('disabled');
                    });
                    //Caricamento della chat asincrono a valle di tutto il loading della dashboard
                    <?php
                    $error='no';
                    try  {
                        include '../config.php';
                        include "../rocket-chat-rest-client/RocketChatClient.php";
                        include "../rocket-chat-rest-client/RocketChatUser.php";
                        include "../rocket-chat-rest-client/RocketChatChannel.php";
                        define('REST_API_ROOT', '/api/v1/');
                        define('ROCKET_CHAT_INSTANCE', $chatBaseUrl);
                        $escapedTitle = str_replace("'", "&#39", urldecode($dashboardTitle));
                        $escapedTitleOk = str_replace('"', '&#34', $escapedTitle);
                        $existChat=strtolower((str_replace(" ", "", str_replace('%2520','',str_replace('%20', '', $dashboardTitle))) . "-" . $_REQUEST['dashboardId']));
                        $idChat='id';
                        $userId='id';
                        $newMessage=0;
                        $admin = new \RocketChat\User();
                        if($admin->login()){
                            $userChat=$admin->infoByUsername($_SESSION['loggedUsername']);
                            $userId=$userChat->user->_id;
                            if ($_SESSION['loggedRole'] == "RootAdmin"){
                                $admin->setRole($userId);
                            }
                            $channel = new \RocketChat\Channel('N');
                            $existChat=urldecode ($existChat);
                            $existChat = str_replace('à', 'a', $existChat);
                            $existChat = str_replace('è', 'e', $existChat);
                            $existChat = str_replace('é', 'e', $existChat);
                            $existChat = str_replace('ì', 'i', $existChat);
                            $existChat = str_replace('ò', 'o', $existChat);
                            $existChat = str_replace('ù', 'u', $existChat);
                            $existChat = str_replace('å', 'a', $existChat);
                            $existChat = str_replace('ë', 'e', $existChat);
                            $existChat = str_replace('ô', 'o', $existChat);
                            $existChat = str_replace('á', 'a', $existChat);
                            $existChat = str_replace('ç', 'c', $existChat);
                            $existChat = str_replace('ÿ', 'y', $existChat);
                            $existChat=preg_replace("/[^a-zA-Z0-9_-]/", "", $existChat);
//var_dump($existChat);
                            //var_dump(preg_replace("/[^a-zA-Z0-9_-]/", "", $existChat));
                            $infoChannel = $channel->infoByName($existChat);
                            $infoChannel1=$channel->infoUserChannel($existChat,$userId);
                            $newMessage=$infoChannel1->unreads;
                            
                            if($infoChannel->success){
                                $existChat=$infoChannel->channel->name; 
                                $idChat=$infoChannel->channel->_id;
                                $admin->logout();
                                }
                        }
                    }catch (Exception $e) {
                        $error=$e->getMessage();
                    }
                    ?>
<?php if($chatBaseUrl) : ?>
                    setTimeout(function() {
                        console.log('<?php echo $newMessage; ?>');
                        console.log("Show33333");
                        if('<?php echo $idChat; ?>'!='id'){
                        $('#chatIframeB').attr('style', 'height: 130px');
                        $('#chatIframeD').attr('style', 'height: 0px');
                        $('#chatIframeB').attr('src', 'chatFrame.php?nameChat=<?php echo $existChat; ?>&idDash=<?php echo $_REQUEST['dashboardId']; ?>&idChat=<?php echo $idChat; ?>&idUserChat=<?php echo $userId; ?>');
                        $('#chatIframe').attr('src', '<?php echo $chatBaseUrl; ?>/channel/<?php echo $existChat; ?>/?layout=embedded')
                        if('<?php echo $newMessage; ?>'=='0'){
                                  $('#chatBtn').attr('style', 'display: float');    
                                    }else{
                                        $('#chatBtnNew').attr('style', 'display: float;color:red');
                                }
                        }else if('<?php echo $userId; ?>'!='id'){
                        $('#chatIframeB').attr('style', 'height: 0px');
                        $('#chatIframeD').attr('src', 'chatFrameCreate.php?nameChat=<?php echo $existChat ;?>&idDash=<?php echo $_REQUEST['dashboardId'] ;?>&idChat=<?php echo $idChat ;?>&idUserChat=<?php echo $userId ;?>');
                        $('#chatBtn').attr('style', 'display: float');
                        }else if('<?php echo $userId; ?>'=='id'){
                          $('#chatBtnError').attr('style', 'display: float');
                          $('#chatIframeB').attr('src', 'chatFrameError.php?error=<?php echo $error; ?>');
                          $('#chatIframeB').attr('style', 'height: 130px');
                          console.log('Chat Failed');
                        }
                        
                    }, 50);
                    
<?php endif; ?>                    
        changeMetricTable = $('#changeMetricTable').DataTable({
            "bLengthChange": false,
            "bInfo": false,
            "language": {search: ""},
            aaSorting: [[0, 'desc']],
            "processing": true,
            "serverSide": true,
            "pageLength": 5,
            "pagingType": "full",
            "ajax": {
                async: true, 
                url: "../controllers/dashboardWizardController.php?initWidgetWizard=true",
                data: {
                    dashUsername: "<?= $_SESSION['loggedUsername'] ?>",
                    dashUserRole: "<?= $_SESSION['loggedRole'] ?>",
                    organization: "<?= $_SESSION['loggedOrganization'] ?>"
                }
            },
            'createdRow': function (row, data, dataIndex) {
                $(row).attr('data-rowId', data[13]);
                $(row).attr('data-high_level_type', data[0]);
                $(row).attr('data-nature', data[1]);
                $(row).attr('data-sub_nature', data[2]);
                $(row).attr('data-low_level_type', data[3]);
                $(row).attr('data-unique_name_id', data[4]);
                $(row).attr('data-instance_uri', data[5]);
                $(row).attr('data-unit', data[6]);
                $(row).attr('data-servicetype', data[2]);
                $(row).attr('data-get_instances', data[15]);
                $(row).attr('data-sm_based', data[17]);
                $(row).attr('data-parameters', data[12]);
                $(row).attr('data-selected', 'false');
                $(row).attr('data-last_value', data[9]);
            },
            "columnDefs": [
                {
                    "targets": [0, 1, 2, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17],
                    "searchable": false,
                    "visible": false
                }
            ],
            initComplete: function () 
            {
                $('#changeMetricTable tbody tr').each(function (i) {
                    $(this).removeClass('selected');
                    $(this).attr("data-selected", "false");
                });
                
                $(document).off('changeMetricMenuOpen');
                $(document).on('changeMetricMenuOpen', function(event) {
                    /*  var checkChangeMetricSelectedRows = $('#' + event.generator).attr('data-wizardrowids');
                      if (checkChangeMetricSelectedRows)
                      {
                          changeMetricSelectedRows = JSON.parse($('#' + event.generator).attr('data-wizardrowids'));
                      }   */
                    /*    $('#changeMetricTable tbody td').each(function (i) {
                            $('#changeMetricTable tbody tr').each(function (i) {
                                $(this).removeClass('selected');
                                $(this).attr("data-selected", "false");
                            });
                        });*/
                    //   $('#changeMetricTable tbody tr').removeClass('selected');
                    //    changeMetricTable.rows().deselect();
                    //   changeMetricTable.clear().draw();
                    //    changeMetricTable.rows('.important').deselect();
                    //     changeMetricTable.ajax.reload();
                    choosenWidgetType = getWidgetIconName(event.generator);
                //    changeMetricSelectedRows = {};
                    if (changeMetricTableAlreadyLoaded == 0) {
                        $.ajax({
                            url: "get_data.php",
                            data: {action: "filterChangeMetricTable", widgetType: choosenWidgetType},
                            type: "GET",
                            async: false,
                            dataType: 'json',
                            success: function (data) {
                                //  var mainWidget = data[0].mainWidget;

                                for (var i = 0; i < data.length; i++) {
                                    if (data[i].targetWidget === '') {
                                        mainWidget = data[i].mainWidget;
                                        unit = data[i].unit;
                                        icon = data[i].icon;
                                        mono_multi = data[i].mono_multi;
                                        widgetCategory = data[i].widgetCategory;
                                    } else {
                                        // per ora do nothing poi gestire
                                    }
                                    // NO QUESTE ISTRUZIONI SOTTO METTERE FUORI DAL FOR E FARE PUSH DI TUTTE LE UNITs !
                                    var searchChangeMetricTable = unit;
                                    for (i; i < unit.length; i++) {
                                        searchChangeMetricTable = searchChangeMetricTable.replace(", ", "|");
                                    }
                                    changeMetricTable.column(6).search(searchChangeMetricTable, false, false).draw();
                                }
                            },
                            error: function (errorMsg) {
                                console.log("Error calling get_data.php --> filterChangeMetricTable");
                                console.log(errorMsg);
                            }
                        });

                        if (!$(this).attr('data-rowid')) {
                            for (var key in changeMetricSelectedRows) {
                                //   console.log(key, changeMetricSelectedRows[key]);
                                firstRowId = key.split("row");
                                firstRowId = firstRowId[1];
                            }
                        } else {
                            firstRowId = $(this).attr('data-rowid');
                        }
                    }

                    changeMetricTable.ajax.reload();
                //    changeMetricTable.clear().draw();
                    changeMetricSelectedRowsTable.clear().draw();
                    
                 /*   for(var key in changeMetricSelectedRows)
                    {
                        changeMetricSelectedRowsTable.row.add([
                            changeMetricSelectedRows[key].low_level_type,
                            changeMetricSelectedRows[key].unique_name_id,
                            changeMetricSelectedRows[key].unit,
                            changeMetricSelectedRows[key].last_value,
                        //    "DEL",
                       //     firstRowId
                        //    $(this).attr('data-rowid')
                        ]).draw(false);
                    }   */
                    changeMetricTableAlreadyLoaded = 1;
                });
            }
        });
        
        changeMetricSelectedRowsTable = $('#changeMetricSelectedRowsTable').DataTable({
            "bLengthChange": false,
            "bInfo": false,
            "language": {search: ""},
            aaSorting: [[0, 'desc']],
            "processing": true,
            "pageLength": 3,
            "searching": false,
            "paging": false,
        //    "pagingType": "full",
            'createdRow': function (row, data, dataIndex) {
                $(row).attr('data-rowId', data[4]);
                
                $(row).find('.changeMetricSelectedRowsDelBtn').click(function ()
                {
                    //var delesectedUnit = widgetWizardSelectedRows['row' + $(this).parents('tr').attr('data-rowid')].unit;
                    delete changeMetricSelectedRows['row' + $(this).parents('tr').attr('data-rowid')];
                    
                    changeMetricSelectedRowsTable.row('[data-rowid=' + $(this).parents('tr').attr('data-rowid') + ']').remove().draw(false);
                    $('#changeMetricTable tbody tr[data-rowid=' + $(this).parents('tr').attr('data-rowid') + ']').removeClass('selected');
                    
                });
            },
            "columnDefs": [
                {
                    "targets": 3,
                    "searchable": false,
                    "render": function (data, type, row, meta) {
                        return '<i class="fa fa-close changeMetricSelectedRowsDelBtn"></i>';
                    }
                }
            ],
            initComplete: function () 
            {
                
            }
        });
        
        //Settaggio righe selezionate quando si cambia pagina
        $('#changeMetricTable').on('draw.dt', function () {
            $('#changeMetricTable tbody tr').each(function (i) {
                var rowId = 'row' + $(this).attr('data-rowid');
                if(changeMetricSelectedRows.hasOwnProperty(rowId))
                {
                    $(this).addClass('selected');
                    $(this).attr("data-selected", "true");
                }
            });
        });
        
        $('#changeMetricTable tbody').on('click', 'tr', function ()
        {
            //Evidenza grafica di riga selezionata
            if($(this).hasClass('selected'))
            {
                $(this).removeClass('selected');
                //var delesectedUnit = widgetWizardSelectedRows['row' + $(this).attr('data-rowid')].unit;
                delete changeMetricSelectedRows['row' + $(this).attr('data-rowid')];
                
                changeMetricSelectedRowsTable.row('[data-rowid=' + $(this).attr('data-rowid') + ']').remove().draw(false);
                
                //Aggiornamento unità selezionate
                //updateSelectedUnits('remove', delesectedUnit);
            } 
            else
            {
                var size = 0, key;
                for (key in changeMetricSelectedRows) {
                    if (changeMetricSelectedRows.hasOwnProperty(key)) size++;
                }

                if (size < 1) {
                    $(this).addClass('selected');
                    changeMetricSelectedRows['row' + $(this).attr('data-rowid')] =
                        {
                            high_level_type: $(this).attr('data-high_level_type'),
                            nature: $(this).attr('data-nature'),
                            sub_nature: $(this).attr('data-sub_nature'), //Questa è da mandare a ServiceMap
                            low_level_type: $(this).attr('data-low_level_type'), //Ora si chiama Value type
                            unique_name_id: $(this).attr('data-unique_name_id'), //Ora si chiama Value name
                            instance_uri: $(this).attr('data-instance_uri'),
                            unit: $(this).attr('data-unit'),
                            last_value: $(this).attr('data-last_value'),
                            servicetype: $(this).attr('data-servicetype'),//Doppione?
                            sm_based: $(this).attr('data-sm_based'),
                            parameters: $(this).attr('data-parameters'),
                            widgetCompatible: true,
                            get_instances: $(this).attr('data-get_instances')
                        };

                    changeMetricSelectedRowsTable.row.add([
                        $(this).find('td').eq(0).html(),
                        $(this).find('td').eq(1).html(),
                        $(this).find('td').eq(2).html(),
                        $(this).find('td').eq(3).html(),
                        //   "DEL",
                        $(this).attr('data-rowid'),
                    ]).draw(false);
                } else {
                    alert('<?= _("You can select only one metric for this type of widget") ?>');
                }
                //Aggiornamento unità selezionate
                //updateSelectedUnits('add', null);
            }
        });

        $('#changeMetricConfirmBtn').click(function () {
            //Mandiamo solo le selected rows compatibili
            var widgetId = $(this)[0].offsetParent.id;
            var widgetIdOk = widgetId.split("_changeMetricSubmenu")[0];
            var changeMetricSelectedRowsCompatible = {};

            for (var key in changeMetricSelectedRows) {
                if (changeMetricSelectedRows[key].widgetCompatible) {
                    changeMetricSelectedRowsCompatible[key] = changeMetricSelectedRows[key];
                }
            }

            for (var k = 0; k < dashboardWidgets.length; k++) {
                if (dashboardWidgets[k].name_w === widgetIdOk)
                {
                    choosenWidgetMetricIconName = dashboardWidgets[k].icon;
                }
            }

            if (choosenWidgetMetricIconName) {
            //    deleteWidget(widgetIdOk);
                //   $('#modalAddWidgetWizardAvailabilityMsg').hide();
                //   widgetWizardMapSelection = addWidgetWizardMapRef.getBounds().getSouthWest().lat + ";" + addWidgetWizardMapRef.getBounds().getSouthWest().lng + ";" + addWidgetWizardMapRef.getBounds().getNorthEast().lat + ";" + addWidgetWizardMapRef.getBounds().getNorthEast().lng;

            /*    $.ajax({
                    url: "../controllers/widgetAndDashboardInstantiator.php",
                    data: {
                        operation: "addWidget",
                        widgetType: choosenWidgetMetricIconName,
                        actuatorTargetWizard: $('#actuatorTargetWizard').val(),
                        actuatorTargetInstance: $('#actuatorTargetInstance').val(),
                        actuatorEntityName: $('#actuatorEntityName').val(),
                        actuatorValueType: $('#actuatorValueType').val(),
                        actuatorMinBaseValue: $('#actuatorMinBaseValue').val(),
                        actuatorMaxImpulseValue: $('#actuatorMaxImpulseValue').val(),
                        widgetWizardSelectedRows: changeMetricSelectedRowsCompatible,
                        //   selection: widgetWizardMapSelection,
                        //   mapCenterLat: addWidgetWizardMapRef.getCenter().lat,
                        //   mapCenterLng: addWidgetWizardMapRef.getCenter().lng,
                        //   mapZoom: addWidgetWizardMapRef.getZoom()
                    },
                    type: "POST",
                    async: true,
                    //dataType: 'json',
                    success: function (data) {
                        if (data === 'Ok') {
                            location.reload();
                        } else {
                            alert("Error during dashboard update, please try again");
                            console.log(data);
                        }
                    },
                    error: function (errorData) {
                        alert("Error during dashboard update, please try again");
                        console.log(errorData);
                    }
                }); */

                $.ajax({
                    url: "../controllers/widgetAndDashboardInstantiator.php",
                    data: {
                        operation: "updateWidget",
                        dashboardId: "<?php if (isset($_REQUEST['dashboardId'])) {
                            echo addslashes($_REQUEST['dashboardId']);
                        } else {
                            echo 1;
                        } ?>",
                        dashboardAuthorName: "<?php if (isset($dashboardAuthorName)) {
                            echo addslashes($dashboardAuthorName);
                        } else {
                            echo 1;
                        } ?>",
                        dashboardEditorName: "<?php if (isset($dashboardEditorName)) {
                            echo addslashes($dashboardEditorName);
                        } else {
                            echo 1;
                        } ?>",
                        dashboardTitle: '<?php if (isset($dashboardTitle)) {
                            echo addslashes($dashboardTitle);
                        } else {
                            echo 1;
                        } ?>',
                        widgetType: choosenWidgetMetricIconName,
                        actuatorTargetWizard: $('#actuatorTargetWizard').val(),
                        actuatorTargetInstance: $('#actuatorTargetInstance').val(),
                        actuatorEntityName: $('#actuatorEntityName').val(),
                        actuatorValueType: $('#actuatorValueType').val(),
                        actuatorMinBaseValue: $('#actuatorMinBaseValue').val(),
                        actuatorMaxImpulseValue: $('#actuatorMaxImpulseValue').val(),
                        widgetId: widgetIdOk,
                        widgetWizardSelectedRows: changeMetricSelectedRowsCompatible
                        //   selection: widgetWizardMapSelection,
                        //   mapCenterLat: addWidgetWizardMapRef.getCenter().lat,
                        //   mapCenterLng: addWidgetWizardMapRef.getCenter().lng,
                        //   mapZoom: addWidgetWizardMapRef.getZoom()
                    },
                    type: "POST",
                    async: true,
                    //dataType: 'json',
                    success: function (data) {
                     //   if (data === 'Ok') {
                        if (data) {
                        //    location.reload();
                    //        $("#" + widgetIdOk + "_countdownDiv").text("5s");
                    //    //    $("#" + data.name_w).trigger({
                    //        $("#" + widgetIdOk).trigger({
                    //            type: "updateFrequency",
                    //            newTimeToReload: 4
                    //        });
                            var updateWidgetIdx = -1;
                            var newWidgetToUpdate;
                            var titleWidgetToDel = "";
                            for (n=0; n<dashboardWidgets.length; n++) {
                                if (dashboardWidgets[n].name_w == widgetIdOk)
                                {
                                    updateWidgetIdx = n;
                                    titleWidgetToDel = dashboardWidgets[n].title_w;
                                }
                            }

                            $.ajax({
                                url: "get_data.php",
                                data: {
                                    action: "getDashboardParamsAndWidgetsNR",
                                    notBySession: "true",
                                    dashboardId: '<?= $_GET["dashboardId"] ?>',
                                    username: "<?= $dashboardAuthorName ?>"
                                },
                                type: "GET",
                                async: true,
                                cache: false,
                                dataType: 'json',
                                success: function (data) {
                                    newWidgetToUpdate = data.dashboardWidgets[updateWidgetIdx];
                                //    temp = parseInt(parseInt(newWidgetToUpdate['n_row']) + parseInt(newWidgetToUpdate['size_rows']));
                                    var exFirstFreeRow = firstFreeRow;
                                    firstFreeRow = parseInt(newWidgetToUpdate['n_row']);
                                //    if(temp > firstFreeRow)
                                //    {
                                //        firstFreeRow = temp;
                                //    }
                                    $('#firstFreeRowInput').val(firstFreeRow);

                                    var time = 0;
                                    if(newWidgetToUpdate['temporal_range_w'] === "Mensile")
                                    {
                                        time = "30/DAY";
                                    }
                                    else if (dashboardWidgets[i]['temporal_range_w'] === "Semestrale")
                                    {
                                        time = "180/DAY";
                                    }
                                    else if (newWidgetToUpdate['temporal_range_w'] === "10 Anni")
                                    {
                                        time = "3650/DAY";
                                    }
                                    else if (newWidgetToUpdate['temporal_range_w'] === "2 Anni")
                                    {
                                        time = "730/DAY";
                                    }
                                    else if (newWidgetToUpdate['temporal_range_w'] === "Annuale")
                                    {
                                        time = "365/DAY";
                                    }
                                    else if (newWidgetToUpdate['temporal_range_w'] === "Settimanale")
                                    {
                                        time = "7/DAY";
                                    }
                                    else if (newWidgetToUpdate['temporal_range_w'] === "Giornaliera")
                                    {
                                        time = "1/DAY";
                                    }
                                    else if (newWidgetToUpdate['temporal_range_w'] === "4 Ore")
                                    {
                                        time = "4/HOUR";
                                    }
                                    else if (newWidgetToUpdate['temporal_range_w'] === "12 Ore")
                                    {
                                        time = "12/HOUR";
                                    }
                                //    var widget = ['<li data-widgetType="' + newWidgetToUpdate['type_w'] + '" data-widgetId="' + newWidgetToUpdate['Id'] + '" id="' + newWidgetToUpdate['name_w'] + '"></li>', newWidgetToUpdate['size_columns'], newWidgetToUpdate['size_rows'], newWidgetToUpdate['n_column'], newWidgetToUpdate['n_row']];

                                 //   var widgetInstance = gridster.add_widget.apply(gridster, widget);

                                    embedWidget = false;
                                    embedWidgetPolicy = 'auto';

                                    newWidgetToUpdate.time = time;
                                    newWidgetToUpdate.embedWidget = embedWidget;
                                    newWidgetToUpdate.embedWidgetPolicy = embedWidgetPolicy;
                                    newWidgetToUpdate.hostFile = 'config';

                                    $("li#" + newWidgetToUpdate['name_w']).css('border', '1px solid ' + newWidgetToUpdate.borderColor);

                                    $("li#" + newWidgetToUpdate['name_w']).attr("data-wizardRowIds", newWidgetToUpdate['wizardRowIds']);

                                    // FARE PRIMA HIDE ??
                                    $('#widgetToDelNameHidden').val(widgetIdOk);
                                    $('#widgetToDelName').html(titleWidgetToDel);
                                    $('#widgetToDelNameHidden').val('');
                                    $('#widgetToDelName').html('');


                                    $("#gridsterUl").find("li#" + newWidgetToUpdate['name_w']).load("../widgets/" + encodeURIComponent(newWidgetToUpdate['type_w']) + ".php", newWidgetToUpdate, function () {
                                        $(this).find(".icons-modify-widget").css("display", "inline");
                                        $(this).find(".modifyWidgetGenContent").css("display", "block");
                                        $(this).find(".pcCountdownContainer").css("display", "none");
                                        $(this).find(".iconsModifyPcWidget").css("display", "flex");
                                        $(this).find(".iconsModifyPcWidget").css("align-items", "center");
                                        $(this).find(".iconsModifyPcWidget").css("justify-content", "flex-end");
                                    });

                                    $('#' + widgetIdOk + '_widgetCtxMenu .quitRow').off('click');

                                //    $('#' + widgetIdOk + '_widgetCtxMenu .quitRow').click(function(){
                                            $('#' + widgetIdOk + '_widgetCtxMenu .widgetSubmenu').hide();
                                            $('#' + widgetIdOk + '_widgetCtxMenu').hide();
                                            $('#' + widgetIdOk + '_widgetCtxMenu .widgetSubmenu').each(function(i){
                                                $(this).attr('data-clicked', 'false');
                                            });

                                            $('#' + widgetIdOk + '_widgetCtxMenu').attr('data-shown', false);

                                            $(".fullCtxMenuRow").css('color', 'rgb(51, 64, 69)');
                                            $(".fullCtxMenuRow").css('background-color', 'transparent');
                                            $(".fullCtxMenuRow").attr("data-selected", "false");
                                //    });

                                    $('#firstFreeRowInput').val(exFirstFreeRow);

                                },
                                error: function (errorData) {
                                    alert('<?= _("Error during widget update, please try again") ?>');
                                    console.log(errorData);
                                }
                            });

                            // RIMETTERE FREQUENZA VECCHIA
                        } else {
                            alert('<?= _("Error during widget update, please try again") ?>');
                            console.log(data);
                        }
                    },
                    dataType:"json",
                    error: function (errorData) {
                        alert('<?= _("Error during widget update, please try again") ?>');
                        console.log(errorData);
                    }
                });

            } else {
                alert('<?= _("Error during widget update, cannot change metric") ?>');
            }
        });

        function getWidgetIconName(name_w)
        {
            var name_w_splitted = name_w.split("widget")[1].replace(/[0-9]/g, '');
            name_w_splitted = "widget" + name_w_splitted;
            return name_w_splitted;

        }

        function getThemeList(){
            $('#ul_select_list').empty();
            var dashboardIdUnderEdit = $('#dashboardIdUnderEdit').val();
            //alert(dashboardIdUnderEdit);
            //
            $.ajax({
                        url: "get_data.php",
                        data: {
                            action: "getThemeList",
                            dashboardIdUnderEdit: dashboardIdUnderEdit
                        },
                        type: "GET",
                        async: true,
                        dataType: 'json',
                        success: function(data){
                            var list = data.list;
                            var current = data.current[0].theme;
                            var l = list.length;
                            //var legacy = 'Legacy';
                            ///$('#ul_select_list').append('<li><a href="#" onclick="selectTheme(\''+legacy+'\')">Legacy</a></li>');
                            for(var i=0; i<l; i++){
                                //console.log(data[i]);
                                if ((list[i] !=='.')&&(list[i] !=='..')&&(list[i] !=='placeholder.jpg')){
                                    $('#ul_select_list').append('<li><a href="#" onclick="selectTheme(\''+list[i]+'\')">'+list[i]+'</a></li>');
                                }
                            }
                            //
                            if (current == null){
                                selectTheme('Legacy');
                                //
                                //
                            }else{
                                selectTheme(current);
                            }
                            //
                            //
                        },
                        error: function(errorData){
                            console.log("Error retrieving personal inputs");
                            console.log(JSON.stringify(errorData));
                        }
                    });
        }
        
        function deleteWidget(name_w){

            // var widgetName = $('#widgetToDelNameHidden').val();
            var widgetName = name_w;

            $.ajax({
                url: "../controllers/deleteWidget.php",
                data: {
                    nameWidget: widgetName,
                    dashboardId: <?= $_REQUEST['dashboardId'] ?>,
                    dashboardTitle: dashboardParams.title_header,
                //    dashboardTitle: dashTitleEscaped,
                    username: "<?= $dashboardEditorName ?>"
                },
                async: true,
                success: function(successData)
                {
                    $('#delWidgetRunningMsg').hide();

                    if(successData !== 'Ok')
                    {
                    //    $('#delWidgetRunningIcon').hide();
                    //    $('#delWidgetKoMsg').show();
                        console.log("Del widget ko: " + successData);
                        setTimeout(function(){
                            $('#modalDelWidget').modal('hide');
                            setTimeout(function(){
                                $('#delWidgetKoMsg').hide();
                                $('#delWidgetNameMsg').parents('div.row').show();
                                $('#delWidgetCancelBtn').show();
                                $('#delWidgetConfirmBtn').show();
                                $('#widgetToDelNameHidden').val('');
                                $('#widgetToDelName').html('');
                            }, 750);
                        }, 2500);
                    }
                    else
                    {
                     //   $('#delWidgetRunningIcon').hide();
                     //   $('#delWidgetOkMsg').show();
                        $('#' + widgetName + '_widgetCtxMenu').remove();
                        gridster.remove_widget($('li[id=' + $('#widgetToDelNameHidden').val() + ']'));

                        setTimeout(function(){
                            var gridster_actual = $(".gridster ul").not(".ui-fancytree ul").gridster().data('gridster');
                            var widgets = JSON.stringify(gridster_actual.serialize());

                            $.ajax({
                                url: "../controllers/saveWidgetsPositions.php",
                                data: {
                                    configuration_widgets: widgets,
                                    dashboardId: <?= $_REQUEST['dashboardId']?>
                                },
                                type: "POST",
                                async: true,
                                success: function (data)
                                {
                                    if(data == 1)
                                    {
                                        //Non facciamo niente
                                    }
                                    else
                                    {
                                        //Non facciamo niente
                                    }
                                },
                                error: function(errorData)
                                {
                                    //Non facciamo niente
                                },
                                complete: function()
                                {
                                    $('#modalDelWidget').modal('hide');
                                    setTimeout(function(){
                                        $('#delWidgetOkMsg').hide();
                                        $('#delWidgetNameMsg').parents('div.row').show();
                                        $('#delWidgetCancelBtn').show();
                                        $('#delWidgetConfirmBtn').show();
                                        $('#widgetToDelNameHidden').val('');
                                        $('#widgetToDelName').html('');

                                        $("li.gs_w").each(function()
                                        {
                                            temp = parseInt(parseInt($(this).attr('data-row')) + parseInt($(this).attr('data-sizey')));
                                            if(temp > firstFreeRow)
                                            {
                                                firstFreeRow = temp;
                                            }
                                        });

                                        $('#firstFreeRowInput').val(firstFreeRow);

                                    }, 750);
                                }
                            });
                        }, 1250);
                    }
                },
                error: function(errorData)
                {
                    $('#delWidgetRunningIcon').hide();
                    $('#delWidgetKoMsg').show();
                    setTimeout(function(){
                        $('#modalDelWidget').modal('hide');
                        setTimeout(function(){
                            $('#delWidgetKoMsg').hide();
                            $('#delWidgetNameMsg').parents('div.row').show();
                            $('#delWidgetCancelBtn').show();
                            $('#delWidgetConfirmBtn').show();
                            $('#widgetToDelNameHidden').val('');
                            $('#widgetToDelName').html('');
                        }, 750);
                    }, 2500);
                    console.log("Del widget ko: " + errorData);
                    console.log(JSON.stringify(errorData));
                }
            });
        }

        });
        $('#select-IntTemp-Widget-m').on('change', function(){
            
            switch ($(this).find(":selected").val()){
                case "4 Ore":
                    $('#editWidgetComparePeriod').empty();
                    $('#editWidgetComparePeriod').append('<option value="4 previous hours"><?php echo _("4 previous hours"); ?></option>');
                    $('#editWidgetComparePeriod').append('<option value="4 hours day before"><?php echo _("4 hours day before"); ?></option>');
                    break;
                case "12 Ore":
                    $('#editWidgetComparePeriod').empty();
                    $('#editWidgetComparePeriod').append('<option value="12 previous hours"><?php echo _("12 previous hours"); ?></option>');
                    $('#editWidgetComparePeriod').append('<option value="12 hours day before"><?php echo _("12 hours day before"); ?></option>');
                    break;
                case "Giornaliera":
                    $('#editWidgetComparePeriod').empty();
                    $('#editWidgetComparePeriod').append('<option value="previous day"><?php echo _("previous day"); ?></option>');
                    $('#editWidgetComparePeriod').append('<option value="same day previous week"><?php echo _("same day previous week"); ?></option>');
                    $('#editWidgetComparePeriod').append('<option value="same day previous month"><?php echo _("same day previous month"); ?></option>');
                    break;
                case "Settimanale":
                    $('#editWidgetComparePeriod').empty();
                    $('#editWidgetComparePeriod').append('<option value="previous week"><?php echo _("previous week"); ?></option>');
                    $('#editWidgetComparePeriod').append('<option value="previous week starting Monday"><?php echo _("previous week starting Monday"); ?></option>');
                    break;
                case "Mensile":
                    $('#editWidgetComparePeriod').empty();
                    $('#editWidgetComparePeriod').append('<option value="previous month"><?php echo _("previous month"); ?></option>');
                    $('#editWidgetComparePeriod').append('<option value="previous month - day 1"><?php echo _("previous month - day 1"); ?></option>');
                    $('#editWidgetComparePeriod').append('<option value="same month prev year - day 1"><?php echo _("same month prev year - day 1"); ?></option>');
                    break;
                case "Semestrale":
                    $('#editWidgetComparePeriod').empty();
                    $('#editWidgetComparePeriod').append('<option value="previous 6 months"><?php echo _("previous 6 months"); ?></option>');
                    $('#editWidgetComparePeriod').append('<option value="previous 6 months - day 1 of prev 6 months"><?php echo _("previous 6 months - day 1 of prev 6 months"); ?></option>');
                    $('#editWidgetComparePeriod').append('<option value="same 6 months of prev year - day 1"><?php echo _("same 6 months of prev year - day 1"); ?></option>');
                    $('#editWidgetComparePeriod').append('<option value="same 6 months of prev year - day 1 month 1 or 7"><?php echo _("same 6 months of prev year - day 1 month 1 or 7"); ?></option>');
                    break;
                case "Annuale":
                    $('#editWidgetComparePeriod').empty();
                    $('#editWidgetComparePeriod').append('<option value="previous year"><?php echo _("previous year"); ?></option>');
                    $('#editWidgetComparePeriod').append('<option value="previous year - day 1 of prev year"><?php echo _("previous year - day 1 of prev year"); ?></option>');
                    $('#editWidgetComparePeriod').append('<option value="previous year - month 1"><?php echo _("previous year - month 1"); ?></option>');
                    break;
                case "2 Anni":
                    $('#editWidgetComparePeriod').empty();
                    $('#editWidgetComparePeriod').append('<option value="previous 2 years"><?php echo _("previous 2 years"); ?></option>');
                    break;
                case "10 Anni":
                    $('#editWidgetComparePeriod').empty();
                    $('#editWidgetComparePeriod').append('<option value="previous 10 years"><?php echo _("previous 10 years"); ?></option>');
                    break;
            }
        });
        
        function selectTheme(theme){
            console.log('theme',theme);
            if ((theme !=='legacy')||(theme !=='Legacy')){
            var themeimage = '../css/themes/'+theme+'/preview.png';
            $('#scrSelectThemeImageContent').css("background-image", "url('" + themeimage + "')");
            $('#curr_theme').text(theme);
        }else{
            var themeimage = '../css/themes/placeholder.jpg';
            $('#scrSelectThemeImageContent').css("background-image", "url('" + themeimage + "')");
            $('#curr_theme').text('Legacy');
        }
        }
        
        $('#scrSelectThemeBtn').click(function () {
            var dashboardIdUnderEdit = $('#dashboardIdUnderEdit').val();
            var selectedTheme = $('#curr_theme').text();
            
            $.ajax({
                        url: "get_data.php",
                        data: {
                            action: "modifyThemeList",
                            dashboardIdUnderEdit: dashboardIdUnderEdit,
                            selectedTheme: selectedTheme
                        },
                        type: "GET",
                        async: true,
                        dataType: 'json',
                        success: function(data){
                            //alert('Theme successfully modified');
                            location.reload();
                        },
                        error: function(errorData){
                            console.log("Error retrieving personal inputs");
                            console.log(JSON.stringify(errorData));
                        }
                    });
            
        });
        </script>	
    </body>
</html>

