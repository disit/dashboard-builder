<?php
/* Dashboard Builder.
   Copyright (C) 2018 DISIT Lab https://www.disit.org - University of Florence

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License as
   published by the Free Software Foundation, either version 3 of the
   License, or (at your option) any later version.
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.
   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>. */
include('../config.php');
header("Cache-Control: private, max-age=$cacheControlMaxAge");
if (!isset($_SESSION)) {
    session_start();
    session_write_close();
}
?>

<style type="text/css">
    .left {
        float: left;
    }

    .right {
        float: right;
    }

    .switch {
        position: relative;
        width: 80px;
        height: 15px;
        float: right;
    }

    .switch input {
        display: none;
    }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: -4px;
        background-color: #DBDBDB;
        -webkit-transition: .4s;
        transition: .4s;
    }

    .slider:before {
        position: absolute;
        content: "";
        height: 14px;
        width: 14px;
        left: 3px;
        bottom: 3px;
        background-color: white;
        -webkit-transition: .4s;
        transition: .4s;
    }

    input:checked+.slider {
        background-color: #86C5F9;
    }

    input:focus+.slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked+.slider:before {
        -webkit-transform: translateX(62px);
        -ms-transform: translateX(62px);
        transform: translateX(62px);
    }

    /*------ ADDED CSS ---------*/
    .animationOn {
        display: none;
    }

    .animationOn,
    .animationOff {
        color: white;
        position: absolute;
        transform: translate(-50%, -50%);
        top: 50%;
        left: 50%;
        font-size: 11px;
        font-family: Verdana, sans-serif;
    }

    input:checked+.slider .on {
        display: block;
    }

    input:checked+.slider .off {
        display: none;
    }

    /*--------- END --------*/

    /* Rounded sliders */
    .slider.round {
        border-radius: 28px;
    }

    .slider.round:before {
        border-radius: 50%;
    }
</style>

<!-- Bring in the leaflet KML plugin -->
<script src="../widgets/layers/KML.js"></script>

<!-- Adreani deckgl -->
<!-- <script src="../widgets/layers/deckgl.min.js"></script> -->
<script src="../widgets/layers/snap4deck-test.min.js"></script>
<!-- <script src="https://unpkg.com/deck.gl@latest/dist.min.js"></script> -->
<script src="../widgets/layers/gif-frames.js"></script>
<script src="../widgets/layers/webgl-utils.js"></script>
<script src="../widgets/layers/m4.js"></script>

<!-- Cristiano: Dynamic Routing -->
<link rel="stylesheet" href="../css/dynamic_routing/dynamic_routing.css" />
<!-- end Cristiano -->

<script type="text/javascript" src="../js/heatmap/heatmap.js"></script>
<script type="text/javascript" src="../js/heatmap/leaflet-heatmap.js"></script>
<script src="../leaflet-bubble/dist/leaflet-bubble.js"></script>

<script src="../trafficRTDetails/js/leaflet.awesome-markers.min.js"></script>
<script src="../trafficRTDetails/js/jquery.dialogextend.js"></script>
<script src="../trafficRTDetails/js/leaflet-gps.js"></script>
<script src="../trafficRTDetails/js/wicket.js"></script>
<script src="../trafficRTDetails/js/wicket-leaflet.js"></script>
<script src="../trafficRTDetails/js/date.format.js"></script>
<script src="../trafficRTDetails/js/zoomHandler.js"></script>
<script src="../trafficRTDetails/js/OpenLayers-2.13.1/OpenLayers.js"></script>

<script type="text/javascript" src="../js/date_fns.min.js"></script>
<script type="text/javascript" src="../js/moment-timezone-with-data.js"></script>
<script type="text/javascript" src="../js/moment-with-locales.min.js"></script>

<script type="text/javascript" src="../js/dynamic_routing/leaflet-routing-machine.js"></script>
<link rel="stylesheet" href="../css/dynamic_routing/dynamic_routing.css"/>

<!-- LEAFLET ANIMATOR PLUGIN -->
<!-- <script type="text/javascript" src="../js/leaflet-wms-animator.js"></script> -->

<script type='text/javascript'>
    //Ogni "main" lato client di un widget è semple incluso nel risponditore ad evento ready del documento, così siamo sicuri di operare sulla pagina già caricata
    $(document).ready((firstLoad,
        metricNameFromDriver, widgetTitleFromDriver, widgetHeaderColorFromDriver, widgetHeaderFontColorFromDriver,
        fromGisExternalContent, fromGisExternalContentServiceUri, fromGisExternalContentField,
        fromGisExternalContentRange, /*randomSingleGeoJsonIndex,*/ fromGisMarker, fromGisMapRef, fromGisFakeId) => {
        <?php
        $titlePatterns = array();
        $titlePatterns[0] = '/_/';
        $titlePatterns[1] = '/\'/';
        $replacements = array();
        $replacements[0] = ' ';
        $replacements[1] = '&apos;';
        $title = $_REQUEST['title_w'];
        $link = mysqli_connect($host, $username, $password);
        if (checkWidgetNameInDashboard($link, $_REQUEST['name_w'], $_REQUEST['id_dashboard']) === false) {
            eventLog("Returned the following ERROR in widgetMap.php for the widget " . escapeForHTML($_REQUEST['name_w']) . " is not instantiated or allowed in this dashboard.");
            exit();
        }

        $genFileContent = parse_ini_file("../conf/environment.ini");
        $wsServerContent = parse_ini_file("../conf/webSocketServer.ini");
        $env = $genFileContent['environment']['value'];
        $wsServerAddress = $wsServerContent["wsServerAddressWidgets"][$env];
        $wsServerPort = $wsServerContent["wsServerPort"][$env];
        $wsPath = $wsServerContent["wsServerPath"][$env];
        $wsProtocol = $wsServerContent["wsServerProtocol"][$env];
        $wsRetryActive = $wsServerContent["wsServerRetryActive"][$env];
        $wsRetryTime = $wsServerContent["wsServerRetryTime"][$env];
        $useActuatorWS = $wsServerContent["wsServerActuator"][$env];
        $roofedBuildingsPaths = scandir("../widgets/layers/edificato/roofBuildings");
        ?>

        const version = '1.13.2';
        const channel = 'beta 1';

        /** @type {MapManager} */
        var mapManger;
        /** @type {EventMapManager} */
        var eventMapManager;

        var fullscreenOn = false;
        var buildingRemoved = new Map();

        var headerHeight = 25;
        var hostFile = "<?= escapeForJS($_REQUEST['hostFile']) ?>";
        var widgetName = "<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>";
        var mapOptionsDivName = widgetName + "_mapOptions";
        var widgetContentColor = "<?= escapeForJS($_REQUEST['color_w']) ?>";
        var fontSize = "<?= escapeForJS($_REQUEST['fontSize']) ?>";
        var fontColor = "<?= escapeForJS($_REQUEST['fontColor']) ?>";
        var embedWidget = <?= $_REQUEST['embedWidget'] == 'true' ? 'true' : 'false' ?>;
        var embedWidgetPolicy = '<?= escapeForJS($_REQUEST['embedWidgetPolicy']) ?>';
        var showTitle = "<?= escapeForJS($_REQUEST['showTitle']) ?>";
        var showHeader = null;
        var hasTimer = "<?= escapeForJS($_REQUEST['hasTimer']) ?>";
        var styleParameters, metricName, udm, udmPos, appId, flowId, nodeId, nrMetricType,
            sm_field, sizeRowsWidget, sm_based, rowParameters, fontSize, countdownRef, widgetTitle,
            widgetHeaderColor,
            widgetHeaderFontColor, showHeader, widgetParameters, chartColor, dataLabelsFontSize,
            dataLabelsFontColor,
            chartLabelsFontSize, chartLabelsFontColor, titleWidth, enableFullscreenModal,
            enableFullscreenTab, shownPolyGroup, geoServerUrl, heatmapUrl = null;
        var eventsOnMap = [];
        var addMode = null;
        heatmapMetricName = "";
        heatmapRange = [];
        prevZoom = null;

        //Variabili per il selector
        var gisLayersOnMap = {};
        var gisGeometryLayersOnMap = {};
        var stopGeometryAjax = {};
        var gisGeometryTankForFullscreen = {};
        var checkTankInterval = null;
        var markersCache = {};
        var myPOIId, myPOIlat, myPOIlng = ""; // MyPOI Mod

        //Variabili multi-mappa
        var map = {};
        var baseQuery = null;

        var current_radius = null;
        var current_opacity = null;
        var current_traffic_opacity = null;
        var changeRadiusOnZoom = false;
        var estimatedRadius = null;
        var estimateRadiusFlag = false;
        var fullscreenHeatmap = null;
        var fullscreenHeatmapFirstInstantiation = false;
        var fullscreenHeatmapFirstInst = true;
        var heatmapLegendColorsFullscreen = null;
        var legendHeatmapFullscreen = null;
        var mapName = null;
        var trafficMapName = null;
        var mapDate = null;
        var trafficMapDate = null;
        var resetPageFlag = null;
        var wmsDatasetName = null;
        var passedParams = null;
        var animationFlag = false;
        var animationFlagTraffic = false;
        var trafficData = null;

        var dataForApi = "";

        var daysArray = [];
        var userTimeOffset = new Date().getTimezoneOffset();
        var snap4CityServerTime = new Date().toLocaleString("it-IT", {
            timeZone: "Europe/Rome"
        });
        var usaTime = new Date(usaTime);
        var snap4CityServerTimeOffset = "";
        var countSvgCnt = 0;
        var totalSvgCnt = 0;
        var currentCustomSvgLayer = null;
        var svgContainerArray = [];
        var oms = {} // OverlappingMarkerSpiderfier for Leaflet

        const mapMenuId = 'deck-map-menu';
        const lightMenuId = 'light-dropdown';

        // Variabili deckgl
        var deck = snap4deck.deck;
        var loaders = snap4deck.loaders;
        var is3dOn = true;
        var lightsOn = false;
        var effects = [];
        var skyOn = true;
        var shadowsOn = false;
        var map3d;
        var map3dGL;
        var animationOn = false;
        var gifWms = {
            isAnimated: false,
            frames: [],
            currentFrame: 0,
            type: "heatmap",
            opacity: 0.25,
        };
        var debugOutput = false;
        var firstPerson = false;
        var densityTable;
        var autoreloadFeatures = false;
        var terrainOn = false;
        var elevationUrl;
        var tileUrls = [];
        var elevations = [];
        var elevationDecoder = {
            rScaler: 256 * 256 * 0.1,
            gScaler: 256 * 0.1,
            bScaler: 0.1,
            offset: (-10000 - 47.79),
        };
        // const elevationOffset = 0;
        const elevationOffset = 47.79;
        const googleElevationOffset = 90;
        const oldElevationDecoder = {
            rScaler: 7.97 / 3,
            gScaler: 7.97 / 3,
            bScaler: 7.97 / 3,
            // offset di 47.79
            offset: -50.97
            // original
            // offset: -3.18
        };
        var sky;
        var popupCoord = [];
        var gifWmsTraffic = {
            isAnimated: false,
            frames: [],
            currentFrame: 0,
            type: "traffic",
            opacity: 1,
        };
        var wmsBlurred = false;
        var cursorType = 'grab';
        var justClicked = false;
        var manuallyControlled = false;
        var buildingColor = [255, 102, 0, 255];
        var listGridInfo = {};
        const buildingMappingColor = {
            "Default": [255, 102, 0, 255],
            "Cult": [255, 255, 255],
            "Culture": [0, 255, 0],
            "PublicService": [0, 0, 255],
            "Shopping": [0, 255, 255],
            "Station": [255, 0, 255],
            "University": [255, 110, 243],
            "HealthCare": [181, 0, 0],
            "School": [110, 255, 156],
            "Bank": [92, 92, 92],
        }
        var currentViewState;
        var lastHoveredObject;
        var layers = {
            background: null,
            terrain: null,
            google: null,
            orthomaps: null,
            wms: null,
            trafficWms: null,
            roads: null,
            cycling: [],
            bus: null,
            building: null,
            modifiedBuildings: [],
            dynamicBuildings: [],
            hiddenBuilding: null,
            hoverBuilding: null,
            vehicle: [],
            buslines: [],
            whatif: [],
            selection: null,
            tree: null,
            fixedPins: [],
            mockIcon: [],
            traffic: [],
            crest: null,
            pin: [],
        };
        var allSegments = [];
        let fullscreenParams = {
            fullLastTopPad: 0,
            controlLastTop: 0,
            controlLastHeight: 0,
        };
        var settingOptions = {
            maxTiles: {
                text: "Max number of tiles",
                type: "Number",
                default: 15,
                value: 15,
                min: 1,
                max: 10000,
            },
            minTileZoom: {
                text: "Min 3D zoom",
                type: "Number",
                default: 16,
                value: 16,
                min: 1,
                max: 20,
            },
            animationEnabled: {
                text: "Traffic Animation Enabled",
                type: "bool",
                default: true,
                value: true,
            },
            arrowSize: {
                text: "Arrow size(m)",
                type: "Number",
                default: 20,
                value: 20,
                min: 1,
                max: 1000,
            },
            maxCrestHeight: {
                text: "Height crest layer(m)",
                type: "Number",
                default: 40,
                value: 40,
                min: 1,
                max: 1000,
            },
            roadsKB: {
                text: "Display road information",
                type: "bool",
                default: false,
                value: false,
            },
            displayDecorations: {
                text: "Display decorations",
                type: "bool",
                default: true,
                value: true,
            },
            realisticDecoration: {
                text: "Realistic decorations",
                type: "bool",
                default: false,
                value: false,
            },
        };
        var buildingSelected = null;
        var deltaTimestamp = 0;
        var apiUrls3D = {};
        var updateTimeout;
        var eventsGenerated = {};
        var deckMode = 'movement';
        var animationEnabled = true;
        var animationTime = 0;
        var preventClickEvent = false;
        var whatifOn = false;
        var lastWhatifCoord;
        var whatifRoutingStart;
        var whatifRoutingEnd;
        var whatifScenarioData;
        var whatifVehicle;
        var serviceUrl, orgParams = null;

        var supportedOrthomap = {};
        var supportedBuildingSelected;
        const supportedBuildings = {
            none: {
                displayedName: 'No Buildings',
                id: 'menu-no-building',
                action: () => {}
            },
            google: {
                displayedName: 'Google Tile',
                id: 'menu-google-tile',
                action: () => {
                    layers.google = createGoogleLayer();
                    layers.terrain = createMultiElevationTerrain({
                        operation: 'terrain',
                    });
                    layers.building = new deck.GeoJsonLayer({
                        id: 'geojson-layer',
                        data: '../widgets/layers/edificato/osm-buildings.geojson',
                        pickable: deckMode === 'selection',
                        stroked: false,
                        filled: true,
                        extruded: true,
                        pointType: 'circle',
                        autoHighlight: deckMode === 'selection',
                        lineWidthScale: 20,
                        lineWidthMinPixels: 2,
                        getFillColor: [160, 160, 180, 0],
                        highlightColor: [222, 218, 7, 200],
                        getPointRadius: 100,
                        getLineWidth: 1,
                        getElevation: d => d.properties.heightmean / 2 + googleElevationOffset - 8,
                        updateTriggers: {
                            pickable: {a: deckMode},
                            autoHighlight: deckMode,
                        }
                    });
                }
            },
            grid_building_tiled: {
                displayedName: 'Building New Tiled',
                id: 'menu-grid-building-tiled',
                action: () => {
                    layers.building = new snap4deck.BuildingFusionTileLayer({
                        id: 'building-fusion-tile-layer',
                        // data: '../widgets/layers/edificato/grid_tiled/16/{x}/{y}/models.json',
                        data: '<?= $dekMainUrl; ?>/widgets/layers/edificato/grid_tiled/16/{x}/{y}/models.json',
                        includedTiles: listGridInfo,
                        maxRequest: 18,
                        pickable: true,
                        minTileZoom: settingOptions.minTileZoom.value,
                        maxTiles: settingOptions.maxTiles.value,
                        updateTriggers: {
                            minTileZoom: settingOptions.minTileZoom.value,
                            maxTiles: settingOptions.maxTiles.value,
                        },
                        updatingTileNumber: (loadedTiles, loadedTiles16, loadedBuildings, visibleTiles, visibleTiles16, visibleBuildings) => {
                            if (debugOutput)
                                $('#tiles').html(`
                                    Tile Loaded: ${loadedTiles} </br>
                                    Tile Loaded (z = 16): ${loadedTiles16} </br>
                                    Building Loaded: ${loadedBuildings} </br>
                                    Tile Displayed: ${visibleTiles} </br>
                                    Tile Displayed: (z = 16): ${visibleTiles16} </br>
                                    Building Displayed: ${visibleBuildings} </br>
                                `);
                            else 
                                $('#tiles').html(`
                                    Building Displayed: ${visibleBuildings} </br>
                                `);

                        },
                        onClick: (info, event) => {
                            if (deckMode !== "selection")
                                return;

                            const [lng, lat] = info.coordinate;
                            const x = lon2tile(lng, 16);
                            const y = lat2tile(lat, 16);
                            const key = `${x}-${y}-${16}`;
                            var data;
                            for (let c of info.tile.content)
                                if (c.key === key)
                                    data = c;
                            if (!data)
                                return;
                            var indexRemoved = []
                            if (buildingRemoved.has(key))
                                indexRemoved = buildingRemoved.get(key);

                            var indexDiff = 0;
                            for (let i of indexRemoved) {
                                if (info.index < i)
                                    break;
                                indexDiff += 1;
                            }

                            const scenegraph = info.layer.state.scenegraphs.get(key);
                            const children = scenegraph.children[0].children[info.index - indexDiff];
                            if (!children)
                                return;
                            const idFounded = children.id;

                            var buildingFound;
                            for (let d of data.buildings) {
                                if (`model_${d.ID}` === idFounded) {
                                    buildingFound = d;
                                    break
                                }
                            }
                            if (!buildingFound)
                                return;

                            console.log(buildingFound);
                            if (buildingSelected) {
                                buildingSelected.children.traverse((model) => model.setAttributes({aPicked: [0]}))
                                buildingSelected.picked = false;
                            }

                            buildingSelected = buildingFound;
                            buildingSelected.picked = true;
                            buildingSelected.children = children;
                            children.traverse((model) => model.setAttributes({aPicked: [1]}))
                            info.tile.layers[0].setNeedsRedraw();
                            showInfoBuilding(buildingSelected, info.tile.layers[0], scenegraph, key, info.index);
                        },

                    });
                },
            },
            extruded: {
                displayedName: 'Extruded Buildings',
                id: 'menu-extruded-building',
                action: () => {
                    // loadLightBuildings();
                    loadAggregatedBuildings();
                },
            },
            // glb: {
            //     displayedName: 'Meshed GLB Buildings',
            //     id: 'menu-glb-building',
            //     action: () => {
            //         loadHighResBuildingsGLB();
            //     }
            // },
            // gltf: {
            //     displayedName: 'Meshed GLTF Buildings',
            //     id: 'menu-gltf-building',
            //     action: () => {
            //         loadHighResBuildingsGltf();
            //     },
            // },
            // splitted: {
            //     displayedName: 'Meshed GLB Splitted',
            //     id: 'menu-glb-splitted-building',
            //     action: () => {
            //         loadHighResBuildingsCutted();
            //         loadHighValueBuildings();
            //     },
            // },
            // no_text: {
            //     displayedName: 'Meshed Not Textured',
            //     id: 'menu-no-text-building',
            //     action: () => {
            //         loadNotTexturedBuildings();
            //     },
            // },
            // elevated: {
            //     displayedName: 'Meshed with San Giorgio',
            //     id: 'menu-combo-building',
            //     action: () => {
            //         loadElevatedBuildings();
            //         loadHighResElevatedBuildingsGLB();
            //     },
            // },
            // sgiorgio: {
            //     displayedName: 'San Giorgio',
            //     id: 'menu-sgiorgio-building',
            //     action: () => {
            //         loadElevatedBuildings();
            //     },
            // },
            // test_meta: {
            //     displayedName: 'Test Meta Building',
            //     id: 'menu-meta-building',
            //     action: () => {
            //         loadMetaBuildings();
            //     },
            // },
            // grid_high_res: {
            //     displayedName: 'Roof + Pattern (high resolution)',
            //     id: 'menu-high-res-grid-building',
            //     action: () => {
            //         loadHighResGridSystemBuildings();
            //     },
            // },
            // grid_low_res: {
            //     displayedName: 'Roof + Pattern (low resolution)',
            //     id: 'menu-low-res-grid-building',
            //     action: () => {
            //         loadLowResGridSystemBuildings();
            //     },
            // },
        }

        const riccardoBuildingsProp = {
            position: [11.2501685710125, 43.7720562843695],
            getOrientation: [0, 0, 90],
            getScale: [0.722, 1, 0.722],
        };

        const marcoBuildingsProp = {
            position: [11.255241284985537, 43.765521723567616, -46.79],
            getOrientation: [0, 0, 0],
            getScale: [0.722, 0.722, 1],
        }

        const gridBuildingsProp = {
            position: [11.249009513574402, 43.7736035620886, -46.79],
            getOrientation: [0, 0, 0],
            getScale: [0.722, 0.722, 1],
        }

        console.log("entrato in widget3DMapDeckTest. WidgetName = " + widgetName);
        console.log(`Widget3DMapDeck loaded\n↳Version: ${version}, Channel: ${channel}`);

        var current_page = 0;
        var current_page_traffic = 0;
        var records_per_page = 1;
        var wmsLayer = null;
        var trafficWmsLayer = null;
        var wmsLayerFullscreen = null;
        var iconsFileBuffer = [];
        var bubbleSelectedMetric = [];
        var bubbles = [];
        var defaultOrthomapMenuItem = null;
        if (Window.webSockets == undefined)
            Window.webSockets = {};
        var nodeRedInputName, nrInputId, currentValue, lastValueOk = null;
        var heatmapClick = null;
        var iconTextMod = "null";
        var keycloak, socket = null;
        var subscribeFlag, tryingAuth, srvFailure = false;
        var refreshToken = "<?= $_SESSION['refreshToken'] ?>";
        var payload = [];
        var subscribedWsDevices = [];
        var wsConnect = null;
        var heatmapData = null;
        var agencyIcons = {};
        var spiderMarkers = {}

        //Definizioni di funzione
        function triggerEventOnIotApp(map, message) {
            var data = {
                "msgType": "SendToEmitter",
                "widgetUniqueName": widgetName,
                "value": message,
                "inputName": nodeRedInputName,
                //   "dashboardId": <? $_REQUEST['id_dashboard'] ?>,
                "username": $('#authForm #hiddenUsername').val(),
                "nrInputId": nrInputId
            };
            var webSocket = Window.webSockets[widgetName];
            webSocket.ackReceived = false;
            webSocket.onAck = function(data) {
                console.log(widgetName + " SUCCESS ackReceived:" + webSocket.ackReceived)
                requestComplete = true;
                //    clearInterval(setUpdatingMsgInterval);
                switch (data.result) {
                    case "insertQueryKo":
                        //    showUpdateResult("DB KO");
                        console.log("DB KO on Insert");
                        break;

                    case "updateBlockKo":
                        //    showUpdateResult("Device KO");
                        console.log("Device KO");
                        break;

                    case "updateBlockAndUpdateQueryKo":
                        //    showUpdateResult("DB and device KO");
                        console.log("DB and device KO");
                        break;

                    case "updateQueryKo":
                        //    showUpdateResult("DB KO");
                        console.log("DB KO on Update");
                        break;

                    case "Ok":
                        //    showUpdateResult("Device OK");
                        console.log("Device OK");
                        break;
                }
            }
            console.log(widgetName + " SEND ackReceived:" + webSocket.ackReceived)
            if (webSocket.readyState == webSocket.OPEN) {
                webSocket.send(JSON.stringify(data));
                webSocket.timeout = setTimeout(function() {
                    if (!webSocket.ackReceived) {
                        console.log(widgetName + " ERR1 ackReceived:" + webSocket.ackReceived)
                        requestComplete = true;
                        //   clearInterval(setUpdatingMsgInterval);
                        //   showUpdateResult("API KO");
                        console.log("Update value KO");
                    }
                }, 60000)
            } else {
                console.log(widgetName + " ERR1 socket not OPEN");
                requestComplete = true;
                //    clearInterval(setUpdatingMsgInterval);
                //    showUpdateResult("API KO");
                console.log("Update value KO");
            }
        }

        // TODO: go to 2D map
        function onEachFeatureSpiderify(feature, layer) {
            oms.addMarker(layer);
        }

        // TODO: need to separate
        //Funzione di associazione delle icone alle feature e preparazione popup per la mappa GIS
        function gisPrepareCustomMarker(feature, latlng) {
            feature.prepared = true;
            if (feature.properties.altViewMode == "CustomPin" || feature.properties.altViewMode ==
                "DynamicCustomPin") {
                //   if (feature.properties.serviceType == "GovernmentOffice_Civil_registry") {
                if (wsConnect != null && altViewMode == "DynamicCustomPin") {
                    // Subscribe device to new WS
                    var updateResponse = subscribeWsDevice(feature.properties.serviceUri, bubbleSelectedMetric[
                        currentCustomSvgLayer], currentCustomSvgLayer, feature.properties.isMobile);
                }
                countSvgCnt++;
                let svgContainer = null;
                let tplPath = feature.properties.iconFilePath;
                svgContainer = $('<div id="' + widgetName + '_svgCtn' + countSvgCnt + '">');
                $("#" + widgetName).append(svgContainer);
                buildSvgIcon(tplPath, feature.properties.lastValue[bubbleSelectedMetric[currentCustomSvgLayer]],
                    'error', null, svgContainer, widgetName, "map", countSvgCnt, totalSvgCnt,
                    currentCustomSvgLayer, svgContainerArray, false);
            }
            if (feature.properties.pinattr != "pin" && feature.properties.altViewMode != "CustomPin" && feature
                .properties.altViewMode != "DynamicCustomPin") {
                var mapPinImg = '../img/gisMapIcons/' + feature.properties.serviceType + '.png';
                if ("TransferServiceAndRenting_BusStop" == feature.properties.serviceType) {
                    if (feature.properties.hasOwnProperty("busStopCategory")) {
                        mapPinImg = '../img/gisMapIcons/' + feature.properties.busStopCategory + '.png';
                    } else {
                        if (feature.properties.agency.includes("ATAF") || feature.properties.agency.includes(
                                "GEST")) {
                            mapPinImg = '../img/gisMapIcons/' + feature.properties.serviceType + '_Urban.png'
                        } else {
                            mapPinImg = '../img/gisMapIcons/' + feature.properties.serviceType + '_Suburban.png'
                        }
                    }
                }
                if (is3dOn) {
                    feature.hover = false;
                    feature.iconPath = mapPinImg;
                    feature.iconWidth = 32;
                    feature.iconHeight = 37;
                    feature.iconAnchorY = 37;
                    feature.iconAnchorX = 0;
                }
                var markerIcon = markerIcon = L.icon({
                    iconUrl: mapPinImg,
                    iconAnchor: [16, 37]
                });
            } else {

                /*   var markerIcon = L.divIcon({
                       className: 'custom-div-icon',
                       html: '<div class="pinContainer" style="position: relative; width:32px; height: 32px;">\n' +
                           '\t<svg id="gocciaSvg" class="dropMarker" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" width="32px" height="32px" version="1.1" style="shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd" viewBox="0 0 6500 6500" style="position: absolute; top: 0; left: 0; width: 48px; height: 48px;">\n' +
                           '\t <g id="Layer_goccia2">\n' +
                           '\t  <path id="goccia_path" class="fil0" d="M3164 61l167 0c307,11 612,82 876,212 64,31 116,58 178,96 270,161 514,383 694,639 407,578 543,1395 283,2052 -21,52 -33,92 -55,144 -21,48 -44,89 -66,133 -42,84 -92,163 -141,245l-1606 2680c-49,82 -83,177 -209,177l-94 -18 -287 -411c-292,-476 -619,-982 -901,-1453 -101,-167 -204,-322 -305,-492 -202,-338 -429,-639 -566,-1004 -114,-302 -127,-534 -127,-857 0,-673 410,-1351 947,-1732 108,-76 212,-138 336,-199 265,-131 569,-201 876,-212z" fill="#2192c3" stroke="#d85b49" stroke-width="3"/>\n' +
                           '\t </g>\n' +
                           '\t</svg>\n' +
                           '\t<img src="../img/widgetSelectorIconsPool/subnature/' + feature.properties.serviceType + '-white.svg" alt="" style="position: absolute; top:1px; left:5px; width: 22px; height: 22px;">\n' +
                           '</div>',
                   //    html: L.Util.template(iconSvgSettings.mapIconUrl),
                    //   iconSize: [30, 42],
                       //iconAnchor: [15, 42]
                       iconAnchor: [16, 37]
                   }); */
                var filePinPath = "../img/outputPngIcons/pin-generico.png";
                if (feature.properties.iconFilePath != null && feature.properties.altViewMode != "CustomPin" &&
                    feature.properties.altViewMode != "DynamicCustomPin") {
                    if (feature.properties.iconFilePath.includes("/nature/")) {
                        filePinPath = feature.properties.iconFilePath.split("/nature/")[1].split(".svg")[0];
                    } else if (feature.properties.iconFilePath.includes("/subnature/")) {
                        filePinPath = feature.properties.iconFilePath.split("/subnature/")[1].split(".svg")[0];
                    } else if (feature.properties.iconFilePath.includes("/hlt/")) {
                        filePinPath = feature.properties.iconFilePath.split("/hlt/")[1].split(".svg")[0];
                    }


                    if (feature.properties.pinattr == "pin" && feature.properties.pincolor == "Default") {
                        var newIconPath = '../img/outputPngIcons/' + filePinPath + '/' + filePinPath +
                            '_default.png';
                    } else {
                        var pinColor = feature.properties.symbolcolor;
                        if (pinColor.includes("#")) {
                            pinColor = pinColor.split("#")[1];
                        }
                        //    var newIconPath = '../img/outputPngIcons/' + feature.properties.serviceType + '/' + feature.properties.serviceType + '_' + pinColor + '_' + widgetName.split("_widget")[1] + '.png';
                        var newIconPath = '../img/outputPngIcons/' + filePinPath + '/' + filePinPath + '_' +
                            pinColor + '.png';

                        if (iconsFileBuffer[newIconPath] == null) {
                            if (!UrlExists(newIconPath)) {
                                iconsFileBuffer[newIconPath] = false;
                                if (!UrlExists('../img/outputPngIcons/' + filePinPath + '/' + filePinPath +
                                        '_default.png')) {
                                    newIconPath = '../img/outputPngIcons/generic/generic_' + pinColor + '.png';
                                    if (!UrlExists(newIconPath)) {
                                        iconsFileBuffer[newIconPath] = false;
                                        newIconPath = '../img/outputPngIcons/pin-generico.png';
                                    } else {
                                        iconsFileBuffer[newIconPath] = true;
                                    }
                                } else {
                                    newIconPath = '../img/outputPngIcons/' + filePinPath + '/' + filePinPath +
                                        '_default.png';
                                    iconsFileBuffer[newIconPath] = true;
                                }
                            } else {
                                iconsFileBuffer[newIconPath] = true;
                            }
                        } else {
                            if (iconsFileBuffer[newIconPath] === false) {
                                if (!UrlExists('../img/outputPngIcons/' + filePinPath + '/' + filePinPath +
                                        '_default.png')) {
                                    if (iconsFileBuffer['../img/outputPngIcons/generic/generic_' + pinColor + '_' +
                                            '.png'] === false) {
                                        newIconPath = '../img/outputPngIcons/pin-generico.png';
                                    } else {
                                        newIconPath = '../img/outputPngIcons/generic/generic_' + pinColor + '.png';
                                    }
                                } else {
                                    newIconPath = '../img/outputPngIcons/' + filePinPath + '/' + filePinPath +
                                        '_default.png';
                                    iconsFileBuffer[newIconPath] = true;
                                }
                            } else {
                                newIconPath = '../img/outputPngIcons/' + filePinPath + '/' + filePinPath + '_' +
                                    pinColor + '.png';
                            }
                        }
                    }
                } else {
                    var newIconPath = '../img/outputPngIcons/pin-generico.png';
                }
                //   iconsFileBuffer.push(newIconPath);

                /*    if (feature.properties.altViewMode == "CustomPin") {
                        let svgContainer = null;
                        let tplPath = feature.properties.iconFilePath;
                        svgContainer = $('<div id="' + widgetName + '_svgCtn' + countSvgCnt + '">');
                        $("#" + widgetName).append(svgContainer);
                        buildSvgIcon(tplPath, feature.properties.lastValue[bubbleSelectedMetric[currentCustomSvgLayer]], 'error', null, svgContainer, widgetName, "map", countSvgCnt, totalSvgCnt, currentCustomSvgLayer, svgContainerArray);

                    }*/

                //   var mapPinImg = '../img/gisMapIconsNew/Accommodation.png';

                if (is3dOn) {
                    feature.hover = false;
                    feature.hoverIconPath = newIconPath;
                    feature.iconWidth = 32;
                    feature.iconHeight = 37;
                    feature.iconAnchorY = 37;
                    feature.iconAnchorX = 0;
                }
                var markerIcon = L.icon({
                    iconUrl: newIconPath,
                    iconAnchor: [16, 37]
                });

            }

            var marker = new L.Marker(latlng, {
                icon: markerIcon
            });

            var latLngKey = latlng.lat + "" + latlng.lng;

            latLngKey = latLngKey.replace(".", "");
            latLngKey = latLngKey.replace(".",
                ""); //Incomprensibile il motivo ma con l'espressione regolare /./g non funziona
            markersCache["" + latLngKey + ""] = marker;


            // loading hovericon for deck gl
            if (feature.properties.altViewMode != "CustomPin" && feature.properties.altViewMode !=
                "DynamicCustomPin") {
                if (feature.properties.pinattr != "pin") {
                    var hoverImg = '../img/gisMapIcons/over/' + feature.properties.serviceType + '_over.png';
                    if ("TransferServiceAndRenting_BusStop" == feature.properties.serviceType) {
                        if (feature.properties.hasOwnProperty("busStopCategory")) {
                            hoverImg = '../img/gisMapIcons/over/' + feature.properties.busStopCategory +
                                '_over.png';
                        } else {
                            if (feature.properties.agency.includes("ATAF") || feature.properties.agency.includes(
                                    "GEST")) {
                                hoverImg = '../img/gisMapIcons/over/' + feature.properties.serviceType +
                                    '_Urban_over.png'
                            } else {
                                hoverImg = '../img/gisMapIcons/over/' + feature.properties.serviceType +
                                    '_Suburban_over.png'
                            }
                        }
                    }
                    feature.hoverIconPath = hoverImg;
                    feature.hoverIconWidth = 32;
                    feature.hoverIconHeight = 37;
                    feature.hoverIconAnchorY = 37;
                    feature.hoverIconAnchorX = 0;
                } else {
                    var filePinPath = "../img/outputPngIcons/pin-generico.png";
                    if (feature.properties.iconFilePath != null) {
                        if (feature.properties.iconFilePath.includes("/nature/")) {
                            filePinPath = feature.properties.iconFilePath.split("/nature/")[1].split(".svg")[0];
                        } else if (feature.properties.iconFilePath.includes("/subnature/")) {
                            filePinPath = feature.properties.iconFilePath.split("/subnature/")[1].split(".svg")[0];
                        } else if (feature.properties.iconFilePath.includes("/hlt/")) {
                            filePinPath = feature.properties.iconFilePath.split("/hlt/")[1].split(".svg")[0];
                        }
                        var newIconOverPath = '../img/outputPngIcons/' + filePinPath + '/' + filePinPath + '-over' +
                            '.png';
                        if (iconsFileBuffer[newIconOverPath] == null) {
                            if (!UrlExists(newIconOverPath)) {
                                iconsFileBuffer[newIconOverPath] = false;
                                newIconOverPath = '../img/outputPngIcons/generic/generic-over' + '.png';
                                if (!UrlExists(newIconOverPath)) {
                                    iconsFileBuffer[newIconOverPath] = false;
                                    newIconOverPath = '../img/outputPngIcons/pin-generico.png';
                                } else {
                                    iconsFileBuffer[newIconOverPath] = true;
                                }
                            } else {
                                iconsFileBuffer[newIconOverPath] = true;
                            }
                        } else {
                            if (iconsFileBuffer[newIconOverPath] === false) {
                                if (iconsFileBuffer['../img/outputPngIcons/generic/generic-over' + '.png'] ===
                                    false) {
                                    newIconOverPath = '../img/outputPngIcons/pin-generico.png';
                                } else {
                                    newIconOverPath = '../img/outputPngIcons/generic/generic-over' + '.png';
                                }
                            } else {
                                newIconOverPath = '../img/outputPngIcons/' + filePinPath + '/' + filePinPath +
                                    '-over' + '.png';
                            }
                        }
                    } else {
                        var newIconOverPath = '../img/outputPngIcons/generic/generic-over' + '.png';
                    }

                    feature.hoverIconPath = hoverImg;
                    feature.hoverIconWidth = 32;
                    feature.hoverIconHeight = 37;
                    feature.hoverIconAnchorY = 37;
                    feature.hoverIconAnchorX = 0;
                }
            }

            marker.on('mouseover', function(event) {
                if (feature.properties.altViewMode != "CustomPin" && feature.properties.altViewMode !=
                    "DynamicCustomPin") {
                    if (feature.properties.pinattr != "pin") {
                        var hoverImg = '../img/gisMapIcons/over/' + feature.properties.serviceType +
                            '_over.png';
                        if ("TransferServiceAndRenting_BusStop" == feature.properties.serviceType) {
                            if (feature.properties.hasOwnProperty("busStopCategory")) {
                                hoverImg = '../img/gisMapIcons/over/' + feature.properties.busStopCategory +
                                    '_over.png';
                            } else {
                                if (feature.properties.agency.includes("ATAF") || feature.properties.agency
                                    .includes("GEST")) {
                                    hoverImg = '../img/gisMapIcons/over/' + feature.properties.serviceType +
                                        '_Urban_over.png'
                                } else {
                                    hoverImg = '../img/gisMapIcons/over/' + feature.properties.serviceType +
                                        '_Suburban_over.png'
                                }
                            }
                        }
                        if (is3dOn) {
                            feature.hoverIconPath = hoverImg;
                            feature.hoverIconWidth = 32;
                            feature.hoverIconHeight = 37;
                            feature.hoverIconAnchorY = 37;
                            feature.hoverIconAnchorX = 0;
                        }
                        var hoverIcon = L.icon({
                            iconUrl: hoverImg
                        });
                        event.target.setIcon(hoverIcon);
                    } else {


                        /*   $(event.target.getElement()).children(0).children(0).children(0).find('path').attr("fill", "white");
                           $(event.target.getElement()).children(0).children(0)[1].outerHTML = '<img src="../img/widgetSelectorIconsPool/subnature/' + feature.properties.serviceType + '.svg" alt="" style="position: absolute; top:1px; left:5px; width: 22px; height: 22px;">';  */

                        /*   $(event.target.getElement()).find('path').attr("fill", "white");
                           $(event.target.getElement()).find('img')[0].outerHTML = '<img src="../img/widgetSelectorIconsPool/subnature/' + feature.properties.serviceType + '.svg" alt="" style="position: absolute; top:1px; left:5px; width: 22px; height: 22px;">';
                        */

                        //    var hoverImg = '../img/gisMapIcons/over/' + feature.properties.serviceType + '_over.png';
                        var filePinPath = "../img/outputPngIcons/pin-generico.png";
                        if (feature.properties.iconFilePath != null) {
                            if (feature.properties.iconFilePath.includes("/nature/")) {
                                filePinPath = feature.properties.iconFilePath.split("/nature/")[1].split(
                                    ".svg")[0];
                            } else if (feature.properties.iconFilePath.includes("/subnature/")) {
                                filePinPath = feature.properties.iconFilePath.split("/subnature/")[1].split(
                                    ".svg")[0];
                            } else if (feature.properties.iconFilePath.includes("/hlt/")) {
                                filePinPath = feature.properties.iconFilePath.split("/hlt/")[1].split(
                                    ".svg")[0];
                            }
                            var newIconOverPath = '../img/outputPngIcons/' + filePinPath + '/' +
                                filePinPath + '-over' + '.png';

                            /*    if (!UrlExists(newIconOverPath)) {
                                    newIconOverPath = '../img/outputPngIcons/generic/generic-over' + '_' + widgetName.split("_widget")[1] + '.png';
                                    if (!UrlExists(newIconOverPath)) {
                                        newIconOverPath = '../img/outputPngIcons/pin-generico.png';
                                    }
                                }*/

                            if (iconsFileBuffer[newIconOverPath] == null) {
                                if (!UrlExists(newIconOverPath)) {
                                    iconsFileBuffer[newIconOverPath] = false;
                                    newIconOverPath = '../img/outputPngIcons/generic/generic-over' + '.png';
                                    if (!UrlExists(newIconOverPath)) {
                                        iconsFileBuffer[newIconOverPath] = false;
                                        newIconOverPath = '../img/outputPngIcons/pin-generico.png';
                                    } else {
                                        iconsFileBuffer[newIconOverPath] = true;
                                    }
                                } else {
                                    iconsFileBuffer[newIconOverPath] = true;
                                }
                            } else {
                                if (iconsFileBuffer[newIconOverPath] === false) {
                                    if (iconsFileBuffer['../img/outputPngIcons/generic/generic-over' +
                                            '.png'] === false) {
                                        newIconOverPath = '../img/outputPngIcons/pin-generico.png';
                                    } else {
                                        newIconOverPath = '../img/outputPngIcons/generic/generic-over' +
                                            '.png';
                                    }
                                } else {
                                    newIconOverPath = '../img/outputPngIcons/' + filePinPath + '/' +
                                        filePinPath + '-over' + '.png';
                                }
                            }
                        } else {
                            var newIconOverPath = '../img/outputPngIcons/generic/generic-over' + '.png';
                        }

                        if (is3dOn) {
                            feature.hoverIconPath = hoverImg;
                            feature.hoverIconWidth = 32;
                            feature.hoverIconHeight = 37;
                            feature.hoverIconAnchorY = 37;
                            feature.hoverIconAnchorX = 0;
                        }

                        var hoverIcon = L.icon({
                            iconUrl: newIconOverPath,
                            iconAnchor: [16, 37]
                        });
                        event.target.setIcon(hoverIcon);

                    }
                    //    console.log("Mouse Over");
                }
            });

            marker.on('mouseout', function(event) {
                if (feature.properties.altViewMode != "CustomPin" && feature.properties.altViewMode !=
                    "DynamicCustomPin") {
                    if (feature.properties.pinattr != "pin") {
                        var outImg = '../img/gisMapIcons/' + feature.properties.serviceType + '.png';
                        if ("TransferServiceAndRenting_BusStop" == feature.properties.serviceType) {
                            if (feature.properties.hasOwnProperty("busStopCategory")) {
                                outImg = '../img/gisMapIcons/' + feature.properties.busStopCategory +
                                    '.png';
                            } else {
                                if (feature.properties.agency.includes("ATAF") || feature.properties.agency
                                    .includes("GEST")) {
                                    outImg = '../img/gisMapIcons/' + feature.properties.serviceType +
                                        '_Urban.png'
                                } else {
                                    outImg = '../img/gisMapIcons/' + feature.properties.serviceType +
                                        '_Suburban.png'
                                }
                            }
                        }
                        var outIcon = L.icon({
                            iconUrl: outImg
                        });
                        event.target.setIcon(outIcon);
                    } else {

                        var pinColor = feature.properties.symbolcolor;
                        if (pinColor.includes("#")) {
                            pinColor = pinColor.split("#")[1];
                        }

                        var filePinPath = "../img/outputPngIcons/pin-generico.png";
                        if (feature.properties.iconFilePath != null) {
                            if (feature.properties.iconFilePath.includes("/nature/")) {
                                filePinPath = feature.properties.iconFilePath.split("/nature/")[1].split(
                                    ".svg")[0];
                            } else if (feature.properties.iconFilePath.includes("/subnature/")) {
                                filePinPath = feature.properties.iconFilePath.split("/subnature/")[1].split(
                                    ".svg")[0];
                            } else if (feature.properties.iconFilePath.includes("/hlt/")) {
                                filePinPath = feature.properties.iconFilePath.split("/hlt/")[1].split(
                                    ".svg")[0];
                            }

                            if (feature.properties.pinattr == "pin" && feature.properties.pincolor ==
                                "Default") {
                                var newIconOutPath = '../img/outputPngIcons/' + filePinPath + '/' +
                                    filePinPath + '_default.png';
                            } else {
                                var newIconOutPath = '../img/outputPngIcons/' + filePinPath + '/' +
                                    filePinPath + '_' + pinColor + '.png';

                                if (iconsFileBuffer[newIconOutPath] == null) {
                                    if (!UrlExists(newIconOutPath)) {
                                        iconsFileBuffer[newIconOutPath] = false;
                                        if (!UrlExists('../img/outputPngIcons/' + filePinPath + '/' +
                                                filePinPath + '_default.png')) {
                                            newIconOutPath = '../img/outputPngIcons/generic/generic_' +
                                                pinColor + '.png';
                                            if (!UrlExists(newIconOutPath)) {
                                                iconsFileBuffer[newIconOutPath] = false;
                                                newIconOutPath = '../img/outputPngIcons/pin-generico.png';
                                            } else {
                                                iconsFileBuffer[newIconOutPath] = true;
                                            }
                                        } else {
                                            newIconOutPath = '../img/outputPngIcons/' + filePinPath + '/' +
                                                filePinPath + '_default.png';
                                            iconsFileBuffer[newIconOutPath] = true;
                                        }
                                    } else {
                                        iconsFileBuffer[newIconOutPath] = true;
                                    }
                                } else {
                                    if (iconsFileBuffer[newIconOutPath] === false) {
                                        if (!UrlExists('../img/outputPngIcons/' + filePinPath + '/' +
                                                filePinPath + '_default.png')) {
                                            if (iconsFileBuffer['../img/outputPngIcons/generic/generic_' +
                                                    pinColor + '.png'] === false) {
                                                newIconOutPath = '../img/outputPngIcons/pin-generico.png';
                                            } else {
                                                newIconOutPath = '../img/outputPngIcons/generic/generic_' +
                                                    pinColor + '.png';
                                            }
                                        } else {
                                            newIconOutPath = '../img/outputPngIcons/' + filePinPath + '/' +
                                                filePinPath + '_default.png';
                                            iconsFileBuffer[newIconOutPath] = true;
                                        }
                                    } else {
                                        newIconOutPath = '../img/outputPngIcons/' + filePinPath + '/' +
                                            filePinPath + '_' + pinColor + '.png';
                                    }
                                }
                            }
                        } else {
                            var newIconOutPath = '../img/outputPngIcons/pin-generico.png';
                        }

                        var outIcon = L.icon({
                            iconUrl: newIconOutPath
                        });
                        event.target.setIcon(outIcon);

                        //    $(event.target.getElement()).children(0).children(0).children(0).find('path').attr("fill", "#2192c3");
                        //    $(event.target.getElement()).children(0).children(0)[1].outerHTML = '<img src="../img/widgetSelectorIconsPool/subnature/' + feature.properties.serviceType + '-white.svg" alt="" style="position: absolute; top:1px; left:5px; width: 22px; height: 22px;">';

                    }
                }
            });

            marker.on('click', function(event) {
                const info = {
                    object: feature,
                }
                onMarkerClick(event, info);
            });

            return marker;
        }

        function onMarkerClick(event, info) {
            preventClickEvent = true;
            var feature = info.object;
            newpopup = null;
            var popupText, realTimeData, measuredTime, rtDataAgeSec, targetWidgets, color1, color2 = null;
            var urlToCall, fake, fakeId = null;

            if (feature.properties.fake === 'true') {
                urlToCall = "../serviceMapFake.php?getSingleGeoJson=true&singleGeoJsonId=" + feature.id;
                fake = true;
                fakeId = feature.id;
            } else {
                urlToCall = "<?= $superServiceMapProxy; ?>api/v1/?serviceUri=" + encodeServiceUri(feature.properties
                    .serviceUri) + "&format=json&fullCount=false";
                fake = false;
            }

            //var latLngId = event.target.getLatLng().lat + "" + event.target.getLatLng().lng;
            var latLngId = feature.geometry.coordinates[1] + "" + feature.geometry.coordinates[0];
            latLngId = latLngId.replace(".", "");
            latLngId = latLngId.replace(".",
                ""); //Incomprensibile il motivo ma con l'espressione regolare /./g non funziona

            // TBD if(this.feature.properties.kpidata != null) { // MAKE MyKPI / MyPOI API CALL AND VISUALIZATION }

            $.ajax({
                url: urlToCall,
                type: "GET",
                data: {},
                async: false,
                dataType: 'json',
                success: function(geoJsonServiceData) {
                    var fatherNode = null;
                    if (geoJsonServiceData.hasOwnProperty("BusStop")) {
                        fatherNode = geoJsonServiceData.BusStop;
                    } else {
                        if (geoJsonServiceData.hasOwnProperty("Sensor")) {
                            fatherNode = geoJsonServiceData.Sensor;
                        } else {
                            //Prevedi anche la gestione del caso in cui non c'è nessuna di queste tre, sennò il widget rimane appeso.
                            fatherNode = geoJsonServiceData.Service;
                        }
                    }

                    var serviceProperties = fatherNode.features[0].properties;
                    var underscoreIndex = serviceProperties.serviceType.indexOf("_");
                    var serviceClass = serviceProperties.serviceType.substr(0, underscoreIndex);
                    var serviceSubclass = serviceProperties.serviceType.substr(underscoreIndex);
                    serviceSubclass = serviceSubclass.replace(/_/g, " ");

                    // TODO: to 3D UI
                    const popupId = is3dOn ? `#${widgetName}_deck_popup` : `#${widgetName}_map`;

                    fatherNode.features[0].properties.targetWidgets = feature.properties.targets;
                    fatherNode.features[0].properties.color1 = feature.properties.color1;
                    fatherNode.features[0].properties.color2 = feature.properties.color2;
                    targetWidgets = feature.properties.targets;
                    color1 = feature.properties.color1;
                    color2 = feature.properties.color2;

                    //Popup nuovo stile uguali a quelli degli eventi ricreativi
                    popupText =
                        '<div class="draggable-popup"><h3 class="recreativeEventMapTitle" style="margin-top: 0px; background: ' +
                        color1 + '; background: -webkit-linear-gradient(right, ' + color1 + ', ' +
                        color2 + '); background: -o-linear-gradient(right, ' + color1 + ', ' + color2 +
                        '); background: -moz-linear-gradient(right, ' + color1 + ', ' + color2 +
                        '); background: linear-gradient(to right, ' + color1 + ', ' + color2 + ');">' +
                        serviceProperties.name + '</h3>';
                    if ((serviceProperties.serviceUri !== '') && (serviceProperties.serviceUri !==
                            undefined) && (serviceProperties.serviceUri !== 'undefined') && (
                            serviceProperties.serviceUri !== null) && (serviceProperties.serviceUri !==
                            'null')) {
                        popupText += '<div class="recreativeEventMapSubTitle" style="background: ' +
                            color1 + '; background: -webkit-linear-gradient(right, ' + color1 + ', ' +
                            color2 + '); background: -o-linear-gradient(right, ' + color1 + ', ' +
                            color2 + '); background: -moz-linear-gradient(right, ' + color1 + ', ' +
                            color2 + '); background: linear-gradient(to right, ' + color1 + ', ' +
                            color2 + ');">' + "Value Name: " + serviceProperties.serviceUri.split("/")[
                                serviceProperties.serviceUri.split("/").length - 1] + '</div>';
                        //  popupText += '<div class="recreativeEventMapSubTitle">' + "Value Name: " + serviceProperties.serviceUri.split("/")[serviceProperties.serviceUri.split("/").length - 1] + '</div>';
                    }
                    popupText += '</div>';
                    popupText += '<div class="recreativeEventMapBtnContainer"><button data-id="' +
                        latLngId +
                        '" class="recreativeEventMapDetailsBtn recreativeEventMapBtn recreativeEventMapBtnActive" type="button" style="background: ' +
                        color1 + '; background: -webkit-linear-gradient(right, ' + color1 + ', ' +
                        color2 + '); background: -o-linear-gradient(right, ' + color1 + ', ' + color2 +
                        '); background: -moz-linear-gradient(right, ' + color1 + ', ' + color2 +
                        '); background: linear-gradient(to right, ' + color1 + ', ' + color2 +
                        ');">Details</button><button data-id="' + latLngId +
                        '" class="recreativeEventMapDescriptionBtn recreativeEventMapBtn" type="button" style="background: ' +
                        color1 + '; background: -webkit-linear-gradient(right, ' + color1 + ', ' +
                        color2 + '); background: -o-linear-gradient(right, ' + color1 + ', ' + color2 +
                        '); background: -moz-linear-gradient(right, ' + color1 + ', ' + color2 +
                        '); background: linear-gradient(to right, ' + color1 + ', ' + color2 +
                        ');">Description</button><button data-id="' + latLngId +
                        '" class="recreativeEventMapContactsBtn recreativeEventMapBtn" type="button" style="background: ' +
                        color1 + '; background: -webkit-linear-gradient(right, ' + color1 + ', ' +
                        color2 + '); background: -o-linear-gradient(right, ' + color1 + ', ' + color2 +
                        '); background: -moz-linear-gradient(right, ' + color1 + ', ' + color2 +
                        '); background: linear-gradient(to right, ' + color1 + ', ' + color2 +
                        ');">RT data</button>' + (geoJsonServiceData.hasOwnProperty("BusStop") ?
                            '<button data-id="' + latLngId +
                            '" class="recreativeEventMapTplTmtblBtn recreativeEventMapBtn" type="button" style="background: ' +
                            color1 + '; background: -webkit-linear-gradient(right, ' + color1 + ', ' +
                            color2 + '); background: -o-linear-gradient(right, ' + color1 + ', ' +
                            color2 + '); background: -moz-linear-gradient(right, ' + color1 + ', ' +
                            color2 + '); background: linear-gradient(to right, ' + color1 + ', ' +
                            color2 + ');">TIMETABLE</button><button data-id="' + latLngId +
                            '" class="recreativeEventMapTplBtn recreativeEventMapBtn" type="button" style="background: ' +
                            color1 + '; background: -webkit-linear-gradient(right, ' + color1 + ', ' +
                            color2 + '); background: -o-linear-gradient(right, ' + color1 + ', ' +
                            color2 + '); background: -moz-linear-gradient(right, ' + color1 + ', ' +
                            color2 + '); background: linear-gradient(to right, ' + color1 + ', ' +
                            color2 + ');">BROWSE</button>' : '') + '</div>';

                    popupText +=
                        '<div class="recreativeEventMapDataContainer recreativeEventMapDetailsContainer">';

                    popupText += '<table id="' + latLngId + '" class="gisPopupGeneralDataTable">';
                    //Intestazione
                    popupText += '<thead>';
                    popupText += '<th style="background: ' + color2 + '">Description</th>';
                    popupText += '<th style="background: ' + color2 + '">Value</th>';
                    popupText += '</thead>';

                    //Corpo
                    popupText += '<tbody>';

                    for (var featureKey in serviceProperties) {
                        if (serviceProperties.hasOwnProperty(featureKey)) {
                            if (serviceProperties[featureKey] != null && serviceProperties[
                                    featureKey] !== '' && serviceProperties[featureKey] !== ' ' &&
                                featureKey !== 'targetWidgets' && featureKey !== 'color1' &&
                                featureKey !== 'color2' && featureKey !== 'realtimeAttributes') {
                                if (!Array.isArray(serviceProperties[featureKey]) || (Array.isArray(
                                        serviceProperties[featureKey] && serviceProperties[
                                            featureKey].length > 0))) {
                                    popupText += '<tr><td>' + featureKey + '</td><td>' +
                                        serviceProperties[featureKey] + '</td></tr>';
                                }
                            }
                        }
                    }
                    if (metricName != 'Map' && nodeId != null && serviceProperties["serviceUri"] !=
                        null && serviceProperties["serviceUri"] != '') {
                        let eventJson = new Object();
                        eventJson.latitude = feature.geometry.coordinates[1];
                        eventJson.longitude = feature.geometry.coordinates[0];
                        eventJson.serviceUri = serviceProperties["serviceUri"];
                        currentValue = JSON.stringify(eventJson);
                        triggerEventOnIotApp(map.defaultMapRef, currentValue);
                    }

                    popupText += '</tbody>';
                    popupText += '</table>';

                    if (geoJsonServiceData.hasOwnProperty("BusStop")) {
                        popupText +=
                            '<div class="tplProgressBar" style="display:none; width:100%; height:1em; margin-top:1em; background: ' +
                            color1 + '; background: -webkit-linear-gradient(right, ' + color1 + ', ' +
                            color2 + '); background: -o-linear-gradient(right, ' + color1 + ', ' +
                            color2 + '); background: -moz-linear-gradient(right, ' + color1 + ', ' +
                            color2 + '); background: linear-gradient(to right, ' + color1 + ', ' +
                            color2 + ');"></div>';
                    }

                    popupText += '</div>';

                    popupText +=
                        '<div class="recreativeEventMapDataContainer recreativeEventMapDescContainer">';

                    if ((serviceProperties.serviceUri !== '') && (serviceProperties.serviceUri !==
                            undefined) && (serviceProperties.serviceUri !== 'undefined') && (
                            serviceProperties.serviceUri !== null) && (serviceProperties.serviceUri !==
                            'null')) {
                        popupText += "Value Name: " + serviceProperties.serviceUri.split("/")[
                            serviceProperties.serviceUri.split("/").length - 1] + "<br>";
                    }

                    if ((serviceProperties.serviceType !== '') && (serviceProperties.serviceType !==
                            undefined) && (serviceProperties.serviceType !== 'undefined') && (
                            serviceProperties.serviceType !== null) && (serviceProperties
                            .serviceType !== 'null')) {
                        popupText += "Nature: " + serviceProperties.serviceType.split(/_(.+)/)[0] +
                            "<br>";
                        popupText += "Subnature: " + serviceProperties.serviceType.split(/_(.+)/)[1] +
                            "<br><br>";
                    }

                    if (serviceProperties.hasOwnProperty('description')) {
                        if ((serviceProperties.description !== '') && (serviceProperties.description !==
                                undefined) && (serviceProperties.description !== 'undefined') && (
                                serviceProperties.description !== null) && (serviceProperties
                                .description !== 'null')) {
                            popupText += serviceProperties.description + "<br>";
                        } else {
                            popupText += "No description available";
                        }
                    } else {
                        popupText += 'No description available';
                    }

                    popupText += '</div>';

                    popupText +=
                        '<div class="recreativeEventMapDataContainer recreativeEventMapContactsContainer">';

                    var hasRealTime = false;

                    if (geoJsonServiceData.hasOwnProperty("realtime") && !geoJsonServiceData.realtime.hasOwnProperty('error')) {
                        if (!jQuery.isEmptyObject(geoJsonServiceData.realtime)) {
                            realTimeData = geoJsonServiceData.realtime;
                            popupText +=
                                '<div class="popupLastUpdateContainer centerWithFlex"><b>Last update:&nbsp;</b><span class="popupLastUpdate" data-id="' +
                                latLngId + '"></span></div>';

                            if ((serviceClass.includes("Emergency")) && (serviceSubclass.includes(
                                    "First aid"))) {
                                //Tabella ad hoc per First Aid
                                popupText += '<table id="' + latLngId + '" class="psPopupTable">';
                                var series = {
                                    "firstAxis": {
                                        "desc": "Priority",
                                        "labels": [
                                            "Red code",
                                            "Yellow code",
                                            "Green code",
                                            "Blue code",
                                            "White code"
                                        ]
                                    },
                                    "secondAxis": {
                                        "desc": "Status",
                                        "labels": [],
                                        "series": []
                                    }
                                };

                                var dataSlot = null;

                                measuredTime = realTimeData.results.bindings[0].measuredTime.value
                                    .replace("T", " ").replace("Z", "");

                                for (var i = 0; i < realTimeData.results.bindings.length; i++) {
                                    if (realTimeData.results.bindings[i].state.value.indexOf(
                                            "estinazione") > 0) {
                                        series.secondAxis.labels.push("Addressed");
                                    }

                                    if (realTimeData.results.bindings[i].state.value.indexOf("ttesa") >
                                        0) {
                                        series.secondAxis.labels.push("Waiting");
                                    }

                                    if (realTimeData.results.bindings[i].state.value.indexOf("isita") >
                                        0) {
                                        series.secondAxis.labels.push("In visit");
                                    }

                                    if (realTimeData.results.bindings[i].state.value.indexOf(
                                            "emporanea") > 0) {
                                        series.secondAxis.labels.push("Observation");
                                    }

                                    if (realTimeData.results.bindings[i].state.value.indexOf("tali") >
                                        0) {
                                        series.secondAxis.labels.push("Totals");
                                    }

                                    dataSlot = [];
                                    dataSlot.push(realTimeData.results.bindings[i].redCode.value);
                                    dataSlot.push(realTimeData.results.bindings[i].yellowCode.value);
                                    dataSlot.push(realTimeData.results.bindings[i].greenCode.value);
                                    dataSlot.push(realTimeData.results.bindings[i].blueCode.value);
                                    dataSlot.push(realTimeData.results.bindings[i].whiteCode.value);

                                    series.secondAxis.series.push(dataSlot);
                                }

                                var colsQt = parseInt(parseInt(series.firstAxis.labels.length) + 1);
                                var rowsQt = parseInt(parseInt(series.secondAxis.labels.length) + 1);

                                for (var i = 0; i < rowsQt; i++) {
                                    var newRow = $("<tr></tr>");
                                    var z = parseInt(parseInt(i) - 1);

                                    if (i === 0) {
                                        //Riga di intestazione
                                        for (var j = 0; j < colsQt; j++) {
                                            if (j === 0) {
                                                //Cella (0,0)
                                                var newCell = $("<td></td>");

                                                newCell.css("background-color", "transparent");
                                            } else {
                                                //Celle labels
                                                var k = parseInt(parseInt(j) - 1);
                                                var colLabelBckColor = null;
                                                switch (k) {
                                                    case 0:
                                                        colLabelBckColor = "#ff0000";
                                                        break;

                                                    case 1:
                                                        colLabelBckColor = "#ffff00";
                                                        break;

                                                    case 2:
                                                        colLabelBckColor = "#66ff33";
                                                        break;

                                                    case 3:
                                                        colLabelBckColor = "#66ccff";
                                                        break;

                                                    case 4:
                                                        colLabelBckColor = "#ffffff";
                                                        break;
                                                }

                                                newCell = $("<td><span>" + series.firstAxis.labels[k] +
                                                    "</span></td>");
                                                newCell.css("font-weight", "bold");
                                                newCell.css("background-color", colLabelBckColor);
                                            }
                                            newRow.append(newCell);
                                        }
                                    } else {
                                        //Righe dati
                                        for (var j = 0; j < colsQt; j++) {
                                            k = parseInt(parseInt(j) - 1);
                                            if (j === 0) {
                                                //Cella label
                                                newCell = $("<td>" + series.secondAxis.labels[z] +
                                                    "</td>");
                                                newCell.css("font-weight", "bold");
                                            } else {
                                                //Celle dati
                                                newCell = $("<td>" + series.secondAxis.series[z][k] +
                                                    "</td>");
                                                if (i === (rowsQt - 1)) {
                                                    newCell.css('font-weight', 'bold');
                                                    switch (j) {
                                                        case 1:
                                                            newCell.css('background-color', '#ffb3b3');
                                                            break;

                                                        case 2:
                                                            newCell.css('background-color', '#ffff99');
                                                            break;

                                                        case 3:
                                                            newCell.css('background-color', '#d9ffcc');
                                                            break;

                                                        case 4:
                                                            newCell.css('background-color', '#cceeff');
                                                            break;

                                                        case 5:
                                                            newCell.css('background-color', 'white');
                                                            break;
                                                    }
                                                }
                                            }
                                            newRow.append(newCell);
                                        }
                                    }
                                    popupText += newRow.prop('outerHTML');
                                }

                                popupText += '</table>';
                            } else {
                                //Tabella nuovo stile
                                popupText += '<table id="' + latLngId + '" class="gisPopupTable">';

                                //Intestazione
                                popupText += '<thead>';
                                popupText += '<th style="background: ' + color1 +
                                    '; background: -webkit-linear-gradient(right, ' + color1 + ', ' +
                                    color2 + '); background: -o-linear-gradient(right, ' + color1 +
                                    ', ' + color2 + '); background: -moz-linear-gradient(right, ' +
                                    color1 + ', ' + color2 +
                                    '); background: linear-gradient(to right, ' + color1 + ', ' +
                                    color2 + ');">Description</th>';
                                popupText += '<th style="background: ' + color1 +
                                    '; background: -webkit-linear-gradient(right, ' + color1 + ', ' +
                                    color2 + '); background: -o-linear-gradient(right, ' + color1 +
                                    ', ' + color2 + '); background: -moz-linear-gradient(right, ' +
                                    color1 + ', ' + color2 +
                                    '); background: linear-gradient(to right, ' + color1 + ', ' +
                                    color2 + ');">Value</th>';
                                popupText += '<th colspan="7" style="background: ' + color1 +
                                    '; background: -webkit-linear-gradient(right, ' + color1 + ', ' +
                                    color2 + '); background: -o-linear-gradient(right, ' + color1 +
                                    ', ' + color2 + '); background: -moz-linear-gradient(right, ' +
                                    color1 + ', ' + color2 +
                                    '); background: linear-gradient(to right, ' + color1 + ', ' +
                                    color2 + ');">Buttons</th>';
                                popupText += '</thead>';

                                //Corpo
                                popupText += '<tbody>';
                                var dataDesc, dataVal, dataLastBtn, data4HBtn, dataDayBtn, data7DayBtn,
                                    data30DayBtn, data6MonthsBtn, data1YearBtn = null;
                                for (var i = 0; i < realTimeData.head.vars.length; i++) {
                                    if (realTimeData.results.bindings[0][realTimeData.head.vars[i]] !==
                                        null && realTimeData.results.bindings[0][realTimeData.head.vars[
                                            i]] !== undefined) {
                                        if ((realTimeData.results.bindings[0][realTimeData.head.vars[
                                                i]]) && (realTimeData.results.bindings[0][realTimeData
                                                .head.vars[i]
                                            ].value.trim() !== '') && (realTimeData.head.vars[i] !==
                                                null) && (realTimeData.head.vars[i] !== 'undefined')) {
                                            if ((realTimeData.head.vars[i] !== 'updating') && (
                                                    realTimeData.head.vars[i] !== 'measuredTime') && (
                                                    realTimeData.head.vars[i] !== 'instantTime')) {
                                                if (!realTimeData.results.bindings[0][realTimeData.head
                                                        .vars[i]
                                                    ].value.includes('Not Available')) {
                                                    //realTimeData.results.bindings[0][realTimeData.head.vars[i]].value = '-';
                                                    /*   dataDesc = realTimeData.head.vars[i].replace(/([A-Z])/g, ' $1').replace(/^./, function (str) {
                                                        return str.toUpperCase();
                                                    });*/
                                                    dataDesc = realTimeData.head.vars[i];
                                                    dataVal = realTimeData.results.bindings[0][
                                                        realTimeData.head.vars[i]
                                                    ].value;
                                                    dataLastBtn =
                                                        '<td><button style="width: 30px" data-id="' +
                                                        latLngId +
                                                        '" type="button" class="lastValueBtn btn btn-sm " data-fake="' +
                                                        fake + '" data-fakeid="' + fakeId +
                                                        '" data-id="' + latLngId + '" data-field="' +
                                                        realTimeData.head.vars[i] +
                                                        '" data-serviceUri="' + feature.properties
                                                        .serviceUri +
                                                        '" data-lastDataClicked="false" data-targetWidgets="' +
                                                        targetWidgets + '" data-lastValue="' +
                                                        realTimeData.results.bindings[0][realTimeData
                                                            .head.vars[i]
                                                        ].value + '" data-color1="' + color1 +
                                                        '" data-color2="' + color2 +
                                                        '">Last</button></td>';
                                                    data4HBtn =
                                                        '<td><button style="width: 30px" data-id="' +
                                                        latLngId +
                                                        '" type="button" class="timeTrendBtn btn btn-sm " data-fake="' +
                                                        fake + '" data-fakeid="' + fakeId +
                                                        '" data-id="' + latLngId + '" data-field="' +
                                                        realTimeData.head.vars[i] +
                                                        '" data-serviceUri="' + feature.properties
                                                        .serviceUri +
                                                        '" data-timeTrendClicked="false" data-range-shown="4 Hours" data-range="4/HOUR" data-targetWidgets="' +
                                                        targetWidgets + '" data-color1="' + color1 +
                                                        '" data-color2="' + color2 +
                                                        '">4h</button></td>';
                                                    dataDayBtn =
                                                        '<td><button style="width: 30px" data-id="' +
                                                        latLngId +
                                                        '" type="button" class="timeTrendBtn btn btn-sm " data-fake="' +
                                                        fake + '" data-id="' + fakeId +
                                                        '" data-field="' + realTimeData.head.vars[i] +
                                                        '" data-serviceUri="' + feature.properties
                                                        .serviceUri +
                                                        '" data-timeTrendClicked="false" data-range-shown="Day" data-range="1/DAY" data-targetWidgets="' +
                                                        targetWidgets + '" data-color1="' + color1 +
                                                        '" data-color2="' + color2 +
                                                        '">24h</button></td>';
                                                    data7DayBtn =
                                                        '<td><button style="width: 30px" data-id="' +
                                                        latLngId +
                                                        '" type="button" class="timeTrendBtn btn btn-sm " data-fake="' +
                                                        fake + '" data-id="' + fakeId +
                                                        '" data-field="' + realTimeData.head.vars[i] +
                                                        '" data-serviceUri="' + feature.properties
                                                        .serviceUri +
                                                        '" data-timeTrendClicked="false" data-range-shown="7 days" data-range="7/DAY" data-targetWidgets="' +
                                                        targetWidgets + '" data-color1="' + color1 +
                                                        '" data-color2="' + color2 +
                                                        '">7d</button></td>';
                                                    data30DayBtn =
                                                        '<td><button style="width: 30px" data-id="' +
                                                        latLngId +
                                                        '" type="button" class="timeTrendBtn btn btn-sm " data-fake="' +
                                                        fake + '" data-id="' + fakeId +
                                                        '" data-field="' + realTimeData.head.vars[i] +
                                                        '" data-serviceUri="' + feature.properties
                                                        .serviceUri +
                                                        '" data-timeTrendClicked="false" data-range-shown="30 days" data-range="30/DAY" data-targetWidgets="' +
                                                        targetWidgets + '" data-color1="' + color1 +
                                                        '" data-color2="' + color2 +
                                                        '">30d</button></td>';
                                                    data6MonthsBtn =
                                                        '<td><button style="width: 30px" data-id="' +
                                                        latLngId +
                                                        '" type="button" class="timeTrendBtn btn btn-sm " data-fake="' +
                                                        fake + '" data-id="' + fakeId +
                                                        '" data-field="' + realTimeData.head.vars[i] +
                                                        '" data-serviceUri="' + feature.properties
                                                        .serviceUri +
                                                        '" data-timeTrendClicked="false" data-range-shown="6 months" data-range="180/DAY" data-targetWidgets="' +
                                                        targetWidgets + '" data-color1="' + color1 +
                                                        '" data-color2="' + color2 +
                                                        '">6m</button></td>';
                                                    data1YearBtn =
                                                        '<td><button style="width: 30px" data-id="' +
                                                        latLngId +
                                                        '" type="button" class="timeTrendBtn btn btn-sm " data-fake="' +
                                                        fake + '" data-id="' + fakeId +
                                                        '" data-field="' + realTimeData.head.vars[i] +
                                                        '" data-serviceUri="' + feature.properties
                                                        .serviceUri +
                                                        '" data-timeTrendClicked="false" data-range-shown="1 year" data-range="365/DAY" data-targetWidgets="' +
                                                        targetWidgets + '" data-color1="' + color1 +
                                                        '" data-color2="' + color2 +
                                                        '">1y</button></td>';
                                                    popupText += '<tr><td>' + dataDesc + '</td><td>' +
                                                        floatToString(dataVal, 6) + '</td>' +
                                                        dataLastBtn + data4HBtn + dataDayBtn +
                                                        data7DayBtn + data30DayBtn + data6MonthsBtn +
                                                        data1YearBtn + '</tr>';
                                                }
                                            } else {
                                                measuredTime = realTimeData.results.bindings[0][
                                                    realTimeData.head.vars[i]
                                                ].value.replace("T", " ");
                                                var now = new Date();
                                                var measuredTimeDate = new Date(measuredTime);
                                                rtDataAgeSec = Math.abs(now - measuredTimeDate) / 1000;
                                            }
                                        }
                                    }
                                }
                                popupText += '</tbody>';
                                popupText += '</table>';
                                popupText +=
                                    '<p><b>Keep data on target widget(s) after popup close: </b><input data-id="' +
                                    latLngId +
                                    '" type="checkbox" class="gisPopupKeepDataCheck" data-keepData="false"/></p>';
                            }

                            hasRealTime = true;
                        }
                    }

                    popupText += '</div>';

                    if (geoJsonServiceData.hasOwnProperty("BusStop")) {
                        popupText += '<div id="linesof_' + serviceProperties['serviceUri'].replace(
                                /[^a-zA-Z0-9]/g, "") +
                            '" class="recreativeEventMapDataContainer recreativeEventMapTplContainer">Please wait...</div>';
                        popupText += '<div id="tmtblof_' + serviceProperties['serviceUri'].replace(
                                /[^a-zA-Z0-9]/g, "") +
                            '" class="recreativeEventMapDataContainer recreativeEventMapTplTmtblContainer">Please wait...</div>';
                    }

                    // 3D
                    let newpopup = null;
                    if (is3dOn) {
                        const popupDiv = $(`#${widgetName}_deck_popup`);
                        popupDiv.html(popupText);
                        popupCoord = info.coordinate;
                        reloadPopupDiv();

                        const resizableDivs = popupDiv.find('.recreativeEventMapDataContainer');
                        resizableDivs.css('resize', 'both');
                        resizableDivs.css('max-width', '750px');
                        resizableDivs.css('min-width', '400px');
                        resizableDivs.css('min-height', '100px');
                        resizableDivs.css('max-height', '320px');

                        const btnClose = $('<button class="deck-close-btn">X</button>');
                        popupDiv.append(btnClose);
                        btnClose.on('click', function() {
                            if (geoJsonServiceData.hasOwnProperty("BusStop")) {
                                layers.buslines = [];
                                updateLayers();
                            }
                            popupDiv.hide();
                        });

                        popupDiv.show();
                        const draggableElement = popupDiv.find('.draggable-popup');
                        dragPopup(popupDiv, draggableElement);
                    } else {
                        // 2D
                        newpopup = L.popup({
                            closeOnClick: false, //Non lo levare, sennò autoclose:false non funziona
                            autoClose: false,
                            offset: [15, 0],
                            //minWidth: 435,
                            minWidth: 400,
                            maxWidth: 1200,
                            //	className: geoJsonServiceData.hasOwnProperty("BusStop")?"draggableAndResizablePopup":"nonDraggableAndResizablePopup"
                            className: "draggableAndResizablePopup"
                        }).setContent(popupText);
                        event.target.bindPopup(newpopup).openPopup();

                        var makeDraggable = function(popup, excluding) {
                            var pos = map.defaultMapRef.latLngToLayerPoint(popup.getLatLng());
                            L.DomUtil.setPosition(popup._wrapper.parentNode, pos);
                            var draggable = new L.Draggable(popup._container, popup._wrapper);
                            draggable.enable();
                            $(".draggableAndResizablePopup").css("cursor", "move");
                            draggable.on('dragend', function() {
                                var pos = map.defaultMapRef.layerPointToLatLng(this._newPos);
                                popup.setLatLng(pos);
                                $(popup._wrapper).siblings(".leaflet-popup-tip-container")
                                    .hide();
                            });
                            excluding.forEach((excluded) => {
                                $(excluded).css("cursor", "auto").on("mouseover", function(e) {
                                    draggable.disable();
                                }).on("mouseout", function(e) {
                                    draggable.enable();
                                });
                            });
                        };
                        if (newpopup.options.className == "draggableAndResizablePopup")
                            makeDraggable(newpopup, [
                                ".draggableAndResizablePopup .recreativeEventMapDataContainer"
                            ]);
                    }

                    // resizable 
                    $(".draggableAndResizablePopup .leaflet-popup-content-wrapper").css({
                        "resize": "both",
                        "overflow": "auto",
                        "min-width": "400px",
                        "max-width": "1200px",
                        "min-height": "100px",
                        "max-height": "400px"
                    });
                    //

                    // responsive			
                    $(".draggableAndResizablePopup .recreativeEventMapDataContainer").css({
                        "width": "100%",
                        "height": "100%"
                    });

                    // Starting popup event trigger section
                    if (geoJsonServiceData.hasOwnProperty("BusStop")) {
                        layers.buslines = [];
                        $.getJSON( '<?=$whatifmdtendpt?>?stop='+encodeURIComponent(serviceProperties['serviceUri'])+"&list=graphs",function(graphs){
                            var pAgency = graphs.join();									
                            var routesMarkup = "<p class=\"tplpoi_routesSubHead\" style=\"background-color:black; color:white; padding:0.5em;\"><strong>Date:</strong>&nbsp;"+new Date().toLocaleDateString("en",{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })+"</p>";									
                            var progress = { todo: -1, done: -1, bar:0};
                            $.getJSON( '<?=$whatifmdtendpt?>?agency='+encodeURIComponent(pAgency)+'&stop='+encodeURIComponent(serviceProperties['serviceUri'])+'&date='+encodeURIComponent(new Date().toISOString().slice(0, 10))+'&list=routes', function(routes) {
                                if(Object.keys(routes).length == 0) { $(".recreativeEventMapTplBtn").hide(); return; }
                                Object.keys(routes).forEach(function(key){
                                    var route = routes[key];
                                    var rteBtnUrl='<?=$whatifmdtendpt?>?agency='+encodeURIComponent(pAgency)+'&route='+encodeURIComponent(route["uri"])+"&stop="+encodeURIComponent(serviceProperties['serviceUri'])+"&date="+encodeURIComponent(new Date().toISOString().slice(0, 10))+"&list=trips";
                                    routesMarkup+="<p class=\"tplpoi_wifstprte\"><button class=\"polyin_"+route["uri"].replace(/[^a-zA-Z0-9]/g, "")+"\" data-uri=\""+route["uri"]+"\" data-url=\""+rteBtnUrl+"\" data-geoms=\""+route["geoms"].join("|")+"\" data-key=\""+key+"\" style=\"width:100%; background-color:#"+route["color"]+"; color:#"+route["text_color"]+"\">"+route["type"]+" " +route["short_name"]+" "+route["long_name"]+"</button></p>";
                                    let data = [];
                                    route["geoms"].forEach(function(wkt){
                                        var latlngs = [];
                                        wkt.split("((")[1].split("))")[0].split(",").forEach(function(node){
                                            latlngs.push(new L.LatLng(node.trim().split(" ")[1],node.trim().split(" ")[0]));
                                        });
                                        let path = [];
                                        for (let ll of latlngs) 
                                            path.push([ll.lng, ll.lat]);
                                        data.push({
                                            path,
                                        });
                                        // var polyline = new L.Polyline(latlngs,{className: "tplPoiPolyline polyof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")+" polyin_"+route["uri"].replace(/[^a-zA-Z0-9]/g, ""), color:"#"+route["color"], weight:6}).bindTooltip(route["type"]+" " +route["short_name"]+" "+route["long_name"], { direction: 'right' });																						
                                        // polyline.on("mouseover",function(e) {													
                                        //     e.target.openTooltip(e.latlng);													
                                        // });
                                        // if("undefined" == typeof tplPoiItems) { tplPoiItems = new L.FeatureGroup(); map.defaultMapRef.addLayer(tplPoiItems); }
                                        // polyline.addTo(tplPoiItems);
                                    });
                                    layers.buslines.push(new deck.PathLayer({
                                        id: `${key}-main-route`,
                                        data,
                                        getPath: (d) => d.path,
                                        getColor: [5, 170, 199],
                                        getWidth: 5,
                                        extensions: [new deck._TerrainExtension()],
                                        terrainDrawMode: 'offset',
                                    }));
                                    updateLayers();
                                    // newpopup.on('remove', function() {
                                    //     $(".polyof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).hide(); // TODO Remove only those related to the specific stop!!
                                    // });
                                    // qui andiamo a generare tutte le stop raggiungibili direttamente (senza cambi) da quella selezionata																						
                                    $.getJSON(rteBtnUrl,function(trips){	
                                        var tripGeoms = [];
                                        Object.keys(trips).forEach(function(tripkey){													
                                            if(!tripGeoms.includes(trips[tripkey]["path"])) {														
                                                tripGeoms.push(trips[tripkey]["path"]);													
                                                $.getJSON('<?=$whatifmdtendpt?>?agency='+encodeURIComponent(pAgency)+'&trip='+encodeURIComponent(trips[tripkey]["uri"])+"&list=stops",function(stops) {
                                                    var eventDesc = null;
                                                    map["eventsOnMap"].forEach(function(mapevt){
                                                        if(mapevt["color1"] == feature["properties"]["color1"] && mapevt["color2"] == feature["properties"]["color2"]) {
                                                            eventDesc = mapevt["desc"];
                                                        }																
                                                    });	
                                                    if(progress.todo == -1 && stops.length > 0) {
                                                        progress.todo = stops.length;
                                                    }
                                                    else {
                                                        progress.todo += stops.length;
                                                    }			
                                                    stops.forEach(function(stop){															
                                                        Number.prototype.countDecimals = function () {
                                                            if(Math.floor(this.valueOf()) === this.valueOf()) return 0;
                                                            return this.toString().split(".")[1].length || 0; 
                                                        };
                                                        // for(var l = 0; l < gisLayersOnMap[eventDesc].getLayers().length; l++) {
                                                        //     var layer = gisLayersOnMap[eventDesc].getLayers()[l];																	
                                                        //     if( ( layer["feature"] && layer["feature"]["properties"]["serviceUri"] == stop["stop_uri"] ) || 
                                                        //         ( (!layer["feature"]) && layer["_latlng"] && layer["_latlng"]["lat"] && parseFloat(layer["_latlng"]["lat"]) == parseFloat(stop["pos_lat"]).toFixed(parseFloat(layer["_latlng"]["lat"]).countDecimals()) && layer["_latlng"]["lng"] && parseFloat(layer["_latlng"]["lng"]) == parseFloat(stop["pos_lon"]).toFixed(parseFloat(layer["_latlng"]["lng"]).countDecimals())  )){
                                                        //         if(progress.done == -1) progress.done = 1; else progress.done += 1;
                                                        //         if(progress.done > -1 && progress.todo > -1 && progress.bar <= 100*progress.done/progress.todo ) {																			
                                                        //                 progress.bar = 100*progress.done/progress.todo;
                                                        //                 $(newpopup._container).find("div.tplProgressBar").css("width",(100*progress.done/progress.todo)+"%");
                                                        //                 $(newpopup._container).find("div.tplProgressBar").show();																			
                                                        //             //console.log(progress);
                                                        //         }
                                                        //         else {
                                                        //             if(progress.bar < 99) {
                                                        //                 progress.bar++;
                                                        //                 $(newpopup._container).find("div.tplProgressBar").css("width",progress.bar+"%");
                                                        //                 $(newpopup._container).find("div.tplProgressBar").show();						
                                                        //             }
                                                        //         }
                                                        //         return;															
                                                        //     }
                                                        // }
                                                        $.getJSON("<?=$superServiceMapProxy?>/api/v1?realtime=false&graphUri="+encodeURIComponent(pAgency)+"&serviceUri="+encodeURIComponent(stop["stop_uri"]),function(stopdata){																													
                                                            var newFeature = stopdata["BusStop"]["features"][0];
                                                            newFeature["properties"]["color1"] = feature["properties"]["color1"]; 
                                                            newFeature["properties"]["color2"] = feature["properties"]["color2"]; 
                                                            newFeature["properties"]["pinattr"] = feature["properties"]["pinattr"]; 
                                                            newFeature["properties"]["pincolor"] = feature["properties"]["pincolor"]; 
                                                            newFeature["properties"]["symbolcolor"] = feature["properties"]["symbolcolor"]; 															
                                                            // var newMarker = gisPrepareCustomMarker( newFeature, { "lng": newFeature["geometry"]["coordinates"][0], "lat": newFeature["geometry"]["coordinates"][1] } );															
                                                            // newMarker.addTo(gisLayersOnMap[eventDesc]); 	
                                                            // if(progress.done == -1) progress.done = 1; else progress.done += 1;
                                                            // if(progress.done > -1 && progress.todo > -1 && progress.bar < 100*progress.done/progress.todo) {																		
                                                            //         progress.bar = 100*progress.done/progress.todo;
                                                            //         $(newpopup._container).find("div.tplProgressBar").css("width",(100*progress.done/progress.todo)+"%");
                                                            //         $(newpopup._container).find("div.tplProgressBar").show();																		
                                                            // }
                                                            // else {
                                                            //     if(progress.bar < 99) {
                                                            //         progress.bar++;
                                                            //         $(newpopup._container).find("div.tplProgressBar").css("width",progress.bar+"%");
                                                            //         $(newpopup._container).find("div.tplProgressBar").show();	
                                                            //     }																			
                                                            // }
                                                        });																				
                                                    });
                                                });				
                                            }														
                                        });												
                                    });
                                    //
                                });	
                                if(Object.keys(routes).length === 0 && routes.constructor === Object) routesMarkup += "<p>No routes found for this date.</p>";								
                                $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).empty().append($(routesMarkup));
                                $(".polyof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).click(function(){
                                    var classes = $(this).attr('class').split(/\s+/);
                                    $.each(classes, function(i, c) {
                                        if (c.startsWith('polyin_')) {
                                            $('#<?= $_REQUEST['name_w'] ?>_map button.recreativeEventMapTplBtn[data-id="' + latLngId + '"]').click();
                                            $('#<?= $_REQUEST['name_w'] ?>_map button.recreativeEventMapTplBtn[data-id="' + latLngId + '"]').parent().siblings('div.recreativeEventMapTplContainer').find("button."+c).click();													
                                            map.defaultMapRef.panTo(new L.LatLng(event.target.getLatLng().lat, event.target.getLatLng().lng)); 
                                        }
                                    });
                                });
                                
                                
                                $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")+" p.tplpoi_wifstprte button").click(function() {
                                    var wifstprtebtn = $(this);
                                    var wifstprtebtnhtml = $(this).html();
                                    var rteUri = $(this).data("uri");
                                    $(this).html("Please wait...");										
                                    var hrRouteTxt=$(this).data("key");										
                                    lastSelectedRoute = hrRouteTxt;
                                    
                                    var bg = $(this).css("background-color");
                                    var fg = $(this).css("color");
                                    $.getJSON($(this).data("url"),function(trips){
                                        $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("p").hide();
                                        wifstprtebtn.html(wifstprtebtnhtml);											
                                        var affectedTripsMarkup = "";
                                        var tripsMarkup = "<p class=\"tplpoi_tripsSubHead\" style=\"background-color:black; color:white; padding:0.5em;\"><strong>Date:</strong>&nbsp;"+new Date().toLocaleDateString("en",{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })+"<br><strong>Route:</strong>&nbsp;"+hrRouteTxt+"</p><div style=\"height:100%; border: medium solid black; padding:0.5em;\" class=\"tplpoi_tripsDivInRoute\"><p class=\"tplpoi_preserveplease\" style=\"margin:0px 0; display:none;\"><strong>Affected Trips:</strong></p><div id=\"tplpoi_affectedtrips\" style=\"display:none;\"></div><p class=\"tplpoi_preserveplease\" style=\"margin:0px 0;\"><strong style=\"display:none;\">All Trips:</strong></p>";
                                        $(".polyof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).hide();
                                        let data = [];
                                        Object.keys(trips).sort(function(a,b){
                                            if(trips[a]["start"] > trips[b]["start"]) return 1; else return -1;
                                        }).forEach(function(tripkey){													
                                            var trip = trips[tripkey];													
                                            var theTripUrl = '<?=$whatifmdtendpt?>?agency='+encodeURIComponent(pAgency)+'&trip='+encodeURIComponent(trip["uri"])+"&list=stops";
                                            tripsMarkup+="<p class=\"tplpoi_wifstptrp\"><button style=\"text-align:left; width:100%; background-color:"+bg+"; color:"+fg+";\" data-tripkey=\""+tripkey+"\" data-path=\""+trip["path"]+"\" data-url=\""+theTripUrl+"\" data-routeuri=\""+rteUri+"\" data-routebgcolor=\""+trip["route"]["bg_color"]+"\" data-routefgcolor=\""+trip["route"]["fg_color"]+"\" data-routeshortname=\""+trip["route"]["short_name"]+"\" data-routelongname=\""+trip["route"]["long_name"]+"\" data-routetype=\""+trip["route"]["type"]+"\" data-agencyname=\""+trip["route"]["agency"]+"\">"+trip["start"].substring(0,5)+"&nbsp;<span style=\"border:thin solid "+fg+"; padding:0.2em;\">"+(trip["direction"] == "0"?"&rharu;":"&lhard;")+"</span>&nbsp;"+trip["headsign"]+"</button></p>";																																			
                                            var latlngs = [];
                                            trip["path"].split("((")[1].split("))")[0].split(",").forEach(function(node){
                                                latlngs.push(new L.LatLng(node.trim().split(" ")[1],node.trim().split(" ")[0]));
                                            });
                                            let path = [];
                                            for (let ll of latlngs) 
                                                path.push([ll.lng, ll.lat]);
                                            data.push({
                                                path,
                                                tripkey,
                                                trip
                                            })
                                        });
                                        layers.buslines.push(new deck.PathLayer({
                                            id: `${hrRouteTxt}-sub-route`,
                                            data,
                                            extensions: [new deck._TerrainExtension()],
                                            terrainDrawMode: 'offset',
                                            getPath: (d) => d.path,
                                            getColor: [5, 170, 199],
                                            getWidth: 5,
                                        }));
                                        updateLayers();
                                        tripsMarkup+="</div>";
                                        tripsMarkup+="<p class=\"tplpoi_backToRoutes\"><button  style=\"width:100%;color:white;background-color:black;\">Back</button></p>";
                                        $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("p.tplpoi_tripsSubHead").remove();
                                        $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("div.tplpoi_tripsDivInRoute").remove();																							
                                        $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("p.tplpoi_backToRoutes").remove();
                                        $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).append($(tripsMarkup));											
                                        
                                        $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")+" p.tplpoi_backToRoutes button").click(function(){
                                            $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("p").hide();
                                            $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("div.tplpoi_tripsDivInRoute").hide();												
                                            $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("p.tplpoi_routesSubHead").show();
                                            $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("p.tplpoi_wifstprte").show();												
                                            $(".polyof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).show();
                                        });											
                                        
                                        $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")+" p.tplpoi_wifstptrp button").click(function(){
                                            var wifstptrpbtn = $(this);
                                            var wifstptrpbtnhtml = $(this).html();												
                                            var theaffectedstopsMarkup = "";
                                            var theTripMarkup = "<p class=\"tplpoi_theTripSubhead\" style=\"background-color:black; color:white;  padding:0.5em;\"><strong>Agency:</strong>&nbsp;"+$(this).data("agencyname")+"<br><strong>Route:</strong>&nbsp;"+$(this).data("routetype")+" "+$(this).data("routeshortname")+" "+$(this).data("routelongname")+"<br><strong>Trip:</strong>&nbsp;"+$(this).html().replace("<strong>","").replace("</strong>","")+"</p><div class=\"tplpoi_fullTripData\" style=\"height:100%; border: medium solid black; padding:0.5em;\"><p style=\"margin:0px 0; display:none;\"><strong>Affected Stops:</strong></p><div id=\"tplpoi_affectedstops\" style=\"display:none;\"></div><p style=\"margin:0px 0;\"><strong style=\"display:none;\">All Stops:</strong></p>";
                                            $(this).html("Please wait...");		
                                            var bgcolor=$(this).data("routebgcolor");
                                            var fgcolor=$(this).data("routefgcolor");
                                            var routetype=$(this).data("routetype");
                                            var wkt = $(this).data("path");
                                            var tripkey = $(this).data("tripkey");	
                                            var routeUri = $(this).data("routeuri");	 												
                                            
                                            $.getJSON($(this).data("url"),function(tripdata){																				
                                                $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("p.tplpoi_tripsSubHead").hide();
                                                $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("p.tplpoi_wifstptrp").hide();
                                                $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("p.tplpoi_backToRoutes").hide();
                                                $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("div.tplpoi_tripsDivInRoute").hide();
                                                wifstptrpbtn.html(wifstptrpbtnhtml);
                                                $(".polyof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).hide();
                                                var latlngs = [];
                                                wkt.split("((")[1].split("))")[0].split(",").forEach(function(node){
                                                    latlngs.push(new L.LatLng(node.trim().split(" ")[1],node.trim().split(" ")[0]));
                                                });

                                                let data = [];
                                                let path = [];
                                                for (let ll of latlngs) 
                                                    path.push([ll.lng, ll.lat]);
                                                data.push({
                                                    path,
                                                    tripkey,
                                                })
                                                layers.buslines.push(new deck.PathLayer({
                                                    id: tripkey,
                                                    data,
                                                    extensions: [new deck._TerrainExtension()],
                                                    terrainDrawMode: 'offset',
                                                    getPath: (d) => d.path,
                                                    getColor: [5, 170, 199],
                                                    getWidth: 5,
                                                }));
                                                updateLayers();
                                                
                                                tripdata.forEach(function(oneStop, stopNum){
                                                    if(serviceProperties['serviceUri'] == oneStop["stop_uri"]) {
                                                        theTripMarkup+="<button data-serviceuri=\""+oneStop["stop_uri"]+"\" data-lat=\""+oneStop["pos_lat"]+"\" data-lon=\""+oneStop["pos_lon"]+"\" class=\"tplpoi_stopbtn\" style=\"text-align:left; width:100%; margin-bottom:1em; color:#"+fgcolor+"; background-color:#"+bgcolor+"; font-size:larger; font-weight:bold; \">#"+parseInt(oneStop["sequence"])+" "+oneStop["code"]+" "+oneStop["name"]+"<br>ARR "+(stopNum > 0 ? oneStop["arrival"].substring(0,5) : "--:--")+" DEP "+(stopNum < tripdata.length-1 ? oneStop["departure"].substring(0,5) : "--:--")+"</button>";																												
                                                    }
                                                    else {
                                                        theTripMarkup+="<button data-serviceuri=\""+oneStop["stop_uri"]+"\" data-lat=\""+oneStop["pos_lat"]+"\" data-lon=\""+oneStop["pos_lon"]+"\" class=\"tplpoi_stopbtn\" style=\"text-align:left; width:100%; margin-bottom:1em; color:#"+fgcolor+"; background-color:#"+bgcolor+";\">#"+parseInt(oneStop["sequence"])+" "+oneStop["code"]+" "+oneStop["name"]+"<br>ARR "+(stopNum > 0 ? oneStop["arrival"].substring(0,5) : "--:--")+" DEP "+(stopNum < tripdata.length-1 ? oneStop["departure"].substring(0,5) : "--:--")+"</button>";																												
                                                    }
                                                });
                                                theTripMarkup+="</div>";
                                                theTripMarkup+="<p class=\"tplpoi_backToTrips\"><button style=\"width:100%;color:white;background-color:black;\">Back</button></p>";
                                                $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("p.tplpoi_theTripSubhead").remove();
                                                $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("div.tplpoi_fullTripData").remove();
                                                $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("p.tplpoi_backToTrips").remove();
                                                $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).append($(theTripMarkup));
                                                if(theaffectedstopsMarkup == "") {
                                                    theaffectedstopsMarkup="<p>No stops found.</p>";
                                                }													
                                                $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")+" p.tplpoi_backToTrips button").click(	
                                                    function(){
                                                    $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("p").hide();
                                                    $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("div.tplpoi_fullTripData").hide();																																								
                                                    $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("p.tplpoi_tripsSubHead").show();
                                                    $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("div.tplpoi_tripsDivInRoute").show();														
                                                    $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("p.tplpoi_wifstptrp").show();
                                                    $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")).find("p.tplpoi_backToRoutes").show();	
                                                    $(".polyof_"+routeUri.replace(/[^a-zA-Z0-9]/g, "")).show();
                                                    }
                                                );
                                                Number.prototype.countDecimals = function () {
                                                    if(Math.floor(this.valueOf()) === this.valueOf()) return 0;
                                                    return this.toString().split(".")[1].length || 0; 
                                                };
                                                $("#linesof_"+serviceProperties['serviceUri'].replace(/[^a-zA-Z0-9]/g, "")+" button.tplpoi_stopbtn").click(function(){														
                                                    //console.log("stopbtn");
                                                    var serviceuri = $(this).data("serviceuri");
                                                    var lat = $(this).data("lat");
                                                    var lon = $(this).data("lon");
                                                    var eventDesc = null;
                                                    // Trigger click
                                                    currentViewState.latitude = lat;
                                                    currentViewState.longitude = lon;
                                                    map3d.setProps({viewState: {...currentViewState}});
                                                    // map["eventsOnMap"].forEach(function(mapevt){
                                                    //     if(mapevt["color1"] == feature["properties"]["color1"] && mapevt["color2"] == feature["properties"]["color2"]) {
                                                    //         eventDesc = mapevt["desc"];
                                                    //     }																
                                                    // });	
                                                    /*var doCreate = true;
                                                    gisLayersOnMap[eventDesc].getLayers().forEach(function(layer){																														
                                                        if( ( layer["feature"] && layer["feature"]["properties"]["serviceUri"] == serviceuri ) || 
                                                            ( (!layer["feature"]) &&  layer["_latlng"]["lat"] == lat.toFixed(layer["_latlng"]["lat"].countDecimals()) && layer["_latlng"]["lng"] == lon.toFixed(layer["_latlng"]["lng"].countDecimals())  )){
                                                            try { layer.closePopup(); } catch(e) {}
                                                            layer.fire('click');
                                                            doCreate=false;																
                                                        }
                                                    });		
                                                    if(!doCreate) return;												*/
                                                    // for(var l = 0; l < gisLayersOnMap[eventDesc].getLayers().length; l++) {
                                                    //     var layer = gisLayersOnMap[eventDesc].getLayers()[l];
                                                    //     if( ( layer["feature"] && layer["feature"]["properties"]["serviceUri"] == serviceuri ) || 
                                                    //         ( (!layer["feature"]) &&  layer["_latlng"]["lat"] == lat.toFixed(layer["_latlng"]["lat"].countDecimals()) && layer["_latlng"]["lng"] == lon.toFixed(layer["_latlng"]["lng"].countDecimals())  )){
                                                    //         try { layer.closePopup(); } catch(e) {}
                                                    //         layer.fire('click');
                                                    //         console.log("click");
                                                    //         return;															
                                                    //     }
                                                    // }
                                                    // $.getJSON("<?=$superServiceMapProxy?>/api/v1?serviceUri="+encodeURIComponent(serviceuri),function(stopdata){																													
                                                    //     var newFeature = stopdata["BusStop"]["features"][0];
                                                    //     newFeature["properties"]["color1"] = feature["properties"]["color1"]; 
                                                    //     newFeature["properties"]["color2"] = feature["properties"]["color2"]; 
                                                    //     newFeature["properties"]["pinattr"] = feature["properties"]["pinattr"]; 
                                                    //     newFeature["properties"]["pincolor"] = feature["properties"]["pincolor"]; 
                                                    //     newFeature["properties"]["symbolcolor"] = feature["properties"]["symbolcolor"]; 															
                                                    //     var newMarker = gisPrepareCustomMarker( newFeature, { "lng": newFeature["geometry"]["coordinates"][0], "lat": newFeature["geometry"]["coordinates"][1] } );															
                                                    //     newMarker.addTo(gisLayersOnMap[eventDesc]); 															
                                                    //     newMarker.fire('click');
                                                    // });														
                                                });
                                            });
                                            
                                        });
                                                                                    
                                    });
                                    
                                });
                                
                            });
                        });
                    }

                    if (hasRealTime) {
                        $(popupId + ' button.recreativeEventMapContactsBtn[data-id="' +
                            latLngId + '"]').show();
                        $(popupId + ' button.recreativeEventMapContactsBtn[data-id="' +
                            latLngId + '"]').trigger("click");
                        $(popupId + ' span.popupLastUpdate[data-id="' +
                            latLngId + '"]').html(measuredTime);
                    } else {
                        $(popupId + ' button.recreativeEventMapContactsBtn[data-id="' +
                            latLngId + '"]').hide();
                    }

                    $(popupId + ' button.recreativeEventMapDetailsBtn[data-id="' +
                        latLngId + '"]').off('click');
                    $(popupId + ' button.recreativeEventMapDetailsBtn[data-id="' +
                        latLngId + '"]').click(function() {
                        $(this).parent().siblings('div.recreativeEventMapDataContainer').hide();
                        $(this).parent().siblings('div.recreativeEventMapDetailsContainer')
                            .show();
                        $(this).siblings('button.recreativeEventMapBtn').removeClass(
                            'recreativeEventMapBtnActive');
                        $(this).addClass('recreativeEventMapBtnActive');
                    });

                    $(popupId + ' button.recreativeEventMapDescriptionBtn[data-id="' +
                        latLngId + '"]').off('click');
                    $(popupId + ' button.recreativeEventMapDescriptionBtn[data-id="' +
                        latLngId + '"]').click(function() {
                        $(this).parent().siblings('div.recreativeEventMapDataContainer').hide();
                        $(this).parent().siblings('div.recreativeEventMapDescContainer').show();
                        $(this).siblings('button.recreativeEventMapBtn').removeClass(
                            'recreativeEventMapBtnActive');
                        $(this).addClass('recreativeEventMapBtnActive');
                    });

                    $(popupId + ' button.recreativeEventMapContactsBtn[data-id="' +
                        latLngId + '"]').off('click');
                    $(popupId + ' button.recreativeEventMapContactsBtn[data-id="' +
                        latLngId + '"]').click(function() {
                        $(this).parent().siblings('div.recreativeEventMapDataContainer').hide();
                        $(this).parent().siblings('div.recreativeEventMapContactsContainer')
                            .show();
                        $(this).siblings('button.recreativeEventMapBtn').removeClass(
                            'recreativeEventMapBtnActive');
                        $(this).addClass('recreativeEventMapBtnActive');
                    });

                    $(popupId + ' button.recreativeEventMapTplBtn[data-id="' +
                        latLngId + '"]').off('click');
                    $(popupId + ' button.recreativeEventMapTplBtn[data-id="' +
                        latLngId + '"]').click(function() {
                        $(this).parent().siblings('div.recreativeEventMapDataContainer').hide();
                        $(this).parent().siblings('div.recreativeEventMapTplContainer').show();
                        $(this).siblings('button.recreativeEventMapBtn').removeClass(
                            'recreativeEventMapBtnActive');
                        $(this).addClass('recreativeEventMapBtnActive');
                        if ($("#linesof_" + serviceProperties['serviceUri'].replace(
                                /[^a-zA-Z0-9]/g, "") + " p.tplpoi_backToTrips button").is(
                                ":visible")) {
                            $("#linesof_" + serviceProperties['serviceUri'].replace(
                                    /[^a-zA-Z0-9]/g, "") + " p.tplpoi_backToTrips button")
                                .click();
                        }
                        if ($("#linesof_" + serviceProperties['serviceUri'].replace(
                                /[^a-zA-Z0-9]/g, "") + " p.tplpoi_backToRoutes button").is(
                                ":visible")) {
                            $("#linesof_" + serviceProperties['serviceUri'].replace(
                                    /[^a-zA-Z0-9]/g, "") + " p.tplpoi_backToRoutes button")
                                .click();
                        }
                    });

                    $(popupId + ' button.recreativeEventMapTplTmtblBtn[data-id="' +
                        latLngId + '"]').off('click');
                    $(popupId + ' button.recreativeEventMapTplTmtblBtn[data-id="' + latLngId + '"]').click(function () {                                
                        //console.log("clicked "+'#<?= $_REQUEST['name_w'] ?>_map button.recreativeEventMapTplTmtblBtn[data-id="' + latLngId + '"]');
                        $(this).parent().siblings('div.recreativeEventMapDataContainer').hide();
                        $(this).parent().siblings('div.recreativeEventMapTplTmtblContainer').show();								
                        $(this).siblings('button.recreativeEventMapBtn').removeClass('recreativeEventMapBtnActive');
                        $(this).addClass('recreativeEventMapBtnActive');
                        var tmtblBtn = $(this);
                        var tmtblMarkup = "";
                        $.getJSON( '<?=$whatifmdtendpt?>?stop='+encodeURIComponent(serviceProperties['serviceUri'])+"&list=graphs",function(graphs){
                            var pAgency = graphs.join();
                            $.getJSON('<?=$whatifmdtendpt?>?agency='+encodeURIComponent(pAgency)+'&stop='+encodeURIComponent(serviceProperties['serviceUri'])+"&list=timetable",function(timetable){			
                                //console.log(timetable);
                                timetable.forEach(function(entry,rownum){
                                    //console.log(entry);
                                    tmtblMarkup+="<p class=\"tplpoi_tmtblrow\"><button data-r=\""+entry["route"].replace(/[^a-zA-Z0-9]/g, "")+"\" data-t=\""+entry["trip"]+"\" data-n=\""+rownum+"\" style=\"width:100%; background-color:#"+entry["bgcolor"]+"; color:#"+entry["fgcolor"]+"\"><p style=\"font-size:larger; font-weight:bold; margin:0px; padding:0px; text-align:left;\">"+(entry["departure"]?entry["departure"]:entry["arrival"]).substring(0,5)+"&nbsp;<span style=\"font-size:larger; border:thin solid #"+entry["fgcolor"]+";\">"+entry["number"]+"</span>&nbsp;"+entry["headsign"]+"</p><p class=\"nextstops\" style=\"margin:0px; padding:0px; font-weight:normal; text-align:left;\"></p></button></p>";
                                });		
                                if(timetable.length == 0) {
                                    tmtblMarkup+="<p class=\"tplpoi_tmtblrow\">The timetable is currently not available for this stop.</p>";
                                }
                                tmtblBtn.parent().siblings('div.recreativeEventMapTplTmtblContainer').empty();
                                tmtblBtn.parent().siblings('div.recreativeEventMapTplTmtblContainer').append($(tmtblMarkup));
                                timetable.forEach(function(entry,rownum) {
                                    var theTripUrl = '<?=$whatifmdtendpt?>?agency='+encodeURIComponent(pAgency)+'&trip='+encodeURIComponent(entry["trip_uri"])+"&list=stops";
                                    var n = rownum;
                                    $.getJSON(theTripUrl,function(alltripstops){
                                        //console.log(alltripstops);
                                        var span = $("p.tplpoi_tmtblrow button[data-t=\""+entry["trip"]+"\"][data-n=\""+n+"\"] p.nextstops");
                                        var spanMarkup = "";
                                        var isNext = false;
                                        alltripstops.forEach(function(stop){
                                            if(isNext) {
                                                if(-1 == spanMarkup.indexOf(stop["arrival"].substring(0,5)+"&nbsp;"+stop["name"].replaceAll(" ","&nbsp;")+"&nbsp;&bull; ")) {
                                                    spanMarkup+=stop["arrival"].substring(0,5)+"&nbsp;"+stop["name"].replaceAll(" ","&nbsp;")+"&nbsp;&bull; ";
                                                }
                                            }
                                            if(stop["stop_uri"] == serviceProperties['serviceUri']) {
                                                isNext = true;
                                            }													
                                        });
                                        if(!spanMarkup) {
                                            spanMarkup+="This is the terminus stop, the trip does not continue further.&nbsp;&bull; ";
                                        }
                                        // console.log("Appending "+spanMarkup.substring(0,spanMarkup.length-13));
                                        span.append(spanMarkup.substring(0,spanMarkup.length-13));												
                                    });
                                });
                                $(".tplpoi_tmtblrow button").click(function(){
                                    //console.log($(this).data("r")); console.log($(this).data("t"));
                                    $('#<?= $_REQUEST['name_w'] ?>_map button.recreativeEventMapTplBtn[data-id="' + latLngId + '"]').click();
                                    var t = $(this).data("t");
                                    var observer = new MutationObserver(function(mutations, observer) {											  
                                        $('#<?= $_REQUEST['name_w'] ?>_map button.recreativeEventMapTplBtn[data-id="' + latLngId + '"]').parent().siblings('div.recreativeEventMapTplContainer').find('.tplpoi_tripsDivInRoute .tplpoi_wifstptrp button[data-tripkey="'+t+'"]').click();													
                                        observer.disconnect();
                                    });	
                                    observer.observe($('#<?= $_REQUEST['name_w'] ?>_map button.recreativeEventMapTplBtn[data-id="' + latLngId + '"]').parent().siblings('div.recreativeEventMapTplContainer')[0], {childList: true});
                                    $('#<?= $_REQUEST['name_w'] ?>_map button.recreativeEventMapTplBtn[data-id="' + latLngId + '"]').parent().siblings('div.recreativeEventMapTplContainer').find("button.polyin_"+$(this).data("r")).click();										
                                });
                            });
                        });								
                    });

                    if (hasRealTime) {
                        $(popupId + ' button.recreativeEventMapContactsBtn[data-id="' +
                            latLngId + '"]').trigger("click");
                    }

                    $(popupId + ' table.gisPopupTable[id="' + latLngId +
                        '"] button.btn-sm').css("background", color2);
                    $(popupId + ' table.gisPopupTable[id="' + latLngId +
                        '"] button.btn-sm').css("border", "none");
                    $(popupId + ' table.gisPopupTable[id="' + latLngId +
                        '"] button.btn-sm').css("color", "black");

                    $(popupId + ' table.gisPopupTable[id="' + latLngId +
                        '"] button.btn-sm').focus(function() {
                        $(this).css("outline", "0");
                    });

                    $(popupId + ' input.gisPopupKeepDataCheck[data-id="' +
                        latLngId + '"]').off('click');
                    $(popupId + ' input.gisPopupKeepDataCheck[data-id="' +
                        latLngId + '"]').click(function() {
                        if ($(this).attr("data-keepData") === "false") {
                            $(this).attr("data-keepData", "true");
                        } else {
                            $(this).attr("data-keepData", "false");
                        }
                    });

                    $(popupId + ' button.lastValueBtn').off('mouseenter');
                    $(popupId + ' button.lastValueBtn').off('mouseleave');
                    $(popupId + ' button.lastValueBtn[data-id="' +
                        latLngId + '"]').hover(function() {
                            if ($(this).attr("data-lastDataClicked") === "false") {
                                $(this).css("background", color1);
                                $(this).css("background", "-webkit-linear-gradient(left, " +
                                    color1 + ", " + color2 + ")");
                                $(this).css("background", "background: -o-linear-gradient(left, " +
                                    color1 + ", " + color2 + ")");
                                $(this).css("background",
                                    "background: -moz-linear-gradient(left, " + color1 + ", " +
                                    color2 + ")");
                                $(this).css("background", "background: linear-gradient(to left, " +
                                    color1 + ", " + color2 + ")");
                                $(this).css("font-weight", "bold");
                            }

                            var widgetTargetList = $(this).attr("data-targetWidgets").split(',');
                            var colIndex = $(this).parent().index();
                            //var title = $(this).parents("tbody").find("tr").eq(0).find("th").eq(colIndex).html();
                            var title = $(this).parents("tr").find("td").eq(0).html();

                            for (var i = 0; i < widgetTargetList.length; i++) {
                                $.event.trigger({
                                    type: "mouseOverLastDataFromExternalContentGis_" +
                                        widgetTargetList[i],
                                    eventGenerator: $(this),
                                    targetWidget: widgetTargetList[i],
                                    value: $(this).attr("data-lastValue"),
                                    color1: $(this).attr("data-color1"),
                                    color2: $(this).attr("data-color2"),
                                    widgetTitle: title
                                });
                            }
                        },
                        function() {
                            if ($(this).attr("data-lastDataClicked") === "false") {
                                $(this).css("background", color2);
                                $(this).css("font-weight", "normal");
                            }
                            var widgetTargetList = $(this).attr("data-targetWidgets").split(',');

                            for (var i = 0; i < widgetTargetList.length; i++) {
                                $.event.trigger({
                                    type: "mouseOutLastDataFromExternalContentGis_" +
                                        widgetTargetList[i],
                                    eventGenerator: $(this),
                                    targetWidget: widgetTargetList[i],
                                    value: $(this).attr("data-lastValue"),
                                    color1: $(this).attr("data-color1"),
                                    color2: $(this).attr("data-color2")
                                });
                            }
                        });

                    //Disabilitiamo i 4Hours se last update più vecchio di 4 ore
                    if (rtDataAgeSec > 14400) {
                        $(popupId + ' button.timeTrendBtn[data-id="' +
                            latLngId + '"][data-range="4/HOUR"]').attr("data-disabled", "true");
                        //Disabilitiamo i 24Hours se last update più vecchio di 24 ore
                        if (rtDataAgeSec > 86400) {
                            $(popupId + ' button.timeTrendBtn[data-id="' +
                                latLngId + '"][data-range="1/DAY"]').attr("data-disabled", "true");
                            //Disabilitiamo i 7 days se last update più vecchio di 7 days
                            if (rtDataAgeSec > 604800) {
                                $(popupId + ' button.timeTrendBtn[data-id="' +
                                    latLngId + '"][data-range="7/DAY"]').attr("data-disabled",
                                    "true");
                                //Disabilitiamo i 30 days se last update più vecchio di 30 days
                                //if(rtDataAgeSec > 18144000)
                                if (rtDataAgeSec > 2592000) {
                                    $(popupId + ' button.timeTrendBtn[data-id="' +
                                        latLngId + '"][data-range="30/DAY"]').attr("data-disabled",
                                        "true");
                                    //Disabilitiamo i 6 months se last update più vecchio di 180 days
                                    if (rtDataAgeSec > 15552000) {
                                        $(popupId + ' button.timeTrendBtn[data-id="' +
                                            latLngId + '"][data-range="180/DAY"]').attr(
                                            "data-disabled", "true");
                                        //Disabilitiamo i 1 year se last update più vecchio di 365 days
                                        if (rtDataAgeSec > 31536000) {
                                            $(popupId + ' button.timeTrendBtn[data-id="' +
                                                latLngId + '"][data-range="365/DAY"]').attr(
                                                "data-disabled", "true");
                                        } else {
                                            $(popupId + ' button.timeTrendBtn[data-id="' +
                                                latLngId + '"][data-range="365/DAY"]').attr(
                                                "data-disabled", "false");
                                        }
                                    } else {
                                        $(popupId + ' button.timeTrendBtn[data-id="' +
                                            latLngId + '"][data-range="180/DAY"]').attr(
                                            "data-disabled", "false");
                                    }
                                } else {
                                    $(popupId + ' button.timeTrendBtn[data-id="' +
                                        latLngId + '"][data-range="30/DAY"]').attr("data-disabled",
                                        "false");
                                }
                            } else {
                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpen button.timeTrendBtn[data-id="' +
                                    latLngId + '"][data-range="7/DAY"]').attr("data-disabled",
                                    "false");
                            }
                        } else {
                            $(popupId + ' button.timeTrendBtn[data-id="' +
                                latLngId + '"][data-range="1/DAY"]').attr("data-disabled", "false");
                        }
                    } else {
                        $(popupId + ' button.timeTrendBtn[data-id="' +
                            latLngId + '"][data-range="4/HOUR"]').attr("data-disabled", "false");
                        $(popupId + ' button.timeTrendBtn[data-id="' +
                            latLngId + '"][data-range="1/DAY"]').attr("data-disabled", "false");
                        $(popupId + ' button.timeTrendBtn[data-id="' +
                            latLngId + '"][data-range="7/DAY"]').attr("data-disabled", "false");
                        $(popupId + ' button.timeTrendBtn[data-id="' +
                            latLngId + '"][data-range="30/DAY"]').attr("data-disabled", "false");
                        $(popupId + ' button.timeTrendBtn[data-id="' +
                            latLngId + '"][data-range="180/DAY"]').attr("data-disabled", "false");
                        $(popupId + ' button.timeTrendBtn[data-id="' +
                            latLngId + '"][data-range="365/DAY"]').attr("data-disabled", "false");
                    }

                    $(popupId + ' button.timeTrendBtn').off('mouseenter');
                    $(popupId + ' button.timeTrendBtn').off('mouseleave');
                    $(popupId + ' button.timeTrendBtn[data-id="' +
                        latLngId + '"]').hover(function() {
                            if (isNaN(parseFloat($(this).parents('tr').find('td').eq(1).html())) ||
                                ($(this).attr("data-disabled") === "true")) {
                                $(this).css("background-color", "#e6e6e6");
                                $(this).off("hover");
                                $(this).off("click");
                            } else {
                                if ($(this).attr("data-timeTrendClicked") === "false") {
                                    $(this).css("background", color1);
                                    $(this).css("background", "-webkit-linear-gradient(left, " +
                                        color1 + ", " + color2 + ")");
                                    $(this).css("background",
                                        "background: -o-linear-gradient(left, " + color1 +
                                        ", " + color2 + ")");
                                    $(this).css("background",
                                        "background: -moz-linear-gradient(left, " + color1 +
                                        ", " + color2 + ")");
                                    $(this).css("background",
                                        "background: linear-gradient(to left, " + color1 +
                                        ", " + color2 + ")");
                                    $(this).css("font-weight", "bold");
                                }

                                var widgetTargetList = $(this).attr("data-targetWidgets").split(
                                    ',');
                                //var colIndex = $(this).parent().index();
                                //var title = $(this).parents("tbody").find("tr").eq(0).find("th").eq(colIndex).html() + " - " + $(this).attr("data-range-shown");
                                var title = $(this).parents("tr").find("td").eq(0).html() + " - " +
                                    $(this).attr("data-range-shown");

                                for (var i = 0; i < widgetTargetList.length; i++) {
                                    $.event.trigger({
                                        type: "mouseOverTimeTrendFromExternalContentGis_" +
                                            widgetTargetList[i],
                                        eventGenerator: $(this),
                                        targetWidget: widgetTargetList[i],
                                        value: $(this).attr("data-lastValue"),
                                        color1: $(this).attr("data-color1"),
                                        color2: $(this).attr("data-color2"),
                                        widgetTitle: title
                                    });
                                }
                            }
                        },
                        function() {
                            if (isNaN(parseFloat($(this).parents('tr').find('td').eq(1).html())) ||
                                ($(this).attr("data-disabled") === "true")) {
                                $(this).css("background-color", "#e6e6e6");
                                $(this).off("hover");
                                $(this).off("click");
                            } else {
                                if ($(this).attr("data-timeTrendClicked") === "false") {
                                    $(this).css("background", color2);
                                    $(this).css("font-weight", "normal");
                                }

                                var widgetTargetList = $(this).attr("data-targetWidgets").split(
                                    ',');
                                for (var i = 0; i < widgetTargetList.length; i++) {
                                    $.event.trigger({
                                        type: "mouseOutTimeTrendFromExternalContentGis_" +
                                            widgetTargetList[i],
                                        eventGenerator: $(this),
                                        targetWidget: widgetTargetList[i],
                                        value: $(this).attr("data-lastValue"),
                                        color1: $(this).attr("data-color1"),
                                        color2: $(this).attr("data-color2")
                                    });
                                }
                            }
                        });

                    $(popupId + ' button.lastValueBtn[data-id=' + latLngId +
                        ']').off('click');
                    $(popupId + ' button.lastValueBtn[data-id=' + latLngId +
                        ']').click(function(event) {
                        $(popupId + ' button.lastValueBtn').each(
                            function(i) {
                                $(this).css("background", $(this).attr("data-color2"));
                            });
                        $(popupId + ' button.lastValueBtn').css(
                            "font-weight", "normal");
                        $(this).css("background", $(this).attr("data-color1"));
                        $(this).css("font-weight", "bold");
                        $(popupId + ' button.lastValueBtn').attr(
                            "data-lastDataClicked", "false");
                        $(this).attr("data-lastDataClicked", "true");
                        var widgetTargetList = $(this).attr("data-targetWidgets").split(',');
                        var colIndex = $(this).parent().index();
                        var title = $(this).parents("tr").find("td").eq(0).html();

                        for (var i = 0; i < widgetTargetList.length; i++) {
                            $.event.trigger({
                                type: "showLastDataFromExternalContentGis_" +
                                    widgetTargetList[i],
                                eventGenerator: $(this),
                                targetWidget: widgetTargetList[i],
                                value: $(this).attr("data-lastValue"),
                                color1: $(this).attr("data-color1"),
                                color2: $(this).attr("data-color2"),
                                widgetTitle: title,
                                field: $(this).attr("data-field"),
                                serviceUri: $(this).attr("data-serviceUri"),
                                marker: markersCache["" + $(this).attr("data-id") + ""],
                                mapRef: map.defaultMapRef,
                                fake: $(this).attr("data-fake"),
                                fakeId: $(this).attr("data-fakeId")
                            });
                        }

                        $(popupId + ' button.timeTrendBtn[data-id="' +
                            latLngId + '"]').each(function(i) {
                            if (isNaN(parseFloat($(this).parents('tr').find('td').eq(1)
                                    .html())) || ($(this).attr("data-disabled") ===
                                    "true")) {
                                $(this).css("background-color", "#e6e6e6");
                                $(this).off("hover");
                                $(this).off("click");
                            }
                        });

                    });

                    $(popupId + ' button.timeTrendBtn').off('click');
                    $(popupId + ' button.timeTrendBtn').click(function(
                        event) {
                        if (isNaN(parseFloat($(this).parents('tr').find('td').eq(1).html())) ||
                            ($(this).attr("data-disabled") === "true")) {
                            $(this).css("background-color", "#e6e6e6");
                            $(this).off("hover");
                            $(this).off("click");
                        } else {
                            $(popupId + ' button.timeTrendBtn').css(
                                "background", $(this).attr("data-color2"));
                            $(popupId + ' button.timeTrendBtn').css(
                                "font-weight", "normal");
                            $(this).css("background", $(this).attr("data-color1"));
                            $(this).css("font-weight", "bold");
                            $(popupId + ' button.timeTrendBtn')
                                .attr("data-timeTrendClicked", "false");
                            $(this).attr("data-timeTrendClicked", "true");
                            var widgetTargetList = $(this).attr("data-targetWidgets").split(
                                ',');
                            var colIndex = $(this).parent().index();
                            var title = $(this).parents("tr").find("td").eq(0).html() + " - " +
                                $(this).attr("data-range-shown");
                            var lastUpdateTime = $(this).parents(
                                'div.recreativeEventMapContactsContainer').find(
                                'span.popupLastUpdate').html();

                            var now = new Date();
                            var lastUpdateDate = new Date(lastUpdateTime);
                            var diff = parseFloat(Math.abs(now - lastUpdateDate) / 1000);
                            var range = $(this).attr("data-range");

                            for (var i = 0; i < widgetTargetList.length; i++) {
                                $.event.trigger({
                                    type: "showTimeTrendFromExternalContentGis_" +
                                        widgetTargetList[i],
                                    eventGenerator: $(this),
                                    targetWidget: widgetTargetList[i],
                                    range: range,
                                    color1: $(this).attr("data-color1"),
                                    color2: $(this).attr("data-color2"),
                                    widgetTitle: title,
                                    field: $(this).attr("data-field"),
                                    serviceUri: $(this).attr("data-serviceUri"),
                                    marker: markersCache["" + $(this).attr("data-id") +
                                        ""],
                                    mapRef: map.defaultMapRef,
                                    fake: false
                                    //fake: $(this).attr("data-fake")
                                });
                            }

                            $(popupId + ' button.timeTrendBtn[data-id="' +
                                latLngId + '"]').each(function(i) {
                                if (isNaN(parseFloat($(this).parents('tr').find('td')
                                        .eq(1).html())) || ($(this).attr(
                                        "data-disabled") === "true")) {
                                    $(this).css("background-color", "#e6e6e6");
                                    $(this).off("hover");
                                    $(this).off("click");
                                }
                            });
                        }
                    });

                    $(popupId + ' button.timeTrendBtn[data-id="' +
                        latLngId + '"]').each(function(i) {
                        if (isNaN(parseFloat($(this).parents('tr').find('td').eq(1).html())) ||
                            ($(this).attr("data-disabled") === "true")) {
                            $(this).css("background-color", "#e6e6e6");
                            $(this).off("hover");
                            $(this).off("click");
                        }
                    });

                    map.defaultMapRef.off('popupclose');
                    map.defaultMapRef.on('popupclose', function(closeEvt) {
                        var popupContent = $('<div></div>');
                        popupContent.html(closeEvt.popup._content);

                        if (popupContent.find("button.lastValueBtn").length > 0) {
                            var widgetTargetList = popupContent.find("button.lastValueBtn").eq(
                                0).attr("data-targetWidgets").split(',');

                            if (($(popupId + ' button.lastValueBtn[data-lastDataClicked=true]')
                                    .length > 0) && ($('input.gisPopupKeepDataCheck').attr(
                                    'data-keepData') === "false")) {
                                for (var i = 0; i < widgetTargetList.length; i++) {
                                    $.event.trigger({
                                        type: "restoreOriginalLastDataFromExternalContentGis_" +
                                            widgetTargetList[i],
                                        eventGenerator: $(this),
                                        targetWidget: widgetTargetList[i],
                                        value: $(this).attr("data-lastValue"),
                                        color1: $(this).attr("data-color1"),
                                        color2: $(this).attr("data-color2")
                                    });
                                }
                            }

                            if (($(popupId + ' button.timeTrendBtn[data-timeTrendClicked=true]')
                                    .length > 0) && ($('input.gisPopupKeepDataCheck').attr(
                                    'data-keepData') === "false")) {
                                for (var i = 0; i < widgetTargetList.length; i++) {
                                    $.event.trigger({
                                        type: "restoreOriginalTimeTrendFromExternalContentGis_" +
                                            widgetTargetList[i],
                                        eventGenerator: $(this),
                                        targetWidget: widgetTargetList[i]
                                    });
                                }
                            }
                        }
                    });

                    $(popupId + ' div.leaflet-popup').off('click');
                },
                error: function(errorData) {
                    console.log("Error in data retrieval");
                    console.log(JSON.stringify(errorData));
                    var serviceProperties = feature.properties;

                    var underscoreIndex = serviceProperties.serviceType.indexOf("_");
                    var serviceClass = serviceProperties.serviceType.substr(0, underscoreIndex);
                    var serviceSubclass = serviceProperties.serviceType.substr(underscoreIndex);
                    serviceSubclass = serviceSubclass.replace(/_/g, " ");

                    popupText = '<h3 class="gisPopupTitle">' + serviceProperties.name + '</h3>' +
                        '<p><b>Typology: </b>' + serviceClass + " - " + serviceSubclass + '</p>' +
                        '<p><i>Data are limited due to an issue in their retrieval</i></p>';

                    event.target.bindPopup(popupText, {
                        offset: [15, 0],
                        minWidth: 215,
                        maxWidth: 600
                    }).openPopup();
                }
            });
        }

        function gisPrepareCustomMarkerFullScreen(feature, latlng) {
            var mapPinImg = '../img/gisMapIcons/' + feature.properties.serviceType + '.png';
            var markerIcon = L.icon({
                iconUrl: mapPinImg,
                iconAnchor: [16, 37]
            });

            var marker = new L.Marker(latlng, {
                icon: markerIcon
            });

            var latLngKey = latlng.lat + "" + latlng.lng;

            latLngKey = latLngKey.replace(".", "");
            latLngKey = latLngKey.replace(".",
                ""); //Incomprensibile il motivo ma con l'espressione regolare /./g non funziona
            markersCache["" + latLngKey + ""] = marker;

            marker.on('mouseover', function(event) {
                var hoverImg = '../img/gisMapIcons/over/' + feature.properties.serviceType + '_over.png';
                var hoverIcon = L.icon({
                    iconUrl: hoverImg
                });
                event.target.setIcon(hoverIcon);
            });

            marker.on('mouseout', function(event) {
                var outImg = '../img/gisMapIcons/' + feature.properties.serviceType + '.png';
                var outIcon = L.icon({
                    iconUrl: outImg
                });
                event.target.setIcon(outIcon);
            });

            marker.on('click', function(event) {
                fullscreendefaultMapRef.off('moveend');

                event.target.unbindPopup();
                newpopup = null;
                var popupText, realTimeData, measuredTime, rtDataAgeSec, targetWidgets, color1, color2 =
                    null;
                var urlToCall, fake, fakeId = null;

                if (feature.properties.fake === 'true') {
                    urlToCall = "../serviceMapFake.php?getSingleGeoJson=true&singleGeoJsonId=" + feature.id;
                    fake = true;
                    fakeId = feature.id;
                } else {
                    urlToCall = "<?= $superServiceMapProxy; ?>api/v1/?serviceUri=" + encodeServiceUri(
                        feature.properties.serviceUri) + "&format=json&fullCount=false";
                    fake = false;
                }

                var latLngId = event.target.getLatLng().lat + "" + event.target.getLatLng().lng;
                latLngId = latLngId.replace(".", "");
                latLngId = latLngId.replace(".",
                    ""); //Incomprensibile il motivo ma con l'espressione regolare /./g non funziona

                $.ajax({
                    url: urlToCall,
                    type: "GET",
                    data: {},
                    async: true,
                    dataType: 'json',
                    success: function(geoJsonServiceData) {
                        var fatherNode = null;
                        if (geoJsonServiceData.hasOwnProperty("BusStop")) {
                            fatherNode = geoJsonServiceData.BusStop;
                        } else {
                            if (geoJsonServiceData.hasOwnProperty("Sensor")) {
                                fatherNode = geoJsonServiceData.Sensor;
                            } else {
                                //Prevedi anche la gestione del caso in cui non c'è nessuna di queste tre, sennò il widget rimane appeso.
                                fatherNode = geoJsonServiceData.Service;
                            }
                        }

                        var serviceProperties = fatherNode.features[0].properties;
                        var underscoreIndex = serviceProperties.serviceType.indexOf("_");
                        var serviceClass = serviceProperties.serviceType.substr(0,
                            underscoreIndex);
                        var serviceSubclass = serviceProperties.serviceType.substr(
                            underscoreIndex);
                        serviceSubclass = serviceSubclass.replace(/_/g, " ");

                        fatherNode.features[0].properties.targetWidgets = feature.properties
                            .targetWidgets;
                        fatherNode.features[0].properties.color1 = feature.properties.color1;
                        fatherNode.features[0].properties.color2 = feature.properties.color2;
                        targetWidgets = feature.properties.targets;
                        color1 = feature.properties.color1;
                        color2 = feature.properties.color2;

                        //Popup nuovo stile uguali a quelli degli eventi ricreativi
                        popupText = '<h3 class="recreativeEventMapTitle" style="background: ' +
                            color1 + '; background: -webkit-linear-gradient(right, ' + color1 +
                            ', ' + color2 + '); background: -o-linear-gradient(right, ' +
                            color1 + ', ' + color2 +
                            '); background: -moz-linear-gradient(right, ' + color1 + ', ' +
                            color2 + '); background: linear-gradient(to right, ' + color1 +
                            ', ' + color2 + ');">' + serviceProperties.name + '</h3>';
                        if ((serviceProperties.serviceUri !== '') && (serviceProperties
                                .serviceUri !== undefined) && (serviceProperties.serviceUri !==
                                'undefined') && (serviceProperties.serviceUri !== null) && (
                                serviceProperties.serviceUri !== 'null')) {
                            popupText +=
                                '<div class="recreativeEventMapSubTitle" style="background: ' +
                                color1 + '; background: -webkit-linear-gradient(right, ' +
                                color1 + ', ' + color2 +
                                '); background: -o-linear-gradient(right, ' + color1 + ', ' +
                                color2 + '); background: -moz-linear-gradient(right, ' +
                                color1 + ', ' + color2 +
                                '); background: linear-gradient(to right, ' + color1 + ', ' +
                                color2 + ');">' + "Value Name: " + serviceProperties.serviceUri
                                .split("/")[serviceProperties.serviceUri.split("/").length -
                                    1] + '</div>';
                            //   popupText += '<div class="recreativeEventMapSubTitle">' + "Value Name: " + serviceProperties.serviceUri.split("/")[serviceProperties.serviceUri.split("/").length - 1] + '</div>';
                        }
                        popupText +=
                            '<div class="recreativeEventMapBtnContainer"><button data-id="' +
                            latLngId +
                            '" class="recreativeEventMapDetailsBtn recreativeEventMapBtn recreativeEventMapBtnActive" type="button" style="background: ' +
                            color1 + '; background: -webkit-linear-gradient(right, ' + color1 +
                            ', ' + color2 + '); background: -o-linear-gradient(right, ' +
                            color1 + ', ' + color2 +
                            '); background: -moz-linear-gradient(right, ' + color1 + ', ' +
                            color2 + '); background: linear-gradient(to right, ' + color1 +
                            ', ' + color2 + ');">Details</button><button data-id="' + latLngId +
                            '" class="recreativeEventMapDescriptionBtn recreativeEventMapBtn" type="button" style="background: ' +
                            color1 + '; background: -webkit-linear-gradient(right, ' + color1 +
                            ', ' + color2 + '); background: -o-linear-gradient(right, ' +
                            color1 + ', ' + color2 +
                            '); background: -moz-linear-gradient(right, ' + color1 + ', ' +
                            color2 + '); background: linear-gradient(to right, ' + color1 +
                            ', ' + color2 + ');">Description</button><button data-id="' +
                            latLngId +
                            '" class="recreativeEventMapContactsBtn recreativeEventMapBtn" type="button" style="background: ' +
                            color1 + '; background: -webkit-linear-gradient(right, ' + color1 +
                            ', ' + color2 + '); background: -o-linear-gradient(right, ' +
                            color1 + ', ' + color2 +
                            '); background: -moz-linear-gradient(right, ' + color1 + ', ' +
                            color2 + '); background: linear-gradient(to right, ' + color1 +
                            ', ' + color2 + ');">RT data</button></div>';

                        popupText +=
                            '<div class="recreativeEventMapDataContainer recreativeEventMapDetailsContainer">';

                        popupText += '<table id="' + latLngId +
                            '" class="gisPopupGeneralDataTable">';
                        //Intestazione
                        popupText += '<thead>';
                        popupText += '<th style="background: ' + color2 + '">Description</th>';
                        popupText += '<th style="background: ' + color2 + '">Value</th>';
                        popupText += '</thead>';

                        //Corpo
                        popupText += '<tbody>';

                        if ((serviceProperties.serviceUri !== '') && (serviceProperties
                                .serviceUri !== undefined) && (serviceProperties.serviceUri !==
                                'undefined') && (serviceProperties.serviceUri !== null) && (
                                serviceProperties.serviceUri !== 'null')) {
                            popupText += '<tr><td>Value Name</td><td>' + serviceProperties
                                .serviceUri.split("/")[serviceProperties.serviceUri.split("/")
                                    .length - 1] + '<td></tr>';
                        }

                        if (serviceProperties.hasOwnProperty('website')) {
                            if ((serviceProperties.website !== '') && (serviceProperties
                                    .website !== undefined) && (serviceProperties.website !==
                                    'undefined') && (serviceProperties.website !== null) && (
                                    serviceProperties.website !== 'null')) {
                                if (serviceProperties.website.includes('http') ||
                                    serviceProperties.website.includes('https')) {
                                    popupText += '<tr><td>Website</td><td><a href="' +
                                        serviceProperties.website +
                                        '" target="_blank">Link</a></td></tr>';
                                } else {
                                    popupText += '<tr><td>Website</td><td><a href="' +
                                        serviceProperties.website +
                                        '" target="_blank">Link</a></td></tr>';
                                }
                            } else {
                                popupText += '<tr><td>Website</td><td>-</td></tr>';
                            }
                        } else {
                            popupText += '<tr><td>Website</td><td>-</td></tr>';
                        }

                        if (serviceProperties.hasOwnProperty('email')) {
                            if ((serviceProperties.email !== '') && (serviceProperties.email !==
                                    undefined) && (serviceProperties.email !== 'undefined') && (
                                    serviceProperties.email !== null) && (serviceProperties
                                    .email !== 'null')) {
                                popupText += '<tr><td>E-Mail</td><td>' + serviceProperties
                                    .email + '<td></tr>';
                            } else {
                                popupText += '<tr><td>E-Mail</td><td>-</td></tr>';
                            }
                        } else {
                            popupText += '<tr><td>E-Mail</td><td>-</td></tr>';
                        }

                        if (serviceProperties.hasOwnProperty('address')) {
                            if ((serviceProperties.address !== '') && (serviceProperties
                                    .address !== undefined) && (serviceProperties.address !==
                                    'undefined') && (serviceProperties.address !== null) && (
                                    serviceProperties.address !== 'null')) {
                                popupText += '<tr><td>Address</td><td>' + serviceProperties
                                    .address + '</td></tr>';
                            } else {
                                popupText += '<tr><td>Address</td><td>-</td></tr>';
                            }
                        } else {
                            popupText += '<tr><td>Address</td><td>-</td></tr>';
                        }

                        if (serviceProperties.hasOwnProperty('civic')) {
                            if ((serviceProperties.civic !== '') && (serviceProperties.civic !==
                                    undefined) && (serviceProperties.civic !== 'undefined') && (
                                    serviceProperties.civic !== null) && (serviceProperties
                                    .civic !== 'null')) {
                                popupText += '<tr><td>Civic n.</td><td>' + serviceProperties
                                    .civic + '</td></tr>';
                            } else {
                                popupText += '<tr><td>Civic n.</td><td>-</td></tr>';
                            }
                        } else {
                            popupText += '<tr><td>Civic n.</td><td>-</td></tr>';
                        }

                        if (serviceProperties.hasOwnProperty('cap')) {
                            if ((serviceProperties.cap !== '') && (serviceProperties.cap !==
                                    undefined) && (serviceProperties.cap !== 'undefined') && (
                                    serviceProperties.cap !== null) && (serviceProperties
                                    .cap !== 'null')) {
                                popupText += '<tr><td>C.A.P.</td><td>' + serviceProperties.cap +
                                    '</td></tr>';
                            }
                        }

                        if (serviceProperties.hasOwnProperty('city')) {
                            if ((serviceProperties.city !== '') && (serviceProperties.city !==
                                    undefined) && (serviceProperties.city !== 'undefined') && (
                                    serviceProperties.city !== null) && (serviceProperties
                                    .city !== 'null')) {
                                popupText += '<tr><td>City</td><td>' + serviceProperties.city +
                                    '</td></tr>';
                            } else {
                                popupText += '<tr><td>City</td><td>-</td></tr>';
                            }
                        } else {
                            popupText += '<tr><td>City</td><td>-</td></tr>';
                        }

                        if (serviceProperties.hasOwnProperty('province')) {
                            if ((serviceProperties.province !== '') && (serviceProperties
                                    .province !== undefined) && (serviceProperties.province !==
                                    'undefined') && (serviceProperties.province !== null) && (
                                    serviceProperties.province !== 'null')) {
                                popupText += '<tr><td>Province</td><td>' + serviceProperties
                                    .province + '</td></tr>';
                            }
                        }

                        if (serviceProperties.hasOwnProperty('phone')) {
                            if ((serviceProperties.phone !== '') && (serviceProperties.phone !==
                                    undefined) && (serviceProperties.phone !== 'undefined') && (
                                    serviceProperties.phone !== null) && (serviceProperties
                                    .phone !== 'null')) {
                                popupText += '<tr><td>Phone</td><td>' + serviceProperties
                                    .phone + '</td></tr>';
                            } else {
                                popupText += '<tr><td>Phone</td><td>-</td></tr>';
                            }
                        } else {
                            popupText += '<tr><td>Phone</td><td>-</td></tr>';
                        }

                        if (serviceProperties.hasOwnProperty('fax')) {
                            if ((serviceProperties.fax !== '') && (serviceProperties.fax !==
                                    undefined) && (serviceProperties.fax !== 'undefined') && (
                                    serviceProperties.fax !== null) && (serviceProperties
                                    .fax !== 'null')) {
                                popupText += '<tr><td>Fax</td><td>' + serviceProperties.fax +
                                    '</td></tr>';
                            }
                        }

                        if (serviceProperties.hasOwnProperty('note')) {
                            if ((serviceProperties.note !== '') && (serviceProperties.note !==
                                    undefined) && (serviceProperties.note !== 'undefined') && (
                                    serviceProperties.note !== null) && (serviceProperties
                                    .note !== 'null')) {
                                popupText += '<tr><td>Notes</td><td>' + serviceProperties.note +
                                    '</td></tr>';
                            }
                        }

                        if (serviceProperties.hasOwnProperty('agency')) {
                            if ((serviceProperties.agency !== '') && (serviceProperties
                                    .agency !== undefined) && (serviceProperties.agency !==
                                    'undefined') && (serviceProperties.agency !== null) && (
                                    serviceProperties.agency !== 'null')) {
                                popupText += '<tr><td>Agency</td><td>' + serviceProperties
                                    .agency + '</td></tr>';
                            }
                        }

                        if (serviceProperties.hasOwnProperty('code')) {
                            if ((serviceProperties.code !== '') && (serviceProperties.code !==
                                    undefined) && (serviceProperties.code !== 'undefined') && (
                                    serviceProperties.code !== null) && (serviceProperties
                                    .code !== 'null')) {
                                popupText += '<tr><td>Code</td><td>' + serviceProperties.code +
                                    '</td></tr>';
                            }
                        }

                        popupText += '</tbody>';
                        popupText += '</table>';

                        if (geoJsonServiceData.hasOwnProperty('busLines')) {
                            if (geoJsonServiceData.busLines.results.bindings.length > 0) {
                                popupText += '<b>Lines: </b>';
                                for (var i = 0; i < geoJsonServiceData.busLines.results.bindings
                                    .length; i++) {
                                    popupText += '<span style="background: ' + color1 +
                                        '; background: -webkit-linear-gradient(right, ' +
                                        color1 + ', ' + color2 +
                                        '); background: -o-linear-gradient(right, ' + color1 +
                                        ', ' + color2 +
                                        '); background: -moz-linear-gradient(right, ' + color1 +
                                        ', ' + color2 +
                                        '); background: linear-gradient(to right, ' + color1 +
                                        ', ' + color2 + ');">' + geoJsonServiceData.busLines
                                        .results.bindings[i].busLine.value + '</span> ';
                                }
                            }
                        }

                        popupText += '</div>';

                        popupText +=
                            '<div class="recreativeEventMapDataContainer recreativeEventMapDescContainer">';

                        if ((serviceProperties.serviceUri !== '') && (serviceProperties
                                .serviceUri !== undefined) && (serviceProperties.serviceUri !==
                                'undefined') && (serviceProperties.serviceUri !== null) && (
                                serviceProperties.serviceUri !== 'null')) {
                            popupText += "Value Name: " + serviceProperties.serviceUri.split(
                                    "/")[serviceProperties.serviceUri.split("/").length - 1] +
                                "<br>";
                        }

                        if ((serviceProperties.serviceType !== '') && (serviceProperties
                                .serviceType !== undefined) && (serviceProperties
                                .serviceType !== 'undefined') && (serviceProperties
                                .serviceType !== null) && (serviceProperties.serviceType !==
                                'null')) {
                            popupText += "Nature: " + serviceProperties.serviceType.split(
                                /_(.+)/)[0] + "<br>";
                            popupText += "Subnature: " + serviceProperties.serviceType.split(
                                /_(.+)/)[1] + "<br><br>";
                        }

                        if (serviceProperties.hasOwnProperty('description')) {
                            if ((serviceProperties.description !== '') && (serviceProperties
                                    .description !== undefined) && (serviceProperties
                                    .description !== 'undefined') && (serviceProperties
                                    .description !== null) && (serviceProperties.description !==
                                    'null')) {
                                popupText += serviceProperties.description + "<br>";
                            } else {
                                popupText += "No description available";
                            }
                        } else {
                            popupText += 'No description available';
                        }

                        popupText += '</div>';

                        popupText +=
                            '<div class="recreativeEventMapDataContainer recreativeEventMapContactsContainer">';

                        var hasRealTime = false;

                        if (geoJsonServiceData.hasOwnProperty("realtime")) {
                            if (!jQuery.isEmptyObject(geoJsonServiceData.realtime)) {
                                realTimeData = geoJsonServiceData.realtime;
                                popupText +=
                                    '<div class="popupLastUpdateContainer centerWithFlex"><b>Last update:&nbsp;</b><span class="popupLastUpdate" data-id="' +
                                    latLngId + '"></span></div>';

                                if ((serviceClass.includes("Emergency")) && (serviceSubclass
                                        .includes("First aid"))) {
                                    //Tabella ad hoc per First Aid
                                    popupText += '<table id="' + latLngId +
                                        '" class="psPopupTable">';
                                    var series = {
                                        "firstAxis": {
                                            "desc": "Priority",
                                            "labels": [
                                                "Red code",
                                                "Yellow code",
                                                "Green code",
                                                "Blue code",
                                                "White code"
                                            ]
                                        },
                                        "secondAxis": {
                                            "desc": "Status",
                                            "labels": [],
                                            "series": []
                                        }
                                    };

                                    var dataSlot = null;

                                    measuredTime = realTimeData.results.bindings[0].measuredTime
                                        .value.replace("T", " ").replace("Z", "");

                                    for (var i = 0; i < realTimeData.results.bindings
                                        .length; i++) {
                                        if (realTimeData.results.bindings[i].state.value
                                            .indexOf("estinazione") > 0) {
                                            series.secondAxis.labels.push("Addressed");
                                        }

                                        if (realTimeData.results.bindings[i].state.value
                                            .indexOf("ttesa") > 0) {
                                            series.secondAxis.labels.push("Waiting");
                                        }

                                        if (realTimeData.results.bindings[i].state.value
                                            .indexOf("isita") > 0) {
                                            series.secondAxis.labels.push("In visit");
                                        }

                                        if (realTimeData.results.bindings[i].state.value
                                            .indexOf("emporanea") > 0) {
                                            series.secondAxis.labels.push("Observation");
                                        }

                                        if (realTimeData.results.bindings[i].state.value
                                            .indexOf("tali") > 0) {
                                            series.secondAxis.labels.push("Totals");
                                        }

                                        dataSlot = [];
                                        dataSlot.push(realTimeData.results.bindings[i].redCode
                                            .value);
                                        dataSlot.push(realTimeData.results.bindings[i]
                                            .yellowCode.value);
                                        dataSlot.push(realTimeData.results.bindings[i].greenCode
                                            .value);
                                        dataSlot.push(realTimeData.results.bindings[i].blueCode
                                            .value);
                                        dataSlot.push(realTimeData.results.bindings[i].whiteCode
                                            .value);

                                        series.secondAxis.series.push(dataSlot);
                                    }

                                    var colsQt = parseInt(parseInt(series.firstAxis.labels
                                        .length) + 1);
                                    var rowsQt = parseInt(parseInt(series.secondAxis.labels
                                        .length) + 1);

                                    for (var i = 0; i < rowsQt; i++) {
                                        var newRow = $("<tr></tr>");
                                        var z = parseInt(parseInt(i) - 1);

                                        if (i === 0) {
                                            //Riga di intestazione
                                            for (var j = 0; j < colsQt; j++) {
                                                if (j === 0) {
                                                    //Cella (0,0)
                                                    var newCell = $("<td></td>");

                                                    newCell.css("background-color",
                                                        "transparent");
                                                } else {
                                                    //Celle labels
                                                    var k = parseInt(parseInt(j) - 1);
                                                    var colLabelBckColor = null;
                                                    switch (k) {
                                                        case 0:
                                                            colLabelBckColor = "#ff0000";
                                                            break;

                                                        case 1:
                                                            colLabelBckColor = "#ffff00";
                                                            break;

                                                        case 2:
                                                            colLabelBckColor = "#66ff33";
                                                            break;

                                                        case 3:
                                                            colLabelBckColor = "#66ccff";
                                                            break;

                                                        case 4:
                                                            colLabelBckColor = "#ffffff";
                                                            break;
                                                    }

                                                    newCell = $("<td><span>" + series.firstAxis
                                                        .labels[k] + "</span></td>");
                                                    newCell.css("font-weight", "bold");
                                                    newCell.css("background-color",
                                                        colLabelBckColor);
                                                }
                                                newRow.append(newCell);
                                            }
                                        } else {
                                            //Righe dati
                                            for (var j = 0; j < colsQt; j++) {
                                                k = parseInt(parseInt(j) - 1);
                                                if (j === 0) {
                                                    //Cella label
                                                    newCell = $("<td>" + series.secondAxis
                                                        .labels[z] + "</td>");
                                                    newCell.css("font-weight", "bold");
                                                } else {
                                                    //Celle dati
                                                    newCell = $("<td>" + series.secondAxis
                                                        .series[z][k] + "</td>");
                                                    if (i === (rowsQt - 1)) {
                                                        newCell.css('font-weight', 'bold');
                                                        switch (j) {
                                                            case 1:
                                                                newCell.css('background-color',
                                                                    '#ffb3b3');
                                                                break;

                                                            case 2:
                                                                newCell.css('background-color',
                                                                    '#ffff99');
                                                                break;

                                                            case 3:
                                                                newCell.css('background-color',
                                                                    '#d9ffcc');
                                                                break;

                                                            case 4:
                                                                newCell.css('background-color',
                                                                    '#cceeff');
                                                                break;

                                                            case 5:
                                                                newCell.css('background-color',
                                                                    'white');
                                                                break;
                                                        }
                                                    }
                                                }
                                                newRow.append(newCell);
                                            }
                                        }
                                        popupText += newRow.prop('outerHTML');
                                    }

                                    popupText += '</table>';
                                } else {
                                    //Tabella nuovo stile
                                    popupText += '<table id="' + latLngId +
                                        '" class="gisPopupTable">';

                                    //Intestazione
                                    popupText += '<thead>';
                                    popupText += '<th style="background: ' + color1 +
                                        '; background: -webkit-linear-gradient(right, ' +
                                        color1 + ', ' + color2 +
                                        '); background: -o-linear-gradient(right, ' + color1 +
                                        ', ' + color2 +
                                        '); background: -moz-linear-gradient(right, ' + color1 +
                                        ', ' + color2 +
                                        '); background: linear-gradient(to right, ' + color1 +
                                        ', ' + color2 + ');">Description</th>';
                                    popupText += '<th style="background: ' + color1 +
                                        '; background: -webkit-linear-gradient(right, ' +
                                        color1 + ', ' + color2 +
                                        '); background: -o-linear-gradient(right, ' + color1 +
                                        ', ' + color2 +
                                        '); background: -moz-linear-gradient(right, ' + color1 +
                                        ', ' + color2 +
                                        '); background: linear-gradient(to right, ' + color1 +
                                        ', ' + color2 + ');">Value</th>';
                                    popupText += '<th colspan="5" style="background: ' +
                                        color1 +
                                        '; background: -webkit-linear-gradient(right, ' +
                                        color1 + ', ' + color2 +
                                        '); background: -o-linear-gradient(right, ' + color1 +
                                        ', ' + color2 +
                                        '); background: -moz-linear-gradient(right, ' + color1 +
                                        ', ' + color2 +
                                        '); background: linear-gradient(to right, ' + color1 +
                                        ', ' + color2 + ');">Buttons</th>';
                                    popupText += '</thead>';

                                    //Corpo
                                    popupText += '<tbody>';
                                    var dataDesc, dataVal, dataLastBtn, data4HBtn, dataDayBtn,
                                        data7DayBtn,
                                        data30DayBtn = null;
                                    for (var i = 0; i < realTimeData.head.vars.length; i++) {
                                        if (realTimeData.results.bindings[0][realTimeData.head
                                                .vars[i]
                                            ] !== null && realTimeData.results.bindings[0][
                                                realTimeData.head.vars[i]
                                            ] !== undefined) {
                                            if ((realTimeData.results.bindings[0][realTimeData
                                                    .head.vars[i]
                                                ]) && (realTimeData.head.vars[i] !== null) && (
                                                    realTimeData.head.vars[i] !== 'undefined'
                                                )) {
                                                if ((realTimeData.head.vars[i] !==
                                                        'updating') && (realTimeData.head.vars[
                                                        i] !== 'measuredTime') && (realTimeData
                                                        .head.vars[i] !== 'instantTime')) {
                                                    if (!realTimeData.results.bindings[0][
                                                            realTimeData.head.vars[i]
                                                        ].value.includes('Not Available')) {
                                                        //realTimeData.results.bindings[0][realTimeData.head.vars[i]].value = '-';
                                                        /*   dataDesc = realTimeData.head.vars[i].replace(/([A-Z])/g, ' $1').replace(/^./, function (str) {
                                                               return str.toUpperCase();
                                                           }); */
                                                        dataDesc = realTimeData.head.vars[i];
                                                        dataVal = realTimeData.results.bindings[
                                                                0][realTimeData.head.vars[i]]
                                                            .value;
                                                        dataLastBtn = '<td><button data-id="' +
                                                            latLngId +
                                                            '" type="button" class="lastValueBtn btn btn-sm" data-fake="' +
                                                            fake + '" data-fakeid="' + fakeId +
                                                            '" data-id="' + latLngId +
                                                            '" data-field="' + realTimeData.head
                                                            .vars[i] + '" data-serviceUri="' +
                                                            feature.properties.serviceUri +
                                                            '" data-lastDataClicked="false" data-targetWidgets="' +
                                                            targetWidgets +
                                                            '" data-lastValue="' + realTimeData
                                                            .results.bindings[0][realTimeData
                                                                .head.vars[i]
                                                            ].value + '" data-color1="' +
                                                            color1 + '" data-color2="' +
                                                            color2 +
                                                            '">Last<br>value</button></td>';
                                                        data4HBtn = '<td><button data-id="' +
                                                            latLngId +
                                                            '" type="button" class="timeTrendBtn btn btn-sm" data-fake="' +
                                                            fake + '" data-fakeid="' + fakeId +
                                                            '" data-id="' + latLngId +
                                                            '" data-field="' + realTimeData.head
                                                            .vars[i] + '" data-serviceUri="' +
                                                            feature.properties.serviceUri +
                                                            '" data-timeTrendClicked="false" data-range-shown="4 Hours" data-range="4/HOUR" data-targetWidgets="' +
                                                            targetWidgets + '" data-color1="' +
                                                            color1 + '" data-color2="' +
                                                            color2 +
                                                            '">Last<br>4 hours</button></td>';
                                                        dataDayBtn = '<td><button data-id="' +
                                                            latLngId +
                                                            '" type="button" class="timeTrendBtn btn btn-sm" data-fake="' +
                                                            fake + '" data-id="' + fakeId +
                                                            '" data-field="' + realTimeData.head
                                                            .vars[i] + '" data-serviceUri="' +
                                                            feature.properties.serviceUri +
                                                            '" data-timeTrendClicked="false" data-range-shown="Day" data-range="1/DAY" data-targetWidgets="' +
                                                            targetWidgets + '" data-color1="' +
                                                            color1 + '" data-color2="' +
                                                            color2 +
                                                            '">Last<br>24 hours</button></td>';
                                                        data7DayBtn = '<td><button data-id="' +
                                                            latLngId +
                                                            '" type="button" class="timeTrendBtn btn btn-sm" data-fake="' +
                                                            fake + '" data-id="' + fakeId +
                                                            '" data-field="' + realTimeData.head
                                                            .vars[i] + '" data-serviceUri="' +
                                                            feature.properties.serviceUri +
                                                            '" data-timeTrendClicked="false" data-range-shown="7 days" data-range="7/DAY" data-targetWidgets="' +
                                                            targetWidgets + '" data-color1="' +
                                                            color1 + '" data-color2="' +
                                                            color2 +
                                                            '">Last<br>7 days</button></td>';
                                                        data30DayBtn = '<td><button data-id="' +
                                                            latLngId +
                                                            '" type="button" class="timeTrendBtn btn btn-sm" data-fake="' +
                                                            fake + '" data-id="' + fakeId +
                                                            '" data-field="' + realTimeData.head
                                                            .vars[i] + '" data-serviceUri="' +
                                                            feature.properties.serviceUri +
                                                            '" data-timeTrendClicked="false" data-range-shown="30 days" data-range="30/DAY" data-targetWidgets="' +
                                                            targetWidgets + '" data-color1="' +
                                                            color1 + '" data-color2="' +
                                                            color2 +
                                                            '">Last<br>30 days</button></td>';
                                                        popupText += '<tr><td>' + dataDesc +
                                                            '</td><td>' + dataVal + '</td>' +
                                                            dataLastBtn + data4HBtn +
                                                            dataDayBtn + data7DayBtn +
                                                            data30DayBtn + '</tr>';
                                                    }
                                                } else {
                                                    measuredTime = realTimeData.results
                                                        .bindings[0][realTimeData.head.vars[i]]
                                                        .value.replace("T", " ");
                                                    var now = new Date();
                                                    var measuredTimeDate = new Date(
                                                        measuredTime);
                                                    rtDataAgeSec = Math.abs(now -
                                                        measuredTimeDate) / 1000;
                                                }
                                            }
                                        }
                                    }
                                    popupText += '</tbody>';
                                    popupText += '</table>';
                                    popupText +=
                                        '<p><b>Keep data on target widget(s) after popup close: </b><input data-id="' +
                                        latLngId +
                                        '" type="checkbox" class="gisPopupKeepDataCheck" data-keepData="false"/></p>';
                                }

                                hasRealTime = true;
                            }
                        }

                        popupText += '</div>';

                        newpopup = L.popup({
                            closeOnClick: false, //Non lo levare, sennò autoclose:false non funziona
                            autoClose: false,
                            offset: [15, 0],
                            minWidth: 435,
                            maxWidth: 435
                        }).setContent(popupText);

                        event.target.bindPopup(newpopup).openPopup();

                        if (hasRealTime) {
                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.recreativeEventMapContactsBtn[data-id="' +
                                latLngId + '"]').show();
                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.recreativeEventMapContactsBtn[data-id="' +
                                latLngId + '"]').trigger("click");
                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap span.popupLastUpdate[data-id="' +
                                latLngId + '"]').html(measuredTime);
                        } else {
                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.recreativeEventMapContactsBtn[data-id="' +
                                latLngId + '"]').hide();
                        }

                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.recreativeEventMapDetailsBtn[data-id="' +
                            latLngId + '"]').off('click');
                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.recreativeEventMapDetailsBtn[data-id="' +
                            latLngId + '"]').click(function() {
                            $('#' + widgetName +
                                '_modalLinkOpenBodyDefaultMap div.recreativeEventMapDataContainer'
                            ).hide();
                            $('#' + widgetName +
                                '_modalLinkOpenBodyDefaultMap div.recreativeEventMapDetailsContainer'
                            ).show();
                            $('#' + widgetName +
                                '_modalLinkOpenBodyDefaultMap button.recreativeEventMapBtn'
                            ).removeClass('recreativeEventMapBtnActive');
                            $(this).addClass('recreativeEventMapBtnActive');
                        });

                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.recreativeEventMapDescriptionBtn[data-id="' +
                            latLngId + '"]').off('click');
                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.recreativeEventMapDescriptionBtn[data-id="' +
                            latLngId + '"]').click(function() {
                            $('#' + widgetName +
                                '_modalLinkOpenBodyDefaultMap div.recreativeEventMapDataContainer'
                            ).hide();
                            $('#' + widgetName +
                                '_modalLinkOpenBodyDefaultMap div.recreativeEventMapDescContainer'
                            ).show();
                            $('#' + widgetName +
                                '_modalLinkOpenBodyDefaultMap button.recreativeEventMapBtn'
                            ).removeClass('recreativeEventMapBtnActive');
                            $(this).addClass('recreativeEventMapBtnActive');
                        });

                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.recreativeEventMapContactsBtn[data-id="' +
                            latLngId + '"]').off('click');
                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.recreativeEventMapContactsBtn[data-id="' +
                            latLngId + '"]').click(function() {
                            $('#' + widgetName +
                                '_modalLinkOpenBodyDefaultMap div.recreativeEventMapDataContainer'
                            ).hide();
                            $('#' + widgetName +
                                '_modalLinkOpenBodyDefaultMap div.recreativeEventMapContactsContainer'
                            ).show();
                            $('#' + widgetName +
                                '_modalLinkOpenBodyDefaultMap button.recreativeEventMapBtn'
                            ).removeClass('recreativeEventMapBtnActive');
                            $(this).addClass('recreativeEventMapBtnActive');
                        });

                        if (hasRealTime) {
                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.recreativeEventMapContactsBtn[data-id="' +
                                latLngId + '"]').trigger("click");
                        }

                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap table.gisPopupTable[id="' +
                            latLngId + '"] button.btn-sm').css("background", color2);
                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap table.gisPopupTable[id="' +
                            latLngId + '"] button.btn-sm').css("border", "none");
                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap table.gisPopupTable[id="' +
                            latLngId + '"] button.btn-sm').css("color", "black");

                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap table.gisPopupTable[id="' +
                            latLngId + '"] button.btn-sm').focus(function() {
                            $(this).css("outline", "0");
                        });

                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap input.gisPopupKeepDataCheck[data-id="' +
                            latLngId + '"]').off('click');
                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap input.gisPopupKeepDataCheck[data-id="' +
                            latLngId + '"]').click(function() {
                            if ($(this).attr("data-keepData") === "false") {
                                $(this).attr("data-keepData", "true");
                            } else {
                                $(this).attr("data-keepData", "false");
                            }
                        });

                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.lastValueBtn')
                            .off('mouseenter');
                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.lastValueBtn')
                            .off('mouseleave');
                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.lastValueBtn[data-id="' +
                            latLngId + '"]').hover(function() {
                                if ($(this).attr("data-lastDataClicked") === "false") {
                                    $(this).css("background", color1);
                                    $(this).css("background",
                                        "-webkit-linear-gradient(left, " + color1 +
                                        ", " + color2 + ")");
                                    $(this).css("background",
                                        "background: -o-linear-gradient(left, " +
                                        color1 + ", " + color2 + ")");
                                    $(this).css("background",
                                        "background: -moz-linear-gradient(left, " +
                                        color1 + ", " + color2 + ")");
                                    $(this).css("background",
                                        "background: linear-gradient(to left, " +
                                        color1 + ", " + color2 + ")");
                                    $(this).css("font-weight", "bold");
                                }

                                var widgetTargetList = $(this).attr("data-targetWidgets")
                                    .split(',');
                                var colIndex = $(this).parent().index();
                                //var title = $(this).parents("tbody").find("tr").eq(0).find("th").eq(colIndex).html();
                                var title = $(this).parents("tr").find("td").eq(0).html();

                                for (var i = 0; i < widgetTargetList.length; i++) {
                                    $.event.trigger({
                                        type: "mouseOverLastDataFromExternalContentGis_" +
                                            widgetTargetList[i],
                                        eventGenerator: $(this),
                                        targetWidget: widgetTargetList[i],
                                        value: $(this).attr("data-lastValue"),
                                        color1: $(this).attr("data-color1"),
                                        color2: $(this).attr("data-color2"),
                                        widgetTitle: title
                                    });
                                }
                            },
                            function() {
                                if ($(this).attr("data-lastDataClicked") === "false") {
                                    $(this).css("background", color2);
                                    $(this).css("font-weight", "normal");
                                }
                                var widgetTargetList = $(this).attr("data-targetWidgets")
                                    .split(',');

                                for (var i = 0; i < widgetTargetList.length; i++) {
                                    $.event.trigger({
                                        type: "mouseOutLastDataFromExternalContentGis_" +
                                            widgetTargetList[i],
                                        eventGenerator: $(this),
                                        targetWidget: widgetTargetList[i],
                                        value: $(this).attr("data-lastValue"),
                                        color1: $(this).attr("data-color1"),
                                        color2: $(this).attr("data-color2")
                                    });
                                }
                            });

                        //Disabilitiamo i 4Hours se last update più vecchio di 4 ore
                        if (rtDataAgeSec > 14400) {
                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                                latLngId + '"][data-range="4/HOUR"]').attr("data-disabled",
                                "true");
                            //Disabilitiamo i 24Hours se last update più vecchio di 24 ore
                            if (rtDataAgeSec > 86400) {
                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                                    latLngId + '"][data-range="1/DAY"]').attr(
                                    "data-disabled", "true");
                                //Disabilitiamo i 7 days se last update più vecchio di 7 days
                                if (rtDataAgeSec > 604800) {
                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                                        latLngId + '"][data-range="7/DAY"]').attr(
                                        "data-disabled", "true");
                                    //Disabilitiamo i 30 days se last update più vecchio di 30 days
                                    //if(rtDataAgeSec > 18144000)
                                    if (rtDataAgeSec > 2592000) {
                                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                                            latLngId + '"][data-range="30/DAY"]').attr(
                                            "data-disabled", "true");
                                        //Disabilitiamo i 6 months se last update più vecchio di 180 days
                                        if (rtDataAgeSec > 15552000) {
                                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                                                latLngId + '"][data-range="180/DAY"]').attr(
                                                "data-disabled", "true");
                                            //Disabilitiamo i 1 year se last update più vecchio di 365 days
                                            if (rtDataAgeSec > 31536000) {
                                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                                                        latLngId + '"][data-range="365/DAY"]')
                                                    .attr("data-disabled", "true");
                                            } else {
                                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                                                        latLngId + '"][data-range="365/DAY"]')
                                                    .attr("data-disabled", "false");
                                            }
                                        } else {
                                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                                                latLngId + '"][data-range="180/DAY"]').attr(
                                                "data-disabled", "false");
                                        }
                                    } else {
                                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                                            latLngId + '"][data-range="30/DAY"]').attr(
                                            "data-disabled", "false");
                                    }
                                } else {
                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpen button.timeTrendBtn[data-id="' +
                                        latLngId + '"][data-range="7/DAY"]').attr(
                                        "data-disabled", "false");
                                }
                            } else {
                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                                    latLngId + '"][data-range="1/DAY"]').attr(
                                    "data-disabled", "false");
                            }
                        } else {
                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                                latLngId + '"][data-range="4/HOUR"]').attr("data-disabled",
                                "false");
                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                                latLngId + '"][data-range="1/DAY"]').attr("data-disabled",
                                "false");
                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                                latLngId + '"][data-range="7/DAY"]').attr("data-disabled",
                                "false");
                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                                latLngId + '"][data-range="30/DAY"]').attr("data-disabled",
                                "false");
                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                                latLngId + '"][data-range="180/DAY"]').attr("data-disabled",
                                "false");
                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                                latLngId + '"][data-range="365/DAY"]').attr("data-disabled",
                                "false");
                        }

                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn')
                            .off('mouseenter');
                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn')
                            .off('mouseleave');
                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                            latLngId + '"]').hover(function() {
                                if (isNaN(parseFloat($(this).parents('tr').find('td').eq(1)
                                        .html())) || ($(this).attr("data-disabled") ===
                                        "true")) {
                                    $(this).css("background-color", "#e6e6e6");
                                    $(this).off("hover");
                                    $(this).off("click");
                                } else {
                                    if ($(this).attr("data-timeTrendClicked") === "false") {
                                        $(this).css("background", color1);
                                        $(this).css("background",
                                            "-webkit-linear-gradient(left, " + color1 +
                                            ", " + color2 + ")");
                                        $(this).css("background",
                                            "background: -o-linear-gradient(left, " +
                                            color1 + ", " + color2 + ")");
                                        $(this).css("background",
                                            "background: -moz-linear-gradient(left, " +
                                            color1 + ", " + color2 + ")");
                                        $(this).css("background",
                                            "background: linear-gradient(to left, " +
                                            color1 + ", " + color2 + ")");
                                        $(this).css("font-weight", "bold");
                                    }

                                    var widgetTargetList = $(this).attr(
                                        "data-targetWidgets").split(',');
                                    //var colIndex = $(this).parent().index();
                                    //var title = $(this).parents("tbody").find("tr").eq(0).find("th").eq(colIndex).html() + " - " + $(this).attr("data-range-shown");
                                    var title = $(this).parents("tr").find("td").eq(0)
                                        .html() + " - " + $(this).attr("data-range-shown");

                                    for (var i = 0; i < widgetTargetList.length; i++) {
                                        $.event.trigger({
                                            type: "mouseOverTimeTrendFromExternalContentGis_" +
                                                widgetTargetList[i],
                                            eventGenerator: $(this),
                                            targetWidget: widgetTargetList[i],
                                            value: $(this).attr("data-lastValue"),
                                            color1: $(this).attr("data-color1"),
                                            color2: $(this).attr("data-color2"),
                                            widgetTitle: title
                                        });
                                    }
                                }
                            },
                            function() {
                                if (isNaN(parseFloat($(this).parents('tr').find('td').eq(1)
                                        .html())) || ($(this).attr("data-disabled") ===
                                        "true")) {
                                    $(this).css("background-color", "#e6e6e6");
                                    $(this).off("hover");
                                    $(this).off("click");
                                } else {
                                    if ($(this).attr("data-timeTrendClicked") === "false") {
                                        $(this).css("background", color2);
                                        $(this).css("font-weight", "normal");
                                    }

                                    var widgetTargetList = $(this).attr(
                                        "data-targetWidgets").split(',');
                                    for (var i = 0; i < widgetTargetList.length; i++) {
                                        $.event.trigger({
                                            type: "mouseOutTimeTrendFromExternalContentGis_" +
                                                widgetTargetList[i],
                                            eventGenerator: $(this),
                                            targetWidget: widgetTargetList[i],
                                            value: $(this).attr("data-lastValue"),
                                            color1: $(this).attr("data-color1"),
                                            color2: $(this).attr("data-color2")
                                        });
                                    }
                                }
                            });

                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.lastValueBtn[data-id=' +
                            latLngId + ']').off('click');
                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.lastValueBtn[data-id=' +
                            latLngId + ']').click(function(event) {
                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.lastValueBtn')
                                .each(function(i) {
                                    $(this).css("background", $(this).attr(
                                        "data-color2"));
                                });
                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.lastValueBtn')
                                .css("font-weight", "normal");
                            $(this).css("background", $(this).attr("data-color1"));
                            $(this).css("font-weight", "bold");
                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.lastValueBtn')
                                .attr("data-lastDataClicked", "false");
                            $(this).attr("data-lastDataClicked", "true");
                            var widgetTargetList = $(this).attr("data-targetWidgets")
                                .split(',');
                            var colIndex = $(this).parent().index();
                            var title = $(this).parents("tr").find("td").eq(0).html();

                            for (var i = 0; i < widgetTargetList.length; i++) {
                                $.event.trigger({
                                    type: "showLastDataFromExternalContentGis_" +
                                        widgetTargetList[i],
                                    eventGenerator: $(this),
                                    targetWidget: widgetTargetList[i],
                                    value: $(this).attr("data-lastValue"),
                                    color1: $(this).attr("data-color1"),
                                    color2: $(this).attr("data-color2"),
                                    widgetTitle: title,
                                    field: $(this).attr("data-field"),
                                    serviceUri: $(this).attr("data-serviceUri"),
                                    marker: markersCache["" + $(this).attr(
                                        "data-id") + ""],
                                    mapRef: fullscreendefaultMapRef,
                                    fake: $(this).attr("data-fake"),
                                    fakeId: $(this).attr("data-fakeId")
                                });
                            }
                        });

                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn')
                            .off('click');
                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn')
                            .click(function(event) {
                                if (isNaN(parseFloat($(this).parents('tr').find('td').eq(1)
                                        .html())) || ($(this).attr("data-disabled") ===
                                        "true")) {
                                    $(this).css("background-color", "#e6e6e6");
                                    $(this).off("hover");
                                    $(this).off("click");
                                } else {
                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn')
                                        .css("background", $(this).attr("data-color2"));
                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn')
                                        .css("font-weight", "normal");
                                    $(this).css("background", $(this).attr("data-color1"));
                                    $(this).css("font-weight", "bold");
                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn')
                                        .attr("data-timeTrendClicked", "false");
                                    $(this).attr("data-timeTrendClicked", "true");
                                    var widgetTargetList = $(this).attr(
                                        "data-targetWidgets").split(',');
                                    var colIndex = $(this).parent().index();
                                    var title = $(this).parents("tr").find("td").eq(0)
                                        .html() + " - " + $(this).attr("data-range-shown");
                                    var lastUpdateTime = $(this).parents(
                                        'div.recreativeEventMapContactsContainer').find(
                                        'span.popupLastUpdate').html();

                                    var now = new Date();
                                    var lastUpdateDate = new Date(lastUpdateTime);
                                    var diff = parseFloat(Math.abs(now - lastUpdateDate) /
                                        1000);
                                    var range = $(this).attr("data-range");

                                    for (var i = 0; i < widgetTargetList.length; i++) {
                                        $.event.trigger({
                                            type: "showTimeTrendFromExternalContentGis_" +
                                                widgetTargetList[i],
                                            eventGenerator: $(this),
                                            targetWidget: widgetTargetList[i],
                                            range: range,
                                            color1: $(this).attr("data-color1"),
                                            color2: $(this).attr("data-color2"),
                                            widgetTitle: title,
                                            field: $(this).attr("data-field"),
                                            serviceUri: $(this).attr(
                                                "data-serviceUri"),
                                            marker: markersCache["" + $(this).attr(
                                                "data-id") + ""],
                                            mapRef: fullscreendefaultMapRef,
                                            fake: false
                                            //fake: $(this).attr("data-fake")
                                        });
                                    }
                                }
                            });

                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                            latLngId + '"]').each(function(i) {
                            if (isNaN(parseFloat($(this).parents('tr').find('td').eq(1)
                                    .html())) || ($(this).attr("data-disabled") ===
                                    "true")) {
                                $(this).css("background-color", "#e6e6e6");
                                $(this).off("hover");
                                $(this).off("click");
                            }
                        });

                        fullscreendefaultMapRef.off('popupclose');
                        fullscreendefaultMapRef.on('popupclose', function(closeEvt) {
                            var popupContent = $('<div></div>');
                            popupContent.html(closeEvt.popup._content);

                            if (popupContent.find("button.lastValueBtn").length > 0) {
                                var widgetTargetList = popupContent.find(
                                    "button.lastValueBtn").eq(0).attr(
                                    "data-targetWidgets").split(',');

                                if (($('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.lastValueBtn[data-lastDataClicked=true]')
                                        .length > 0) && ($(
                                        'input.gisPopupKeepDataCheck').attr(
                                        'data-keepData') === "false")) {
                                    for (var i = 0; i < widgetTargetList.length; i++) {
                                        $.event.trigger({
                                            type: "restoreOriginalLastDataFromExternalContentGis_" +
                                                widgetTargetList[i],
                                            eventGenerator: $(this),
                                            targetWidget: widgetTargetList[i],
                                            value: $(this).attr(
                                                "data-lastValue"),
                                            color1: $(this).attr("data-color1"),
                                            color2: $(this).attr("data-color2")
                                        });
                                    }
                                }

                                if (($('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-timeTrendClicked=true]')
                                        .length > 0) && ($(
                                        'input.gisPopupKeepDataCheck').attr(
                                        'data-keepData') === "false")) {
                                    for (var i = 0; i < widgetTargetList.length; i++) {
                                        $.event.trigger({
                                            type: "restoreOriginalTimeTrendFromExternalContentGis_" +
                                                widgetTargetList[i],
                                            eventGenerator: $(this),
                                            targetWidget: widgetTargetList[i]
                                        });
                                    }
                                }
                            }
                        });

                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap div.leaflet-popup')
                            .off('click');
                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap div.leaflet-popup')
                            .on('click', function() {
                                var compLatLngId = $(this).find('input[type=hidden]').val();

                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap div.leaflet-popup')
                                    .css("z-index", "-1");
                                $(this).css("z-index", "999999");

                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap input.gisPopupKeepDataCheck')
                                    .off('click');
                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap input.gisPopupKeepDataCheck[data-id="' +
                                    compLatLngId + '"]').click(function() {
                                    if ($(this).attr("data-keepData") === "false") {
                                        $(this).attr("data-keepData", "true");
                                    } else {
                                        $(this).attr("data-keepData", "false");
                                    }
                                });

                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.lastValueBtn')
                                    .off('mouseenter');
                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.lastValueBtn')
                                    .off('mouseleave');
                                $(this).find('button.lastValueBtn[data-id="' +
                                    compLatLngId + '"]').hover(function() {
                                        if ($(this).attr("data-lastDataClicked") ===
                                            "false") {
                                            $(this).css("background", $(this).attr(
                                                'data-color1'));
                                            $(this).css("background",
                                                "-webkit-linear-gradient(left, " +
                                                $(this).attr('data-color1') + ", " +
                                                $(this).attr('data-color2') + ")");
                                            $(this).css("background",
                                                "background: -o-linear-gradient(left, " +
                                                $(this).attr('data-color1') + ", " +
                                                $(this).attr('data-color2') + ")");
                                            $(this).css("background",
                                                "background: -moz-linear-gradient(left, " +
                                                $(this).attr('data-color1') + ", " +
                                                $(this).attr('data-color2') + ")");
                                            $(this).css("background",
                                                "background: linear-gradient(to left, " +
                                                $(this).attr('data-color1') + ", " +
                                                $(this).attr('data-color2') + ")");
                                            $(this).css("font-weight", "bold");
                                        }

                                        var widgetTargetList = $(this).attr(
                                            "data-targetWidgets").split(',');
                                        var colIndex = $(this).parent().index();
                                        //var title = $(this).parents("tbody").find("tr").eq(0).find("th").eq(colIndex).html();
                                        var title = $(this).parents("tr").find("td").eq(
                                            0).html();

                                        for (var i = 0; i < widgetTargetList
                                            .length; i++) {
                                            $.event.trigger({
                                                type: "mouseOverLastDataFromExternalContentGis_" +
                                                    widgetTargetList[i],
                                                eventGenerator: $(this),
                                                targetWidget: widgetTargetList[
                                                    i],
                                                value: $(this).attr(
                                                    "data-lastValue"),
                                                color1: $(this).attr(
                                                    "data-color1"),
                                                color2: $(this).attr(
                                                    "data-color2"),
                                                widgetTitle: title
                                            });
                                        }
                                    },
                                    function() {
                                        if ($(this).attr("data-lastDataClicked") ===
                                            "false") {
                                            $(this).css("background", $(this).attr(
                                                'data-color2'));
                                            $(this).css("font-weight", "normal");
                                        }
                                        var widgetTargetList = $(this).attr(
                                            "data-targetWidgets").split(',');

                                        for (var i = 0; i < widgetTargetList
                                            .length; i++) {
                                            $.event.trigger({
                                                type: "mouseOutLastDataFromExternalContentGis_" +
                                                    widgetTargetList[i],
                                                eventGenerator: $(this),
                                                targetWidget: widgetTargetList[
                                                    i],
                                                value: $(this).attr(
                                                    "data-lastValue"),
                                                color1: $(this).attr(
                                                    "data-color1"),
                                                color2: $(this).attr(
                                                    "data-color2")
                                            });
                                        }
                                    });

                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn')
                                    .off('mouseenter');
                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn')
                                    .off('mouseleave');
                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                                    compLatLngId + '"]').hover(function() {
                                        if (isNaN(parseFloat($(this).parents('tr').find(
                                                'td').eq(1).html())) || ($(this).attr(
                                                "data-disabled") === "true")) {
                                            $(this).css("background-color", "#e6e6e6");
                                            $(this).off("hover");
                                            $(this).off("click");
                                        } else {
                                            if ($(this).attr(
                                                    "data-timeTrendClicked") ===
                                                "false") {
                                                $(this).css("background", $(this).attr(
                                                    'data-color1'));
                                                $(this).css("background",
                                                    "-webkit-linear-gradient(left, " +
                                                    $(this).attr('data-color1') +
                                                    ", " + $(this).attr(
                                                        'data-color2') + ")");
                                                $(this).css("background",
                                                    "background: -o-linear-gradient(left, " +
                                                    $(this).attr('data-color1') +
                                                    ", " + $(this).attr(
                                                        'data-color2') + ")");
                                                $(this).css("background",
                                                    "background: -moz-linear-gradient(left, " +
                                                    $(this).attr('data-color1') +
                                                    ", " + $(this).attr(
                                                        'data-color2') + ")");
                                                $(this).css("background",
                                                    "background: linear-gradient(to left, " +
                                                    $(this).attr('data-color1') +
                                                    ", " + $(this).attr(
                                                        'data-color2') + ")");
                                                $(this).css("font-weight", "bold");
                                            }

                                            var widgetTargetList = $(this).attr(
                                                "data-targetWidgets").split(',');
                                            var colIndex = $(this).parent().index();
                                            //var title = $(this).parents("tbody").find("tr").eq(0).find("th").eq(colIndex).html() + " - " + $(this).attr("data-range-shown");
                                            var title = $(this).parents("tr").find("td")
                                                .eq(0).html() + " - " + $(this).attr(
                                                    "data-range-shown");

                                            for (var i = 0; i < widgetTargetList
                                                .length; i++) {
                                                $.event.trigger({
                                                    type: "mouseOverTimeTrendFromExternalContentGis_" +
                                                        widgetTargetList[i],
                                                    eventGenerator: $(this),
                                                    targetWidget: widgetTargetList[
                                                        i],
                                                    value: $(this).attr(
                                                        "data-lastValue"),
                                                    color1: $(this).attr(
                                                        "data-color1"),
                                                    color2: $(this).attr(
                                                        "data-color2"),
                                                    widgetTitle: title
                                                });
                                            }
                                        }
                                    },
                                    function() {
                                        if (isNaN(parseFloat($(this).parents('tr').find(
                                                'td').eq(1).html())) || ($(this).attr(
                                                "data-disabled") === "true")) {
                                            $(this).css("background-color", "#e6e6e6");
                                            $(this).off("hover");
                                            $(this).off("click");
                                        } else {
                                            if ($(this).attr(
                                                    "data-timeTrendClicked") ===
                                                "false") {
                                                $(this).css("background", $(this).attr(
                                                    'data-color2'));
                                                $(this).css("font-weight", "normal");
                                            }

                                            var widgetTargetList = $(this).attr(
                                                "data-targetWidgets").split(',');
                                            for (var i = 0; i < widgetTargetList
                                                .length; i++) {
                                                $.event.trigger({
                                                    type: "mouseOutTimeTrendFromExternalContentGis_" +
                                                        widgetTargetList[i],
                                                    eventGenerator: $(this),
                                                    targetWidget: widgetTargetList[
                                                        i],
                                                    value: $(this).attr(
                                                        "data-lastValue"),
                                                    color1: $(this).attr(
                                                        "data-color1"),
                                                    color2: $(this).attr(
                                                        "data-color2")
                                                });
                                            }
                                        }
                                    });

                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.lastValueBtn')
                                    .off('click');
                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.lastValueBtn')
                                    .click(function(event) {
                                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.lastValueBtn')
                                            .each(function(i) {
                                                $(this).css("background", $(this)
                                                    .attr("data-color2"));
                                            });
                                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.lastValueBtn')
                                            .css("font-weight", "normal");
                                        $(this).css("background", $(this).attr(
                                            "data-color1"));
                                        $(this).css("font-weight", "bold");
                                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.lastValueBtn')
                                            .attr("data-lastDataClicked", "false");
                                        $(this).attr("data-lastDataClicked", "true");
                                        var widgetTargetList = $(this).attr(
                                            "data-targetWidgets").split(',');
                                        var colIndex = $(this).parent().index();
                                        var title = $(this).parents("tr").find("td").eq(
                                            0).html();

                                        for (var i = 0; i < widgetTargetList
                                            .length; i++) {
                                            $.event.trigger({
                                                type: "showLastDataFromExternalContentGis_" +
                                                    widgetTargetList[i],
                                                eventGenerator: $(this),
                                                targetWidget: widgetTargetList[
                                                    i],
                                                value: $(this).attr(
                                                    "data-lastValue"),
                                                color1: $(this).attr(
                                                    "data-color1"),
                                                color2: $(this).attr(
                                                    "data-color2"),
                                                widgetTitle: title,
                                                marker: markersCache["" + $(
                                                    this).attr(
                                                    "data-id") + ""],
                                                mapRef: fullscreendefaultMapRef,
                                                field: $(this).attr(
                                                    "data-field"),
                                                serviceUri: $(this).attr(
                                                    "data-serviceUri"),
                                                fake: $(this).attr("data-fake"),
                                                fakeId: $(this).attr(
                                                    "data-fakeId")
                                            });
                                        }
                                    });

                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn')
                                    .off('click');
                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn')
                                    .click(function(event) {
                                        if (isNaN(parseFloat($(this).parents('tr').find(
                                                'td').eq(1).html())) || ($(this).attr(
                                                "data-disabled") === "true")) {
                                            $(this).css("background-color", "#e6e6e6");
                                            $(this).off("hover");
                                            $(this).off("click");
                                        } else {
                                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn')
                                                .each(function(i) {
                                                    $(this).css("background", $(
                                                        this).attr(
                                                        "data-color2"));
                                                });
                                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn')
                                                .css("font-weight", "normal");
                                            $(this).css("background", $(this).attr(
                                                "data-color1"));
                                            $(this).css("font-weight", "bold");
                                            $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn')
                                                .attr("data-timeTrendClicked", "false");
                                            $(this).attr("data-timeTrendClicked",
                                                "true");
                                            var widgetTargetList = $(this).attr(
                                                "data-targetWidgets").split(',');
                                            var colIndex = $(this).parent().index();
                                            var title = $(this).parents("tr").find("td")
                                                .eq(0).html() + " - " + $(this).attr(
                                                    "data-range-shown");
                                            var lastUpdateTime = $(this).parents(
                                                    'div.recreativeEventMapContactsContainer'
                                                ).find('span.popupLastUpdate')
                                                .html();

                                            var now = new Date();
                                            var lastUpdateDate = new Date(
                                                lastUpdateTime);
                                            var diff = parseFloat(Math.abs(now -
                                                lastUpdateDate) / 1000);
                                            var range = $(this).attr("data-range");

                                            for (var i = 0; i < widgetTargetList
                                                .length; i++) {
                                                $.event.trigger({
                                                    type: "showTimeTrendFromExternalContentGis_" +
                                                        widgetTargetList[i],
                                                    eventGenerator: $(this),
                                                    targetWidget: widgetTargetList[
                                                        i],
                                                    range: range,
                                                    color1: $(this).attr(
                                                        "data-color1"),
                                                    color2: $(this).attr(
                                                        "data-color2"),
                                                    widgetTitle: title,
                                                    field: $(this).attr(
                                                        "data-field"),
                                                    serviceUri: $(this).attr(
                                                        "data-serviceUri"),
                                                    marker: markersCache["" + $(
                                                        this).attr(
                                                        "data-id") + ""],
                                                    mapRef: fullscreendefaultMapRef,
                                                    fake: $(this).attr(
                                                        "data-fake"),
                                                    fakeId: $(this).attr(
                                                        "data-fakeId")
                                                });
                                            }
                                        }
                                    });

                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.timeTrendBtn[data-id="' +
                                    latLngId + '"]').each(function(i) {
                                    if (isNaN(parseFloat($(this).parents('tr').find(
                                            'td').eq(1).html())) || ($(this).attr(
                                            "data-disabled") === "true")) {
                                        $(this).css("background-color", "#e6e6e6");
                                        $(this).off("hover");
                                        $(this).off("click");
                                    }
                                });
                            });
                    },
                    error: function(errorData) {
                        console.log("Error in data retrieval");
                        console.log(JSON.stringify(errorData));
                        var serviceProperties = feature.properties;

                        var underscoreIndex = serviceProperties.serviceType.indexOf("_");
                        var serviceClass = serviceProperties.serviceType.substr(0,
                            underscoreIndex);
                        var serviceSubclass = serviceProperties.serviceType.substr(
                            underscoreIndex);
                        serviceSubclass = serviceSubclass.replace(/_/g, " ");

                        popupText = '<h3 class="gisPopupTitle">' + serviceProperties.name +
                            '</h3>' +
                            '<p><b>Typology: </b>' + serviceClass + " - " + serviceSubclass +
                            '</p>' +
                            '<p><i>Data are limited due to an issue in their retrieval</i></p>';

                        event.target.bindPopup(popupText, {
                            offset: [15, 0],
                            minWidth: 215,
                            maxWidth: 600
                        }).openPopup();
                    }
                });
            });

            return marker;
        }

        function createFullscreenModal() {
            var fullscreenModal = $(
                '<div class="modal fade" tabindex="-1" id="<?= $_REQUEST['name_w'] ?>_modalLinkOpen" class="modalLinkOpen" role="dialog" aria-labelledby="myModalLabel">' +
                '<div class="modal-dialog" role="document">' +
                '<div class="modal-content">' +
                '<div class="modal-header centerWithFlex">' +
                '<h4 class="modal-title"></h4>' +
                '</div>' +
                '<div class="modal-body">' +
                '<div class="modalLinkOpenBody">' +
                '<iframe class="modalLinkOpenBodyIframe"></iframe>' +
                '<div id="<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyMap" class="modalLinkOpenBodyMap" data-mapRef="null"></div>' +
                '<div id="<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap" class="modalLinkOpenBodyDefaultMap" data-mapRef="null"></div>' +
                '<div id="<?= $_REQUEST['name_w'] ?>_modalLinkOpenGisMap" class="modalLinkOpenGisMap" data-mapRef="null"></div>' +
                '<div id="<?= $_REQUEST['name_w'] ?>_modalLinkOpenGisTimeTrend" class="modalLinkOpenGisTimeTrend"></div>' +
                '</div>' +
                '<div id="<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>_modalLinkLoading" class="loadingDiv">' +
                '<div class="LoadingTextDiv">' +
                '<p>Loading data, please wait</p>' +
                '</div>' +
                '<div class="loadingIconDiv">' +
                '<i class="fa fa-spinner fa-spin"></i>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '<div class="modal-footer">' +
                '<button type="button" id="<?= $_REQUEST['name_w'] ?>_modalLinkOpenCloseBtn" class="btn btn-primary">Back to dashboard</button>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '</div>');

            fullscreenModal.insertAfter("#newTabLinkOpenImpossibile");
            fullscreenModal.css("font-family", "Verdana");
            fullscreenModal.find("div.modal-dialog").css("width", "95vw");
            fullscreenModal.find("div.modalLinkOpenBody").css("height", "80vh");

            fullscreenModal.find("iframe").css("width", "100%");
            fullscreenModal.find("iframe").css("height", "100%");
            fullscreenModal.find("iframe").hide();

            fullscreenModal.find("div.modalLinkOpenBodyMap").css("width", "100%");
            fullscreenModal.find("div.modalLinkOpenBodyMap").css("height", "100%");
            fullscreenModal.find("div.modalLinkOpenBodyMap").hide();

            fullscreenModal.find("div.modalLinkOpenBodyDefaultMap").css("width", "100%");
            fullscreenModal.find("div.modalLinkOpenBodyDefaultMap").css("height", "100%");
            fullscreenModal.find("div.modalLinkOpenBodyDefaultMap").hide();

            fullscreenModal.find("div.modalLinkOpenGisMap").css("width", "100%");
            fullscreenModal.find("div.modalLinkOpenGisMap").css("height", "100%");
            fullscreenModal.find("div.modalLinkOpenGisMap").css("-webkit-transition", "height 0.5s");
            fullscreenModal.find("div.modalLinkOpenGisMap").css("transition", "height 0.5s");
            fullscreenModal.find("div.modalLinkOpenGisMap").hide();

            fullscreenModal.find("div.modalLinkOpenGisTimeTrend").css("width", "100%");
            fullscreenModal.find("div.modalLinkOpenGisTimeTrend").css("height", "0vh");
            fullscreenModal.find("div.modalLinkOpenGisTimeTrend").css("background", "white");
            fullscreenModal.find("div.modalLinkOpenGisTimeTrend").hide();

            $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpenCloseBtn").off();
            $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpenCloseBtn").click(function() {
                /*   if ($("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen div.modalLinkOpenBodyDefaultMap").is(":visible")) {

                       fullscreendefaultMapRef.off();
                       fullscreendefaultMapRef.remove();
                   }   */

                if ($("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen div.modalLinkOpenBodyMap").is(
                        ":visible")) {
                    fullscreenMapRef.off();
                    fullscreenMapRef.remove();
                }

                if ($("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen div.modalLinkOpenGisMap").is(":visible")) {
                    for (var key in gisGeometryTankForFullscreen) {
                        gisGeometryTankForFullscreen[key].shown = false;
                        gisGeometryTankForFullscreen[key].lastConsumedIndex = 0;
                    }

                    clearInterval(checkTankInterval);
                    gisFullscreenMapRef.off();
                    gisFullscreenMapRef.remove();
                }

                fullscreenModal.find("div.modalLinkOpenGisMap").css("height", "80vh");
                $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpenGisTimeTrend").css("height", "0vh");
                $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpenGisTimeTrend").hide();
                $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpenGisTimeTrend").empty();

                $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen").modal('hide');
                $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen div.modalLinkOpenBodyMap").modal('hide');
                $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen div.modalLinkOpenBodyDefaultMap").modal(
                    'hide');
                var stopFlag = 1;
            });
        }

        // move to 2d
        function addDefaultBaseMap(map) {
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                maxZoom: 18
            }).addTo(map);
        }

        function rgbaToArray(rgba) {
            var array = rgba.replace(/[^\d,.]/g, '').split(',');
            for (var i = 0; i < array.length; i++)
                array[i] = parseInt(array[i]);
            array[3] = parseInt(array[3] * 255);
            return array;
        }

        function rgbToArray(rgb) {
            if (rgb || rgb == "")
                return [255,255,255];
            var array = rgb.replace(/[^\d,.]/g, '').split(',');
            for (var i = 0; i < array.length; i++)
                array[i] = parseInt(array[i]);
            return array;
        }

        // map initializations
        //Tipicamente questa funzione viene invocata dopo che sono stati scaricati i dati per il widget (se ne ha bisogno) e ci va dentro la logica che costruisce il contenuto del widget
        function populateWidget() {
            let lastPopup = null;

            showWidgetContent(widgetName);

            eventMapManager = new EventMapManager(widgetName);

            // getting style parameters
            let mapDivLocal = "<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>_map";
            map.mapName = widgetName;
            map.mapDivLocal = mapDivLocal;
            var latInit = 43.769789;
            var lngInit = 11.255694;
            var zoomInit = 14;
            var pitchInit = 30;
            var bearingInit = 0;
            var defaultTileUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
            tileUrls.push(defaultTileUrl.replace('{s}', 'a'));
            tileUrls.push(defaultTileUrl.replace('{s}', 'b'));
            tileUrls.push(defaultTileUrl.replace('{s}', 'c'));

            updateListGridBuilding();
            const settings = getCookie('settings');
            if (settings && settings != "")
                settingOptions = {
                    ...settingOptions,
                    ...JSON.parse(settings)
                };
            // setting widget parameters
            if (widgetParameters) {
                console.log('loading widget parameters', widgetParameters);
                // lngInit = 9.189260332508711;
                // latInit = 45.46519923911318;
                latInit = widgetParameters.latLng[0] || latInit;
                lngInit = widgetParameters.latLng[1] || lngInit;
                zoomInit = parseFloat(widgetParameters.zoom) || zoomInit;
                pitchInit = widgetParameters.pitch || pitchInit;
                bearingInit = widgetParameters.bearing || bearingInit;
                const mapType = widgetParameters.mapType || '3D';
                is3dOn = mapType == '2D' ? false : true;
            }

            // setting style parameters
            if (styleParameters) {
                if (styleParameters.buildingColors) {
                    for (let key in styleParameters.buildingColors) {
                        let rgba = styleParameters.buildingColors[key];
                        let array = rgbaToArray(rgba);
                        buildingMappingColor[key] = array || buildingMappingColor[key];
                    }
                }
                if (styleParameters.defaultOrthomap) {
                    const menu = widgetParameters.dropdownMenu;
                    for (var i = 0; i < menu.length; i++) {
                        if (menu[i].id == styleParameters.defaultOrthomap) {
                            tileUrls = [];
                            tileUrls.push(menu[i].linkUrl.replace('{s}', 'a'));
                            tileUrls.push(menu[i].linkUrl.replace('{s}', 'b'));
                            tileUrls.push(menu[i].linkUrl.replace('{s}', 'c'));
                            break;
                        }
                    }
                }
                if (styleParameters.terrains) {
                    terrainOn = true;
                    layers.terrain = createMultiElevationTerrain();
                } else {
                    layers.terrain = createTileLayer(tileUrls);
                }
                if (styleParameters.buildingType && supportedBuildings.hasOwnProperty(styleParameters.buildingType)) {
                    const buildingType = styleParameters.buildingType == 'glb' ? 'grid_building_tiled' : styleParameters.buildingType;
                    supportedBuildingSelected = supportedBuildings[buildingType];
                    supportedBuildings[buildingType].action();

                } else {
                    loadAggregatedBuildings();
                }
                if (styleParameters.useLighting != null && styleParameters.useLighting == 'yes') {
                    lightsOn = true;
                    effects = [createLights({
                        timestamp: styleParameters.lightTimestamp,
                        ambientLightColor: rgbToArray(styleParameters.ambientLightColor),
                        directionalLightColor: rgbToArray(styleParameters.directionalLightColor),
                        ambientLightIntensity: parseInt(styleParameters.ambientLightIntensity),
                        directionalLightIntensity: parseInt(styleParameters.directionalLightIntensity)
                    })];
                    showLightSection();
                } else {
                    lightsOn = false;
                    hideLightSection();
                }
            }

            console.log('tentative to display 3d map');

            const height = $(`#${widgetName}_map3d`).height();
            const width = $(`#${widgetName}_map3d`).width();

            $('#lightTimestamp').val(formatDatetime(Date.now()));
            $('#lightEnable').prop('checked', lightsOn);

            currentViewState = {
                latitude: latInit,
                longitude: lngInit,
                zoom: zoomInit,
                maxZoom: 20,
                minZoom: 1,
                pitch: pitchInit,
                maxPitch: 85,
                bearing: bearingInit,
                height: height,
                width: width,
            };

            if (settingOptions.displayDecorations.value) {
                $.ajax({
                    url: '../widgets/layers/decorations/trees/alberi_firenze.geojson',
                    success: (data) => {
                        let model = '../widgets/layers/decorations/trees/tree_low_1.glb';
                        let getOrientation = [0,0,0];
                        let sizeScale = 1.3;
                        if (settingOptions.realisticDecoration.value) {
                            model = '../widgets/layers/decorations/trees/trees_low2.glb';
                            getOrientation = [0,0,90];
                            sizeScale = 0.017;
                        }
                        layers.tree = createTreeLayer({
                            data: data.features ? data : JSON.parse(data),
                            model,
                            getOrientation,
                            sizeScale
                        });
                        updateLayers();
                    }
                });

                layers.vehicle.push(new deck.ScenegraphLayer({
                    id: 'airplane-layer',
                    data: [
                        {positions: [11.199664049797294, 43.802922897309, 0], rotation: 0,},
                        {positions: [11.198907706148423, 43.803451457011874, 0], rotation: -30,},
                        {positions: [11.200817114302204, 43.80321975648056, 0], rotation: 40,},
                        {positions: [11.201332283214695, 43.80477050629828, 0], rotation: 50,},
                        {positions: [11.200375340660075, 43.80484798194954, 0], rotation: -140,},
                        {positions: [11.196612079522039, 43.80809041845304, 0], rotation: -70,},
                        {positions: [11.196745364113017, 43.80715239609039, 0], rotation: 90,},
                        {positions: [11.197337839154171, 43.80756254251544, 0], rotation: -90,},
                    ],
                    scenegraph: '../widgets/layers/decorations/vehicles/a319.glb',
                    extensions: [new deck._TerrainExtension()],
                    terrainDrawMode: 'offset',
                    getPosition: d => d.positions,
                    getOrientation: d => [0, d.rotation, 90],
                    getScale: [0.07, 0.07, 0.07],
                    // sizeScale: 0.07,
                    _lighting: 'pbr'
                }));
            }
            if (settingOptions.roadsKB.value) {
                const roadsData = 'https://www.disit.org/smosm/sparql?format=json&default-graph-uri=&' +
                'format=application%2Fsparql-results%2Bjson&timeout=0&debug=on&' +
                'query=PREFIX+km4c%3A+%3Chttp%3A%2F%2Fwww.disit.org%2Fkm4city%2Fschema%23%3E' +
                'PREFIX+rdf%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F1999%2F02%2F22-rdf-syntax-ns%23%3E' +
                'PREFIX+rdfs%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F01%2Frdf-schema%23%3E' +
                'PREFIX+rdfsn%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F2003%2F01%2Fgeo%2Fwgs84_pos%23%3E' +
                'PREFIX+dct%3A+%3Chttp%3A%2F%2Fpurl.org%2Fdc%2Fterms%2F%3E' +
                'SELECT+%3Fstrada+%3FnomeStrada+%3Felementostradale+%3Fhighwaytype+%3Fstartlat+%3Fstartlong+%3Fendlat+%3Fendlong+%3F' +
                'compositiontipo+%3Foperatingstatus+%3FlatrafficDir+%3Flalunghezza+WHERE+%7B%3Fstrada+a+km4c%3ARoad.%3F' +
                'strada+km4c%3AinMunicipalityOf+%3Fmunicip.%3Fstrada+km4c%3AextendName+%3FnomeStrada.%3Fmunicip+foaf%3Aname+%22Firenze%22.%3F' +
                'strada+km4c%3AcontainsElement+%3Felementostradale.%3Felementostradale+km4c%3AstartsAtNode+%3F' +
                'startnode.%3Felementostradale+km4c%3AhighwayType+%3Fhighwaytype.%3Felementostradale+km4c%3Acomposition+%3F' +
                'compositiontipo.%3Felementostradale+km4c%3AoperatingStatus+%3Foperatingstatus.%3F' +
                'elementostradale+km4c%3AtrafficDir+%3FlatrafficDir.%3Felementostradale+km4c%3Alength+%3F' +
                'lalunghezza.%3Fstartnode+rdfsn%3Alat+%3Fstartlat.%3Fstartnode+rdfsn%3Along+%3Fstartlong.%3F' +
                'elementostradale+km4c%3AendsAtNode+%3Fendnode.%3Fendnode+rdfsn%3Alat+%3Fendlat.%3F' +
                'endnode+rdfsn%3Along+%3Fendlong.' +
                'FILTER ( xsd:float(?startlat) < {north} %26%26 xsd:float(?startlat) > {south} %26%26' +
                ' xsd:float(?startlong) < {east} %26%26 xsd:float(?startlong) > {west})%7D';
                layers.roads = new snap4deck.FusionTileLayer({
                    data: roadsData,
                    getFusionCoords: d => [d.startlong.value, d.startlat.value],
                    fusionTopDown: snap4deck.jsonFusionTopDown,
                    fusionBottomUP: snap4deck.jsonFusionBottomUp,
                    getTileData: (tile) => {
                        const {signal} = tile; 
                        return fetch(tile.url).then((res) => res.text()).then(async jsontext => {
                            jsontext = JSON.parse(jsontext).results.bindings;
                            for (let binding of jsontext) {
                                binding.startlong.value = parseFloat(binding.startlong.value);
                                binding.startlat.value  = parseFloat(binding.startlat.value);
                                binding.endlong.value   = parseFloat(binding.endlong.value);
                                binding.endlat.value    = parseFloat(binding.endlat.value);
                                binding.startPos = [binding.startlong.value, binding.startlat.value, 0];
                                binding.endPos = [binding.endlong.value, binding.endlat.value, 0];
                            }
                            return jsontext;
                        });
                    },
                    renderSubLayers: (props) => {
                        if (!props.data)
                            return;
                        return new deck.LineLayer({
                            ...props,
                            extensions: [new deck._TerrainExtension()],
                            terrainDrawMode: 'offset',
                            pickable: true,
                            getWidth: 5,
                            getSourcePosition: d => d.startPos,
                            getTargetPosition: d => d.endPos,
                            getColor: [255, 0, 0, 255],
                            // parameters: {
                            //     depthTest: false
                            // },
                        });
                        // console.log(props.data);
                    },
                });
            }
            var metrics = [];
            benchmarkOn = false;
            function download(filename, text) {
                var element = document.createElement('a');
                element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
                element.setAttribute('download', filename);

                element.style.display = 'none';
                document.body.appendChild(element);

                element.click();

                document.body.removeChild(element);
            }
            const canvasEl = document.getElementById(`${widgetName}_map3d`);
            canvasEl.addEventListener("webglcontextlost", (event) => {
                console.log(event.statusMessage);
            })

            // map3d = new snap4deck.Snap4Deck({
            map3d = new deck.Deck({
                mapStyle: 'https://basemaps.cartocdn.com/gl/positron-nolabels-gl-style/style.json',
                viewState: currentViewState,
                pickingRadius: 10,
                controller: {
                    doubleClickZoom: false,
                    inertia: true,
                    touchRotate: true,
                    scrollZoom: {
                        smooth: true,
                    }
                },
                // debug: true,
                // drawPickingColors: true,
                debugOutput: debugOutput,
                effects,
                parent: canvasEl,
                views: new deck.MapView({
                    // farZMultiplier: 3,
                    // fovy: 90,
                    // altitude: 3,
                    // nearZMultiplier: 0.001,
                    // farZMultiplier: 20000.21,
                    farZMultiplier: 2.21,
                }),

                layers: [
                    layers.terrain,
                    layers.roads,
                    layers.building,
                    ...layers.vehicle,
                    layers.tree,
                ],
                // debug: true,
                // /* uncomment for sky
                // _customRender: (redrawReason) => {
                //     if (skyOn && sky != undefined && map3d != undefined) {
                //         const {
                //             bearing,
                //             pitch,
                //             maxPitch
                //         } = currentViewState;
                //         sky.draw(bearing, pitch, maxPitch);
                //     }
                //     map3d._drawLayers(redrawReason, {
                //         clearCanvas: !skyOn
                //     });
                // },
                
                onWebGLInitialized: (gl) => {
                    map3dGL = gl;

                    // if (skyOn) {
                    //     sky = new Sky(gl);
                    //     const {
                    //         bearing,
                    //         pitch,
                    //         maxPitch
                    //     } = currentViewState;
                    //     sky.draw(bearing, pitch, maxPitch);
                    // }
                },
                onViewStateChange: ({
                    viewState
                }) => {
                    clearTimeout(updateTimeout);
                    currentViewState = viewState;

                    // sky
                    // if (sky != undefined && map3d != undefined) {
                    //     const {
                    //         bearing,
                    //         pitch,
                    //         maxPitch
                    //     } = currentViewState;
                    //     sky.draw(bearing, pitch, maxPitch);
                    // }
                    
                    $('#compass-div').css('transform', `rotate(${-viewState.bearing}deg)`)
                    map3d.setProps({
                        viewState: viewState,
                    });
                    $('#deck-zoom-box').text(Math.floor(viewState.zoom * 10) / 10);
                    reloadPopupDiv();
                    return viewState;
                },
                getCursor: ({isDragging}) => {
                    if (isDragging)
                        return 'grabbing';
                    if (deckMode === 'selection')
                        return 'pointer';
                    return 'grab';
                },
                getTooltip: (info) => {
                    let {
                        object
                    } = info;
                    if (object == null)
                        return null;
                    var displayedText = "";
                    var layer = info.tile ? info.tile.layers[0] : info.layer;
                    if (layer instanceof snap4deck.CrestLayer) {
                        displayedText += `Traffic density: ${Math.floor(object.density * 100) / 100}</br>`;
                    } else if (info.layer instanceof snap4deck.TreeLayer) {
                        displayedText += `ID: ${object.properties.ID}</br>`;
                        displayedText += `Common Name: ${object.properties.NOME_COMUN}</br>`;
                        displayedText += `Tree Species: ${object.properties.SPECIE}</br>`;
                        displayedText += `Circumference: ${object.properties.CIRCONF_CM} cm</br>`;
                    } else if (layer instanceof deck.LineLayer) {
                        displayedText += `Name: ${object.nomeStrada.value}</br>`;
                        displayedText += `Type: ${object.highwaytype.value}</br>`;
                        displayedText += `Length: ${object.lalunghezza.value}</br>`;
                    } else if (object.properties != null) {
                        if (object.properties.OBJECTID || object.properties.osm_id)
                            displayedText += `ID: ${object.properties.OBJECTID || object.properties.osm_id}</br>`;
                        if (object.properties.name != null)
                            displayedText += `Name: ${object.properties.name}</br>`;
                        if (object.properties.address != null)
                            displayedText += `Address: ${object.properties.address}</br>`;
                    }
                    // if (object.density)
                    //     displayedText += `Traffic density: ${Math.floor(object.density * 100) / 100}`;
                    if (displayedText === "")
                        return;
                    return object && {
                        html: `<p class="hoverName">${displayedText.slice(0,-5)}</p>`,
                    };
                },
                onDrag: ({
                    viewport
                }) => {
                    if (popupCoord.length != 0) {
                        reloadPopupDiv()
                    }
                },
                onDragStart: ({
                    viewport
                }) => {
                    manuallyControlled = false;
                    hideMenu(mapMenuId);
                    hideMenu(lightMenuId);
                },
                _onMetrics: (metric) => {
                    if (benchmarkOn) {
                        metrics.push({...metric});
                    }
                    if (debugOutput)
                        $("#fps").text(`FPS: ${metric.fps}`);
                },
                onClick: (info, event) => {
                    console.log(info, event);
                    hideMenu(mapMenuId);
                    hideMenu(lightMenuId);
                    if (preventClickEvent) {
                        preventClickEvent = false;
                        return;
                    }
                    if (whatifOn) {
                        // const coord = map3d.getViewports()[0].unproject([info.x, info.y, 2]);
                        $('#deck-whatif-popup').css('display', 'block');
                        $('#deck-whatif-popup').css('top', `${info.y}px`);
                        $('#deck-whatif-popup').css('left', `${info.x}px`);
                        // lastWhatifCoord = coord;
                        // lastWhatifCoord = coord.slice(0,-1);
                        lastWhatifCoord = info.coordinate;
                    }
                    if (event.rightButton && event.srcEvent.ctrlKey && event.srcEvent.altKey) {
                        benchmarkOn = !benchmarkOn;
                        if (benchmarkOn) {
                            console.log('benchmark started');
                        } else {
                            console.log('benchmark stopped');
                            download('benchmark.json', JSON.stringify(metrics));
                            metrics = [];
                        }
                    }
                    else if (event.rightButton && event.srcEvent.ctrlKey) {
                        console.log(info.coordinate);
                    }
                },
                onError: (error, layer) => {
                    console.error('Fatal error', error);
                    console.error('view state', currentViewState);
                    console.error('layer', layer);
                    console.error('istance', map3d);
                    return true;
                },
            });
            $(`#${widgetName}_map3d`).on('contextmenu', event => event.preventDefault());
            loadDensityTable();
            loadSettingContent();
            reverseColorButton('deck-movement-mode');

            $(`#${widgetName}_map3d`).css('z-index', 420);

            $('#deck-pitch-up').on('click', function(event) {
                if (!manuallyControlled) {
                    map3d.setProps({
                        viewState: {
                            ...currentViewState
                        },
                    });
                    manuallyControlled = true;
                }
                if (currentViewState.pitch + 5 >= currentViewState.maxPitch)
                    currentViewState.pitch = currentViewState.maxPitch;
                else
                    currentViewState.pitch += 5;
                map3d.setProps({
                    viewState: {
                        ...currentViewState
                    },
                });
            });

            $('#deck-pitch-down').on('click', function(event) {
                if (!manuallyControlled) {
                    map3d.setProps({
                        viewState: {
                            ...currentViewState
                        },
                    });
                    manuallyControlled = true;
                }
                if (currentViewState.pitch - 5 <= 0)
                    currentViewState.pitch = 0;
                else
                    currentViewState.pitch -= 5;
                map3d.setProps({
                    viewState: {
                        ...currentViewState
                    },
                });
            });

            $('#deck-bear-up').on('click', function(event) {
                if (!manuallyControlled) {
                    map3d.setProps({
                        viewState: {
                            ...currentViewState
                        },
                    });
                    manuallyControlled = true;
                }
                currentViewState.bearing += 5;
                map3d.setProps({
                    viewState: {
                        ...currentViewState
                    },
                });
                $('#compass-div').css('transform', `rotate(${-currentViewState.bearing}deg)`)
            });

            $('#deck-bear-down').on('click', function(event) {
                if (!manuallyControlled) {
                    map3d.setProps({
                        viewState: {
                            ...currentViewState
                        },
                    });
                    manuallyControlled = true;
                }
                currentViewState.bearing -= 5;
                map3d.setProps({
                    viewState: {
                        ...currentViewState
                    },
                });
                $('#compass-div').css('transform', `rotate(${-currentViewState.bearing}deg)`)
            });

            $('#deck-zoom-up').on('click', function(event) {
                if (!manuallyControlled) {
                    map3d.setProps({
                        viewState: {
                            ...currentViewState
                        },
                    });
                    manuallyControlled = true;
                }
                if (currentViewState.zoom + 1 >= currentViewState.maxZoom)
                    currentViewState.zoom = currentViewState.maxZoom;
                else
                    currentViewState.zoom += 1;
                map3d.setProps({
                    viewState: {
                        ...currentViewState
                    },
                });
                $('#deck-zoom-box').text(parseInt(currentViewState.zoom));
            });

            $('#deck-zoom-down').on('click', function(event) {
                if (!manuallyControlled) {
                    map3d.setProps({
                        viewState: {
                            ...currentViewState
                        },
                    });
                    manuallyControlled = true;
                }
                if (currentViewState.zoom - 1 <= 1)
                    currentViewState.zoom = 1;
                else
                    currentViewState.zoom -= 1;
                map3d.setProps({
                    viewState: {
                        ...currentViewState
                    },
                });
                $('#deck-zoom-box').text(parseInt(currentViewState.zoom));
            });

            $('#deck-movement-mode').on('click', function(event) {
                setDeckMode('movement');
            });
            $('#deck-selection-mode').on('click', function(event) {
                setDeckMode('selection');
            });
            $('#start-whatif-btn').on('click', _ => {
                if (!whatifOn)
                    return;
                whatifRoutingStart = lastWhatifCoord;
                $('#deck-whatif-popup').css('display', 'none');
                layers.whatif[2] = createWhatifIconLayer();
                updateLayers();
                startRouting();
            });
            $('#end-whatif-btn').on('click', _ => {
                if (!whatifOn)
                    return;
                whatifRoutingEnd = lastWhatifCoord;
                $('#deck-whatif-popup').css('display', 'none');
                layers.whatif[2] = createWhatifIconLayer();
                // layers.pin.push(createWhatifIconLayer());
                updateLayers();
                startRouting();
            });
            $('#close-whatif-btn').on('click', _ => {
                $('#deck-whatif-popup').css('display', 'none');
            });

            $('#lightEnable').on('click', (event) => {
                lightsOn = event.currentTarget.checked;
                reloadLight();
                if (lightsOn) {
                    showLightSection();
                } else {
                    hideLightSection();
                }
            });
            $('#skyEnable').on('click', (event) => {
                skyOn = event.currentTarget.checked;
                if (skyOn) {
                    currentViewState.maxPitch = 85;
                    map3d.setProps({
                        viewState: {
                            ...currentViewState
                        }
                    });
                    map3d.setProps({
                        viewState: {
                            ...currentViewState
                        }
                    });

                    sky = new Sky(map3dGL);
                    const {
                        bearing,
                        pitch,
                        maxPitch
                    } = currentViewState;
                    sky.draw(bearing, pitch, maxPitch);

                    map3d._drawLayers('viewState changed', {
                        clearCanvas: !skyOn
                    });
                } else {
                    currentViewState.maxPitch = 65;
                    if (currentViewState.pitch > 65) {
                        currentViewState.pitch = 65;
                        map3d.setProps({
                            viewState: {
                                ...currentViewState
                            }
                        });
                        map3d.setProps({
                            viewState: {
                                ...currentViewState
                            }
                        });
                    }
                    map3d._drawLayers('viewState changed', {
                        clearCanvas: !skyOn
                    });
                }
            });
            $('#shadowEnable').on('click', (event) => {
                shadowsOn = event.currentTarget.checked;
                reloadLight();
            });
            $('#lightTimestamp').on('input', function() {
                reloadLight();
            })

            hideMenu(mapMenuId);
            hideMenu(lightMenuId);

            $('#dropdownMenu1').click((event) => toggleMenu(mapMenuId));
            $('#orthomaps-btn').click((event) => {
                setHeaderMenu('orthomaps');
            });
            $('#geojson-btn').click((event) => {
                setHeaderMenu('geojson');
            });
            $('#buildings-btn').click((event) => {
                setHeaderMenu('buildings');
            });
            $('#settings-btn').click((event) => {
                setHeaderMenu('settings');
            });
            $('#heatmap-info-btn').click(() => {
                unselectInfo();
                $('#heatmapLegend').css('display', 'block');
                $('#heatmap-info-btn').addClass('deck-btn-active');
                $('#heatmap-info-btn').removeClass('deck-btn');
            });
            $('#traffic-info-btn').click(() => {
                unselectInfo();
                $('#traffic-info-btn').addClass('deck-btn-active');
                $('#traffic-info-btn').removeClass('deck-btn');
                $('#trafficHeatmapLegend').css('display', 'block');
            });
            $('#building-info-btn').click(() => {
                unselectInfo();
                $('#building-info-btn').addClass('deck-btn-active');
                $('#building-info-btn').removeClass('deck-btn');
                $('#building-info-content').css('display', 'block');
            });
            $('#whatif-info-btn').click(() => {
                unselectInfo();
                $('#whatif-info-btn').addClass('deck-btn-active');
                $('#whatif-info-btn').removeClass('deck-btn');
                $('#whatif-control').css('display', 'block');
            });
            $('#fullscreen-map-btn').click((event) => {
                fullscreenOn = !fullscreenOn;
                if (fullscreenOn) {
                    fullscreenParams.fullLastTopPad = $(`#${widgetName}_chartContainer`).css('padding-top');
                    fullscreenParams.controlLastTop = $('#universal-map-controls, #universal-map-overlay, #universal-map-popups').css('top');
                    fullscreenParams.controlLastHeight = $('#universal-map-controls, #universal-map-overlay, #universal-map-popups').css('height');
                    $(`#${widgetName}_chartContainer`)[0].requestFullscreen();
                    $(`#${widgetName}_chartContainer`).css('padding-top', 0);
                    // $('#universal-map-controls, #universal-map-overlay, #universal-map-popups').attr('style', '');
                    $('#universal-map-controls, #universal-map-overlay, #universal-map-popups').attr('style', 'top: 0px !important; height: 100% !important;');
                }
                else {
                    document.exitFullscreen();
                    $(`#${widgetName}_chartContainer`).css('padding-top', fullscreenParams.fullLastTopPad);
                    $('#universal-map-controls, #universal-map-overlay, #universal-map-popups').css('top', fullscreenParams.controlLastTop);
                    $('#universal-map-controls, #universal-map-overlay, #universal-map-popups').css('height', fullscreenParams.controlLastHeight);
                }
            });
            $('#2DButton').click(function(event) {
                is3dOn = false;
                $(`#${widgetName}_map3d`).css('visibility', 'hidden');
                $('#2DButton i').removeClass('hidden');
                $('#3DButton i').addClass('hidden');
                hideMenu(mapMenuId);
            });
            $('#3DButton').click(function(event) {
                is3dOn = true;
                $(`#${widgetName}_map3d`).css('visibility', 'visible');
                $('#2DButton i').addClass('hidden');
                $('#3DButton i').removeClass('hidden');
                hideMenu(mapMenuId);
            });
            $('#glid').click(() => {
                debugOutput = !debugOutput
                map3d.setProps({
                    debugOutput
                })
                $('#fps').text('');
                $('#tiles').text('');
            });
            $('#compass-icon').click(() => {
                if (!manuallyControlled) {
                    map3d.setProps({
                        viewState: {
                            ...currentViewState
                        },
                    });
                    manuallyControlled = true;
                }
                currentViewState.bearing = 0;
                map3d.setProps({
                    viewState: {
                        ...currentViewState
                    },
                });
                $('#compass-div').css('transform', `rotate(${-currentViewState.bearing}deg)`)
            });

            let lastBuildingIdInsert = null;
            for (let key in supportedBuildings) {
                const building = supportedBuildings[key];
                const menuBuildingTemplate = `
                    <li class="appendable deck-btn">
                        <a class="dropdown-item" href="#" id="${building.id}">
                            <i class="fa appendable-icon hidden fa-map-pin"></i>
                                &nbsp;${building.displayedName}
                        </a>
                    </li>
                `;
                const menuItem = $(menuBuildingTemplate);
                const menuHeader = $('#buildingHeader');
                if (lastBuildingIdInsert == null)
                    menuItem.insertAfter(menuHeader);
                else
                    menuItem.insertAfter($(`#${lastBuildingIdInsert}`).parent());
                menuItem.click(() => {
                    selectTickMenuBuilding(building.id);
                    hideMenu(mapMenuId);
                    clearBuildings();
                    if (deckMode == 'selection') {
                        if (!layers.building) {

                        }
                        else if (layers.building.id == 'aggregated-building-layer') {
                            layers.hiddenBuilding = createAggregatedBuildingLayer({
                                data: '../widgets/layers/edificato/aggregated_buildings.geojson',
                                hidden: true,
                            });
                        } else if (building.id == 'menu-extruded-building') {
                            layers.hiddenBuilding = null;
                        }
                    }
                    supportedBuildingSelected = building;
                    if (layers.tree) {
                        let oldProps = Object.assign({}, layers.tree.props);
                        layers.tree = createTreeLayer({
                            data: oldProps.data,
                            model: oldProps.model,
                            getOrientation: oldProps.getOrientation,
                            sizeScale: oldProps.sizeScale,
                        });
                        console.log(layers.tree)
                    }
                    building.action();
                    if (!layers.google) {
                        layers.terrain = createMultiElevationTerrain();
                    }
                    updateLayers();
                    // reloadLight();
                });
                lastBuildingIdInsert = building.id;
            }

            if (styleParameters != null && styleParameters.buildingType != null)
                switch (styleParameters.buildingType) {
                    case 'default':
                        selectTickMenuBuilding(supportedBuildings.extruded.id);
                        break;
                    case 'mesh':
                        selectTickMenuBuilding(supportedBuildings.glb.id);
                        break;
                    case 'mesh-notext':
                        selectTickMenuBuilding(supportedBuildings.no_text.id);
                        break;
                }

            setTimeout(() => {
                selectTickMenuOrthomap('defaultMap');
                if (styleParameters != null && styleParameters.defaultOrthomap)
                    selectTickMenuOrthomap(styleParameters.defaultOrthomap);
            }, 1000);

            if (!is3dOn) {
                $(`#${widgetName}_map3d`).css('visibility', 'hidden');
            }

            // TODO: move to 2d map
            map.defaultMapRef = L.map(mapDivLocal).setView([latInit, lngInit], widgetParameters.zoom);
            map.eventsOnMap = eventsOnMap;
            oms = new OverlappingMarkerSpiderfier(map.defaultMapRef, {
                keepSpiderfied: true
            });
            oms.addListener('click', function(marker) {
                marker.openPopup();
            });

            oms.addListener('spiderfy', function(markers) {
                //    map.defaultMapRef.closePopup();
            });

            oms.addListener('unspiderfy', function(markers) {
                for (let n = 0; n < $(".leaflet-popup-close-button").length; n++) {
                    $(".leaflet-popup-close-button")[n].click();
                }
            });

            // Visualize default Orthomap, if configured
            if (styleParameters) {
                if (styleParameters.showOrthomaps && styleParameters.defaultOrthomap) {
                    if (styleParameters.showOrthomaps == "yes" && styleParameters.defaultOrthomap != '') {
                        let menuOrthomap = [];
                        if (widgetParameters.dropdownMenu) {
                            for (let n = 0; n < widgetParameters.dropdownMenu.length; n++) {
                                if (widgetParameters.dropdownMenu[n].id == styleParameters.defaultOrthomap) {
                                    menuOrthomap = widgetParameters.dropdownMenu[n];
                                }
                            }
                            defaultOrthomapMenuItem = menuOrthomap;
                            //    addTileLayer(null, menuOrthomap);
                            if (menuOrthomap.service == "WMS") {
                                addDefaultBaseMap(map.defaultMapRef);
                                addLayerWMS(null, menuOrthomap);
                            } else {
                                let layer = L.tileLayer(menuOrthomap.linkUrl, {
                                    attribution: menuOrthomap.layerAttribution,
                                    apikey: menuOrthomap.apiKey
                                }).addTo(map.defaultMapRef);
                            }
                        } else {
                            /* L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                 attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                                 maxZoom: 18
                             }).addTo(map.defaultMapRef);*/
                            addDefaultBaseMap(map.defaultMapRef);
                        }
                    } else {
                        /*  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                              attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                              maxZoom: 18
                          }).addTo(map.defaultMapRef);*/
                        addDefaultBaseMap(map.defaultMapRef);
                    }
                } else {
                    /* L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                         attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                         maxZoom: 18
                     }).addTo(map.defaultMapRef);*/
                    addDefaultBaseMap(map.defaultMapRef);
                }
            } else {
                /*  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                      attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                      maxZoom: 18
                  }).addTo(map.defaultMapRef);*/
                addDefaultBaseMap(map.defaultMapRef);
            }

            map.defaultMapRef.attributionControl.setPrefix('');

            var rgbToHex = function(rgb) {
                var hex = Number(rgb).toString(16);
                if (hex.length < 2) {
                    hex = "0" + hex;
                }
                return hex;
            };

            var fullColorHex = function(rgbArray) {
                var red = rgbToHex((rgbArray.split(",")[0]).trim());
                var green = rgbToHex((rgbArray.split(",")[1]).trim());
                var blue = rgbToHex((rgbArray.split(",")[2]).trim());
                return red + green + blue;
            };

            // Crea un array con tutti i giorni disponibili per la heatmap corrente dai metadati
            function initDaysArray(heatmapMetaData) {
                var outArray = [];
                var outMillisArray = [];
                for (n = 0; n < heatmapData.length; n++) {
                    outArray[n] = dateFns.parse(heatmapData[n].metadata.date.replace(" ", "T"));
                    outMillisArray[n] = outArray[n].valueOf();
                }
                var dateNow = new Date(Date.now());
                var result = dateFns.closestTo(dateNow, outArray);
                var idx = outMillisArray.indexOf(result.valueOf());
                while (dateFns.isAfter(result, dateNow)) {
                    if (idx < outArray.length) {
                        result = outArray[++idx];
                    }
                }
                if (idx > heatmapData.length - 1) {
                    current_page = heatmapData.length - 1;
                } else {
                    current_page = idx;
                }

                var utcDate = getUTCDate(Date.now());
                //    var gmtDate = getGMTDate(Date.now());
                var clientTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;

                var datum = new Date(Date.now());
                if (isValidDate(datum)) {
                    var convertedDate = datum.epochConverterGMTString();
                    var relativeDate = datum.relativeDate();
                    var clientLocaleTime = datum.toString();
                }
                return outArray;
                //    return outMillisArray;
            }

            //Risponditore ad eventi innescati dagli widget pilota (aggiungi evento, togli evento)

            $(document).on('updateCustomLeafletMarkers', function(event) {
                let cnt = 0;
                let iconSize = [];
                let htmlString = "";
                if (event.tpl.includes("thermometer") || event.tpl.includes("Thermometer") || event.tpl
                    .includes("SVG_Value.svg")) {
                    iconSize = [96, 96];
                } else {
                    iconSize = [48, 48];
                }
                if (event.updateSingleMarkerFlag === true) {
                    if (gisLayersOnMap[currentCustomSvgLayer] != null) {
                        gisLayersOnMap[currentCustomSvgLayer].eachLayer(function(marker) {
                            if (marker.feature.properties.serviceUri == event.serviceUri) {
                                if (event.tpl.includes("Traffic_Light_SVG.svg") || event.tpl
                                    .includes("Thermometer") || event.tpl.includes(
                                        "27_Blinking_Alarm_SVG.svg") || event.tpl.includes(
                                        "119_SVG_PM10_level_vertical_bar.svg")) {
                                    if (event.tpl.includes("Thermometer")) {
                                        htmlString = "<img src='" + event.srcUrl +
                                            "' height='96px'>";
                                    } else {
                                        htmlString = "<img src='" + event.srcUrl +
                                            "' height='48px'>";
                                    }
                                    let icon = L.divIcon({
                                        //   html: svgContainerArray[cnt][0].innerHTML,
                                        html: htmlString,
                                        iconSize: iconSize,
                                        iconAnchor: [20, 48]
                                    });
                                    marker.setIcon(icon);
                                } else {
                                    if (svgContainerArray[event.id - 1]) {
                                        let icon = L.divIcon({
                                            html: svgContainerArray[event.id - 1][0]
                                                .innerHTML,
                                            iconSize: iconSize,
                                            iconAnchor: [20, 48]
                                        });
                                        marker.setIcon(icon);
                                    }
                                }
                            }
                        });
                        //   gisLayersOnMap[currentCustomSvgLayer].addTo(map.defaultMapRef);
                    }
                    //    if (event.tpl.includes("value.svg")) {
                    $('div.leaflet-div-icon').css('background-color', "transparent");
                    //    }
                    $('div.leaflet-div-icon').css('border', "0px");
                    //  currentCustomSvgLayer = null;
                    svgContainerArray = [];
                } else {
                    if (gisLayersOnMap[currentCustomSvgLayer] != null) {
                        gisLayersOnMap[currentCustomSvgLayer].eachLayer(function(marker) {
                            if (svgContainerArray[cnt] != null) {
                                if (event.tpl.includes("Traffic_Light_SVG.svg") || event.tpl
                                    .includes("Thermometer") || event.tpl.includes(
                                        "27_Blinking_Alarm_SVG.svg") || event.tpl.includes(
                                        "119_SVG_PM10_level_vertical_bar.svg")) {
                                    if (event.tpl.includes("Thermometer")) {
                                        htmlString = "<img src='" + svgContainerArray[cnt][0]
                                            .attributes['src'].value + "' height='96px'>";
                                    } else {
                                        htmlString = "<img src='" + svgContainerArray[cnt][0]
                                            .attributes['src'].value + "' height='48px'>";
                                    }
                                    let icon = L.divIcon({
                                        //   html: svgContainerArray[cnt][0].innerHTML,
                                        html: htmlString,
                                        iconSize: iconSize,
                                        iconAnchor: [20, 48]
                                    });
                                    marker.setIcon(icon);
                                } else {
                                    let icon = L.divIcon({
                                        html: svgContainerArray[cnt][0].innerHTML,
                                        iconSize: iconSize,
                                        iconAnchor: [20, 48]
                                    });
                                    marker.setIcon(icon);
                                }
                            }

                            /*   marker = L.marker(marker._latlng, {
                                   icon: icon
                               }).addTo(map.defaultMapRef);*/
                            cnt++;

                        });
                        gisLayersOnMap[currentCustomSvgLayer].addTo(map.defaultMapRef);
                    }
                    //    if (event.tpl.includes("value.svg")) {
                    $('div.leaflet-div-icon').css('background-color', "transparent");
                    //    }
                    $('div.leaflet-div-icon').css('border', "0px");
                    //   currentCustomSvgLayer = null;
                    svgContainerArray = [];
                }
            });

            $(document).on('updateCustomSingleMarker', function(event) {
                let cnt = 0;
                let iconSize = [];
                let htmlString = "";
                if (event.tpl.includes("thermometer") || event.tpl.includes("Thermometer") || event.tpl
                    .includes("SVG_Value.svg")) {
                    iconSize = [96, 96];
                } else {
                    iconSize = [48, 48];
                }

                if (gisLayersOnMap[currentCustomSvgLayer] != null) {
                    gisLayersOnMap[currentCustomSvgLayer].eachLayer(function(marker) {
                        if (svgContainerArray[cnt] != null) {
                            if (event.tpl.includes("Traffic_Light_SVG.svg") || event.tpl.includes(
                                    "Thermometer") || event.tpl.includes(
                                    "27_Blinking_Alarm_SVG.svg") || event.tpl.includes(
                                    "119_SVG_PM10_level_vertical_bar.svg")) {
                                if (event.tpl.includes("Thermometer")) {
                                    htmlString = "<img src='" + svgContainerArray[cnt][0]
                                        .attributes['src'].value + "' height='96px'>";
                                } else {
                                    htmlString = "<img src='" + svgContainerArray[cnt][0]
                                        .attributes['src'].value + "' height='48px'>";
                                }
                                let icon = L.divIcon({
                                    //   html: svgContainerArray[cnt][0].innerHTML,
                                    html: htmlString,
                                    iconSize: iconSize,
                                    iconAnchor: [20, 48]
                                });
                                marker.setIcon(icon);
                            } else {
                                let icon = L.divIcon({
                                    html: svgContainerArray[cnt][0].innerHTML,
                                    iconSize: iconSize,
                                    iconAnchor: [20, 48]
                                });
                                marker.setIcon(icon);
                            }
                        }

                        /*   marker = L.marker(marker._latlng, {
                               icon: icon
                           }).addTo(map.defaultMapRef);*/
                        cnt++;

                    });
                    gisLayersOnMap[currentCustomSvgLayer].addTo(map.defaultMapRef);
                }
                //    if (event.tpl.includes("value.svg")) {
                $('div.leaflet-div-icon').css('background-color', "transparent");
                //    }
                $('div.leaflet-div-icon').css('border', "0px");
                currentCustomSvgLayer = null;
                svgContainerArray = [];
            });

            $(document).on('addAlarm', function(event) {
                function addAlarmsToMap() {
                    let passedData = event.passedData;

                    for (let j = 0; j < passedData.length; j++) {

                        let lat = passedData[j].lat;
                        let lng = passedData[j].lng;
                        let eventType = passedData[j].eventType;
                        let eventName = passedData[j].eventName;
                        let eventStartDate = passedData[j].eventStartDate;
                        let eventStartTime = passedData[j].eventStartTime;
                        let eventSeverity = passedData[j].eventSeverity;
                        passedData[j].type = "alarmEvent";

                        //Creazione dell'icona custom per il pin
                        switch (eventSeverity) {
                            case "MINOR":
                                mapPinImg = '../img/alarmIcons/' + alarmTypes[eventType].mapIconLow;
                                severityColor = "#ffcc00";
                                break;

                            case "MAJOR":
                                mapPinImg = '../img/alarmIcons/' + alarmTypes[eventType].mapIconMed;
                                severityColor = "#ff9900";
                                break;

                            case "CRITICAL":
                                mapPinImg = '../img/alarmIcons/' + alarmTypes[eventType].mapIconHigh;
                                severityColor = "#ff6666";
                                break;
                        }

                        let pinIcon = new L.DivIcon({
                            className: null,
                            html: '<img src="' + mapPinImg + '" class="leafletPin" />',
                            iconAnchor: [18, 36]
                        });

                        let markerLocation = new L.LatLng(lat, lng);
                        let marker = new L.Marker(markerLocation, {
                            icon: pinIcon
                        });
                        passedData[j].marker = marker;

                        //Creazione del popup per il pin appena creato
                        let popupText = "<span class='mapPopupTitle'>" + eventName + "</span>" +
                            "<span class='mapPopupLine'><i>Start date: </i>" + eventStartDate + " - " +
                            eventStartTime + "</span>" +
                            "<span class='mapPopupLine'><i>Event type: </i>" + alarmTypes[eventType]
                            .desc.toUpperCase() + "</span>" +
                            "<span class='mapPopupLine'><i>Event severity: </i><span style='background-color: " +
                            severityColor + "'>" + eventSeverity.toUpperCase() + "</span></span>";

                        map.defaultMapRef.addLayer(marker);
                        lastPopup = marker.bindPopup(popupText, {
                            offset: [-5, -40],
                            maxWidth: 600
                        }).openPopup();

                        map.eventsOnMap.push(passedData[j]);

                    }
                }
                eventMapManager.legacyTrigger(event, addAlarmsToMap);
            });
            $(document).on('addEvacuationPlan', function(event) {
                function addEvacuationPlanToMap() {
                    let passedData = event.passedData;

                    for (let k = 0; k < passedData.length; k++) {

                        let plansObj = passedData[k].plansObj;
                        let planId = passedData[k].planId;
                        let evacuationColors = passedData[k].colors;

                        shownPolyGroup = L.featureGroup();
                        shownPolyGroup.eventType = passedData[k].eventType;


                        for (let j = 0; j < plansObj[planId].payload.evacuation_paths.length; j++) {
                            path = [];

                            for (let i = 0; i < plansObj[planId].payload.evacuation_paths[j].coords
                                .length; i++) {
                                let point = [];
                                point[0] = plansObj[planId].payload.evacuation_paths[j].coords[i]
                                    .latitude;
                                point[1] = plansObj[planId].payload.evacuation_paths[j].coords[i]
                                    .longitude;
                                path.push(point);
                                console.log(path);
                            }

                            let polyline = L.polyline(path, {
                                color: evacuationColors[j % 6]
                            });
                            shownPolyGroup.addLayer(polyline);
                        }
                        passedData[k].polyGroup = shownPolyGroup;
                        map.eventsOnMap.push(passedData[k]);
                    }
                    map.defaultMapRef.addLayer(shownPolyGroup);

                    shownPolyGroup.maxLat = shownPolyGroup.getBounds()._northEast.lat;
                    shownPolyGroup.minLat = shownPolyGroup.getBounds()._southWest.lat;
                    shownPolyGroup.maxLng = shownPolyGroup.getBounds()._northEast.lng;
                    shownPolyGroup.minLng = shownPolyGroup.getBounds()._southWest.lng;
                }
                eventMapManager.legacyTrigger(event, addEvacuationPlanToMap);
            });

            $(document).on('addBubbleChart', function(event) {
                function addSelectorEventToMap() {
                    if (lastPopup !== null) {
                        lastPopup.closePopup();
                    }
                    var passedData = event.passedData;

                    var mapBounds = map.defaultMapRef.getBounds();
                    if (is3dOn)
                        mapBounds = getLegacyBoundingBox(currentViewState);
                    var query = passedData.query;
                    var targets = passedData.targets;
                    var eventGenerator = passedData.eventGenerator;
                    var color1 = passedData.color1;
                    var color2 = passedData.color2;
                    var queryType = passedData.queryType;
                    var desc = passedData.desc;
                    var display = passedData.display;
                    if (desc == "") {
                        desc = query;
                    }
                    var pinattr = passedData.pinattr;
                    var pincolor = passedData.pincolor;
                    var symbolcolor = passedData.symbolcolor;
                    var iconFilePath = passedData.iconFilePath;
                    bubbleSelectedMetric[desc] = passedData.bubbleSelectedMetric;
                    var altViewMode = passedData.altViewMode;

                    var loadingDiv = new LoadingDiv({
                        text: desc,
                        color1,
                        color2,
                    });

                    var re1 = '(selection)'; // Word 1
                    var re2 = '(=)'; // Any Single Character 1
                    var re3 = '([+-]?\\d*\\.\\d+)(?![-+0-9\\.])'; // Float 1
                    var re4 = '(;|%3B)'; // Any Single Character 2
                    var re5 = '([+-]?\\d*\\.\\d+)(?![-+0-9\\.])'; // Float 2
                    var re6 = '(;|%3B)?'; // Any Single Character 3
                    var re7 = '([+-]?\\d*\\.\\d+)?(?![-+0-9\\.])?'; // Float 3
                    var re8 = '(;|%3B)?'; // Any Single Character 4
                    var re9 = '([+-]?\\d*\\.\\d+)?(?![-+0-9\\.])?'; // Float 4

                    var pattern = new RegExp(re1 + re2 + re3 + re4 + re5 + re6 + re7 + re8 + re9, [
                        "i"
                    ]);

                    if (queryType === "Default") {
                        if (passedData.query.includes("datamanager/api/v1/poidata/")) { // DA GESTIRE
                            if (passedData.desc != "My POI") {
                                myPOIId = passedData.query.split("datamanager/api/v1/poidata/")[1];
                                apiUrl = "../controllers/myPOIProxy.php";
                                dataForApi = myPOIId;
                                query = passedData.query;
                            } else {
                                apiUrl = "../controllers/myPOIProxy.php";
                                dataForApi = "All";
                                query = passedData.query;
                            }
                        } else if (passedData.query.includes("/iot/") && !passedData.query.includes(
                                "/api/v1/")) { // DA GESTIRE
                            query = "<?= $superServiceMapProxy; ?>api/v1/?serviceUri=" + passedData
                                .query + "&format=json";
                        } else {
                            // south west north east
                            if (pattern.test(passedData.query)) {
                                query = passedData.query.replace(pattern, "selection={selection}");
                            } else {
                                query = passedData.query + "&selection={selection}";
                            }
                            if (altViewMode == "Bubble" || altViewMode == "CustomPin" || altViewMode ==
                                "DynamicCustomPin") {
                                query = query + "&valueName=" + bubbleSelectedMetric[desc];
                            }
                            query = "<?= $superServiceMapProxy ?>api/v1?" + query.split('?')[1];
                        }
                        if (!query.includes("&maxResults")) {
                            if (!query.includes("&queryId")) {
                                query = query + "&maxResults=0";
                            }
                        }
                    } else if (queryType === "Sensor") {
                        if (event.query != null) {
                            query = "<?= $superServiceMapProxy ?>" + event.query;
                        } else if (query != null) {
                            query = "<?= $superServiceMapProxy ?>" + encodeServiceUri(query);
                        }
                        if (query.includes("&fromTime=")) {
                            if (altViewMode == "Bubble" || altViewMode == "CustomPin" || altViewMode ==
                                "DynamicCustomPin") {
                                query = query.split("&fromTime=")[0] + "&valueName=" +
                                    bubbleSelectedMetric[desc];
                            }
                        } else {
                            query = query + bubbleSelectedMetric[desc];
                        }
                    } else if (queryType === "MyPOI") {
                        if (passedData.desc != "My POI") {
                            myPOIId = passedData.query.split("datamanager/api/v1/poidata/")[1];
                            apiUrl = "../controllers/myPOIProxy.php";
                            dataForApi = myPOIId;
                            query = passedData.query;
                        } else {
                            apiUrl = "../controllers/myPOIProxy.php";
                            dataForApi = "All";
                            query = passedData.query;
                        }
                    } else {
                        query = passedData.query;
                    }

                    if (passedData.targets !== "") {
                        targets = passedData.targets.split(",");
                    } else {
                        targets = [];
                    }

                    if (queryType != "MyPOI" && !passedData.query.includes(
                            "datamanager/api/v1/poidata/")) {
                        apiUrl = query + "&geometry=true&fullCount=false";
                    }

                    //    if (queryType === "Sensor" && query.includes("%2525")) {
                    if (query.includes("%2525") && !query.includes("%252525")) {
                        let queryPart1 = query.split("/resource/")[0];
                        let queryPart2 = (query.split("/resource/")[1]).split("&format=")[0];
                        let queryPart3 = query.split("&format=")[1];
                        if (queryPart3 != undefined) {
                            apiUrl = queryPart1 + "/resource/" + encodeURI(queryPart2) + "&format=" +
                                queryPart3;
                        } else {
                            apiUrl = queryPart1 + "/resource/" + encodeURI(queryPart2);
                        }
                    }

                    const valueName = apiUrl.match(/valueName=([^&]*)/)[0].split('=')[1];
                    var min = 0;
                    var max = 100;
                    minS = apiUrl.match(/min=\d+(.\d+)?/);
                    maxS = apiUrl.match(/max=\d+(.\d+)?/);
                    if (minS)
                        min = parseFloat(minS[0].split('=')[1]);
                    if (maxS)
                        max = parseFloat(maxS[0].split('=')[1]);

                    // layers.fixedPins.push(new deck.TileLayer({
                    layers.fixedPins.push(new snap4deck.FusionTileLayer({
                        id: passedData.desc,
                        data: apiUrl,
                        // zoomOffset: -10,
                        // maxZoom: 5,
                        fusionTopDown: (parent, current, index) => {
                            if (!current)
                                current = [];
                            if (!parent)
                                return;
                            return snap4deck.geojsonFusionBottomUp(parent, current);
                        },
                        fusionBottomUP: (child, current) => {
                            if (!current)
                                current = [];
                            if (!child)
                                return;
                            return snap4deck.geojsonFusionBottomUp(child, current);
                        },
                        renderSubLayers: (props) => {
                            if (!props.data)
                                return;
                            return new snap4deck.Sensor3DLayer({
                                ...props,
                                data: props.data.features,
                                extensions: [new deck._TerrainExtension()],
                                terrainDrawMode: 'offset',
                                getText: d => d.properties.lastValue[valueName],
                                getElevation: d => (parseFloat(d.properties.lastValue[valueName]) / (max - min)) * 80,
                                getFillColor: rgbaStringToArray(color1).slice(0,
                                    -1),
                                onClick: (event, info) => {
                                    console.log('sensor3d triggered click');
                                    info.object = event.object;
                                    info.coordinate = event.coordinate;
                                    onMarkerClick(event, info);
                                },
                            });
                        },
                        getTileData: (tile) => { 
                            // start tile layer test
                            // const {north, east, west, south} = tile.bbox;
                            // const url = tile.url.replace('{selection}', `${south};${west};${north};${east}`);
                            // return fetch(url).then(res => res.text()).then(jsontext => {
                            // end tile layer test
                            // start fusion tile layer
                            return fetch(tile.url).then(res => res.text()).then(jsontext => {
                            // end fusion tile layer
                                const json = JSON.parse(jsontext)
                                let data = {}
                                for (let key in json)
                                    data = {...data, ...json[key]}
                                return data;
                            });
                        }
                    }));
                    updateLayers();
                    loadingDiv.setStatus('ok');
                }
                eventMapManager.legacyTrigger(event, addSelectorEventToMap);
            });

            $(document).on('addSelectorPin', function(event) {
                function addSelectorEventToMap() {
                    if (lastPopup !== null) {
                        lastPopup.closePopup();
                    }
                    var passedData = event.passedData;

                    var mapBounds = map.defaultMapRef.getBounds();
                    var mapBounds3d = getMaxBoundingBox(currentViewState);
                    var query = passedData.query;
                    var targets = passedData.targets;
                    var eventGenerator = passedData.eventGenerator;
                    var color1 = passedData.color1;
                    var color2 = passedData.color2;
                    var queryType = passedData.queryType;
                    var desc = passedData.desc;
                    var display = passedData.display;
                    if (desc == "") {
                        desc = query;
                    }
                    var pinattr = passedData.pinattr;
                    var pincolor = passedData.pincolor;
                    var symbolcolor = passedData.symbolcolor;
                    var iconFilePath = passedData.iconFilePath;

                    var loadingDiv = new LoadingDiv({
                        text: desc,
                        color1,
                        color2,
                    });

                    var re1 = '(selection)'; // Word 1
                    var re2 = '(=)'; // Any Single Character 1
                    var re3 = '([+-]?\\d*\\.\\d+)(?![-+0-9\\.])'; // Float 1
                    var re4 = '(;|%3B)'; // Any Single Character 2
                    var re5 = '([+-]?\\d*\\.\\d+)(?![-+0-9\\.])'; // Float 2
                    var re6 = '(;|%3B)?'; // Any Single Character 3
                    var re7 = '([+-]?\\d*\\.\\d+)?(?![-+0-9\\.])?'; // Float 3
                    var re8 = '(;|%3B)?'; // Any Single Character 4
                    var re9 = '([+-]?\\d*\\.\\d+)?(?![-+0-9\\.])?'; // Float 4

                    var pattern = new RegExp(re1 + re2 + re3 + re4 + re5 + re6 + re7 + re8 + re9, [
                        "i"
                    ]);

                    if (queryType === "Default") {
                        if (passedData.query.includes("datamanager/api/v1/poidata/")) {
                            if (passedData.desc != "My POI") {
                                myPOIId = passedData.query.split("datamanager/api/v1/poidata/")[1];
                                apiUrl = "../controllers/myPOIProxy.php";
                                dataForApi = myPOIId;
                                query = passedData.query;
                            } else {
                                apiUrl = "../controllers/myPOIProxy.php";
                                dataForApi = "All";
                                query = passedData.query;
                            }
                        } else if (passedData.query.includes("/iot/") && !passedData.query.includes(
                                "/api/v1/")) {
                            query = "<?= $superServiceMapProxy; ?>api/v1/?serviceUri=" + passedData
                                .query + "&format=json";
                        } else {
                            var selQuery;
                            if (is3dOn)
                                // cultural
                                selQuery =
                                `&selection=${mapBounds3d[0][1]};${mapBounds3d[0][0]};${mapBounds3d[1][1]};${mapBounds3d[1][0]}`;
                            else
                                selQuery = "&selection=" + mapBounds["_southWest"].lat + ";" +
                                mapBounds["_southWest"].lng + ";" + mapBounds["_northEast"].lat + ";" +
                                mapBounds["_northEast"].lng;
                            selQuery = '&selection={selection}';
                            if (pattern.test(passedData.query))
                                query = passedData.query.replace(pattern, selQuery);
                            else
                                query = passedData.query + selQuery;
                            query = "<?= $superServiceMapProxy ?>api/v1?" + query.split('?')[1];
                        }
                        if (!query.includes("&maxResults")) {
                            if (!query.includes("&queryId")) {
                                query = query + "&maxResults=0";
                            }
                        }
                    } else if (queryType === "Sensor") {
                        if (event.query != null) {
                            query = "<?= $superServiceMapProxy ?>" + event.query;
                        } else if (query != null) {
                            query = "<?= $superServiceMapProxy ?>" + encodeServiceUri(query);
                        }
                    } else if (queryType === "MyPOI") {
                        if (passedData.desc != "My POI") {
                            myPOIId = passedData.query.split("datamanager/api/v1/poidata/")[1];
                            apiUrl = "../controllers/myPOIProxy.php";
                            dataForApi = myPOIId;
                            query = passedData.query;
                        } else {
                            apiUrl = "../controllers/myPOIProxy.php";
                            dataForApi = "All";
                            query = passedData.query;
                        }
                    } else {
                        query = passedData.query;
                    }

                    if (passedData.targets !== "") {
                        targets = passedData.targets.split(",");
                    } else {
                        targets = [];
                    }

                    if (queryType != "MyPOI" && !passedData.query.includes(
                            "datamanager/api/v1/poidata/")) {
                        apiUrl = query + "&geometry=true&fullCount=false";
                    }
                    if (query.includes("%2525") && !query.includes("%252525")) {
                        let queryPart1 = query.split("/resource/")[0];
                        let queryPart2 = (query.split("/resource/")[1]).split("&format=")[0];
                        let queryPart3 = query.split("&format=")[1];
                        if (queryPart3 != undefined) {
                            apiUrl = queryPart1 + "/resource/" + encodeURI(queryPart2) + "&format=" +
                                queryPart3;
                        } else {
                            apiUrl = queryPart1 + "/resource/" + encodeURI(queryPart2);
                        }
                    }

                    apiUrl = apiUrl.replace(/&maxResults=\d*/g, "&maxResults=6000");
                    let commonState = {};

                    // const sensorLayer = new deck.TileLayer({
                    const sensorLayer = new snap4deck.FusionTileLayer({
                        id: `${desc}-layer`,
                        data: apiUrl,
                        pickable: true,
                        statePasstrough: true,
                        fusionTopDown: (parent, current, index) => {
                            if (!current)
                                current = [[], []];
                            if (!parent)
                                return;
                            return [
                                // snap4deck.geojsonFusionTopDown(parent[0], current[0], index), 
                                // snap4deck.geojsonFusionTopDown(parent[1], current[1], index), 
                                parent[0] ? snap4deck.geojsonFusionBottomUp(parent[0], current[0]) : null, 
                                parent[1] ? snap4deck.geojsonFusionBottomUp(parent[1], current[1]) : null, 
                            ];
                        },
                        fusionBottomUP: (child, current) => {
                            if (!current)
                                current = [[], []];
                            if (!child)
                                return;
                            return [
                                child[0] ? snap4deck.geojsonFusionBottomUp(child[0], current[0]) : null, 
                                child[1] ? snap4deck.geojsonFusionBottomUp(child[1], current[1]) : null, 
                            ];
                        },
                        getTileData: (tile) => {
                            // let promise = fetch(snap4deck.getURLFromTemplate(tile.url, tile))
                            let promise = fetch(tile.url)
                            .then(response => response.text())
                            .then(data => {
                                const json = JSON.parse(data)
                                var features = [];
                                for (let key in json)
                                    features.push(...json[key].features);
                                for (let feature of features) {
                                    gisPrepareCustomMarker(feature, []);
                                    feature.properties = {
                                        ...passedData,
                                        ...feature.properties,
                                    }
                                }
                                return features;
                            });
                            if (display !== 'pins') {
                                return promise.then(features => {
                                    // const features = res.features;
                                    if (features.length == 0)
                                        return null;
                                    let promises = [];
                                    for (let feature of features) {
                                        let prop = feature.properties;
                                        if (prop.hasOwnProperty('hasGeometry') && 
                                            prop.hasOwnProperty('serviceUri') && prop.hasGeometry == true) {
                                            promises.push(
                                                fetch(`<?= $superServiceMapProxy; ?>api/v1/?serviceUri=${prop.serviceUri}`)
                                                    .then(wkt => wkt.text())
                                            );
                                        }
                                    }
                                    return Promise.all([features, ...promises]);
                                }).then(res => {
                                    if (!res)
                                        return null;
                                    const sensors = res[0];
                                    const responses = res.slice(1);
                                    let paths = [];
                                    for (let response of responses) 
                                        paths.push(JSON.parse(response));
                                    // Creazione nuova istanza del parser Wkt
                                    wkt = new Wkt.Wkt();

                                    // Lettura del WKT dalla risposta
                                    let cycling = [];
                                    for (let path of paths)
                                        for (let key in path) {
                                            for (let feature of path[key].features) {
                                                wkt.read(feature
                                                    .properties
                                                    .wktGeometry,
                                                    null);

                                                var ciclePathFeature = {
                                                    type: "Feature",
                                                    properties: feature.properties,
                                                    geometry: wkt.toJson()
                                                };
                                                cycling.push(ciclePathFeature);

                                            }
                                    }
                                    return [sensors, cycling];
                                });
                            }
                            return Promise.all([promise,null]);
                        },
                        renderSubLayers: (props) => {
                            if (!props.data || Object.keys(props.data).length === 0)
                                return;
                            const sensors = props.data[0];
                            const paths = props.data[1];
                            commonState = {
                                ...commonState,
                                ...props.commonState
                            }
                            return [
                                createPathLayer({
                                    ...props,
                                    data: paths,
                                    id: `paths-${props.id}`,
                                    extensions: [new deck._TerrainExtension()],
                                    terrainDrawMode: 'offset',
                                }),
                                createSensorLayer({
                                    ...props,
                                    data: sensors,
                                    id: `sensors-${props.id}`,
                                    extensions: [new deck._TerrainExtension()],
                                    terrainDrawMode: 'offset',
                                    commonState: commonState
                                }),
                            ];
                        },
                        refinementStrategy: "best-available",
                        onClick: (info, event) => {
                            if (info.sourceLayer instanceof deck.IconLayer)
                                onMarkerClick(event, info);
                        },
                        // extensions: [new deck._TerrainExtension()],
                        // terrainDrawMode: 'offset',
                    });

                    layers.pin.push(sensorLayer)
                    updateLayers();
                    loadingDiv.setStatus('ok');
                }
                eventMapManager.legacyTrigger(event, addSelectorEventToMap);
            });
            $(document).on('addEventFI', function(event) {
                function addEventFIToMap() {
                    let passedData = event.passedData;

                    for (let j = 0; j < passedData.length; j++) {

                        let lat = passedData[j].lat;
                        let lng = passedData[j].lng;
                        let categoryIT = passedData[j].categoryIT;

                        let name = passedData[j].name;
                        if (name.includes('?')) {
                            name = name.replace(/\?/g, "'");
                        }

                        let place = passedData[j].place;
                        if (place.includes('?')) {
                            place = place.replace(/\?/g, "'");
                        }

                        let startDate = passedData[j].startDate;
                        let endDate = passedData[j].endDate;
                        let startTime = passedData[j].startTime;
                        let freeEvent = passedData[j].freeEvent;
                        let address = passedData[j].address;
                        if (address.includes('?')) {
                            address = address.replace(/\?/g, "'");
                        }

                        let civic = passedData[j].civic;
                        let price = passedData[j].price;
                        let phone = passedData[j].phone;
                        let descriptionIT = passedData[j].descriptionIT;
                        if (descriptionIT.includes('?')) {
                            descriptionIT = descriptionIT.replace(/\?/g, "'");
                        }

                        let website = passedData[j].website;
                        let colorClass = passedData[j].colorClass;
                        let mapIconName = passedData[j].mapIconName;

                        let mapPinImg = '../img/eventsIcons/' + mapIconName + '.png';

                        let pinIcon = new L.DivIcon({
                            className: null,
                            html: '<img src="' + mapPinImg + '" class="leafletPin" />',
                            iconAnchor: [18, 36]
                        });

                        let markerLocation = new L.LatLng(lat, lng);
                        let marker = new L.Marker(markerLocation, {
                            icon: pinIcon
                        });
                        passedData[j].marker = marker;

                        //Creazione del popup per il pin appena creato
                        let popupText = '<h3 class="' + colorClass + ' recreativeEventMapTitle">' +
                            name + '</h3>';
                        popupText +=
                            '<div class="recreativeEventMapBtnContainer"><button class="recreativeEventMapDetailsBtn recreativeEventMapBtn ' +
                            colorClass +
                            ' recreativeEventMapBtnActive" type="button">Details</button><button class="recreativeEventMapDescriptionBtn recreativeEventMapBtn ' +
                            colorClass +
                            '" type="button">Description</button><button class="recreativeEventMapTimingBtn recreativeEventMapBtn ' +
                            colorClass +
                            '" type="button">Timing</button><button class="recreativeEventMapContactsBtn recreativeEventMapBtn ' +
                            colorClass + '" type="button">Contacts</button></div>';

                        popupText +=
                            '<div class="recreativeEventMapDataContainer recreativeEventMapDetailsContainer">';
                        if ((place !== 'undefined') || (address !== 'undefined')) {
                            if (categoryIT !== 'undefined') {
                                popupText += '<b>Category: </b>' + categoryIT;
                            }

                            if (place !== 'undefined') {
                                popupText += '<br/>';
                                popupText += '<b>Location: </b>' + place;
                            }

                            if (address !== 'undefined') {
                                popupText += '<br/>';
                                popupText += '<b>Address: </b>' + address;
                                if (civic !== 'undefined') {
                                    popupText += ' ' + civic;
                                }
                            }

                            if (freeEvent !== 'undefined') {
                                popupText += '<br/>';
                                if ((freeEvent !== 'yes') && (freeEvent !== 'YES') && (freeEvent !==
                                        'Yes')) {
                                    if (price !== 'undefined') {
                                        popupText += '<b>Price (€) : </b>' + price + "<br>";
                                    } else {
                                        popupText += '<b>Price (€) : </b>N/A<br>';
                                    }
                                } else {
                                    popupText += '<b>Free event: </b>' + freeEvent + '<br>';
                                }
                            }
                        } else {
                            popupText += 'No further details available';
                        }
                        popupText += '</div>';

                        popupText +=
                            '<div class="recreativeEventMapDataContainer recreativeEventMapDescContainer">';
                        if (descriptionIT !== 'undefined') {
                            popupText += descriptionIT;
                        } else {
                            popupText += 'No description available';
                        }
                        popupText += '</div>';

                        popupText +=
                            '<div class="recreativeEventMapDataContainer recreativeEventMapTimingContainer">';
                        if ((startDate !== 'undefined') || (endDate !== 'undefined') || (startTime !==
                                'undefined')) {
                            popupText += '<b>From: </b>';
                            if (startDate !== 'undefined') {
                                popupText += startDate;
                            } else {
                                popupText += 'N/A';
                            }
                            popupText += '<br/>';

                            popupText += '<b>To: </b>';
                            if (endDate !== 'undefined') {
                                popupText += endDate;
                            } else {
                                popupText += 'N/A';
                            }
                            popupText += '<br/>';

                            if (startTime !== 'undefined') {
                                popupText += '<b>Times: </b>' + startTime + '<br/>';
                            } else {
                                popupText += '<b>Times: </b>N/A<br/>';
                            }

                        } else {
                            popupText += 'No timings info available';
                        }
                        popupText += '</div>';

                        popupText +=
                            '<div class="recreativeEventMapDataContainer recreativeEventMapContactsContainer">';
                        if ((phone !== 'undefined') || (website !== 'undefined')) {
                            if (phone !== 'undefined') {
                                popupText += '<b>Phone: </b>' + phone + '<br/>';
                            } else {
                                popupText += '<b>Phone: </b>N/A<br/>';
                            }

                            if (website !== 'undefined') {
                                if (website.includes('http') || website.includes('https')) {
                                    popupText += '<b><a href="' + website +
                                        '" target="_blank">Website</a></b><br>';
                                } else {
                                    popupText += '<b><a href="' + website +
                                        '" target="_blank">Website</a></b><br>';
                                }
                            } else {
                                popupText += '<b>Website: </b>N/A';
                            }
                        } else {
                            popupText += 'No contacts info available';
                        }
                        popupText += '</div>';

                        map.defaultMapRef.addLayer(marker);
                        lastPopup = marker.bindPopup(popupText, {
                            offset: [-5, -40],
                            maxWidth: 300
                        });

                        lastPopup.on('popupopen', function() {
                            $('#<?= $_REQUEST['name_w'] ?>_map button.recreativeEventMapDetailsBtn')
                                .off('click');
                            $('#<?= $_REQUEST['name_w'] ?>_map button.recreativeEventMapDetailsBtn')
                                .click(function() {
                                    $('#' + widgetName +
                                            '_map div.recreativeEventMapDataContainer')
                                        .hide();
                                    $('#' + widgetName +
                                            '_map div.recreativeEventMapDetailsContainer')
                                        .show();
                                    $('#' + widgetName +
                                            '_map button.recreativeEventMapBtn')
                                        .removeClass('recreativeEventMapBtnActive');
                                    $(this).addClass('recreativeEventMapBtnActive');
                                });

                            $('#<?= $_REQUEST['name_w'] ?>_map button.recreativeEventMapDescriptionBtn')
                                .off('click');
                            $('#<?= $_REQUEST['name_w'] ?>_map button.recreativeEventMapDescriptionBtn')
                                .click(function() {
                                    $('#' + widgetName +
                                            '_map div.recreativeEventMapDataContainer')
                                        .hide();
                                    $('#' + widgetName +
                                            '_map div.recreativeEventMapDescContainer')
                                        .show();
                                    $('#' + widgetName +
                                            '_map button.recreativeEventMapBtn')
                                        .removeClass('recreativeEventMapBtnActive');
                                    $(this).addClass('recreativeEventMapBtnActive');
                                });

                            $('#<?= $_REQUEST['name_w'] ?>_map button.recreativeEventMapTimingBtn')
                                .off('click');
                            $('#<?= $_REQUEST['name_w'] ?>_map button.recreativeEventMapTimingBtn')
                                .click(function() {
                                    $('#' + widgetName +
                                            '_map div.recreativeEventMapDataContainer')
                                        .hide();
                                    $('#' + widgetName +
                                            '_map div.recreativeEventMapTimingContainer')
                                        .show();
                                    $('#' + widgetName +
                                            '_map button.recreativeEventMapBtn')
                                        .removeClass('recreativeEventMapBtnActive');
                                    $(this).addClass('recreativeEventMapBtnActive');
                                });

                            $('#<?= $_REQUEST['name_w'] ?>_map button.recreativeEventMapContactsBtn')
                                .off('click');
                            $('#<?= $_REQUEST['name_w'] ?>_map button.recreativeEventMapContactsBtn')
                                .click(function() {
                                    $('#' + widgetName +
                                            '_map div.recreativeEventMapDataContainer')
                                        .hide();
                                    $('#' + widgetName +
                                            '_map div.recreativeEventMapContactsContainer')
                                        .show();
                                    $('#' + widgetName +
                                            '_map button.recreativeEventMapBtn')
                                        .removeClass('recreativeEventMapBtnActive');
                                    $(this).addClass('recreativeEventMapBtnActive');
                                });
                        });

                        lastPopup.openPopup();

                        map.eventsOnMap.push(passedData[j]);
                    }
                }
                eventMapManager.legacyTrigger(event, addEventFIToMap);
            });
            $(document).on('addResource', function(event) {
                function addResourceToMap() {
                    let passedData = event.passedData;

                    for (let j = 0; j < passedData.length; j++) {

                        let lat = passedData[j].lat;
                        let lng = passedData[j].lng;
                        let eventType = passedData[j].eventType;
                        let eventName = passedData[j].eventName;
                        let eventStartDate = passedData[j].eventStartDate;
                        let eventStartTime = passedData[j].eventStartTime;

                        mapPinImg = '../img/resourceIcons/metroMap.png';

                        pinIcon = new L.DivIcon({
                            className: null,
                            html: '<img src="' + mapPinImg + '" class="leafletPin" />',
                            iconAnchor: [18, 36]
                        });

                        var markerLocation = new L.LatLng(lat, lng);
                        var marker = new L.Marker(markerLocation, {
                            icon: pinIcon
                        });

                        passedData[j].marker = marker;

                        //Creazione del popup per il pin appena creato
                        var popupText = "<span class='mapPopupTitle'>" + eventName.toUpperCase() +
                            "</span>" +
                            "<span class='mapPopupLine'>" + eventStartDate + " - " + eventStartTime +
                            "</span>";

                        map.defaultMapRef.addLayer(marker);
                        lastPopup = marker.bindPopup(popupText, {
                            offset: [-5, -40]
                        }).openPopup();

                        map.eventsOnMap.push(passedData[j]);

                    }
                }
                eventMapManager.legacyTrigger(event, addResourceToMap);
            });
            $(document).on('addOperatorEvent', function(event) {
                function addOperatorEventToMap() {
                    let passedData = event.passedData;

                    for (let j = 0; j < passedData.length; j++) {

                        let lat = passedData[j].lat;
                        let lng = passedData[j].lng;
                        let eventType = passedData[j].eventType;
                        let eventName = passedData[j].eventName;
                        let eventStartDate = passedData[j].eventStartDate;
                        let eventStartTime = passedData[j].eventStartTime;
                        let eventPeopleNumber = parseInt(passedData[j].eventPeopleNumber);
                        let eventOperatorName = passedData[j].eventOperatorName;
                        let eventColor = passedData[j].eventColor;


                        let markerLocation = new L.LatLng(lat, lng);
                        let marker = new L.Marker(markerLocation);
                        passedData[j].marker = marker;

                        //Creazione del popup per il pin appena creato
                        popupText = "<span class='mapPopupTitle'>" + eventColor.toUpperCase() +
                            "</span>" +
                            "<span class='mapPopupLine'>" + eventStartDate + " - " + eventStartTime +
                            "</span>" +
                            //    "<span class='mapPopupLine'>PEOPLE INVOLVED: " + eventPeopleNumber + "</span>" +
                            "<span class='mapPopupLine'>TICKET NUMBER: " + eventPeopleNumber +
                            "</span>" +
                            "<span class='mapPopupLine'>OPERATOR: " + eventOperatorName.toUpperCase() +
                            "</span>";

                        map.defaultMapRef.addLayer(marker);
                        lastPopup = marker.bindPopup(popupText, {
                            offset: [0, 0]
                        }).openPopup();

                        map.eventsOnMap.push(passedData[j]);

                    }
                }
                eventMapManager.legacyTrigger(event, addOperatorEventToMap);
            });
            $(document).on('addTrafficEvent', function(event) {
                function addTrafficEventToMap() {
                    let passedData = event.passedData;

                    for (let j = 0; j < passedData.length; j++) {

                        let lat = passedData[j].lat;
                        let lng = passedData[j].lng;
                        let eventType = passedData[j].eventType;
                        let eventSubtype = passedData[j].eventSubtype;
                        let eventName = passedData[j].eventName;
                        let eventStartDate = passedData[j].eventStartDate;
                        let eventStartTime = passedData[j].eventStartTime;
                        let eventSeverity = passedData[j].eventSeverity;
                        let eventseveritynum = passedData[j].eventseveritynum;
                        passedData[j].type = "trafficEvent";

                        //Creazione dell'icona custom per il pin
                        switch (eventSeverity) {
                            case "Low":
                                mapPinImg = '../img/trafficIcons/' + trafficEventTypes["type" +
                                    eventType].mapIconLow;
                                severityColor = "#ffcc00";
                                break;

                            case "Med":
                                mapPinImg = '../img/trafficIcons/' + trafficEventTypes["type" +
                                    eventType].mapIconMed;
                                severityColor = "#ff9900";
                                break;

                            case "High":
                                mapPinImg = '../img/trafficIcons/' + trafficEventTypes["type" +
                                    eventType].mapIconHigh;
                                severityColor = "#ff6666";
                                break;
                        }

                        let pinIcon = new L.DivIcon({
                            className: null,
                            html: '<img src="' + mapPinImg + '" class="leafletPin" />',
                            iconAnchor: [18, 36]
                        });

                        let markerLocation = new L.LatLng(lat, lng);
                        let marker = new L.Marker(markerLocation, {
                            icon: pinIcon
                        });
                        passedData[j].marker = marker;

                        //Creazione del popup per il pin appena creato
                        popupText = "<span class='mapPopupTitle'>" + eventName + "</span>" +
                            "<span class='mapPopupLine'><i>Start date</i>: " + eventStartDate + " - " +
                            eventStartTime + "</span>" +
                            "<span class='mapPopupLine'><i>Event type</i>: " + trafficEventTypes[
                                "type" + eventType].desc.toUpperCase() + "</span>" +
                            "<span class='mapPopupLine'><i>Event subtype</i>: " + trafficEventSubTypes[
                                "subType" + eventSubtype].toUpperCase() + "</span>" +
                            "<span class='mapPopupLine'><i>Event severity</i>: " + eventseveritynum +
                            " - <span style='background-color: " + severityColor + "'>" + eventSeverity
                            .toUpperCase() + "</span></span>";

                        map.defaultMapRef.addLayer(marker);
                        lastPopup = marker.bindPopup(popupText, {
                            offset: [-5, -40],
                            maxWidth: 600
                        }).openPopup();

                        map.eventsOnMap.push(passedData[j]);
                    }
                }
                eventMapManager.legacyTrigger(event, addTrafficEventToMap);
            });

            // TODO: move to map manager.
            // Cristiano : Dynamic Routing
            var scenarioLayer = null;
            var scenarioControl = null;
            var drawerControl = null;
            var geocoderControl = null;
            var scenarioDrawnItems = null;
            var scenarioData = new L.geoJSON();
            scenarioData.type = "FeatureCollection";
            scenarioData.features = [];
            $(document).on('addScenario', function(event) {
                if (event.target === map.mapName) {
                    // create scenario layer and add to map
                    scenarioLayer = new L.FeatureGroup();
                    map.defaultMapRef.addLayer(scenarioLayer);
                    // create drawer layer/control and add them to map
                    scenarioDrawnItems = new L.FeatureGroup();
                    map.defaultMapRef.addLayer(scenarioDrawnItems);
                    drawerControl = new L.Control.Draw({
                        edit: {
                            featureGroup: scenarioDrawnItems,
                            edit: false,
                            remove: false
                        },
                        draw: {
                            circle: {
                                metric: 'metric'
                            },
                            polyline: false,
                            polygon: {
                                allowIntersection: false,
                                showArea: true
                            }
                        }
                    });
                    map.defaultMapRef.addControl(drawerControl);

                    map.defaultMapRef.on('draw:created', function(e) {
                        var type = e.layerType,
                            layer = e.layer;
                        var curGeojson = layer.toGeoJSON();

                        if (type === 'marker') {
                            console.log(type + " created in " + layer._latlng);
                        } else if (type === 'circle') {
                            console.log(type + " created in " + layer._latlng + "with radius of " +
                                layer.getRadius() + " m");
                            curGeojson.properties["radius"] = layer.getRadius();
                        } else if (type === 'polygon' || type === 'rectangle') {
                            console.log(type + " created");
                        }
                        scenarioData.features.push(curGeojson);
                        scenarioDrawnItems.addLayer(layer);
                    });

                    // create geocoder control and add to map
                    var geocoder = L.Control.Geocoder.nominatim();
                    geocoderControl = L.Control.geocoder({
                            geocoder: geocoder,
                            defaultMarkGeocode: false
                        }).addTo(map.defaultMapRef)
                        .on('markgeocode', function(e) {
                            map.defaultMapRef.panTo(e.geocode.center);
                            map.defaultMapRef.setZoom(18);
                        });

                    // create scenario control and add to map
                    scenarioControl = L.control({
                        position: 'topleft'
                    });
                    scenarioControl.onAdd = function(map) {
                        var div = L.DomUtil.create('div');

                        div.innerHTML = '<div id="scenario-div">' +
                            '<input id="scenario-name" type="text" placeholder="Scenario name" name="name">' +
                            '<input id="scenario-description" type="text" placeholder="Scenario description" name="description">' +
                            '<span><input id="scenario-visibility" type="checkbox" name="public" value="Public"> Public visibility</span>' +
                            '<label for="scenario-startDatetime">From:</label>' +
                            '<input id="scenario-startDatetime" type="datetime-local" name="datetimeFrom">' +
                            '<label for="scenario-endDatetime">To:</label>' +
                            '<input id="scenario-endDatetime" type="datetime-local" name="datetimeTo">' +
                            '<div>' +
                            '<input type="button" id="scenario-save" value="Save"/>' +
                            '<button id="scenario-cancel" type="button">Cancel</button>' +
                            '</div>' +
                            '</div>';
                        // disable interaction of this div with map
                        if (L.Browser.touch) {
                            L.DomEvent.disableClickPropagation(div);
                            L.DomEvent.on(div, 'mousewheel', L.DomEvent.stopPropagation);
                        } else {
                            L.DomEvent.on(div, 'click', L.DomEvent.stopPropagation);
                        }

                        return div;
                    };
                    scenarioControl.addTo(map.defaultMapRef);

                    $("#scenario-save").click(function() {
                        if ($("#scenario-name").val() !== "" && scenarioData.features.length > 0 &&
                            $("#scenario-name").val().indexOf("(") == -1) {
                            delete scenarioData.options;
                            delete scenarioData.layers;
                            delete scenarioData._initHooksCalled;
                            delete scenarioData._layers;
                            scenarioData.scenarioName = $("#scenario-name").val();
                            scenarioData.scenarioDescription = $("#scenario-description").val();
                            scenarioData.scenarioDatetimeStart = $("#scenario-startDatetime").val();
                            scenarioData.scenarioDatetimeEnd = $("#scenario-endDatetime").val();
                            scenarioData.isPublic = $("#scenario-visibility").is(':checked');

                            var ajaxData = {
                                "method": "POST",
                                "geojson": JSON.stringify(scenarioData)
                            };

                            $.ajax({
                                type: 'GET',
                                url: '../controllers/scenarioProxy.php',
                                dataType: "json",
                                contentType: 'application/json; charset=utf-8',
                                async: true,
                                data: ajaxData,
                                success: function(resp) {
                                    if (resp == "-1") {
                                        alert("Scenario name already exists.");
                                    } else if (resp == "-2") {
                                        alert(
                                            "You must be logged in in order to create new scenarios."
                                        );
                                    } else {
                                        alert("Scenario '" + $("#scenario-name").val() +
                                            "' saved");
                                        $("#scenario-cancel").trigger("click");
                                    }
                                },
                                error: function(errorData) {
                                    console.log(errorData);
                                }
                            });
                        } else if ($("#scenario-name").val() === "") {
                            alert("You must enter a name for the current scenario.")
                        } else if (scenarioData.features.length == 0) {
                            alert("You must add at least one barrier for the current scenario.")
                        } else if ($("#scenario-name").val().indexOf("(") > -1) {
                            alert(
                                "You cannot enter special char '(' in the current scenario's name."
                            );
                        }
                    });

                    $("#scenario-cancel").click(function() {
                        map.defaultMapRef.removeLayer(scenarioDrawnItems);
                        scenarioDrawnItems = new L.FeatureGroup();
                        map.defaultMapRef.addLayer(scenarioDrawnItems);
                        $("#scenario-name").val("");
                        $("#scenario-description").val("");
                        $("#scenario-startDatetime").val("");
                        $("#scenario-endDatetime").val("");
                        $("#scenario-visibility").prop('checked', false);

                        scenarioData = new L.geoJSON();
                        scenarioData.type = "FeatureCollection";
                        scenarioData.features = [];
                    });
                }
            });

            $(document).on('removeScenario', function(event) {
                if (event.target === map.mapName) {
                    map.defaultMapRef.removeLayer(scenarioLayer);
                    map.defaultMapRef.removeControl(scenarioControl);
                    map.defaultMapRef.removeControl(geocoderControl);
                    map.defaultMapRef.removeControl(drawerControl);
                    map.defaultMapRef.removeLayer(scenarioDrawnItems);
                }
            });

            $(document).on('goto', (event) => {
                    const coord = event.passedData.match(/-?\d+(\.\d+)?/g);
                    console.log(coord);
                    currentViewState = {
                        ...currentViewState,
                        longitude: parseFloat(coord[0]),
                        latitude: parseFloat(coord[1])
                    }
                    map3d.setProps({viewState: currentViewState});
            });

            var whatifLayer = null;
            var whatifControl = null;
            var whatifDrawnItems = null;
            var lrmControl = null;
            var vehicle = "car";
            var waypoints = null;
            var studioControl = null;
            $(document).on('addWhatif', function (event) {
                if (event.target === map.mapName) {
                    // create whatif layer and add to map
                    $('#whatif-info-btn').css('display', 'block');
                    $('#whatif-info-btn').click();
                    whatifLayer = new L.FeatureGroup();
                    map.defaultMapRef.addLayer(whatifLayer);
                    // create what-if drawn items layer
                    whatifDrawnItems = new L.FeatureGroup();
                    map.defaultMapRef.addLayer(whatifDrawnItems);
                    // create what-if control and add to map, populate scenarios
                    whatifControl = $('<div id="whatif-control"></div>');
                    // whatifControl.onAdd = function (map) {
                    //     var div = L.DomUtil.create('div');
                    
                    whatifControl.html('<div id="selection">'+
                                        '<input type="radio" name="choice" value="scenario" checked> Select scenario<br>'+
                                        '<input type="radio" name="choice" value="studio"> Select studio<br>'+
                                        '<select style="margin-top:6px" class="form-control" id="choice-select"></select>'+
                                        '<div style="margin-top:6px" id="resultDescription"></div>'+
                                        '<div style="margin-top:6px" id="resultTimerange"></div>'+
                                        '<div style="margin-top:6px" id="weighting">' +
                                        '<label for="whatIf-weighting">Weighting</label>'+
                                        '<select id="whatIf-weighting" class="form-control">' +
                                            '<option value="fastest" selected="selected">Fastest</option>' +
                                            '<option value="fastest_with_traffic">Fastest with traffic</option>' +
                                            '<option value="shortest">Shortest</option>' +
                                            '<option value="short_fastest">Short/Fastest</option>' +
                                            '<option value="curvature">Curvature</option>' +
                                        '</select></div>' +
                                        '<div style="margin-top:6px" id="routing-datetime">' +
                                            '<label for="whatIf-startDatetime" style="display: block">Start date & time</label>'+
                                            '<input id="whatIf-startDatetime" type="datetime-local" class="form-control" name="datetimeFrom">'+
                                        '</div>' +
                                        '</div>'+
                                        '<div id="options">' +
                                        '<span id="vehicles">'+
                                        '<button class="vehicle-btn selectedvehicle" title="Driving" id="car">'+
                                            '<img src="../img/dynamic_routing/car.png" alt="Auto">'+
                                        '</button>'+
                                        '<button class="vehicle-btn" title="Walking" id="foot">'+
                                            '<img src="../img/dynamic_routing/foot.png" alt="Foot">'+
                                        '</button>'+
                                        '<button class="vehicle-btn" title="Cycling" id="bike">'+
                                            '<img src="../img/dynamic_routing/bike.png" alt="Bike">'+
                                        '</button>'+
                                        '<button class="vehicle-btn" title="Bus" id="bus">'+
                                            '<img id="bus_button" src="../img/dynamic_routing/bus.svg" alt="Bus">'+
                                        '</button>'+
                                        '</span>' +
                                        '</div>');
                    $('#deck-info-content').append(whatifControl);
                    $("#routing-datetime").hide();
                    // populate scenarios select (initially scenario choice is checked)
                    $.getJSON( '../controllers/scenarioProxy.php?method=GET&opt=name', function( data ) {
                        $("#choice-select").html("<option selected disabled hidden style='display: none' value=''></option>");
                        function compareStrings(a, b) {
                            // Assuming you want case-insensitive comparison
                            a = a.toLowerCase();
                            b = b.toLowerCase();

                            return (a < b) ? -1 : (a > b) ? 1 : 0;
                        }

                        //sort the scenarios in alphabetical order
                        data.sort(function(a, b) {
                            return compareStrings(a.name, b.name);
                            // return compareStrings(a.variable_value.scenarioName, b.variable_value.scenarioName);
                        })

                        for(var i = 0; i < data.length; i++)
                            $("#choice-select").html($("#choice-select").html()+'<option>'+data[i]['name']+'</option>');
                    });
                    // checkbox (choice) management
                    $("input[name='choice']").click(function () {
                        //clear scenario description and time range
                        $("#resultDescription").html("");
                        $("#resultTimerange").html("");
                        // whatifRoutingStart = null;
                        // whatifRoutingEnd = null;
                    // reset page:
                        // Hide routing mode options
                        $("#options").hide();
                        // remove lrm
                        if(lrmControl) {
                            lrmControl.remove(map);
                            lrmControl = null;
                            waypoints = null;
                        }
                        // remove previous choice's drawings
                        map.defaultMapRef.removeLayer(whatifDrawnItems);
                        // remove previous studio div (if present)
                        if(studioControl) {
                            map.defaultMapRef.removeControl(studioControl);
                            studioControl = null;
                        }
                    // end reset 
                    
                        // reload select content
                        var choice = $(this).val();
                        if( choice == "scenario" ) {
                            $.getJSON( '../controllers/scenarioProxy.php?method=GET&opt=name', function( data ) {
                                $("#choice-select").html("<option selected disabled hidden style='display: none' value=''></option>");
                                // add the same code for sorting scenarios
                                function compareStrings(a, b) {
                                    // Assuming you want case-insensitive comparison
                                    a = a.toLowerCase();
                                    b = b.toLowerCase();

                                    return (a < b) ? -1 : (a > b) ? 1 : 0;
                                }

                                //sort the scenarios in alphabetical order
                                data.sort(function(a, b) {
                                    return compareStrings(a.name, b.name);
                                //  return compareStrings(a.variable_value.scenarioName, b.variable_value.scenarioName);
                                })
                                for(var i = 0; i < data.length; i++ )
                                    $("#choice-select").html($("#choice-select").html()+'<option>'+data[i]['name']+'</option>');
                            });
                        }
                        else if(choice == "studio") {
                            $.getJSON( '../controllers/studioProxy.php?method=GET&opt=name', function( data ) {
                                $("#choice-select").html("<option selected disabled hidden style='display: none' value=''></option>");
                                for(var i = 0; i < data.length; i++ )
                                    $("#choice-select").html($("#choice-select").html()+'<option>'+data[i]['name']+'</option>');
                            });
                        }
                    });
                    // when the user chooses a scenario/studio, draw it on the map
                    $('#choice-select').change(function(){
                        whatifOn = true;
                        // whatifRoutingStart = null;
                        // whatifRoutingEnd = null;
                        var choice = $('input[name=choice]:checked').val();                            
                        if( choice == "scenario") {
                            // scenarioName(visibility) -> we take only scenarioName
                            if($(this).val().indexOf('(') > -1 )
                                var selectedScenario = $(this).val().substr(0, $(this).val().indexOf('('));
                            // for guest visibility is not shown
                            else    
                                var selectedScenario = $(this).val();
                            
                            $.getJSON( '../controllers/scenarioProxy.php?method=GET&sel='+selectedScenario, function( selectedScenarioData ) {
                                // add scenario description (selectedScenarioData contains the json in column variable_value)
                                if(selectedScenarioData.scenarioDescription)
                                    $("#resultDescription").html('<strong>'+"Description: "+'</strong>'+'<span style="font-style:italic">'+selectedScenarioData.scenarioDescription+'</span>');
                                else
                                    $("#resultDescription").html('<strong>'+"Description: "+'</strong>'+'<span style="font-style:italic">'+"Not Available."+'</span>');
                                // add scenario time range
                                if(selectedScenarioData.scenarioDatetimeStart)
                                    $("#resultTimerange").html('<strong>'+"From: "+'</strong>'+'<span style="font-style:italic">'+selectedScenarioData.scenarioDatetimeStart+'<strong>'+" To "+'</strong>'+selectedScenarioData.scenarioDatetimeEnd+'</span>');
                                else
                                    $("#resultTimerange").html('<strong>'+"Time Range: "+'</strong>'+'<span style="font-style:italic">'+"Not Available."+'</span>');
                                
                                // TODO: deck whatif
                                // remove previous choice's drawings

                                whatifScenarioData = selectedScenarioData;
                                whatifVehicle = vehicle;
                                var firstShapeType = selectedScenarioData.features[0].geometry.type;
                                if (is3dOn) {
                                    layers.whatif = createWhatifLayer({
                                        data: selectedScenarioData,
                                    });
                                    updateLayers();
                                    if (whatifRoutingStart && whatifRoutingEnd)
                                        startRouting();
                                } else {
                                    map.defaultMapRef.removeLayer(whatifDrawnItems);
                                    whatifDrawnItems = new L.FeatureGroup();
                                    map.defaultMapRef.addLayer(whatifDrawnItems);

                                    // draw selected scenario (feature collection)
                                    L.geoJson(selectedScenarioData, {
                                        onEachFeature: onEachFeature
                                    });
                                    function onEachFeature(feature, layer) {
                                        // radius drawing management
                                        if(feature.properties.radius != null)
                                            L.circle(L.latLng(feature.geometry.coordinates[1], feature.geometry.coordinates[0]),
                                                    feature.properties.radius)
                                            .addTo(whatifDrawnItems);
                                        else
                                            whatifDrawnItems.addLayer(layer);
                                    }
                                    // centre the map on the first feature
                                    switch(firstShapeType) {
                                        case 'Polygon':
                                            map.defaultMapRef.panTo(new L.LatLng(selectedScenarioData.features[0].geometry.coordinates[0][0][1],
                                                            selectedScenarioData.features[0].geometry.coordinates[0][0][0]));
                                            break;
                                        default:
                                            map.defaultMapRef.panTo(new L.LatLng(selectedScenarioData.features[0].geometry.coordinates[1],
                                                            selectedScenarioData.features[0].geometry.coordinates[0]));
                                    }      
                                }
                                if(lrmControl)
                                    lrmControl.remove(map.defaultMapRef);                      

                                // Show routing mode options and create related event listener
                                $("#options").show(); 

                                $("#whatIf-weighting").off("change");
                                $("#whatIf-startDatetime").off("change");
                                // remove previous click listener (if present)
                                $(".vehicle-btn").off("click");
                                $('.vehicle-btn').on('click', function(e) {
                                    // Get clicked button's id
                                    vehicle = e.currentTarget.id;
                                    // Change active button
                                    $('.selectedvehicle').removeClass('selectedvehicle');
                                    $('#'+vehicle).addClass('selectedvehicle');

                                    // TRICK: Reinit lrmControl, but with previous waypoints, in order to refresh the routing process
                                    waypoints = lrmControl.getWaypoints();
                                    if(lrmControl) {
                                        lrmControl.remove(map);
                                        lrmControl = null;
                                    }

                                    weighting = $('#whatIf-weighting').val();   // Get the selected weighting
                                    startDatetime = $('#whatIf-startDatetime').val();   // Get the selected datetime
                                    serviceUrl = setServiceUrl(orgParams, map.defaultMapRef.getBounds()["_northEast"]);
                                    lrmControl = L.Routing.control({
                                        // Servlet params
                                        serviceUrl: serviceUrl,
                                        waypoints: waypoints,
                                        avoid_area: encodeURIComponent(JSON.stringify(selectedScenarioData)),
                                        vehicle: vehicle,
                                        weighting: $('#whatIf-weighting').val(),   // Get the selected weighting
                                        startDatetime: $('#whatIf-startDatetime').val(),   // Get the selected datetime
                                        // end Servlet params
                                        geocoder: L.Control.Geocoder.nominatim(),
                                        routeWhileDragging: true,
                                        reverseWaypoints: true,
                                        showAlternatives: false,
                                        createMarker: function(i, wp) {
                                            var icon = L.icon({ 
                                                    iconUrl: '../img/dynamic_routing/marker-icon-red.png',
                                                    shadowUrl: '../img/dynamic_routing/marker-shadow.png',
                                                    iconAnchor: [12, 41]
                                            });
                                            return L.marker(wp.latLng, {
                                                    draggable: true,
                                                    icon: icon
                                            });
                                        } 
                                    });
                                    lrmControl.addTo(map.defaultMapRef);
                                    // MS
                                    var lastSelectedRoute = null;
                                    if(vehicle == "bus") {																																	
                                        $("#bus_button").css("opacity",0.5);
                                        var pwlng = Math.min(map.defaultMapRef.getBounds()["_northEast"]["lng"],map.defaultMapRef.getBounds()["_southWest"]["lng"])+(Math.abs(map.defaultMapRef.getBounds()["_northEast"]["lng"]-map.defaultMapRef.getBounds()["_southWest"]["lng"])/2);
                                        var pwlat = map.defaultMapRef.getBounds()["_northEast"]["lat"];
                                        L.popup({offset: L.point(0, 210)}).setLatLng(new L.LatLng(pwlat, pwlng)).setContent("<p><strong>Impact on Public Transport</strong></p><p>Computation in progress.</p><p>It may take some time.</p><p>Please wait...</p>").openOn(map.defaultMapRef);
                                        var polygons = [];
                                        // console.log(selectedScenarioData);
                                        for(var f = 0; f < selectedScenarioData["features"].length; f++) {
                                            if(selectedScenarioData["features"][f]["geometry"]["type"] != "Polygon") {													
                                                // a radius of 7684.888648492369 corresponds to a delta of 0.192811 in lat lon coordinates so one unit of radius corresponds to a displacement of 0.192811/7684.888648492369 ~ 0.000025 in lat lon 													
                                                //polygons.push("(("+selectedScenarioData["features"][f]["geometry"]["coordinates"][0]-0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+ " "+selectedScenarioData["features"][f]["geometry"]["coordinates"][1]+0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+", "+selectedScenarioData["features"][f]["geometry"]["coordinates"][0]+0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+ " "+selectedScenarioData["features"][f]["geometry"]["coordinates"][1]+0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+", "+selectedScenarioData["features"][f]["geometry"]["coordinates"][0]+0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+ " "+selectedScenarioData["features"][f]["geometry"]["coordinates"][1]-0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+", "+selectedScenarioData["features"][f]["geometry"]["coordinates"][0]-0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+ " "+selectedScenarioData["features"][f]["geometry"]["coordinates"][1]-0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+", "+selectedScenarioData["features"][f]["geometry"]["coordinates"][0]-0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+ " "+selectedScenarioData["features"][f]["geometry"]["coordinates"][1]+0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+"))");													
                                                //console.log("(("+selectedScenarioData["features"][f]["geometry"]["coordinates"][0]-0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+ " "+selectedScenarioData["features"][f]["geometry"]["coordinates"][1]+0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+", "+selectedScenarioData["features"][f]["geometry"]["coordinates"][0]+0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+ " "+selectedScenarioData["features"][f]["geometry"]["coordinates"][1]+0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+", "+selectedScenarioData["features"][f]["geometry"]["coordinates"][0]+0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+ " "+selectedScenarioData["features"][f]["geometry"]["coordinates"][1]-0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+", "+selectedScenarioData["features"][f]["geometry"]["coordinates"][0]-0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+ " "+selectedScenarioData["features"][f]["geometry"]["coordinates"][1]-0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+", "+selectedScenarioData["features"][f]["geometry"]["coordinates"][0]-0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+ " "+selectedScenarioData["features"][f]["geometry"]["coordinates"][1]+0.000025*selectedScenarioData["features"][f]["properties"]["radius"]+"))");
                                                var r = 0.0001;													
                                                if(selectedScenarioData["features"][f]["properties"]["radius"]) r = 0.00001*selectedScenarioData["features"][f]["properties"]["radius"];
                                                var x = selectedScenarioData["features"][f]["geometry"]["coordinates"][0];
                                                var y = selectedScenarioData["features"][f]["geometry"]["coordinates"][1];
                                                var tlx = x-r;
                                                var tly = y+r;
                                                var trx = x+r;
                                                var try_ = y+r;
                                                var brx = x+r;
                                                var bry = y-r;
                                                var blx = x-r;
                                                var bly = y-r;
                                                var p = "(( "+ tlx + " " + tly + ", " + trx + " " + try_ + ", "+ brx + " " + bry + ", " + blx + " " + bly + ", " + tlx + " " + tly + "))";
                                                // console.log(p);
                                                if(!polygons.includes(p)) polygons.push(p);	
                                            }
                                            else { 
                                                var minX = null;
                                                var maxX = null;
                                                var minY = null;
                                                var maxY = null;			
                                                for(var c = 0; c < selectedScenarioData["features"][f]["geometry"]["coordinates"][0].length; c++) {														
                                                    var x = selectedScenarioData["features"][f]["geometry"]["coordinates"][0][c][0];
                                                    var y = selectedScenarioData["features"][f]["geometry"]["coordinates"][0][c][1];
                                                    if(minX == null || x < minX) minX = x;
                                                    if(maxX == null || x > maxX) maxX = x;
                                                    if(minY == null || y < minY) minY = y;
                                                    if(maxY == null || y > maxY) maxY = y;														
                                                }	
                                                var tlx = minX;
                                                var blx = minX;
                                                var trx = maxX;
                                                var brx = maxX;
                                                var tly = maxY;
                                                var try_ = maxY;
                                                var bly = minY;
                                                var bry = minY;
                                                var polygon = " (( "+ tlx +" "+ tly + ", " + trx + " " + try_ + ", " + brx + " " + bry + ", " + blx + " " + bly + ", " + tlx + " " + tly + " )) ";
                                                if(!polygons.includes(polygon)) polygons.push(polygon);		
                                            }												
                                        }
                                        var closedZones = null;
                                        if(polygons.length == 1) closedZones = "POLYGON"+polygons[0];
                                        else if(polygons.length > 1) closedZones = "MULTIPOLYGON("+polygons.join()+")";
                                        Date.prototype.getStandardTimezoneOffset = function () {
                                            var jan = new Date(this.getFullYear(), 0, 1);
                                            var jul = new Date(this.getFullYear(), 6, 1);
                                            return Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
                                        };
                                        var fromDateTime = selectedScenarioData["scenarioDatetimeStart"]+":00"+(new Date().getStandardTimezoneOffset()>0?"-":"+")+((""+(Math.abs(new Date().getStandardTimezoneOffset()/60))).padStart(2,"0"))+":00";
                                        var toDateTime = selectedScenarioData["scenarioDatetimeEnd"]+":00"+(new Date().getStandardTimezoneOffset()>0?"-":"+")+((""+(Math.abs(new Date().getStandardTimezoneOffset()/60))).padStart(2,"0"))+":00";											
                                        var whatifptiendpt = $.getJSON( '<?=$whatifptiendpt?>?closedZones='+encodeURIComponent(closedZones)+'&fromDateTime='+encodeURIComponent(fromDateTime)+'&toDateTime='+encodeURIComponent(toDateTime), function(impact) {
                                            $("#bus_button").css("opacity",1);	
                                            var olng = Math.min(map.defaultMapRef.getBounds()["_northEast"]["lng"],map.defaultMapRef.getBounds()["_southWest"]["lng"])+(Math.abs(map.defaultMapRef.getBounds()["_northEast"]["lng"]-map.defaultMapRef.getBounds()["_southWest"]["lng"])/2);
                                            var olat = map.defaultMapRef.getBounds()["_northEast"]["lat"];
                                            L.popup({offset: L.point(0, 210)}).setLatLng(new L.LatLng(olat, olng)).setContent("<p><strong>Impact on Public Transport</strong></p><p>Affected Agencies: "+impact["metrics"]["agencies"]+"<br>Affected Routes: "+impact["metrics"]["routes"]+"<br>Affected Trips: "+impact["metrics"]["trips"]+(impact["metrics"]["ndr_trips"]>0?" (<a href=\"#\" class=\"ndrTripsLink\" \">"+impact["metrics"]["ndr_trips"]+" mere crossings</a>)":"")+"<br>Affected Stops: "+impact["metrics"]["stops"]+" (click on markers)<br>Eventual Traps: "+impact["metrics"]["traps"]+"</p>").openOn(map.defaultMapRef);
                                            var summary = { "offset": L.point(0, 210), "latlng": new L.LatLng(olat, olng), "content":  "<p><strong>Impact on Public Transport</strong></p><p>Affected Agencies: "+impact["metrics"]["agencies"]+"<br>Affected Routes: "+impact["metrics"]["routes"]+"<br>Affected Trips: "+impact["metrics"]["trips"]+(impact["metrics"]["ndr_trips"]>0?" (<a href=\"#\" class=\"ndrTripsLink\" \">"+impact["metrics"]["ndr_trips"]+" mere crossings</a>)":"")+"<br>Affected Stops: "+impact["metrics"]["stops"]+" (click on markers)<br>Eventual Traps: "+impact["metrics"]["traps"]+"</p>"} ;
                                            $(".ndrTripsLink").click(function(){
                                                $(".whatifPolyline").hide();
                                                $(".whatifCrossingPolyline").hide();															
                                                $(".affectedStopMarker").hide();														
                                                var markup = "<p class=\"ndrt_stopHead\" style=\"width:300px;\"><strong style=\"font-size:larger;\">Crossing Trips</strong><br><span style=\"font-style:italic;\">Without affected stops</span></p>";																			
                                                var getDates = function(startDate, stopDate) {
                                                    Date.prototype.addDays = function(days) {
                                                        var date = new Date(this.valueOf());
                                                        date.setDate(date.getDate() + days);
                                                        return date;
                                                    };
                                                    var dateArray = new Array();
                                                    var currentDate = startDate;
                                                    while (currentDate <= stopDate) {
                                                        dateArray.push(new Date (currentDate));
                                                        currentDate = currentDate.addDays(1);
                                                    }
                                                    return dateArray;
                                                };
                                                var crosstrips = [];
                                                var crossmenu = {};
                                                var crosspolylines = [];
                                                for (var agency in impact["details"]) 
                                                    for(var route in impact["details"][agency]["routes"])
                                                        for(var trip in impact["details"][agency]["routes"][route]["trips"])
                                                            if("Medium - Mere crossing" == impact["details"][agency]["routes"][route]["trips"][trip]["criticality"]) { 
                                                                crosstrips.push(encodeURIComponent(trip)); 
                                                                if(!crossmenu[agency]) crossmenu[agency] = [];																	
                                                                impact["details"][agency]["routes"][route]["trips"][trip]["dates"].forEach(function(date){ if(!crossmenu[agency].includes(date)) crossmenu[agency].push(date);});																	
                                                                var path = impact["details"][agency]["routes"][route]["trips"][trip]["path"];
                                                                var latlngs = [];
                                                                path.split("((")[1].split("))")[0].split(",").forEach(function(node){
                                                                    latlngs.push(new L.LatLng(node.trim().split(" ")[1],node.trim().split(" ")[0]));
                                                                });
                                                                var polyline = new L.Polyline(latlngs,{color:"#"+impact["details"][agency]["routes"][route]["color"],className:"whatifCrossingPolyline"});																	
                                                                crosspolylines.push({"latlngs":latlngs,"color":impact["details"][agency]["routes"][route]["color"]});
                                                                polyline.addTo(whatifDrawnItems);	
                                                            }
                                                for(var agency in crossmenu) {
                                                    markup+="<p style=\"font-weight:bold;\">"+agency+"</p>";
                                                    crossmenu[agency].forEach(function(date){
                                                        var btnUrl = '<?=$whatifmdtendpt?>?agency='+encodeURIComponent(impact["details"][agency]["dataset"])+'&crosstrip='+crosstrips.join("&crosstrip=")+'&date='+encodeURIComponent(getDates(new Date(date),new Date(date))[0].toISOString().split('T')[0])+"&list=routes";
                                                        markup+="<p class=\"ndrt_wifstpdt\"><button style=\"width:100%;\" data-url=\""+btnUrl+"\" data-date=\""+getDates(new Date(date),new Date(date))[0].toISOString().split('T')[0]+"\">"+getDates(new Date(date),new Date(date))[0].toLocaleDateString("en",{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })+"</button></p>";				
                                                    });
                                                }
                                                /*
                                                                                                    getDates(new Date(selectedScenarioData["scenarioDatetimeStart"].substring(0,10)),new Date(selectedScenarioData["scenarioDatetimeEnd"].substring(0,10))).forEach(function(oneDate){
                                                                                                        if(crossdates.includes(oneDate.toISOString().split('T')[0])) {					
                                                                                                            var btnUrl = '<?=$whatifmdtendpt?>?agency='+encodeURIComponent(impact["details"][agency]["dataset"])+'&crosstrip='+crosstrips.join("&crosstrip=")+'&date='+encodeURIComponent(oneDate.toISOString().split('T')[0])+"&list=routes";
                                                                                                            markup+="<p class=\"ndrt_wifstpdt\"><button style=\"width:100%;\" data-url=\""+btnUrl+"\" data-date=\""+oneDate.toISOString().split('T')[0]+"\"><strong>"+new Date(oneDate).toLocaleDateString("en",{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })+"</strong></button></p>";				
                                                                                                        }
                                                                                                        else {
                                                                                                            var btnUrl = '<?=$whatifmdtendpt?>?agency='+encodeURIComponent(impact["details"][agency]["dataset"])+'&crosstrip='+crosstrips.join("&crosstrip=")+'&date='+encodeURIComponent(oneDate.toISOString().split('T')[0])+"&list=routes";
                                                                                                            markup="<p class=\"ndrt_wifstpdt\"><button style=\"width:100%;\" data-url=\""+btnUrl+"\" data-date=\""+oneDate.toISOString().split('T')[0]+"\">"+new Date(oneDate).toLocaleDateString("en",{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })+"</button></p>";
                                                                                                        }
                                                                                                    });	
                                                */
                                                var pwlng = Math.min(map.defaultMapRef.getBounds()["_northEast"]["lng"],map.defaultMapRef.getBounds()["_southWest"]["lng"])+(Math.abs(map.defaultMapRef.getBounds()["_northEast"]["lng"]-map.defaultMapRef.getBounds()["_southWest"]["lng"])/2);
                                                var pwlat = map.defaultMapRef.getBounds()["_northEast"]["lat"];
                                                markup+="<p class=\"ndrt_backToSummary\"><button  style=\"width:100%;color:white;background-color:black;\">Back</button></p>";
                                                L.popup({offset: L.point(0,210)}).setLatLng(new L.LatLng(pwlat, pwlng)).setContent(markup).openOn(map.defaultMapRef);
                                                $("p.ndrt_backToSummary button").click(function(){
                                                    //L.popup({offset: summary["offset"]}).setLatLng(summary["latlng"]).setContent(summary["content"]).openOn(map.defaultMapRef);
                                                    $("#bus").click();
                                                });
                                                $("p.ndrt_wifstpdt button").click(function(){
                                                    var wifstpdtbtn = $(this);
                                                    var wifstpdtbtnhtml = $(this).html();
                                                    $(this).html("Please wait...");
                                                    var container = $(this).parent().parent();
                                                    var date = $(this).data("date");
                                                    //$.getJSON( $(this).data("url"), function(routes) {
                                                    $.post($(this).data("url").split("?")[0],$(this).data("url").split("?")[1], function(routes) {
                                                        container.find("p").hide();
                                                        wifstpdtbtn.html(wifstpdtbtnhtml);
                                                        var routesMarkup = "<p class=\"ndrt_routesSubHead\" style=\"background-color:black; color:white; padding:0.5em;\"><strong>Date:</strong>&nbsp;"+new Date(date).toLocaleDateString("en",{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })+"</p>";
                                                        Object.keys(routes).forEach(function(key){
                                                            var route = routes[key];
                                                            /*var affected = Object.keys(impact["details"][agency]["routes"]).includes(route["type"]+" "+route["short_name"]+" "+route["long_name"]);
                                                            if(false && affected) {
                                                                var rteBtnUrl='<?=$whatifmdtendpt?>?agency='+encodeURIComponent(route["dataset"])+"&route="+encodeURIComponent(route["uri"])+"&crosstrip="+crosstrips.join("&crosstrip=")+"&date="+encodeURIComponent(date)+"&list=trips";
                                                                routesMarkup+="<p class=\"ndrt_wifstprte\"><button data-url=\""+rteBtnUrl+"\" data-geoms=\""+route["geoms"].join("|")+"\" data-key=\""+key+"\" style=\"width:100%; background-color:#"+route["color"]+"; color:#"+route["text_color"]+"\"><strong>"+route["type"]+" " +route["short_name"]+" "+route["long_name"]+"</strong></button></p>";
                                                            }
                                                            else {*/
                                                                var rteBtnUrl='<?=$whatifmdtendpt?>?agency='+encodeURIComponent(route["dataset"])+"&route="+encodeURIComponent(route["uri"])+"&crosstrip="+crosstrips.join("&crosstrip=")+"&date="+encodeURIComponent(date)+"&list=trips";
                                                                routesMarkup+="<p class=\"ndrt_wifstprte\"><button data-url=\""+rteBtnUrl+"\" data-geoms=\""+route["geoms"].join("|")+"\" data-key=\""+key+"\" style=\"width:100%; background-color:#"+route["color"]+"; color:#"+route["text_color"]+"\">"+route["type"]+" " +route["short_name"]+" "+route["long_name"]+"</button></p>";
                                                            // }
                                                            
                                                        });
                                                        routesMarkup+="<p class=\"ndrt_backToHome\"><button  style=\"width:100%;color:white;background-color:black;\">Back</button></p>";
                                                        container.find("p.ndrt_stopHead").show();
                                                        container.find("p.ndrt_routesSubHead").remove();
                                                        container.find("p.ndrt_wifstprte").remove();
                                                        container.find("p.ndrt_backToHome").remove();
                                                        container.append($(routesMarkup));
                                                        $("p.ndrt_backToHome button").click(function(){
                                                            container.find("p").hide();
                                                            container.find("p.ndrt_stopHead").show();
                                                            container.find("p.ndrt_wifstpdt").show();
                                                            container.find("p.ndrt_backToSummary").show();
                                                        });
                                                        $("p.ndrt_wifstprte button").click(function(){																						
                                                            var wifstprtebtn = $(this);
                                                            var wifstprtebtnhtml = $(this).html();
                                                            $(this).html("Please wait...");
                                                            $(".whatifPolyline").hide();
                                                            $(".whatifCrossingPolyline").hide();	
                                                            $(this).data("geoms").split("|").forEach(function(path){
                                                                var latlngs = [];
                                                                path.split("((")[1].split("))")[0].split(",").forEach(function(node){
                                                                    latlngs.push(new L.LatLng(node.trim().split(" ")[1],node.trim().split(" ")[0]));
                                                                });
                                                                var polyline = new L.Polyline(latlngs,{color:wifstprtebtn.css("background-color"),className:"whatifCrossingPolyline"});																	
                                                                polyline.addTo(whatifDrawnItems);																	
                                                            });
                                                            var hrRouteTxt=$(this).data("key");
                                                            if(hrRouteTxt != lastSelectedRoute) $(".currentTripMarkers").hide();
                                                            lastSelectedRoute = hrRouteTxt;
                                                            
                                                            var bg = $(this).css("background-color");
                                                            var fg = $(this).css("color");
                                                            $.post($(this).data("url").split("?")[0],$(this).data("url").split("?")[1],function(trips){
                                                                container.find("p").hide();
                                                                wifstprtebtn.html(wifstprtebtnhtml);
                                                                container.find("p.ndrt_stopHead").show();
                                                                var affectedTripsMarkup = "";
                                                                var tripsMarkup = "<p class=\"ndrt_tripsSubHead\" style=\"background-color:black; color:white; padding:0.5em;\"><strong>Date:</strong>&nbsp;"+new Date(date).toLocaleDateString("en",{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })+"<br><strong>Route:</strong>&nbsp;"+hrRouteTxt+"</p><div style=\"height:200px; max-height:200px; overflow:scroll; border: medium solid black; padding:0.5em;\" class=\"ndrt_tripsDivInRoute\"><p class=\"ndrt_preserveplease\" style=\"margin:0px 0; display:none;\"><strong>Affected Trips:</strong></p><div id=\"affectedtrips\"></div><p class=\"ndrt_preserveplease\" style=\"margin:0px 0;\"><strong style=\"display:none;\">All Trips:</strong></p>";
                                                                Object.keys(trips).sort(function(a,b){
                                                                    if(trips[a]["start"] > trips[b]["start"]) return 1; else return -1;
                                                                }).forEach(function(tripkey){
                                                                    var trip = trips[tripkey];
                                                                    /*var affectedtrip = Object.keys(impact["details"][agency]["routes"][hrRouteTxt]["trips"]).includes(tripkey);
                                                                    if(false && affectedtrip) { 
                                                                        var theTripUrl = '<?=$whatifmdtendpt?>?agency='+encodeURIComponent(trip["dataset"])+"&trip="+encodeURIComponent(trip["uri"])+"&list=stops";
                                                                        addToTripsMarkup="<p class=\"ndrt_wifstptrp\"><button style=\"padding:0.2em; text-align:left; font-size:larger; width:100%; background-color:"+bg+"; color: "+fg+";\" data-tripkey=\""+tripkey+"\" data-path=\""+trip["path"]+"\" data-url=\""+theTripUrl+"\" data-routebgcolor=\""+trip["route"]["bg_color"]+"\" data-routefgcolor=\""+trip["route"]["fg_color"]+"\" data-routeshortname=\""+trip["route"]["short_name"]+"\" data-routelongname=\""+trip["route"]["long_name"]+"\" data-routetype=\""+trip["route"]["type"]+"\" data-agencyname=\""+trip["route"]["agency"]+"\"><strong>"+trip["start"].substring(0,5)+"&nbsp;<span style=\"border:thin solid "+fg+"; padding:0.2em; font-size:smaller;\">"+(trip["direction"] == "0"?"&rharu;":"&lhard;")+"</span>&nbsp;"+trip["headsign"]+"</strong></button></p>";
                                                                        tripsMarkup+=addToTripsMarkup;
                                                                        affectedTripsMarkup+=addToTripsMarkup;
                                                                    }
                                                                    else {*/
                                                                        var theTripUrl = '<?=$whatifmdtendpt?>?agency='+encodeURIComponent(trip["dataset"])+"&trip="+encodeURIComponent(trip["uri"])+"&list=stops";
                                                                        tripsMarkup+="<p class=\"ndrt_wifstptrp\"><button style=\"text-align:left; font-size:smaller; width:100%; background-color:"+bg+"; color:"+fg+";\" data-tripkey=\""+tripkey+"\" data-path=\""+trip["path"]+"\" data-url=\""+theTripUrl+"\" data-routebgcolor=\""+trip["route"]["bg_color"]+"\" data-routefgcolor=\""+trip["route"]["fg_color"]+"\" data-routeshortname=\""+trip["route"]["short_name"]+"\" data-routelongname=\""+trip["route"]["long_name"]+"\" data-routetype=\""+trip["route"]["type"]+"\" data-agencyname=\""+trip["route"]["agency"]+"\">"+trip["start"].substring(0,5)+"&nbsp;<span style=\"border:thin solid "+fg+"; padding:0.2em;\">"+(trip["direction"] == "0"?"&rharu;":"&lhard;")+"</span>&nbsp;"+trip["headsign"]+"</button></p>";
                                                                    //}
                                                                    
                                                                });
                                                                tripsMarkup+="</div>";
                                                                tripsMarkup+="<p class=\"ndrt_backToRoutes\"><button  style=\"width:100%;color:white;background-color:black;\">Back</button></p>";
                                                                container.find("p.ndrt_tripsSubHead").remove();
                                                                container.find("div.ndrt_tripsDivInRoute").remove();																							
                                                                container.find("p.ndrt_backToRoutes").remove();
                                                                container.append($(tripsMarkup));
                                                                $("div#ndrt_affectedtrips").append($(affectedTripsMarkup));
                                                                $("p.ndrt_backToRoutes button").click(function(){
                                                                    container.find("p").hide();
                                                                    container.find("div.ndrt_tripsDivInRoute").hide();
                                                                    $(".whatifPolyline").hide();
                                                                    $(".whatifCrossingPolyline").hide();	
                                                                    $(".currentTripMarkers").hide();
                                                                    container.find("p.ndrt_stopHead").show();
                                                                    container.find("p.ndrt_routesSubHead").show();
                                                                    container.find("p.ndrt_wifstprte").show();
                                                                    container.find("p.ndrt_backToHome").show();
                                                                    crosspolylines.forEach(function(polydata){
                                                                        var polyline = new L.Polyline(polydata.latlngs,{color:"#"+polydata.color,className:"whatifCrossingPolyline"});																																				
                                                                        polyline.addTo(whatifDrawnItems);	
                                                                    });																		
                                                                });
                                                                $("p.ndrt_wifstptrp button").click(function(){
                                                                    var wifstptrpbtn = $(this);
                                                                    var wifstptrpbtnhtml = $(this).html();
                                                                    /*container.find("p.tripsSubHead").hide();
                                                                    container.find("p.wifstptrp").hide();
                                                                    container.find("p.backToRoutes").hide();
                                                                    container.find("div.tripsDivInRoute").hide();
                                                                    $(".currentTripMarkers").hide();*/
                                                                    var theaffectedstopsMarkup = "";
                                                                    var theTripMarkup = "<p class=\"ndrt_theTripSubhead\" style=\"background-color:black; color:white;  padding:0.5em;\"><strong>Agency:</strong>&nbsp;"+$(this).data("agencyname")+"<br><strong>Route:</strong>&nbsp;"+$(this).data("routetype")+" "+$(this).data("routeshortname")+" "+$(this).data("routelongname")+"<br><strong>Trip:</strong>&nbsp;"+$(this).html().replace("<strong>","").replace("</strong>","")+"</p><div class=\"ndrt_fullTripData\" style=\"height:150px; max-height:150px; overflow:scroll; font-size:smaller; border: medium solid black; padding:0.5em;\"><p style=\"margin:0px 0;\"><strong>Affected Stops:</strong></p><div id=\"ndrt_affectedstops\"></div><p style=\"margin:0px 0;\"><strong>All Stops:</strong><br>&nbsp;</p>";
                                                                    $(this).html("Please wait...");		
                                                                    var bgcolor=$(this).data("routebgcolor");
                                                                    var fgcolor=$(this).data("routefgcolor");
                                                                    var routetype=$(this).data("routetype");
                                                                    var path = $(this).data("path");
                                                                    var tripkey = $(this).data("tripkey");
                                                                    /*$(".whatifPolyline").hide();
                                                                    var latlngs = [];
                                                                    path.split("((")[1].split("))")[0].split(",").forEach(function(node){
                                                                        latlngs.push(new L.LatLng(node.trim().split(" ")[1],node.trim().split(" ")[0]));
                                                                    });
                                                                    var polyline = new L.Polyline(latlngs,{color:"#"+bgcolor,className:"whatifPolyline"});
                                                                    polyline.addTo(whatifDrawnItems);*/
                                                                
                                                                    
                                                                    $.getJSON($(this).data("url"),function(tripdata){							
                                                                        //
                                                                        container.find("p.ndrt_tripsSubHead").hide();
                                                                        container.find("p.ndrt_wifstptrp").hide();
                                                                        container.find("p.ndrt_backToRoutes").hide();
                                                                        container.find("div.ndrt_tripsDivInRoute").hide();
                                                                        wifstptrpbtn.html(wifstptrpbtnhtml);
                                                                        $(".currentTripMarkers").hide();
                                                                        $(".whatifPolyline").hide();
                                                                        $(".whatifCrossingPolyline").hide();	
                                                                        var latlngs = [];
                                                                        path.split("((")[1].split("))")[0].split(",").forEach(function(node){
                                                                            latlngs.push(new L.LatLng(node.trim().split(" ")[1],node.trim().split(" ")[0]));
                                                                        });
                                                                        var polyline = new L.Polyline(latlngs,{color:"#"+bgcolor,className:"whatifCrossingPolyline"});
                                                                        polyline.addTo(whatifDrawnItems);
                                                                        //
                                                                        tripdata.forEach(function(oneStop){
                                                                            var isaffectedstop = false;
                                                                            try { isaffectedstop = Object.keys(impact["details"][agency]["routes"][hrRouteTxt]["trips"][tripkey]["stops"]).includes(oneStop["sequence"]+" "+oneStop["code"]+" "+oneStop["name"]);
                                                                            } catch(nabp){}
                                                                            
                                                                            if(isaffectedstop) {
                                                                                theTripMarkup+="<button style=\"font-size:larger; font-weight:bold; cursor:default; text-align:left; width:100%; margin-bottom:1em; color:#"+fgcolor+"; background-color:#"+bgcolor+";\" disabled><strong>Sequence:</strong>&nbsp;"+oneStop["sequence"]+"<br><strong>Code:</strong>&nbsp;"+oneStop["code"]+"<br><strong>Name:</strong>&nbsp;"+oneStop["name"]+"<br><strong>Arrival:</strong>&nbsp;"+oneStop["arrival"].substring(0,5)+"<br><strong>Departure:</strong>&nbsp;"+oneStop["departure"].substring(0,5)+"</button>";
                                                                                theaffectedstopsMarkup+="<button style=\"font-size:larger; font-weight:bold; cursor:default; text-align:left; width:100%; margin-bottom:1em; color:#"+fgcolor+"; background-color:#"+bgcolor+";\" disabled><strong>Sequence:</strong>&nbsp;"+oneStop["sequence"]+"<br><strong>Code:</strong>&nbsp;"+oneStop["code"]+"<br><strong>Name:</strong>&nbsp;"+oneStop["name"]+"<br><strong>Arrival:</strong>&nbsp;"+oneStop["arrival"].substring(0,5)+"<br><strong>Departure:</strong>&nbsp;"+oneStop["departure"].substring(0,5)+"</button>";
                                                                            }
                                                                            else {
                                                                                theTripMarkup+="<button style=\"cursor:default; text-align:left; width:100%; margin-bottom:1em; color:#"+fgcolor+"; background-color:#"+bgcolor+";\" disabled><strong>Sequence:</strong>&nbsp;"+oneStop["sequence"]+"<br><strong>Code:</strong>&nbsp;"+oneStop["code"]+"<br><strong>Name:</strong>&nbsp;"+oneStop["name"]+"<br><strong>Arrival:</strong>&nbsp;"+oneStop["arrival"].substring(0,5)+"<br><strong>Departure:</strong>&nbsp;"+oneStop["departure"].substring(0,5)+"</button>";
                                                                            }
                                                                            var markerAlreadyThere = false;																										
                                                                            map.defaultMapRef.eachLayer(function(layer) { if (layer instanceof L.Marker) { if (layer.getLatLng()["lat"] == oneStop["pos_lat"] && layer.getLatLng()["lng"] == oneStop["pos_lon"] && $(layer._icon).is(":visible")) { markerAlreadyThere = true; } else {  } } } );
                                                                            if(!markerAlreadyThere) {
                                                                                var stopMarker = L.marker([oneStop["pos_lat"], oneStop["pos_lon"]], { icon: new L.Icon({
                                                                                iconUrl: routetype=="Bus"?'https://servicemap.disit.org/WebAppGrafo/img/mapicons/TransferServiceAndRenting_BusStop.png':'https://servicemap.disit.org/WebAppGrafo/img/mapicons/TransferServiceAndRenting_Tram_stops.png'}), uri: oneStop["uri"], title: (oneStop["departure"]?oneStop["departure"]:oneStop["arrival"]).substring(0,5)+" | "+oneStop["code"]+" "+oneStop["name"], stopname: oneStop["name"] });
                                                                                stopMarker.addTo(whatifDrawnItems);																					
                                                                                $(stopMarker._icon).addClass("currentTripMarkers");
                                                                                if(!isaffectedstop) {
                                                                                    $(stopMarker._icon).css("width","24px");
                                                                                }
                                                                            }
                                                                        });
                                                                        theTripMarkup+="</div>";
                                                                        theTripMarkup+="<p class=\"ndrt_backToTrips\"><button  style=\"width:100%;color:white;background-color:black;\">Back</button></p>";
                                                                        container.find("p.ndrt_theTripSubhead").remove();
                                                                        container.find("div.ndrt_fullTripData").remove();
                                                                        container.find("p.ndrt_backToTrips").remove();
                                                                        container.append($(theTripMarkup));
                                                                        if(theaffectedstopsMarkup == "") {
                                                                            theaffectedstopsMarkup="<p>No stops of this specific trip are affected by the current scenario.</p>";
                                                                        }
                                                                        $("div#ndrt_affectedstops").append($(theaffectedstopsMarkup));
                                                                        $("p.ndrt_backToTrips button").click(	
                                                                            function(){
                                                                            container.find("p").hide();
                                                                            container.find("div.ndrt_fullTripData").hide();																										
                                                                            container.find("p.ndrt_stopHead").show();
                                                                            container.find("p.ndrt_tripsSubHead").show();
                                                                            container.find("div.ndrt_tripsDivInRoute").show();
                                                                            container.find("p.ndrt_preserveplease").show();
                                                                            container.find("p.ndrt_wifstptrp").show();
                                                                            container.find("p.ndrt_backToRoutes").show();
                                                                            $(".currentTripMarkers").hide(); // it was commented
                                                                            }
                                                                            
                                                                            
                                                                        );
                                                                    });				
                                                                    
                                                                });
                                                                
                                                            },"json");
                                                            
                                                        });
                                                    },"json");
                                                });
                                                return;
                                            });
                                            
                                            var stopdates = {};
                                            Object.keys(impact["details"]).forEach(function(agency) {																		
                                                if(agency != "traps") {														
                                                    var agencyPolylines = [];
                                                    Object.keys(impact["details"][agency]["routes"]).forEach(function(route){
                                                        var color = impact["details"][agency]["routes"][route]["color"];
                                                        var type = impact["details"][agency]["routes"][route]["type"];
                                                        Object.keys(impact["details"][agency]["routes"][route]["trips"]).forEach(function(trip){
                                                            var path = impact["details"][agency]["routes"][route]["trips"][trip]["path"];
                                                            var criticality = impact["details"][agency]["routes"][route]["trips"][trip]["criticality"];
                                                            var latlngs = [];
                                                            path.split("((")[1].split("))")[0].split(",").forEach(function(node){
                                                                latlngs.push(new L.LatLng(node.trim().split(" ")[1],node.trim().split(" ")[0]));
                                                            });
                                                            var polyline = new L.Polyline(latlngs,{className: criticality=="Medium - Mere crossing"?"whatifCrossingPolyline":"whatifPolyline", color:"#"+color});
                                                            //polyline.bindTooltip(impact["details"][agency]["routes"][route]["short_name"], {permanent: true});
                                                            agencyPolylines.push({"latlngs":latlngs,"criticality":criticality, "color":color});
                                                            polyline.addTo(whatifDrawnItems);																	
                                                            if("stops" in impact["details"][agency]["routes"][route]["trips"][trip]) Object.keys(impact["details"][agency]["routes"][route]["trips"][trip]["stops"]).forEach(function(stop){
                                                                /*var icon = new L.Icon({
                                                                    iconUrl: type=="Bus"?'https://servicemap.disit.org/WebAppGrafo/img/mapicons/TransferServiceAndRenting_BusStop.png':'https://servicemap.disit.org/WebAppGrafo/img/mapicons/TransferServiceAndRenting_Tram_stops.png'
                                                                });*/
                                                                //
                                                                if(!stopdates[stop]) stopdates[stop] = impact["details"][agency]["routes"][route]["trips"][trip]["dates"]; else stopdates[stop] = stopdates[stop].concat(impact["details"][agency]["routes"][route]["trips"][trip]["dates"]);
                                                                var mapBusStopPinImg = '../img/gisMapIcons/TransferServiceAndRenting_BusStop.png';																							
                                                                if(impact["details"][agency]["routes"][route]["trips"][trip]["stops"][stop]["busStopCategory"]) {
                                                                    mapBusStopPinImg = '../img/gisMapIcons/' + impact["details"][agency]["routes"][route]["trips"][trip]["stops"][stop]["busStopCategory"] + '.png';
                                                                }
                                                                else {
                                                                    if(agency == "ATAF&LINEA" || agency == "GEST") {
                                                                        mapBusStopPinImg = '../img/gisMapIcons/TransferServiceAndRenting_BusStop_Urban.png'
                                                                    }
                                                                    else {
                                                                        mapBusStopPinImg = '../img/gisMapIcons/TransferServiceAndRenting_BusStop_Suburban.png'
                                                                    }
                                                                }																	
                                                                var icon = L.icon({
                                                                    iconUrl: mapBusStopPinImg,
                                                                    iconAnchor: [16, 37]
                                                                });
                                                                //
                                                                var marker = L.marker([impact["details"][agency]["routes"][route]["trips"][trip]["stops"][stop]["pos_lat"], impact["details"][agency]["routes"][route]["trips"][trip]["stops"][stop]["pos_lon"]], { icon: icon, title: impact["details"][agency]["routes"][route]["trips"][trip]["stops"][stop]["code"]+" "+impact["details"][agency]["routes"][route]["trips"][trip]["stops"][stop]["name"], uri: impact["details"][agency]["routes"][route]["trips"][trip]["stops"][stop]["uri"]});																																		
                                                                // Preparing the popup content (old way commented)																	
                                                                /*
                                                                
                                                                var arrivals = [];
                                                                var departures = [];
                                                                Object.keys(impact["details"][agency]["routes"]).forEach(function(iroute){
                                                                    Object.keys(impact["details"][agency]["routes"][iroute]["trips"]).forEach(function(itrip){
                                                                        if("stops" in impact["details"][agency]["routes"][iroute]["trips"][itrip]) Object.keys(impact["details"][agency]["routes"][iroute]["trips"][itrip]["stops"]).forEach(function(istop){
                                                                            if(impact["details"][agency]["routes"][iroute]["trips"][itrip]["stops"][istop]["code"]+" "+impact["details"][agency]["routes"][iroute]["trips"][itrip]["stops"][istop]["name"] == impact["details"][agency]["routes"][route]["trips"][trip]["stops"][stop]["code"]+" "+impact["details"][agency]["routes"][route]["trips"][trip]["stops"][stop]["name"]) {
                                                                                arrivals.push(impact["details"][agency]["routes"][iroute]["trips"][itrip]["stops"][istop]["arrival"].substring(0,5));
                                                                                departures.push(impact["details"][agency]["routes"][iroute]["trips"][itrip]["stops"][istop]["departure"].substring(0,5));
                                                                            }
                                                                        });
                                                                    });
                                                                });																	
                                                                marker.bindPopup("<p><strong style=\"font-size:larger;\">"+impact["details"][agency]["name"]+" - "+impact["details"][agency]["routes"][route]["trips"][trip]["stops"][stop]["name"]+"</strong></p><p><strong style=\"font-size:smaller;\">Affected arrivals: </strong>"+arrivals.sort().join(" ")+"</p><p><strong style=\"font-size:smaller;\">Affected departures: </strong>"+departures.sort().join(" ")+"</p>");
                                                                
                                                                */
                                                                                                                                    
                                                                marker.on('click', function(e){				
                                                                    
                                                                    $(".whatifCrossingPolyline").hide();	
                                                                    var stopUri = e.target.options.uri;
                                                                    
                                                                    if(!e.target._popup) { 
                                                                        var markup = "<p class=\"stopHead\"><strong style=\"font-size:larger;\">"+impact["details"][agency]["name"]+" - "+impact["details"][agency]["routes"][route]["trips"][trip]["stops"][stop]["name"]+"</strong></p>";																			
                                                                        var getDates = function(startDate, stopDate) {
                                                                            Date.prototype.addDays = function(days) {
                                                                                var date = new Date(this.valueOf());
                                                                                date.setDate(date.getDate() + days);
                                                                                return date;
                                                                            };
                                                                            var dateArray = new Array();
                                                                            var currentDate = startDate;
                                                                            while (currentDate <= stopDate) {
                                                                                dateArray.push(new Date (currentDate));
                                                                                currentDate = currentDate.addDays(1);
                                                                            }
                                                                            return dateArray;
                                                                        };
                                                                        getDates(new Date(selectedScenarioData["scenarioDatetimeStart"].substring(0,10)),new Date(selectedScenarioData["scenarioDatetimeEnd"].substring(0,10))).forEach(function(oneDate){																																								
                                                                            if(stopdates[stop].includes(oneDate.toISOString().split('T')[0])) {					
                                                                                var btnUrl = '<?=$whatifmdtendpt?>?agency='+encodeURIComponent(impact["details"][agency]["dataset"])+'&stop='+encodeURIComponent(impact["details"][agency]["routes"][route]["trips"][trip]["stops"][stop]["uri"])+'&date='+encodeURIComponent(oneDate.toISOString().split('T')[0])+"&list=routes";
                                                                                markup+="<p class=\"wifstpdt\"><button style=\"width:100%;\" data-url=\""+btnUrl+"\" data-stop=\""+stopUri+"\" data-date=\""+oneDate.toISOString().split('T')[0]+"\"><strong>"+new Date(oneDate).toLocaleDateString("en",{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })+"</strong></button></p>";				
                                                                            }
                                                                            else {
                                                                                var btnUrl = '<?=$whatifmdtendpt?>?agency='+encodeURIComponent(impact["details"][agency]["dataset"])+'&stop='+encodeURIComponent(impact["details"][agency]["routes"][route]["trips"][trip]["stops"][stop]["uri"])+'&date='+encodeURIComponent(oneDate.toISOString().split('T')[0])+"&list=routes";
                                                                                markup+="<p class=\"wifstpdt\"><button style=\"width:100%;\" data-url=\""+btnUrl+"\" data-stop=\""+stopUri+"\" data-date=\""+oneDate.toISOString().split('T')[0]+"\">"+new Date(oneDate).toLocaleDateString("en",{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })+"</button></p>";
                                                                            }
                                                                        });	
                                                                        markup+="<p class=\"backToSummary\"><button  style=\"width:100%;color:white;background-color:black;\">Back</button></p>";
                                                                        e.target.bindPopup(markup);
                                                                        e.target.fire("click");
                                                                        $("p.backToSummary button").click(function(){														
                                                                            $("#bus").click();
                                                                        });
                                                                        $("p.wifstpdt button").click(function(){
                                                                            var wifstpdtbtn = $(this);
                                                                            var wifstpdtbtnhtml = $(this).html();
                                                                            $(this).html("Please wait...");
                                                                            var container = $(this).parent().parent();
                                                                            var date = $(this).data("date");
                                                                            $.getJSON( $(this).data("url"), function(routes) {
                                                                                container.find("p").hide();
                                                                                wifstpdtbtn.html(wifstpdtbtnhtml);
                                                                                var routesMarkup = "<p class=\"routesSubHead\" style=\"background-color:black; color:white; padding:0.5em;\"><strong>Date:</strong>&nbsp;"+new Date(date).toLocaleDateString("en",{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })+"</p>";
                                                                                Object.keys(routes).forEach(function(key){
                                                                                    var route = routes[key];
                                                                                    var affected = Object.keys(impact["details"][agency]["routes"]).includes(route["type"]+" "+route["short_name"]+" "+route["long_name"]);
                                                                                    if(affected) {
                                                                                        var rteBtnUrl='<?=$whatifmdtendpt?>?agency='+encodeURIComponent(route["dataset"])+"&route="+encodeURIComponent(route["uri"])+"&stop="+stopUri+"&date="+encodeURIComponent(date)+"&list=trips";
                                                                                        routesMarkup+="<p class=\"wifstprte\"><button data-url=\""+rteBtnUrl+"\" data-geoms=\""+route["geoms"].join("|")+"\" data-key=\""+key+"\" style=\"width:100%; background-color:#"+route["color"]+"; color:#"+route["text_color"]+"\"><strong>"+route["type"]+" " +route["short_name"]+" "+route["long_name"]+"</strong></button></p>";
                                                                                    }
                                                                                    else {
                                                                                        var rteBtnUrl='<?=$whatifmdtendpt?>?agency='+encodeURIComponent(route["dataset"])+"&route="+encodeURIComponent(route["uri"])+"&stop="+stopUri+"&date="+encodeURIComponent(date)+"&list=trips";
                                                                                        routesMarkup+="<p class=\"wifstprte\"><button data-url=\""+rteBtnUrl+"\" data-geoms=\""+route["geoms"].join("|")+"\" data-key=\""+key+"\" style=\"width:100%; background-color:#"+route["color"]+"; color:#"+route["text_color"]+"\">"+route["type"]+" " +route["short_name"]+" "+route["long_name"]+"</button></p>";
                                                                                    }
                                                                                    
                                                                                });
                                                                                routesMarkup+="<p class=\"backToHome\"><button  style=\"width:100%;color:white;background-color:black;\">Back</button></p>";
                                                                                container.find("p.stopHead").show();
                                                                                container.find("p.routesSubHead").remove();
                                                                                container.find("p.wifstprte").remove();
                                                                                container.find("p.backToHome").remove();
                                                                                container.append($(routesMarkup));
                                                                                $("p.backToHome button").click(function(){
                                                                                    container.find("p").hide();
                                                                                    container.find("p.stopHead").show();
                                                                                    container.find("p.wifstpdt").show();
                                                                                    container.find("p.backToSummary").show();
                                                                                });
                                                                                $("p.wifstprte button").click(function(){																						
                                                                                    var wifstprtebtn = $(this);
                                                                                    var wifstprtebtnhtml = $(this).html();
                                                                                    $(this).html("Please wait...");
                                                                                    $(".whatifPolyline").hide();
                                                                                    $(".whatifCrossingPolyline").hide();	
                                                                                    $(this).data("geoms").split("|").forEach(function(path){
                                                                                        var latlngs = [];
                                                                                        path.split("((")[1].split("))")[0].split(",").forEach(function(node){
                                                                                            latlngs.push(new L.LatLng(node.trim().split(" ")[1],node.trim().split(" ")[0]));
                                                                                        });
                                                                                        var polyline = new L.Polyline(latlngs,{color:"#"+color,className:"whatifPolyline"});
                                                                                        polyline.addTo(whatifDrawnItems);
                                                                                        
                                                                                    });
                                                                                    var hrRouteTxt=$(this).data("key");
                                                                                    if(hrRouteTxt != lastSelectedRoute) $(".currentTripMarkers").hide();
                                                                                    lastSelectedRoute = hrRouteTxt;
                                                                                    
                                                                                    var bg = $(this).css("background-color");
                                                                                    var fg = $(this).css("color");
                                                                                    $.getJSON($(this).data("url"),function(trips){
                                                                                        container.find("p").hide();
                                                                                        wifstprtebtn.html(wifstprtebtnhtml);
                                                                                        container.find("p.stopHead").show();
                                                                                        var affectedTripsMarkup = "";
                                                                                        var tripsMarkup = "<p class=\"tripsSubHead\" style=\"background-color:black; color:white; padding:0.5em;\"><strong>Date:</strong>&nbsp;"+new Date(date).toLocaleDateString("en",{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })+"<br><strong>Route:</strong>&nbsp;"+hrRouteTxt+"</p><div style=\"height:200px; max-height:200px; overflow:scroll; border: medium solid black; padding:0.5em;\" class=\"tripsDivInRoute\"><p class=\"preserveplease\" style=\"margin:0px 0;\"><strong>Affected Trips:</strong></p><div id=\"affectedtrips\"></div><p class=\"preserveplease\" style=\"margin:0px 0;\"><strong>All Trips:</strong></p>";
                                                                                        Object.keys(trips).sort(function(a,b){
                                                                                            if(trips[a]["start"] > trips[b]["start"]) return 1; else return -1;
                                                                                        }).forEach(function(tripkey){
                                                                                            var trip = trips[tripkey];
                                                                                            var affectedtrip = Object.keys(impact["details"][agency]["routes"][hrRouteTxt]["trips"]).includes(tripkey);
                                                                                            if(affectedtrip) { 
                                                                                                var theTripUrl = '<?=$whatifmdtendpt?>?agency='+encodeURIComponent(trip["dataset"])+"&trip="+encodeURIComponent(trip["uri"])+"&list=stops";
                                                                                                addToTripsMarkup="<p class=\"wifstptrp\"><button style=\"padding:0.2em; text-align:left; font-size:larger; width:100%; background-color:"+bg+"; color: "+fg+";\" data-tripkey=\""+tripkey+"\" data-path=\""+trip["path"]+"\" data-url=\""+theTripUrl+"\" data-routebgcolor=\""+trip["route"]["bg_color"]+"\" data-routefgcolor=\""+trip["route"]["fg_color"]+"\" data-routeshortname=\""+trip["route"]["short_name"]+"\" data-routelongname=\""+trip["route"]["long_name"]+"\" data-routetype=\""+trip["route"]["type"]+"\" data-agencyname=\""+trip["route"]["agency"]+"\"><strong>"+trip["start"].substring(0,5)+"&nbsp;<span style=\"border:thin solid "+fg+"; padding:0.2em; font-size:smaller;\">"+(trip["direction"] == "0"?"&rharu;":"&lhard;")+"</span>&nbsp;"+trip["headsign"]+"</strong></button></p>";
                                                                                                tripsMarkup+=addToTripsMarkup;
                                                                                                affectedTripsMarkup+=addToTripsMarkup;
                                                                                            }
                                                                                            else {
                                                                                                var theTripUrl = '<?=$whatifmdtendpt?>?agency='+encodeURIComponent(trip["dataset"])+"&trip="+encodeURIComponent(trip["uri"])+"&list=stops";
                                                                                                tripsMarkup+="<p class=\"wifstptrp\"><button style=\"text-align:left; font-size:smaller; width:100%; background-color:"+bg+"; color:"+fg+";\" data-tripkey=\""+tripkey+"\" data-path=\""+trip["path"]+"\" data-url=\""+theTripUrl+"\" data-routebgcolor=\""+trip["route"]["bg_color"]+"\" data-routefgcolor=\""+trip["route"]["fg_color"]+"\" data-routeshortname=\""+trip["route"]["short_name"]+"\" data-routelongname=\""+trip["route"]["long_name"]+"\" data-routetype=\""+trip["route"]["type"]+"\" data-agencyname=\""+trip["route"]["agency"]+"\">"+trip["start"].substring(0,5)+"&nbsp;<span style=\"border:thin solid "+fg+"; padding:0.2em;\">"+(trip["direction"] == "0"?"&rharu;":"&lhard;")+"</span>&nbsp;"+trip["headsign"]+"</button></p>";
                                                                                            }
                                                                                            
                                                                                        });
                                                                                        tripsMarkup+="</div>";
                                                                                        tripsMarkup+="<p class=\"backToRoutes\"><button  style=\"width:100%;color:white;background-color:black;\">Back</button></p>";
                                                                                        container.find("p.tripsSubHead").remove();
                                                                                        container.find("div.tripsDivInRoute").remove();																							
                                                                                        container.find("p.backToRoutes").remove();
                                                                                        container.append($(tripsMarkup));
                                                                                        $("div#affectedtrips").append($(affectedTripsMarkup));
                                                                                        $("p.backToRoutes button").click(function(){
                                                                                            container.find("p").hide();
                                                                                            container.find("div.tripsDivInRoute").hide();
                                                                                            $(".whatifPolyline").hide();
                                                                                            $(".whatifCrossingPolyline").hide();	
                                                                                            $(".currentTripMarkers").hide();
                                                                                            container.find("p.stopHead").show();
                                                                                            container.find("p.routesSubHead").show();
                                                                                            container.find("p.wifstprte").show();
                                                                                            container.find("p.backToHome").show();
                                                                                            agencyPolylines.forEach(function(polydata){																									
                                                                                                var polyline = new L.Polyline(polydata["latlngs"],{className: polydata["criticality"]=="Medium - Mere crossing"?"whatifCrossingPolyline":"whatifPolyline", color:"#"+polydata["color"]});																
                                                                                                polyline.addTo(whatifDrawnItems);																																										
                                                                                            });
                                                                                            $(".whatifCrossingPolyline").hide();
                                                                                        });
                                                                                        $("p.wifstptrp button").click(function(){
                                                                                            var wifstptrpbtn = $(this);
                                                                                            var wifstptrpbtnhtml = $(this).html();
                                                                                            /*container.find("p.tripsSubHead").hide();
                                                                                            container.find("p.wifstptrp").hide();
                                                                                            container.find("p.backToRoutes").hide();
                                                                                            container.find("div.tripsDivInRoute").hide();
                                                                                            $(".currentTripMarkers").hide();*/
                                                                                            var theaffectedstopsMarkup = "";
                                                                                            var theTripMarkup = "<p class=\"theTripSubhead\" style=\"background-color:black; color:white;  padding:0.5em;\"><strong>Agency:</strong>&nbsp;"+$(this).data("agencyname")+"<br><strong>Route:</strong>&nbsp;"+$(this).data("routetype")+" "+$(this).data("routeshortname")+" "+$(this).data("routelongname")+"<br><strong>Trip:</strong>&nbsp;"+$(this).html().replace("<strong>","").replace("</strong>","")+"</p><div class=\"fullTripData\" style=\"height:150px; max-height:150px; overflow:scroll; font-size:smaller; border: medium solid black; padding:0.5em;\"><p style=\"margin:0px 0;\"><strong>Affected Stops:</strong></p><div id=\"affectedstops\"></div><p style=\"margin:0px 0;\"><strong>All Stops:</strong><br>&nbsp;</p>";
                                                                                            $(this).html("Please wait...");		
                                                                                            var bgcolor=$(this).data("routebgcolor");
                                                                                            var fgcolor=$(this).data("routefgcolor");
                                                                                            var routetype=$(this).data("routetype");
                                                                                            var path = $(this).data("path");
                                                                                            var tripkey = $(this).data("tripkey");
                                                                                            /*$(".whatifPolyline").hide();
                                                                                            var latlngs = [];
                                                                                            path.split("((")[1].split("))")[0].split(",").forEach(function(node){
                                                                                                latlngs.push(new L.LatLng(node.trim().split(" ")[1],node.trim().split(" ")[0]));
                                                                                            });
                                                                                            var polyline = new L.Polyline(latlngs,{color:"#"+bgcolor,className:"whatifPolyline"});
                                                                                            polyline.addTo(whatifDrawnItems);*/
                                                                                        
                                                                                            
                                                                                            $.getJSON($(this).data("url"),function(tripdata){							
                                                                                                //
                                                                                                container.find("p.tripsSubHead").hide();
                                                                                                container.find("p.wifstptrp").hide();
                                                                                                container.find("p.backToRoutes").hide();
                                                                                                container.find("div.tripsDivInRoute").hide();
                                                                                                wifstptrpbtn.html(wifstptrpbtnhtml);
                                                                                                $(".currentTripMarkers").hide();
                                                                                                $(".whatifPolyline").hide();
                                                                                                $(".whatifCrossingPolyline").hide();	
                                                                                                var latlngs = [];
                                                                                                path.split("((")[1].split("))")[0].split(",").forEach(function(node){
                                                                                                    latlngs.push(new L.LatLng(node.trim().split(" ")[1],node.trim().split(" ")[0]));
                                                                                                });
                                                                                                var polyline = new L.Polyline(latlngs,{color:"#"+bgcolor,className:"whatifPolyline"});
                                                                                                polyline.addTo(whatifDrawnItems);
                                                                                                //
                                                                                                tripdata.forEach(function(oneStop){
                                                                                                    var isaffectedstop = false;
                                                                                                    try { isaffectedstop = Object.keys(impact["details"][agency]["routes"][hrRouteTxt]["trips"][tripkey]["stops"]).includes(oneStop["sequence"]+" "+oneStop["code"]+" "+oneStop["name"]);
                                                                                                    } catch(nabp){}
                                                                                                    
                                                                                                    if(isaffectedstop) {
                                                                                                        theTripMarkup+="<button style=\"font-size:larger; font-weight:bold; cursor:default; text-align:left; width:100%; margin-bottom:1em; color:#"+fgcolor+"; background-color:#"+bgcolor+";\" disabled><strong>Sequence:</strong>&nbsp;"+oneStop["sequence"]+"<br><strong>Code:</strong>&nbsp;"+oneStop["code"]+"<br><strong>Name:</strong>&nbsp;"+oneStop["name"]+"<br><strong>Arrival:</strong>&nbsp;"+oneStop["arrival"].substring(0,5)+"<br><strong>Departure:</strong>&nbsp;"+oneStop["departure"].substring(0,5)+"</button>";
                                                                                                        theaffectedstopsMarkup+="<button style=\"font-size:larger; font-weight:bold; cursor:default; text-align:left; width:100%; margin-bottom:1em; color:#"+fgcolor+"; background-color:#"+bgcolor+";\" disabled><strong>Sequence:</strong>&nbsp;"+oneStop["sequence"]+"<br><strong>Code:</strong>&nbsp;"+oneStop["code"]+"<br><strong>Name:</strong>&nbsp;"+oneStop["name"]+"<br><strong>Arrival:</strong>&nbsp;"+oneStop["arrival"].substring(0,5)+"<br><strong>Departure:</strong>&nbsp;"+oneStop["departure"].substring(0,5)+"</button>";
                                                                                                    }
                                                                                                    else {
                                                                                                        theTripMarkup+="<button style=\"cursor:default; text-align:left; width:100%; margin-bottom:1em; color:#"+fgcolor+"; background-color:#"+bgcolor+";\" disabled><strong>Sequence:</strong>&nbsp;"+oneStop["sequence"]+"<br><strong>Code:</strong>&nbsp;"+oneStop["code"]+"<br><strong>Name:</strong>&nbsp;"+oneStop["name"]+"<br><strong>Arrival:</strong>&nbsp;"+oneStop["arrival"].substring(0,5)+"<br><strong>Departure:</strong>&nbsp;"+oneStop["departure"].substring(0,5)+"</button>";
                                                                                                    }
                                                                                                    var markerAlreadyThere = false;																										
                                                                                                    map.defaultMapRef.eachLayer(function(layer) { if (layer instanceof L.Marker) { if (layer.getLatLng()["lat"] == oneStop["pos_lat"] && layer.getLatLng()["lng"] == oneStop["pos_lon"] && $(layer._icon).is(":visible")) { markerAlreadyThere = true; } else {  } } } );
                                                                                                    if(!markerAlreadyThere) {
                                                                                                        var stopMarker = L.marker([oneStop["pos_lat"], oneStop["pos_lon"]], { icon: new L.Icon({
                                                                                                        iconUrl: routetype=="Bus"?'https://servicemap.disit.org/WebAppGrafo/img/mapicons/TransferServiceAndRenting_BusStop.png':'https://servicemap.disit.org/WebAppGrafo/img/mapicons/TransferServiceAndRenting_Tram_stops.png'}), uri: oneStop["uri"], title: (oneStop["departure"]?oneStop["departure"]:oneStop["arrival"]).substring(0,5)+" | "+oneStop["code"]+" "+oneStop["name"], stopname: oneStop["name"] });
                                                                                                        stopMarker.addTo(whatifDrawnItems);																											
                                                                                                        $(stopMarker._icon).addClass("currentTripMarkers");
                                                                                                        if(!isaffectedstop) {
                                                                                                            $(stopMarker._icon).css("width","24px");
                                                                                                        }
                                                                                                    }
                                                                                                });
                                                                                                theTripMarkup+="</div>";
                                                                                                theTripMarkup+="<p class=\"backToTrips\"><button  style=\"width:100%;color:white;background-color:black;\">Back</button></p>";
                                                                                                container.find("p.theTripSubhead").remove();
                                                                                                container.find("div.fullTripData").remove();
                                                                                                container.find("p.backToTrips").remove();
                                                                                                container.append($(theTripMarkup));
                                                                                                if(theaffectedstopsMarkup == "") {
                                                                                                    theaffectedstopsMarkup="<p>No stops of this specific trip are affected by the current scenario.</p>";
                                                                                                }
                                                                                                $("div#affectedstops").append($(theaffectedstopsMarkup));
                                                                                                $("p.backToTrips button").click(	
                                                                                                    function(){
                                                                                                    container.find("p").hide();
                                                                                                    container.find("div.fullTripData").hide();																										
                                                                                                    container.find("p.stopHead").show();
                                                                                                    container.find("p.tripsSubHead").show();
                                                                                                    container.find("div.tripsDivInRoute").show();
                                                                                                    container.find("p.preserveplease").show();
                                                                                                    container.find("p.wifstptrp").show();
                                                                                                    container.find("p.backToRoutes").show();
                                                                                                    $(".currentTripMarkers").hide(); // it was commented
                                                                                                    }
                                                                                                    
                                                                                                    
                                                                                                );
                                                                                            });				
                                                                                            
                                                                                        });
                                                                                        
                                                                                    });
                                                                                    
                                                                                });
                                                                            });
                                                                        });
                                                                        return;
                                                                        /*$.getJSON( '<?=$whatifmdtendpt?>?agency='+encodeURIComponent(impact["details"][agency]["agencygraph"])+'&stop='+encodeURIComponent(impact["details"][agency]["routes"][route]["trips"][trip]["stops"][stop]["uri"])+'&date='+encodeURIComponent(selectedDate)+"&list=routes", function(impact) {
                                                                            
                                                                            
                                                                        }*/
                                                                    }
                                                                    e.target.getPopup().on('remove', function() {
                                                                        e.target.unbindPopup();
                                                                    });
                                                                });
                                                                marker.addTo(whatifDrawnItems); 
                                                                $(marker._icon).addClass("affectedStopMarker");
                                                                
                                                            });
                                                        });															
                                                    });
                                                }
                                            });												
                                        }).fail(function() {
                                            var olng = Math.min(map.defaultMapRef.getBounds()["_northEast"]["lng"],map.defaultMapRef.getBounds()["_southWest"]["lng"])+(Math.abs(map.defaultMapRef.getBounds()["_northEast"]["lng"]-map.defaultMapRef.getBounds()["_southWest"]["lng"])/2);
                                            var olat = map.defaultMapRef.getBounds()["_northEast"]["lat"];
                                            L.popup({offset: L.point(0, 210)}).setLatLng(new L.LatLng(olat, olng)).setContent("<p><strong>Impact on Public Transport</strong></p><p>This scenario is too complex for a single-step analysis. Please split it in simpler scenarios, as for the extension, the time interval, or both.</p>").openOn(map.defaultMapRef);
                                            $("#bus_button").css("opacity",1);
                                        });
                                        //setTimeout(function(){ whatifptiendpt.abort(); }, 30000); 
                                        
                                    }
                                    // MS
                                });

                                // Set event listeners for vehicle selection and routing mode selection
                                $('.vehicle-btn').on('click', function(e) {
                                    vehicle = e.currentTarget.id;   // Get clicked button's id
                                    startRouting(vehicle);
                                });
                                $("#whatIf-weighting").on("change", function(e) {
                                    // When the user chooses a weighting for the routing, if the weighting is "fastest_with_traffic" also show the datetime picker
                                    if($(this).val() == "fastest_with_traffic")
                                        $("#routing-datetime").show();
                                    else
                                        $("#routing-datetime").hide();
                                    startRouting($('.selectedvehicle').attr('id'));
                                });
                                $("#whatIf-startDatetime").on("change", function(e) {
                                    startRouting($('.selectedvehicle').attr('id'));
                                });

                                // Init GH Leaflet Routing Machine 
                                // Init GH Leaflet Routing Machine
                                serviceUrl = setServiceUrl(orgParams, map.defaultMapRef.getBounds()["_northEast"]);
                                lrmControl = L.Routing.control({
                                    // Servlet params
                                    serviceUrl: serviceUrl,
                                    waypoints: [
                                        // L.latLng(43.78299262890581, 11.257714033126831),
                                        // L.latLng(43.77107832296931, 11.271060705184938)
                                    ],
                                    avoid_area: encodeURIComponent(JSON.stringify(selectedScenarioData)),
                                    vehicle: vehicle,
                                    weighting: $('#whatIf-weighting').val(),   // Get the selected weighting
                                    startDatetime: $('#whatIf-startDatetime').val(),   // Get the selected datetime
                                    // end Servlet params
                                    geocoder: L.Control.Geocoder.nominatim(),
                                    routeWhileDragging: true,
                                    reverseWaypoints: true,
                                    showAlternatives: false,
                                });
                                lrmControl.addTo(map.defaultMapRef);
                                const routingDivs = $('.leaflet-routing-container');
                                routingDivs.remove();
                                $('#whatif-control').append(routingDivs[0]);
                            });
                        }
                        else if( choice == "studio") {                                
                            // Hide routing mode options
                            $("#options").hide();
                            // hide lrm (if present)
                            if(lrmControl) {
                                lrmControl.remove(map);
                                lrmControl = null;
                                waypoints = null;
                                weighting = 'fastest';
                                startDatetime = null;
                            }
                            // hide previous drawn items
                            map.defaultMapRef.removeLayer(whatifDrawnItems);
                            
                            // retrieve selected studio's data
                            var selectedStudio = $(this).val();
                            // studioName:scenarioName(visibility) -> we take only studioName
                            // for guest visibility is not shown
                            if(selectedStudio.indexOf(':') > -1 )
                                var selectedStudio = selectedStudio.substr(0, selectedStudio.indexOf(':'));

                            $.getJSON( '../controllers/studioProxy.php?method=GET&sel='+selectedStudio, function( selectedStudioData ) {
                                // add studio description
                                if(selectedStudioData.studioDescription)
                                    $("#resultDescription").html("Description: "+'<span style="font-style:italic">'+selectedStudioData.studioDescription+'</span>');
                                else
                                    $("#resultDescription").html("Description: "+'<span style="font-style:italic">'+"Not Available."+'</span>');
                                
                                var scenarioName = selectedStudioData.scenarioName;
                                waypoints = selectedStudioData.waypoints;
                                vehicle = selectedStudioData.vehicle;
                                weighting = selectedStudioData.weighting;   // Get the selected weighting
                                startDatetime = selectedStudioData.startDatetime;   // Get the selected datetime
                                if(selectedStudioData.weighting)
                                    weighting = selectedStudioData.weighting;
                                else weighting = 'fastest';
                                if(selectedStudioData.startDatetime)
                                    startDatetime = selectedStudioData.startDatetime;
                                else startDatetime = null;
                                // get scenario related to the selected studio
                                $.getJSON( '../controllers/scenarioProxy.php?method=GET&sel='+scenarioName, function( selectedScenarioData ) {                                        
                                    // remove previous choice's drawings
                                    map.defaultMapRef.removeLayer(whatifDrawnItems);
                                    whatifDrawnItems = new L.FeatureGroup();
                                    map.defaultMapRef.addLayer(whatifDrawnItems);
                                    if(lrmControl)
                                        lrmControl.remove(map.defaultMapRef); 
                                    
                                    // draw selected scenario (feature collection)
                                    var firstShapeType = selectedScenarioData.features[0].geometry.type;
                                    if (is3dOn) {
                                        layers.whatif = createWhatifLayer({
                                            data: selectedScenarioData,
                                        });
                                        updateLayers();
                                    } else {
                                        L.geoJson(selectedScenarioData, {
                                            onEachFeature: onEachFeature
                                        });
                                        function onEachFeature(feature, layer) {
                                            // radius drawing management
                                            if(feature.properties.radius != null)
                                                L.circle(L.latLng(feature.geometry.coordinates[1], feature.geometry.coordinates[0]),
                                                        feature.properties.radius)
                                                .addTo(whatifDrawnItems);
                                            else
                                                whatifDrawnItems.addLayer(layer);
                                        }
                                        // centre the map on the first feature
                                        switch(firstShapeType) {
                                            case 'Polygon':
                                                map.defaultMapRef.panTo(new L.LatLng(selectedScenarioData.features[0].geometry.coordinates[0][0][1],
                                                                selectedScenarioData.features[0].geometry.coordinates[0][0][0]));
                                                break;
                                            default:
                                                map.defaultMapRef.panTo(new L.LatLng(selectedScenarioData.features[0].geometry.coordinates[1],
                                                                selectedScenarioData.features[0].geometry.coordinates[0]));
                                        }
                                    }
                                    
                                    // Show routing mode options and create related event listener
                                    $('.selectedvehicle').removeClass('selectedvehicle');
                                    $('#'+vehicle).addClass('selectedvehicle');
                                    $("#options").show(); 
                                    // remove previous click listener (if present)
                                    $(".vehicle-btn").off("click");
                                    $('.vehicle-btn').on('click', function(e) {
                                        // Get clicked button's id
                                        vehicle = e.currentTarget.id;
                                        // Change active button
                                        $('.selectedvehicle').removeClass('selectedvehicle');
                                        $('#'+vehicle).addClass('selectedvehicle');

                                        // TRICK: Reinit lrmControl, but with previous waypoints, in order to refresh the routing process
                                        waypoints = lrmControl.getWaypoints();
                                        if(lrmControl) {
                                            lrmControl.remove(map);
                                            lrmControl = null;
                                        }
                                        serviceUrl = setServiceUrl(orgParams, map.defaultMapRef.getBounds()["_northEast"]);
                                        lrmControl = L.Routing.control({
                                            // Servlet params
                                            serviceUrl: serviceUrl,
                                            waypoints: waypoints,
                                            avoid_area: encodeURIComponent(JSON.stringify(selectedScenarioData)),
                                            vehicle: vehicle,
                                            weighting: $('#whatIf-weighting').val(),   // Get the selected weighting
                                            startDatetime: $('#whatIf-startDatetime').val(),   // Get the selected datetime
                                            // end Servlet params
                                            geocoder: L.Control.Geocoder.nominatim(),
                                            routeWhileDragging: true,
                                            reverseWaypoints: true,
                                            showAlternatives: false,
                                            createMarker: function(i, wp) {
                                                var icon = L.icon({ 
                                                        iconUrl: '../img/dynamic_routing/marker-icon-red.png',
                                                        shadowUrl: '../img/dynamic_routing/marker-shadow.png',
                                                        iconAnchor: [12, 41]
                                                });
                                                return L.marker(wp.latLng, {
                                                        draggable: true,
                                                        icon: icon
                                                });
                                            } 
                                        });
                                        lrmControl.addTo(map.defaultMapRef);
                                    });
                                    serviceUrl = setServiceUrl(orgParams, map.defaultMapRef.getBounds()["_northEast"]);
                                    // init lrm with retrieved waypoints and avoid_area
                                    lrmControl = L.Routing.control({
                                        // Servlet params
                                        serviceUrl: serviceUrl,
                                        waypoints: [],
                                        avoid_area: encodeURIComponent(JSON.stringify(selectedScenarioData)),
                                        vehicle: vehicle,
                                        weighting: $('#whatIf-weighting').val(),   // Get the selected weighting
                                        startDatetime: $('#whatIf-startDatetime').val(),   // Get the selected datetime
                                        // end Servlet params
                                        geocoder: L.Control.Geocoder.nominatim(),
                                        routeWhileDragging: true,
                                        reverseWaypoints: true,
                                        showAlternatives: false,
                                        createMarker: function(i, wp) {
                                            var icon = L.icon({ 
                                                    iconUrl: '../img/dynamic_routing/marker-icon-red.png',
                                                    shadowUrl: '../img/dynamic_routing/marker-shadow.png',
                                                    iconAnchor: [12, 41]
                                            });
                                            return L.marker(wp.latLng, {
                                                    draggable: true,
                                                    icon: icon
                                            });
                                        } 
                                    });
                                    lrmControl.addTo(map.defaultMapRef); 
                                    // add waypoints
                                    var j = 0;
                                    waypoints = JSON.parse(waypoints);
                                    for(var e in waypoints) {
                                        lrmControl.spliceWaypoints(j++, 1, waypoints[e].latLng);
                                    }
                                });
                            });
                        }
                        
                        // Function for button creation
                        function createButton(label, container) {
                            var btn = L.DomUtil.create('div', '', container);
                            btn.innerHTML = '<button>'+label+'</button>';
                            return btn;
                        }

                        // MS
                        var latlonFilter = function(latlng) {
                            try {
                                var dist = -1;
                                var nearestMarker = null;
                                var newlat = latlng["lat"];
                                var newlng = latlng["lng"];									
                                map.defaultMapRef.eachLayer(
                                    function(layer) { 
                                        if (layer instanceof L.Marker) { 
                                            if ($(layer._icon).hasClass("currentTripMarkers") && $(layer._icon).is(":visible")) {
                                                if (dist == -1 || dist > Math.pow(latlng["lat"]-layer.getLatLng()["lat"],2)+Math.pow(latlng["lng"]-layer.getLatLng()["lng"],2) ) {
                                                    newlat = layer.getLatLng()["lat"];
                                                    newlng = layer.getLatLng()["lng"];
                                                    dist = Math.pow(latlng["lat"]-layer.getLatLng()["lat"],2)+Math.pow(latlng["lng"]-layer.getLatLng()["lng"],2);
                                                    nearestMarker = layer;
                                                    console.log("Reconciliated");
                                                }
                                            }
                                        }
                                    }
                                );			
                                console.log('<osm-script output="json"><query type="node"><around lat="'+newlat+'" lon="'+newlng+'" radius="100.0"/><has-kv k="bus" v="yes" /><has-kv k="name" v="'+nearestMarker.options.stopname+'" /></query><print /></osm-script>');
                                $.getJSON('https://overpass.kumi.systems/api/interpreter?data='+encodeURIComponent('<osm-script output="json"><query type="node"><around lat="'+newlat+'" lon="'+newlng+'" radius="100.0"/><has-kv k="bus" v="yes"></has-kv><has-kv k="name" v="'+nearestMarker.options.stopname+'"></has-kv></query><print /></osm-script>'),function(overpassResponse){
                                    console.log(overpassResponse);
                                    var lat = null;
                                    var lng = null;
                                    var public_transport = null;
                                    overpassResponse["elements"].forEach(function(element){
                                        if(public_transport != "stop_position" && public_transport != "platform") {
                                            public_transport = element["tags"]["public_transport"];
                                            lat = element["lat"];
                                            lng = element["lon"];
                                        }
                                    });
                                    if(lat != null && lng != null) {
                                        newlat = lat;
                                        newlng = lng;
                                        console.log("From overpass: "+newlat+", "+newlng);
                                    }
                                });
                                
                                return { lat: newlat, lng: newlng };
                            }
                            catch(e) {
                                return latlng;
                            }
                        };
                        // MS
                        
                        // add a popup <from, to> when the map is clicked
                        // TODO: deck whatif
                        map.defaultMapRef.on('click', function(e) {
                            if(lrmControl) {
                                var container = L.DomUtil.create('div'),
                                    startBtn = createButton('Start from this location', container),
                                    destBtn = createButton('Go to this location', container);
                                L.DomUtil.setClass(container, "leaflet-fromto-popup");

                                L.popup()
                                    .setContent(container)
                                    .setLatLng(latlonFilter(e.latlng))
                                    .openOn(map.defaultMapRef);
                                // replace the first waypoint
                                L.DomEvent.on(startBtn, 'click', function() {
                                    lrmControl.spliceWaypoints(0, 1, latlonFilter(e.latlng));
                                    map.defaultMapRef.closePopup();
                                });
                                // replace the last waypoint
                                L.DomEvent.on(destBtn, 'click', function() {
                                    lrmControl.spliceWaypoints(lrmControl.getWaypoints().length - 1, 1, latlonFilter(e.latlng));
                                    map.defaultMapRef.closePopup();
                                });
                            }
                        });
                    });
                }
            });

            $(document).on('removeWhatif', function(event) {
                if (event.target === map.mapName) {
                    map.defaultMapRef.removeLayer(whatifLayer);
                    map.defaultMapRef.removeControl(whatifControl);
                    map.defaultMapRef.removeLayer(whatifDrawnItems);
                    if (lrmControl) {
                        lrmControl.remove(map);
                        lrmControl = null;
                        waypoints = null;
                        weighting = 'fastest';
                        startDatetime = null;
                    }
                    if (studioControl) {
                        map.defaultMapRef.removeControl(studioControl);
                        studioControl = null;
                    }
                    if (is3dOn) {
                        $('#whatif-control').remove();
                        $('#whatif-info-btn').css('display', 'none');
                        selectFirstInfoTabAvaiable();
                        whatifOn = false;
                        layers.whatif = [];
                        updateLayers();
                    }
                }
            });
            // end Cristiano

            $(document).on('addTrafficRealTimeDetails', function(event) {
                function addTrafficRTDetailsToMap(event) {
                    var so = map.defaultMapRef.getBounds()._southWest;
                    var ne = map.defaultMapRef.getBounds()._northEast;
                    var zm = map.defaultMapRef.getZoom();

                    if (is3dOn) {
                        const maxBB = getMaxBoundingBox(currentViewState);
                        ne.lat = maxBB[1][1];
                        so.lat = maxBB[0][1];
                        ne.lng = maxBB[1][0];
                        so.lng = maxBB[0][0];
                        zm = parseInt(currentViewState.zoom);
                    }

                    const roadsUrl = event.passedData + "?sLat={south}&sLong={west}&eLat={north}&eLong={east}&zoom=18";
                    const densityUrl = "https://firenzetraffic.km4city.org/trafficRTDetails/density/read.php" +
                        "?sLat={south}&sLong={west}&eLat={north}&eLong={east}&zoom=18";
                    var roadsJson2 = event.passedData + "?sLat=" + so.lat + "&sLong=" + so.lng + "&eLat=" +
                        ne.lat + "&eLong=" + ne.lng + "&zoom=" + zm;
                    var event = {};
                    event.eventType = "trafficRealTimeDetails";
                    event.maxLat = ne.lat;
                    event.minLat = so.lat;
                    event.maxLng = ne.lng;
                    event.minLng = so.lng;
                    event.zm = zm;

                    event.marker = new L.LayerGroup();

                    // map.defaultMapRef.on('click', function(e) {
                    //     var bnds = map.defaultMapRef.getBounds()
                    //     if (roads == null)
                    //         loadRoads();
                    //     else {}
                    // });

                    // CORTI - zIndex
                    // map.defaultMapRef.createPane('trafficFlow');
                    // map.defaultMapRef.getPane('trafficFlow').style.zIndex = 420;

                    var wktLayer = new L.LayerGroup();
                    var roads = null;
                    var time = 0;

                    const loadingDiv = new LoadingDiv({
                        text: 'crest layer',
                        color1: '#ffffff',
                        color2: '#cccccc',
                    });

                    if (!densityTable)
                        loadDensityTable(false);
                    // const trafficLayer = new deck.TileLayer({
                    const trafficLayer = new snap4deck.FusionTileLayer({
                        id: `traffic-layer`,
                        data: roadsUrl,
                        // data: [roadsUrl, densityUrl],
                        // pickable: true,
                        // offsetLoad: 18,
                        getFusionCoords: d => d.startPos,
                        fusionTopDown: snap4deck.jsonFusionTopDown,
                        fusionBottomUP: snap4deck.jsonFusionBottomUp,
                        // tileSize: 256,
                        getTileData: (tile) => {
                            const {north, east, south, west} = tile.bbox;
                            // const url = tile.url
                            //     .replace('{north}', north)
                            //     .replace('{east}', east)
                            //     .replace('{west}', west)
                            //     .replace('{south}', south);
                            // const url1 = url;
                            const url1 = tile.url
                            const url2 = url1.replace('/roads/', '/density/');
                            const {signal} = tile;
                            return fetch(url1)
                            // return fetch(tile.url[0])
                            .then(response => response.text())
                            .then(roadsData => {
                                const roads = JSON.parse(roadsData)
                                if (roads.hasOwnProperty('message'))
                                    return;

                                return fetch(url2)
                                // return fetch(tile.url[1])
                                    .then(response => response.text())
                                    .then(densityData => {
                                        const density = JSON.parse(densityData);
                                        return preProcessRoads(roads, density, signal);
                                    });
                            });

                        },
                        renderSubLayers: (props) => {
                            if (!props.data)
                                return;
                            let tf_layer = new snap4deck.CrestLayer({
                                ...props,
                                pickable: true,
                                extensions: [new deck._TerrainExtension()],
                                terrainDrawMode: 'offset',
                                getStartPosition: (d) => d.startPos,
                                getEndPosition: (d) => d.endPos,
                                getStartDensity: (d) => d.startDensity,
                                getMiddleDensity: (d) => d.density,
                                getEndDensity: (d) => d.endDensity,
                                getStartColor: (d) => d.startColor.map(x => x / 255),
                                getMiddleColor: (d) => d.color.map(x => x / 255),
                                getEndColor: (d) => d.endColor.map(x => x / 255),
                                arrowSize: settingOptions.arrowSize.value || 20,
                                maxHeight: settingOptions.maxCrestHeight.value || 40,
                                isAnimated: settingOptions.animationEnabled.value,
                                currentTime: animationTime,
                                updateTriggers: {
                                    isAnimated: settingOptions.animationEnabled.value,
                                    currentTime: {
                                        time: animationTime,
                                    },
                                }
                            });
                            return tf_layer;
                        },
                    });
                    layers.crest = trafficLayer;
                    layers.mockIcon = createMockIcon();
                    updateLayers();
                    loadingDiv.setStatus('ok');
                    if (settingOptions.animationEnabled.value)
                        startTimerAnimation();

                    async function preProcessRoads(roads, density, signal) {
                        var result = density;
                        if (roads.length == null) {
                            loadingDiv.setStatus('ko');
                            return;
                        }
                        // Removing first null object
                        if (roads[0].road == null)
                            roads = roads.slice(1);

                        // For all roads
                        for (var i = 0; i < roads.length; i++) {
                            var road = roads[i];
                            var density = result[road.road];
                            // for all segments
                            for (var j = 0; j < road.segments.length; j++) {
                                var segment = road.segments[j];
                                segment.startPos = [parseFloat(segment.start
                                    .long), parseFloat(segment.start
                                    .lat), 0];
                                segment.endPos = [parseFloat(segment.end.long),
                                    parseFloat(segment.end.lat), 0];
                                // if (terrainOn) {
                                //     segment.startPos[2] = await layers.terrain.getAltitude(segment.startPos, signal) || 0;
                                //     segment.endPos[2] = await layers.terrain.getAltitude(segment.endPos, signal) || 0;
                                // }
                                var segmentDensity = density.data[0][segment.id];
                                segment.density = parseFloat(segmentDensity) / parseFloat(segment.Lanes);
                                if (segment.relativeDensity > 1)
                                    segment.relativeDensity = 1;
                                segment.startDensity = segment.density;
                                segment.endDensity = segment.density;
                                segment.color = getDensityColor(segment.density);
                                segment.startColor = segment.color;
                                segment.endColor = segment.color;
                                segment.startAttach = [];
                                segment.endAttach = [];
                            }
                        }

                        allSegments = [];
                        for (let road of roads) {
                            allSegments.push(...road.segments);
                        }

                        const tollerance = 3;
                        const duplicateSegments = [];
                        for (let i = 0; i < allSegments.length; i++) {
                            let indexMatch = [];
                            let currentSegment = allSegments[i];
                            for (let j = i + 1; j < allSegments.length; j++) {
                                let nextSegment = allSegments[j];
                                let sameStart = false;
                                let sameEnd = false;
                                // TODO: da finire
                                if (checkSamePositions(currentSegment.startPos, nextSegment.endPos, tollerance)) {
                                    currentSegment.startAttach.push(nextSegment.density);
                                    nextSegment.endAttach.push(currentSegment.density);
                                }
                                if (checkSamePositions(currentSegment.startPos, nextSegment.startPos, tollerance)) {
                                    sameStart = true;
                                    currentSegment.startAttach.push(nextSegment.density);
                                    nextSegment.startAttach.push(currentSegment.density);
                                }
                                if (checkSamePositions(currentSegment.endPos, nextSegment.endPos, tollerance)) {
                                    sameEnd = true;
                                    currentSegment.endAttach.push(nextSegment.density);
                                    nextSegment.endAttach.push(currentSegment.density);
                                }
                                if (checkSamePositions(currentSegment.endPos, nextSegment.startPos, tollerance)) {
                                    currentSegment.endAttach.push(nextSegment.density);
                                    nextSegment.startAttach.push(currentSegment.density);
                                }
                            }
                        }

                        // calcolo media densita degli incroci
                        for (let segment of allSegments) {
                            let avarageStart = segment.density;
                            for (let density of segment.startAttach)
                                avarageStart += density;
                            avarageStart /= segment.startAttach.length + 1;
                            segment.startDensity = avarageStart;
                            segment.startColor = getDensityColor(avarageStart);
                            delete segment.startAttach;
                            let avarageEnd = segment.density;
                            for (let density of segment.endAttach)
                                avarageEnd += density;
                            avarageEnd /= segment.endAttach.length + 1;
                            segment.endDensity = avarageEnd;
                            segment.endColor = getDensityColor(avarageEnd);
                            delete segment.endAttach;
                        }

                        return allSegments;
                    }
                }
                event.passedParams = {
                    desc: "Crest"
                }
                eventMapManager.legacyTrigger(event, addTrafficRTDetailsToMap);
            });

            $(document).on('addHeatmap', function(event) {
                function addHeatmapToMap() {
                    function initHeatmapLayer(heatmapRangeObject) {

                        var heatmapCfg = {};
                        var colorScale = {};
                        var colorGradient = {};
                        var gradientString = "";

                        map.cfg = JSON.parse(heatmapRangeObject[0].leafletConfigJSON);
                        //    map.cfg['blur'] = 0.85;

                        if (current_radius != null) {
                            map.cfg['radius'] = current_radius;
                        }
                        if (current_opacity != null) {
                            map.cfg['maxOpacity'] = current_opacity;
                        }

                        $.ajax({
                            url: heatmapUrl + "getColorMap.php?metricName=" + map.testMetadata
                                .metadata.metricName,
                            //    url: "https://heatmap.snap4city.org/getColorMap.php?metricName=" + map.testMetadata.metadata.metricName,
                            type: "GET",
                            async: false,
                            dataType: 'json',
                            success: function(dataColorScale) {
                                colorScale = dataColorScale;
                            },
                            error: function(err) {
                                alert("Error in retrieving color map scale: ");
                                console.log(err);
                            }
                        });

                        var minVal = colorScale[0].min;
                        if (minVal === null || minVal === undefined) {
                            minVal = heatmapRangeObject[0].range1Inf;
                        }

                        var maxVal = colorScale[colorScale.length - 1].min;
                        if (maxVal === null || maxVal === undefined) {
                            maxVal = heatmapRangeObject[0].range10Inf;
                        }
                        colorGradient[0] = 0;
                        colorGradient[colorScale.length - 1] = 1;
                        gradientString = '{ "' + colorGradient[0] + '": "#' + fullColorHex(colorScale[0].rgb
                            .substring(1, colorScale[0].rgb.length - 1)) + '", ';
                        for (let k1 = 1; k1 < colorScale.length - 1; k1++) {
                            colorGradient[k1] = (colorScale[k1].min - minVal) / (maxVal - minVal);
                            gradientString = gradientString + '"' + colorGradient[k1] + '": "#' +
                                fullColorHex(colorScale[k1].rgb.substring(1, colorScale[k1].rgb.length -
                                    1)) + '", ';
                        }
                        gradientString = gradientString + '"' + colorGradient[colorScale.length - 1] +
                            '": "#' + fullColorHex(colorScale[colorScale.length - 1].rgb.substring(1,
                                colorScale[colorScale.length - 1].rgb.length - 1)) + '"}';
                        map.cfg.gradient = JSON.parse(gradientString);
                        map.heatmapLayer = new HeatmapOverlay(map.cfg);
                        //map.heatmapLayer.zIndex = 20;
                        //  map.legendHeatmap = L.control({position: 'topright'});
                    }

                    if (!map.legendHeatmap) {
                        map.legendHeatmap = L.control({
                            position: 'topright'
                        });
                    }

                    if (!map.trafficLegendHeatmap) {
                        map.trafficLegendHeatmap = L.control({
                            position: 'bottomleft'
                        });
                    }

                    function changeHeatmapPage(page) {
                        var btn_next = document.getElementById("<?= $_REQUEST['name_w'] ?>_nextButt");
                        var btn_prev = document.getElementById("<?= $_REQUEST['name_w'] ?>_prevButt");
                        var heatmapDescr = document.getElementById(
                            "<?= $_REQUEST['name_w'] ?>_heatMapDescr");

                        // Validate page
                        if (numHeatmapPages() > 1) {
                            if (page < 1) page = 1;
                            if (page > numHeatmapPages()) page = numHeatmapPages();

                            if (current_page == 0) {
                                btn_next.style.visibility = "hidden";
                            } else {
                                btn_next.style.visibility = "visible";
                            }

                            if (current_page == numHeatmapPages() - 1) {
                                btn_prev.style.visibility = "hidden";
                            } else {
                                btn_prev.style.visibility = "visible";
                            }
                        }

                        if (current_page < numHeatmapPages()) {
                            //  $("#heatMapDescr").text(heatmapData[current_page].metadata[0].date);  // OLD-API
                            //    heatmapDescr.text(heatmapData[current_page].metadata.date);
                            //heatmapDescr.firstChild.wholeText = heatmapData[current_page].metadata.date;
                            // heatmapData[current_page].metadata[0].date

                            if (heatmapData[current_page].metadata != null) {
                                heatmapDescr.firstChild.wholeText = heatmapData[current_page].metadata.date;
                            } else {
                                heatmapDescr.firstChild.wholeText = heatmapData[current_page].dateTime;
                            }
                        }
                    }

                    function changeTrafficHeatmapPage(page) {
                        var btn_next = document.getElementById(
                            "<?= $_REQUEST['name_w'] ?>_nextButt_traffic");
                        var btn_prev = document.getElementById(
                            "<?= $_REQUEST['name_w'] ?>_prevButt_traffic");
                        var heatmapDescr = document.getElementById(
                            "<?= $_REQUEST['name_w'] ?>_heatMapDescr_traffic");

                        // Validate page
                        if (numTrafficHeatmapPages() > 1) {
                            if (page < 1) page = 1;
                            if (page > numTrafficHeatmapPages()) page = numTrafficHeatmapPages();

                            if (current_page_traffic == 0) {
                                btn_next.style.visibility = "hidden";
                            } else {
                                btn_next.style.visibility = "visible";
                            }

                            if (current_page_traffic == numTrafficHeatmapPages() - 1) {
                                btn_prev.style.visibility = "hidden";
                            } else {
                                btn_prev.style.visibility = "visible";
                            }
                        }

                        if (current_page_traffic < numTrafficHeatmapPages()) {
                            heatmapDescr.firstChild.wholeText = trafficData[current_page_traffic].dateTime;
                        }
                    }

                    function numHeatmapPages() {
                        //    return Math.ceil(heatmapData.length / records_per_page);
                        return heatmapData.length;
                    }

                    function numTrafficHeatmapPages() {
                        return trafficData.length;
                    }

                    function setOption(option, value, decimals) {
                        if (baseQuery.includes("heatmap.php")) {
                            if (option ==
                                "radius") { // AGGIUNGERE SE FLAG è TRUE SI METTE IL VALORE DI CONFIG
                                if (resetPageFlag) {
                                    if (resetPageFlag === true) {
                                        current_radius = map.cfg['radius'];
                                    } else {
                                        current_radius = Math.max(value, 2);
                                    }
                                } else {
                                    current_radius = Math.max(value, 2);
                                }
                                map.cfg["radius"] = current_radius.toFixed(1);
                                if (decimals) {
                                    $("#<?= $_REQUEST['name_w'] ?>_range" + option).text(parseFloat(
                                        current_radius).toFixed(parseInt(decimals)));
                                    $("#<?= $_REQUEST['name_w'] ?>_slider" + option).attr("value",
                                        parseFloat(current_radius).toFixed(parseInt(decimals)));
                                }
                            } else if (option == "maxOpacity") {
                                if (resetPageFlag) {
                                    if (resetPageFlag === true) {
                                        current_opacity = map.cfg['maxOpacity'];
                                    } else {
                                        current_opacity = value;
                                    }
                                } else {
                                    current_opacity = value;
                                }
                                map.cfg["maxOpacity"] = current_opacity;
                                if (decimals) {
                                    $("#<?= $_REQUEST['name_w'] ?>_range" + option).text(parseFloat(
                                        current_opacity).toFixed(parseInt(decimals)));
                                    $("#<?= $_REQUEST['name_w'] ?>_slider" + option).attr("value",
                                        parseFloat(current_opacity).toFixed(parseInt(decimals)));
                                }
                            }
                            // update the heatmap with the new configuration
                            map.heatmapLayer.configure(map.cfg);
                        } else {
                            decimals = decimals || 2;
                            if (option == "maxOpacity") {
                                if (wmsLayer) {
                                    wmsLayer.setOpacity(value);
                                }
                                current_opacity = value;
                                $("#<?= $_REQUEST['name_w'] ?>_range" + option).text(parseFloat(
                                    current_opacity).toFixed(parseInt(decimals)));
                                $("#<?= $_REQUEST['name_w'] ?>_slider" + option).attr("value",
                                    parseFloat(current_opacity).toFixed(parseInt(decimals)));
                            } else if (option == "maxTrafficOpacity") {
                                if (trafficWmsLayer) {
                                    trafficWmsLayer.setOpacity(value);
                                }
                                current_traffic_opacity = value;
                                $("#<?= $_REQUEST['name_w'] ?>_range" + option).text(parseFloat(
                                    current_traffic_opacity).toFixed(parseInt(decimals)));
                                $("#<?= $_REQUEST['name_w'] ?>_slider" + option).attr("value",
                                    parseFloat(current_traffic_opacity).toFixed(parseInt(decimals)));
                            }
                            if (map.heatmapLayer != null) {
                                map.heatmapLayer.configure(map.cfg);
                            }
                        }
                    }

                    function upSlider(color, step, decimals, max) {
                        let value = $("#<?= $_REQUEST['name_w'] ?>_slider" + color).attr("value");
                        if (parseFloat(parseFloat(value) + parseFloat(step)) <= max) {
                            $("#<?= $_REQUEST['name_w'] ?>_range" + color).text(parseFloat(parseFloat(
                                value) + parseFloat(step)).toFixed(parseInt(decimals)));
                            document.getElementById("<?= $_REQUEST['name_w'] ?>_slider" + color).value =
                                parseFloat(parseFloat(value) + parseFloat(step)).toFixed(parseInt(
                                    decimals));
                            $("#<?= $_REQUEST['name_w'] ?>_slider" + color).trigger('change');
                        }
                    }

                    function downSlider(color, step, decimals, min) {
                        let value = $("#<?= $_REQUEST['name_w'] ?>_slider" + color).attr("value");
                        if (parseFloat(parseFloat(value) - parseFloat(step)) >= min) {
                            $("#<?= $_REQUEST['name_w'] ?>_range" + color).text(parseFloat(parseFloat(
                                value) - parseFloat(step)).toFixed(parseInt(decimals)));
                            document.getElementById("<?= $_REQUEST['name_w'] ?>_slider" + color).value =
                                parseFloat(parseFloat(value) - parseFloat(step)).toFixed(parseInt(
                                    decimals));
                            $("#<?= $_REQUEST['name_w'] ?>_slider" + color).trigger('change');
                        }
                    }

                    function removeHeatmap(resetPageFlag) {
                        if (baseQuery.includes("heatmap.php")) { // OLD HEATMAP
                            if (resetPageFlag == true) {
                                current_page =
                                    0; // CTR SE VA BENE BISOGNA DISTINGUERE IL CASO CHE SI STIA NAVIGANDO LA STESSA HEATMAP_NAME OPPURE UN'ALTRA NUOVA HEATMP_NAME
                                current_radius = null;
                                current_opacity = null;
                                changeRadiusOnZoom = false;
                                estimateRadiusFlag = false;
                                estimatedRadius = null;
                                wmsDatasetName = null;
                            }
                            map.testData = [];
                            map.heatmapLayer.setData({
                                data: []
                            });
                            map.defaultMapRef.removeLayer(map.heatmapLayer);
                            if (resetPageFlag != true) {
                                if (map.cfg["radius"] != current_radius) {
                                    setOption('radius', current_radius, 1);
                                }
                                if (map.cfg["maxOpacity"] != current_opacity) {
                                    setOption('maxOpacity', current_opacity, 2);
                                }
                            }
                            map.defaultMapRef.removeControl(map.legendHeatmap);

                        } else { // NEW WMS HEATMAP
                            if (resetPageFlag == true) {
                                current_page = 0;
                            }
                            if (wmsLayer != null)
                                map.defaultMapRef.removeLayer(wmsLayer);

                            $('#heatmap-info-btn').css('display', 'none');
                            $('#heatmapLegend').remove();
                            switchToFirstActiveInfoMenu();

                            if (is3dOn) {
                                layers.wms = null;
                                updateLayers();
                            }
                        }
                    }

                    function removeHeatmapColorLegend(index, resetPageFlag) {
                        if (baseQuery.includes("heatmap.php")) { // OLD HEATMAP
                            if (resetPageFlag == true) {
                                current_page =
                                    0; // CTR SE VA BENE BISOGNA DISTINGUERE IL CASO CHE SI STIA NAVIGANDO LA STESSA HEATMAP_NAME OPPURE UN'ALTRA NUOVA HEATMP_NAME
                                current_radius = null;
                                current_opacity = null;
                                changeRadiusOnZoom = false;
                                estimateRadiusFlag = false;
                                estimatedRadius = null;
                                wmsDatasetName = null;
                            }
                            map.testData = [];
                            map.heatmapLayer.setData({
                                data: []
                            });
                            map.defaultMapRef.removeLayer(map.heatmapLayer);
                            if (resetPageFlag != true) {
                                if (map.cfg["radius"] != current_radius) {
                                    setOption('radius', current_radius, 1);
                                }
                                if (map.cfg["maxOpacity"] != current_opacity) {
                                    setOption('maxOpacity', current_opacity, 2);
                                }
                            }
                            map.defaultMapRef.removeControl(map.eventsOnMap[index].legendColors);
                        } else { // NEW WMS HEATMAP
                            if (resetPageFlag == true) {
                                current_page = 0;
                            }
                            map.defaultMapRef.removeControl(map.eventsOnMap[index].legendColors);
                            if (wmsLayer != null)
                                map.defaultMapRef.removeLayer(wmsLayer);
                        }
                    }

                    function updateChangeRadiusOnZoom(htmlElement) {
                        if (htmlElement.checked) {
                            changeRadiusOnZoom = true;
                            $("#<?= $_REQUEST['name_w'] ?>_estimateRad").attr('disabled', false);
                        } else {
                            changeRadiusOnZoom = false;
                            $("#<?= $_REQUEST['name_w'] ?>_estimateRad").attr('disabled', true);
                        }
                        //  $("#radiusEstCnt").toggle(htmlElement.checked);
                    }

                    function computeRadiusOnData(htmlElement) {
                        if (htmlElement.checked) {
                            estimateRadiusFlag = true;
                            $("#<?= $_REQUEST['name_w'] ?>_changeRad").attr('disabled', true);
                        } else {
                            estimateRadiusFlag = false;
                            $("#<?= $_REQUEST['name_w'] ?>_changeRad").attr('disabled', false);
                        }
                    }

                    map.legendHeatmap.create = function() {
                        map.legendHeatmapDiv = $('<div id="heatmapLegend"></div>');
                        map.legendHeatmapDiv.css('width', '340px');
                        map.legendHeatmapDiv.css('fontWeight', 'bold');
                        map.legendHeatmapDiv.css('background', 'var(--wdgt-bg-color);');
                        map.legendHeatmapDiv.css('color', 'var(--text-color);');
                        map.legendHeatmapDiv.css('padding', '10px');

                        //categories = ['blue', 'cyan', 'green', 'yellowgreen', 'yellow', 'gold', 'orange', 'darkorange', 'tomato', 'orangered', 'red'];
                        let colors = [];
                        colors['blue'] = '#0000FF';
                        colors['cyan'] = '#00FFFF';
                        colors['green'] = '#008000';
                        colors['yellowgreen'] = '#9ACD32';
                        colors['yellow'] = '#FFFF00';
                        colors['gold'] = '#FFD700';
                        colors['orange'] = '#FFA500';
                        colors['darkorange'] = '#FF8C00';
                        colors['orangered'] = '#FF4500';
                        colors['tomato'] = '#FF6347';
                        colors['red'] = '#FF0000';
                        let colors_value = [];
                        colors_value['blue'] = '#0000FF';
                        colors_value['cyan'] = '#00FFFF';
                        colors_value['green'] = '#008000';
                        colors_value['yellowgreen'] = '#9ACD32';
                        colors_value['yellow'] = '#FFFF00';
                        colors_value['gold'] = '#FFD700';
                        colors_value['orange'] = '#FFA500';
                        colors_value['darkorange'] = '#FF8C00';
                        colors_value['tomato'] = '#FF6347';
                        colors_value['orangered'] = '#FF4500';
                        colors_value['red'] = '#FF0000';
                        //  map.legendHeatmapDiv.innerHTML += '<div class="textTitle" style="text-align:center">' + map.testMetadata.metadata[0].mapName + '</div>';  // OLD-API
                        let innerHTML = '';
                        innerHTML +=
                            '<div class="textTitle" style="text-align:center">' + mapName + '</div>';
                        if (!baseQuery.includes("heatmap.php")) {
                            innerHTML +=
                                '<div id="<?= $_REQUEST['name_w'] ?>_controlsContainer" style="height:20px"><div class="text"  style="width:50%; float:left">' +
                                '<?php echo ucfirst(isset($_REQUEST["profile"]) ? $_REQUEST["profile"] : "Heatmap Controls:"); ?></div><div class="text" style="width:50%; float:right"><label class="switch"><input type="checkbox" id="<?= $_REQUEST['name_w'] ?>_animation"><div class="slider round"><span class="animationOn"></span><span class="animationOff" style="color: black; text-align: right">24H</span><span class="animationOn" style="color: black; text-align: right">Static</span></div></label></div></div>';
                        } else {
                            innerHTML += '<div class="text">' +
                                '<?php echo ucfirst(isset($_REQUEST["profile"]) ? $_REQUEST["profile"] : "Heatmap Controls:"); ?></div>';
                        }
                        //    map.legendHeatmapDiv.innerHTML += '</div>';
                        // radius
                        if (baseQuery.includes("heatmap.php")) { // OLD HEATMAP
                            innerHTML +=
                                '<div id="heatmapRadiusControl" style="margin-top:10px">' +
                                '<div style="display:inline-block; vertical-align:super;">Radius (px):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>' +
                                '<div id= "<?= $_REQUEST['name_w'] ?>_downSlider_radius" style="display:inline-block; vertical-align:super; color: #0078A8">&#10094;</div>&nbsp;&nbsp;&nbsp;' +
                                //  '<input id="<?= $_REQUEST['name_w'] ?>_sliderradius" style="display:inline-block; vertical-align:baseline; width:auto" type="range" min="0" max="0.0010" value="0.0008" step="0.00001">' +
                                //  '<input id="<?= $_REQUEST['name_w'] ?>_sliderradius" style="display:inline-block; vertical-align:baseline; width:auto" type="range" min="1" max="' + estimatedRadius * 20 + '" value="' + current_radius + '" step="' + Math.floor((estimatedRadius * 20)/40) + '">' +
                                '<input id="<?= $_REQUEST['name_w'] ?>_sliderradius" style="display:inline-block; vertical-align:baseline; width:auto" type="range" min="1" max="' +
                                estimatedRadius * 30 + '" value="' + current_radius + '" step="2">' +
                                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<div id="upSlider_radius" style="display:inline-block; vertical-align:super; color: #0078A8">&#10095;</div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' +
                                '<span id="<?= $_REQUEST['name_w'] ?>_rangeradius" style="display:inline-block; vertical-align:super;">' +
                                current_radius + '</span>' +
                                '</div>';
                        }
                        // max opacity
                        innerHTML +=
                            '<div id="heatmapOpacityControl">' +
                            '<div style="display:inline-block; vertical-align:super;">Max Opacity: &nbsp;&nbsp;&nbsp;</div>' +
                            '<div id="<?= $_REQUEST['name_w'] ?>_downSlider_opacity" style="display:inline-block; vertical-align:super; color: #0078A8">&#10094;</div>&nbsp;&nbsp;&nbsp;' +
                            '<input id="<?= $_REQUEST['name_w'] ?>_slidermaxOpacity" style="display:inline-block; vertical-align:baseline; width:auto" type="range" min="0" max="1" value="' +
                            current_opacity + '" step="0.01">' +
                            '&nbsp;&nbsp;&nbsp;<div id="upSlider_opacity" style="display:inline-block;vertical-align:super; color: #0078A8">&#10095;</div>&nbsp;&nbsp;&nbsp;' +
                            '<span id="<?= $_REQUEST['name_w'] ?>_rangemaxOpacity" style="display:inline-block;vertical-align:super;">' +
                            current_opacity + '</span>' +
                            '</div>';

                        // Heatmap Navigation Buttons (prev & next)
                        innerHTML +=
                            '<div id="heatmapNavigationCnt">' +
                            //   '<a href="javascript:prevHeatmapPage()" id="btn_prev">Prev</a>'
                            //   '<a href="javascript:nextHeatmapPage()" id="btn_next">Next</a>'
                            //   '<a onClick="javascript:prevHeatmapPage()" id="btn_prev">Prev</a>'
                            //   '<a onClick="javascript:nextHeatmapPage()" id="btn_next">Next</a>'
                            '<input type="button" id="<?= $_REQUEST['name_w'] ?>_prevButt" value="< Prev" style="float: left"/>' +
                            '<input type="button" id="<?= $_REQUEST['name_w'] ?>_nextButt" value="Next >" style="float: right"/>' +
                            //  '<div id="heatMapDescr" style="text-align: center">' + map.testMetadata.metadata[0].date + '</p>' +   // OLD-API
                            '<div id="<?= $_REQUEST['name_w'] ?>_heatMapDescr" style="text-align: center">' +
                            mapDate + '</p>' +
                            //  '<a href="#" id="prevHeatmapPage">&lt; Prev</a>'
                            //  '<a href="#" id="nextHeatmapPage">Next &gt;</a>'
                            '</div>';
                        if (baseQuery.includes("heatmap.php")) { // OLD HEATMAP
                            innerHTML +=
                                '<div id="radiusCnt">' +
                                // '<input type="checkbox" name="checkfield" id="g01-01" onchange="updateChangeRadiusOnZoom(this)"/> Change Radius on Zoom' +
                                '<input type="checkbox" name="checkfield" id="<?= $_REQUEST['name_w'] ?>_changeRad"/> Change Radius on Zoom' +
                                '</div>';
                            innerHTML +=
                                '<div id="radiusEstCnt"">' +
                                // '<input type="checkbox" name="checkfield" id="g01-01" onchange="updateChangeRadiusOnZoom(this)"/> Change Radius on Zoom' +
                                '<input type="checkbox" name="checkfield" id="<?= $_REQUEST['name_w'] ?>_estimateRad" disabled="true"/> Estimate Radius Based on Data' +
                                '</div>';
                        }

                        function checkLegend() {
                            /*   if(document.getElementById("<?= $_REQUEST['name_w'] ?>_downSlider_radius") == null){
                                setTimeout(checkLegend, 500);
                            }
                            else{   */
                            if (baseQuery.includes("heatmap.php")) { // OLD HEATMAP
                                document.getElementById("<?= $_REQUEST['name_w'] ?>_sliderradius")
                                    .addEventListener("input", function() {
                                        setOption('radius', this.value, 1)
                                    }, false);
                            }

                            //document.getElementById("<?= $_REQUEST['name_w'] ?>_downSlider_opacity").addEventListener("click", function(){ downSlider('maxOpacity', 0.1, 2, 0)}, false);
                            document.getElementById("<?= $_REQUEST['name_w'] ?>_slidermaxOpacity")
                                .addEventListener("input", function() {
                                    setOption('maxOpacity', this.value, 2);
                                    //deckgl
                                    if (is3dOn) {
                                        const opacity = parseFloat(this.value);
                                        if (gifWms.isAnimated == true) {
                                            gifWms.opacity = opacity;
                                            layers.wms = new deck.BimapLayer({
                                                ...layers.wms.props,
                                                opacity
                                            });
                                        } else {
                                            layers.wms = createHeatmapLayer({
                                                ...layers.wms.props,
                                                opacity
                                            });
                                        }
                                        updateLayers();
                                    }
                                }, false);
                            //document.getElementById("<?= $_REQUEST['name_w'] ?>_rangemaxOpacity").addEventListener("click", function(){ upSlider('maxOpacity', 0.01, 2, 0.8)}, false);

                            if (!baseQuery.includes("heatmap.php")) {
                                document.getElementById("<?= $_REQUEST['name_w'] ?>_animation")
                                    .addEventListener("click", function() {
                                        animateHeatmap()
                                    }, false);
                            }
                            document.getElementById("<?= $_REQUEST['name_w'] ?>_prevButt")
                                .addEventListener("click", function() {
                                    if (animationFlag)
                                        animateHeatmap()
                                    prevHeatmapPage()
                                }, false);
                            document.getElementById("<?= $_REQUEST['name_w'] ?>_nextButt")
                                .addEventListener("click", function() {
                                    if (animationFlag)
                                        animateHeatmap()
                                    nextHeatmapPage()
                                }, false);

                            if (baseQuery.includes("heatmap.php")) { // OLD HEATMAP
                                document.getElementById("<?= $_REQUEST['name_w'] ?>_changeRad")
                                    .addEventListener("change", function() {
                                        updateChangeRadiusOnZoom(this)
                                    }, false);
                                document.getElementById("<?= $_REQUEST['name_w'] ?>_estimateRad")
                                    .addEventListener("change", function() {
                                        computeRadiusOnData(this)
                                    }, false);
                            }

                            if (current_page == 0) {
                                document.getElementById("<?= $_REQUEST['name_w'] ?>_nextButt").style
                                    .visibility = "hidden";
                            } else {
                                document.getElementById("<?= $_REQUEST['name_w'] ?>_nextButt").style
                                    .visibility = "visible";
                            }

                            if (current_page == numHeatmapPages() - 1) {
                                document.getElementById("<?= $_REQUEST['name_w'] ?>_prevButt").style
                                    .visibility = "hidden";
                            } else {
                                document.getElementById("<?= $_REQUEST['name_w'] ?>_prevButt").style
                                    .visibility = "visible";
                            }
                            //    }
                        }
                        setTimeout(checkLegend, 500);
                        map.legendHeatmapDiv.html(innerHTML);
                        $('#deck-info-content').append(map.legendHeatmapDiv);
                        return map.legendHeatmapDiv;
                    };

                    // INIZIO TRAFFICFLOWMANAGER GESTIONE LEGENDA + SLIDER OPACITA', PAGINE E ANIMAZIONE
                    map.trafficLegendHeatmap.create = function() {
                        map.trafficLegendHeatmapDiv = $('<div id="trafficHeatmapLegend"></div>');
                        // map.trafficLegendHeatmapDiv.id = "trafficHeatmapLegend";
                        // map.trafficLegendHeatmapDiv = L.DomUtil.create('div');
                        // map.trafficLegendHeatmapDiv.id = "trafficHeatmapLegend";
                        // if (L.Browser.touch) {
                        //     L.DomEvent.disableClickPropagation(map.trafficLegendHeatmapDiv);
                        //     L.DomEvent.on(map.trafficLegendHeatmapDiv, 'mousewheel', L.DomEvent
                        //         .stopPropagation);
                        // } else {
                        //     L.DomEvent.on(map.trafficLegendHeatmapDiv, 'click', L.DomEvent
                        //         .stopPropagation);
                        // }
                        map.trafficLegendHeatmapDiv.css('width', '340px');
                        map.trafficLegendHeatmapDiv.css('fontWeight', 'bold');
                        map.trafficLegendHeatmapDiv.css('background', 'var(--wdgt-bg-color);');
                        map.trafficLegendHeatmapDiv.css('color', 'var(--text-color);');
                        map.trafficLegendHeatmapDiv.css('padding', '10px');

                        let colors = [];
                        colors['blue'] = '#0000FF';
                        colors['cyan'] = '#00FFFF';
                        colors['green'] = '#008000';
                        colors['yellowgreen'] = '#9ACD32';
                        colors['yellow'] = '#FFFF00';
                        colors['gold'] = '#FFD700';
                        colors['orange'] = '#FFA500';
                        colors['darkorange'] = '#FF8C00';
                        colors['orangered'] = '#FF4500';
                        colors['tomato'] = '#FF6347';
                        colors['red'] = '#FF0000';
                        let colors_value = [];
                        colors_value['blue'] = '#0000FF';
                        colors_value['cyan'] = '#00FFFF';
                        colors_value['green'] = '#008000';
                        colors_value['yellowgreen'] = '#9ACD32';
                        colors_value['yellow'] = '#FFFF00';
                        colors_value['gold'] = '#FFD700';
                        colors_value['orange'] = '#FFA500';
                        colors_value['darkorange'] = '#FF8C00';
                        colors_value['tomato'] = '#FF6347';
                        colors_value['orangered'] = '#FF4500';
                        colors_value['red'] = '#FF0000';
                        let innerHTML = '';
                        innerHTML +=
                            '<div class="textTitle" style="text-align:center">' + trafficMapName +
                            '</div>';
                        innerHTML +=
                            '<div id="<?= $_REQUEST['name_w'] ?>_controlsContainer" style="height:20px"><div class="text"  style="width:50%; float:left">' +
                            '<?php echo ucfirst(isset($_REQUEST["profile"]) ? $_REQUEST["profile"] : "Traffic Controls:"); ?></div><div class="text" style="width:50%; float:right"><label class="switch"><input type="checkbox" id="<?= $_REQUEST['name_w'] ?>_animation_traffic"><div class="slider round"><span class="animationOn"></span><span class="animationOff" style="color: black; text-align: right">24H</span><span class="animationOn" style="color: black; text-align: right">Static</span></div></label></div></div>';

                        // max opacity
                        innerHTML +=
                            '<div id="trafficHeatmapOpacityControl">' +
                            '<div style="display:inline-block; vertical-align:super;">Max Opacity: &nbsp;&nbsp;&nbsp;</div>' +
                            '<div id="<?= $_REQUEST['name_w'] ?>_downSlider_opacity_traffic" style="display:inline-block; vertical-align:super; color: #0078A8">&#10094;</div>&nbsp;&nbsp;&nbsp;' +
                            '<input id="<?= $_REQUEST['name_w'] ?>_slidermaxTrafficOpacity" style="display:inline-block; vertical-align:baseline; width:auto" type="range" min="0" max="1" value="' +
                            current_traffic_opacity + '" step="0.01">' +
                            '&nbsp;&nbsp;&nbsp;<div id="upSlider_opacity_traffic" style="display:inline-block;vertical-align:super; color: #0078A8">&#10095;</div>&nbsp;&nbsp;&nbsp;' +
                            '<span id="<?= $_REQUEST['name_w'] ?>_rangemaxTrafficOpacity" style="display:inline-block;vertical-align:super;">' +
                            current_traffic_opacity + '</span>' +
                            '</div>';

                        // Traffic Heatmap Navigation Buttons (prev & next)
                        innerHTML +=
                            '<div id="heatmapNavigationCnt_traffic">' +
                            '<input type="button" id="<?= $_REQUEST['name_w'] ?>_prevButt_traffic" value="< Prev" style="float: left"/>' +
                            '<input type="button" id="<?= $_REQUEST['name_w'] ?>_nextButt_traffic" value="Next >" style="float: right"/>' +
                            '<div id="<?= $_REQUEST['name_w'] ?>_heatMapDescr_traffic" style="text-align: center">' +
                            trafficMapDate + '</p>' +
                            '</div>';

                        function checkLegend() {
                            document.getElementById(
                                    "<?= $_REQUEST['name_w'] ?>_slidermaxTrafficOpacity")
                                .addEventListener("input", function() {
                                    setOption('maxTrafficOpacity', this.value, 2);
                                    if (is3dOn) {
                                        const opacity = parseFloat(this.value);
                                        if (gifWmsTraffic.isAnimated == true) {
                                            const oldProps = layers.trafficWms.props;
                                            gifWmsTraffic.opacity = opacity;
                                            const id = oldProps.id;
                                            const image = oldProps.image;
                                            const bounds = oldProps.bounds;
                                            layers.trafficWms = createImageLayer(image, bounds, id,
                                                opacity);
                                        } else {
                                            layers.trafficWms = createHeatmapLayer({
                                                ...layers.trafficWms.props,
                                                opacity
                                            });
                                        }
                                        updateLayers();
                                    }
                                }, false);
                            document.getElementById("<?= $_REQUEST['name_w'] ?>_animation_traffic")
                                .addEventListener("click", function() {
                                    animateTrafficHeatmap()
                                }, false);
                            document.getElementById("<?= $_REQUEST['name_w'] ?>_prevButt_traffic")
                                .addEventListener("click", function() {
                                    if (animationFlagTraffic)
                                        animateTrafficHeatmap()
                                    prevTrafficHeatmapPage()
                                }, false);
                            document.getElementById("<?= $_REQUEST['name_w'] ?>_nextButt_traffic")
                                .addEventListener("click", function() {
                                    if (animationFlagTraffic)
                                        animateTrafficHeatmap()
                                    nextTrafficHeatmapPage()
                                }, false);

                            if (current_page_traffic == 0) {
                                document.getElementById("<?= $_REQUEST['name_w'] ?>_nextButt_traffic")
                                    .style.visibility = "hidden";
                            } else {
                                document.getElementById("<?= $_REQUEST['name_w'] ?>_nextButt_traffic")
                                    .style.visibility = "visible";
                            }

                            if (current_page_traffic == numTrafficHeatmapPages() - 1) {
                                document.getElementById("<?= $_REQUEST['name_w'] ?>_prevButt_traffic")
                                    .style.visibility = "hidden";
                            } else {
                                document.getElementById("<?= $_REQUEST['name_w'] ?>_prevButt_traffic")
                                    .style.visibility = "visible";
                            }
                        }
                        setTimeout(checkLegend, 500);
                        map.trafficLegendHeatmapDiv.html(innerHTML);
                        $('#deck-info-content').append(map.trafficLegendHeatmapDiv);
                        return map.trafficLegendHeatmapDiv;
                    };

                    function removeTrafficHeatmap(index, isAnimated) {
                        if (isAnimated) {
                            map.defaultMapRef.removeLayer(map.eventsOnMap[index]);
                        } else {
                            map.defaultMapRef.removeLayer(trafficWmsLayer);
                        }

                        $('#traffic-info-btn').css('display', 'none');
                        $('#trafficHeatmapLegend').remove();
                        switchToFirstActiveInfoMenu();
                        // map.defaultMapRef.removeControl(map.trafficLegendHeatmap);
                        map.defaultMapRef.removeControl(map.eventsOnMap[index + 1].legendColors);
                        map.eventsOnMap.splice(index, 2);
                    }

                    function nextTrafficHeatmapPage() {
                        const wasAnimated = animationFlagTraffic;
                        animationFlagTraffic = false;
                        if (current_page_traffic > 0) {
                            current_page_traffic--;
                            changeTrafficHeatmapPage(current_page_traffic);
                            for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                                if (wasAnimated == true && map.eventsOnMap[i].type == "addHeatmap") {
                                    map.defaultMapRef.removeControl(map.trafficLegendHeatmap);
                                    map.defaultMapRef.removeControl(map.eventsOnMap[i].legendColors);
                                    map.eventsOnMap.splice(i, 1);
                                } else if (map.eventsOnMap[i].eventType === 'traffic_heatmap') {
                                    event = map.eventsOnMap[i +
                                        1
                                    ]; // aggiorna evento corretto in caso di più heatmap presenti sulla mappa
                                    removeTrafficHeatmap(i, false)
                                    break;
                                }
                            }
                            if (is3dOn) {
                                gifWmsTraffic.isAniamted = false;
                                layers.trafficWms = null;
                                updateLayers();
                            }
                            addHeatmapFromClient(false);
                        }
                    }

                    function prevTrafficHeatmapPage() {
                        const wasAnimated = animationFlagTraffic;
                        animationFlagTraffic = false;
                        if (current_page_traffic < numTrafficHeatmapPages() - 1) {
                            current_page_traffic++;
                            changeTrafficHeatmapPage(current_page_traffic);
                            for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                                if (wasAnimated == true && map.eventsOnMap[i].type == "addHeatmap") {
                                    map.defaultMapRef.removeControl(map.trafficLegendHeatmap);
                                    map.defaultMapRef.removeControl(map.eventsOnMap[i].legendColors);
                                    map.eventsOnMap.splice(i, 1);
                                } else if (map.eventsOnMap[i].eventType === 'traffic_heatmap') {
                                    event = map.eventsOnMap[i +
                                        1
                                    ] // aggiorna evento corretto in caso di più heatmap presenti sulla mappa
                                    removeTrafficHeatmap(i, false)
                                    break;
                                }
                            }
                            if (is3dOn) {
                                gifWmsTraffic.isAniamted = false;
                                layers.trafficWms = null;
                                updateLayers();
                            }
                            addHeatmapFromClient(false);
                        }
                    }

                    function animateTrafficHeatmap() {
                        for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                            if (map.eventsOnMap[i].eventType === 'traffic_heatmap') {
                                event = map.eventsOnMap[i +
                                    1
                                ] // aggiorna evento corretto in caso di più heatmap presenti sulla mappa
                                removeTrafficHeatmap(i, false)
                                break;
                            } else if (map.eventsOnMap[i]._url && map.eventsOnMap[i]._url.includes(
                                    "animate") && map.eventsOnMap[i].options.pane.includes(
                                    "TrafficFlowManager")) {
                                event = map.eventsOnMap[i +
                                    1
                                ] // aggiorna evento corretto in caso di più heatmap presenti sulla mappa
                                removeTrafficHeatmap(i, true)
                                break;
                            }
                        }
                        if (!animationFlagTraffic) {
                            animationFlagTraffic = true;
                            addHeatmapFromClient(animationFlagTraffic);
                        } else {
                            animationFlagTraffic = false;
                            addHeatmapFromClient(animationFlagTraffic);
                        }
                    }
                    // FINE TRAFFICFLOWMANAGER GESTIONE LEGENDA + SLIDER OPACITA', PAGINE E ANIMAZIONE

                    function nextHeatmapPage() {
                        animationFlag = false;
                        if (current_page > 0) {
                            current_page--;
                            changeHeatmapPage(current_page);

                            for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                                // logica per evitare di rimuovere layer di trafficflowmanager
                                if (i > 0 && map.eventsOnMap[i - 1].eventType === 'traffic_heatmap') {
                                    continue
                                } else if (map.eventsOnMap[i].eventType === 'traffic_heatmap') {
                                    continue
                                } else if (i > 0 && map.eventsOnMap[i - 1]._url && map.eventsOnMap[i - 1]
                                    ._url.includes("animate") && map.eventsOnMap[i - 1].options.pane
                                    .includes("TrafficFlowManager")) {
                                    continue
                                } else if (map.eventsOnMap[i]._url && map.eventsOnMap[i]._url.includes(
                                        "animate") && map.eventsOnMap[i].options.pane.includes(
                                        "TrafficFlowManager")) {
                                    continue
                                }
                                if (map.eventsOnMap[i].eventType === 'heatmap') {
                                    removeHeatmap(false);
                                    map.eventsOnMap.splice(i, 1);
                                } else if (map.eventsOnMap[i].type === 'addHeatmap') {
                                    event = map.eventsOnMap[
                                        i] // aggiorna evento corretto in caso di più heatmap
                                    removeHeatmapColorLegend(i, false);
                                    map.eventsOnMap.splice(i, 1);
                                } else if (map.eventsOnMap[i] !== null && map.eventsOnMap[i] !==
                                    undefined) {
                                    if (map.eventsOnMap[i].eventType != 'trafficRealTimeDetails') {
                                        map.defaultMapRef.removeLayer(map.eventsOnMap[i]);
                                        map.eventsOnMap.splice(i, 1);
                                    }
                                    /*  map.defaultMapRef.removeLayer(map.eventsOnMap[i]);
                                      map.eventsOnMap.splice(i, 1);*/
                                }
                            }

                            if (addMode === 'additive') {
                                //   if (baseQuery.includes("heatmap.php")) {
                                // addHeatmapToMap();
                                addHeatmapFromClient(false);
                                /*   } else {
                                       // addHeatmapFromWMSClient();        // TBD
                                   }*/
                            }
                            if (addMode === 'exclusive') {
                                map.defaultMapRef.eachLayer(function(layer) {
                                    map.defaultMapRef.removeLayer(layer);
                                });
                                map.eventsOnMap.length = 0;

                                //Remove WidgetAlarm active pins
                                $.event.trigger({
                                    type: "removeAlarmPin",
                                });
                                //Remove WidgetEvacuationPlans active pins
                                $.event.trigger({
                                    type: "removeEvacuationPlanPin",
                                });
                                //Remove WidgetEvents active pins
                                $.event.trigger({
                                    type: "removeEventFIPin",
                                });
                                //Remove WidgetResources active pins
                                $.event.trigger({
                                    type: "removeResourcePin",
                                });
                                //Remove WidgetOperatorEvents active pins
                                $.event.trigger({
                                    type: "removeOperatorEventPin",
                                });
                                //Remove WidgetTrafficEvents active pins
                                $.event.trigger({
                                    type: "removeTrafficEventPin",
                                });
                                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                    attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                                    maxZoom: 18
                                }).addTo(map.defaultMapRef);

                                addHeatmapFromClient(false);
                            }

                        }
                    }

                    function animateHeatmap() {
                        animationOn = !animationOn;
                        for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                            // logica per evitare di rimuovere layer di trafficflowmanager
                            if (i > 0 && map.eventsOnMap[i - 1].eventType === 'traffic_heatmap') {
                                continue
                            } else if (map.eventsOnMap[i].eventType === 'traffic_heatmap') {
                                continue
                            } else if (i > 0 && map.eventsOnMap[i - 1]._url && map.eventsOnMap[i - 1]._url
                                .includes("animate") && map.eventsOnMap[i - 1].options.pane.includes(
                                    "TrafficFlowManager")) {
                                continue
                            } else if (map.eventsOnMap[i]._url && map.eventsOnMap[i]._url.includes(
                                    "animate") && map.eventsOnMap[i].options.pane.includes(
                                    "TrafficFlowManager")) {
                                continue
                            }
                            if (map.eventsOnMap[i].eventType === 'heatmap') {
                                removeHeatmap(false);
                                map.eventsOnMap.splice(i, 1);
                            } else if (map.eventsOnMap[i].type === 'addHeatmap') {
                                event = map.eventsOnMap[
                                    i]; // aggiorna evento corretto in caso di più heatmap	
                                removeHeatmapColorLegend(i, false);
                                map.eventsOnMap.splice(i, 1);
                            } else if (map.eventsOnMap[i] !== null && map.eventsOnMap[i] !== undefined) {
                                if (map.eventsOnMap[i].eventType != 'trafficRealTimeDetails') {
                                    map.defaultMapRef.removeLayer(map.eventsOnMap[i]);
                                    map.eventsOnMap.splice(i, 1);
                                }
                            }
                        }
                        if (animationFlag === false) {
                            animationFlag = true;
                            addHeatmapFromClient(animationFlag);
                        } else {
                            animationFlag = false;
                            removeHeatmap(false);
                            for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                                if (map.eventsOnMap[i].eventType === 'heatmap') {
                                    removeHeatmap(false);
                                    //    removeHeatmapColorLegend(i, false);
                                    map.eventsOnMap.splice(i, 1);
                                }
                                /*else if (map.eventsOnMap[i].type === 'addHeatmap') {
                                                                               removeHeatmapColorLegend(i, false);
                                                                               map.eventsOnMap.splice(i, 1);
                                                                           }*/
                            }
                            addHeatmapFromClient(animationFlag);
                        }
                    }

                    //   window.nextHeatmapPage = function()
                    function prevHeatmapPage() {
                        animationFlag = false;
                        if (current_page < numHeatmapPages() - 1) {
                            current_page++;
                            changeHeatmapPage(current_page);

                            for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                                // logica per evitare di rimuovere layer di trafficflowmanager
                                if (i > 0 && map.eventsOnMap[i - 1].eventType === 'traffic_heatmap') {
                                    continue
                                } else if (map.eventsOnMap[i].eventType === 'traffic_heatmap') {
                                    continue
                                } else if (i > 0 && map.eventsOnMap[i - 1]._url && map.eventsOnMap[i - 1]
                                    ._url.includes("animate") && map.eventsOnMap[i - 1].options.pane
                                    .includes("TrafficFlowManager")) {
                                    continue
                                } else if (map.eventsOnMap[i]._url && map.eventsOnMap[i]._url.includes(
                                        "animate") && map.eventsOnMap[i].options.pane.includes(
                                        "TrafficFlowManager")) {
                                    continue
                                }
                                if (map.eventsOnMap[i].eventType === 'heatmap') {
                                    removeHeatmap(false);
                                    map.eventsOnMap.splice(i, 1);
                                } else if (map.eventsOnMap[i].type === 'addHeatmap') {
                                    event = map.eventsOnMap[
                                        i]; // aggiorna evento corretto in caso di più heatmap
                                    removeHeatmapColorLegend(i, false);
                                    map.eventsOnMap.splice(i, 1);
                                } else if (map.eventsOnMap[i] !== null && map.eventsOnMap[i] !==
                                    undefined) {
                                    if (map.eventsOnMap[i].eventType != 'trafficRealTimeDetails') {
                                        map.defaultMapRef.removeLayer(map.eventsOnMap[i]);
                                        map.eventsOnMap.splice(i, 1);
                                    }
                                    /*   map.defaultMapRef.removeLayer(map.eventsOnMap[i]);
                                       map.eventsOnMap.splice(i, 1);*/
                                }
                            }

                            if (addMode === 'additive') {
                                //   if (baseQuery.includes("heatmap.php")) {
                                // addHeatmapToMap();
                                addHeatmapFromClient(false);
                                /*   } else {
                                      // addHeatmapFromWMSClient();        // TBD
                                   }*/
                            }
                            if (addMode === 'exclusive') {
                                map.defaultMapRef.eachLayer(function(layer) {
                                    map.defaultMapRef.removeLayer(layer);
                                });
                                map.eventsOnMap.length = 0;

                                //Remove WidgetAlarm active pins
                                $.event.trigger({
                                    type: "removeAlarmPin",
                                });
                                //Remove WidgetEvacuationPlans active pins
                                $.event.trigger({
                                    type: "removeEvacuationPlanPin",
                                });
                                //Remove WidgetEvents active pins
                                $.event.trigger({
                                    type: "removeEventFIPin",
                                });
                                //Remove WidgetResources active pins
                                $.event.trigger({
                                    type: "removeResourcePin",
                                });
                                //Remove WidgetOperatorEvents active pins
                                $.event.trigger({
                                    type: "removeOperatorEventPin",
                                });
                                //Remove WidgetTrafficEvents active pins
                                $.event.trigger({
                                    type: "removeTrafficEventPin",
                                });
                                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                    attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                                    maxZoom: 18
                                }).addTo(map.defaultMapRef);

                                addHeatmapFromClient(false);
                            }

                        }
                    }

                    function prepareCustomMarkerForPointAndClick(dataObj, color1, color2) {
                        var latLngId = dataObj.latitude + "" + dataObj.longitude;
                        latLngId = latLngId.replace(".", "");
                        latLngId = latLngId.replace(".",
                            ""); //Incomprensibile il motivo ma con l'espressione regolare /./g non funziona

                        var popupText = '<h3 class="recreativeEventMapTitle" style="background: ' + color1 +
                            '; background: -webkit-linear-gradient(right, ' + color1 + ', ' + color2 +
                            '); background: -o-linear-gradient(right, ' + color1 + ', ' + color2 +
                            '); background: -moz-linear-gradient(right, ' + color1 + ', ' + color2 +
                            '); background: linear-gradient(to right, ' + color1 + ', ' + color2 +
                            '); text-transform: none;">' + dataObj.mapName + '</h3>';
                        /*    if((serviceProperties.serviceUri !== '')&&(serviceProperties.serviceUri !== undefined)&&(serviceProperties.serviceUri !== 'undefined')&&(serviceProperties.serviceUri !== null)&&(serviceProperties.serviceUri !== 'null')) {
                                popupText += '<div class="recreativeEventMapSubTitle" style="background: ' + color1 + '; background: -webkit-linear-gradient(right, ' + color1 + ', ' + color2 + '); background: -o-linear-gradient(right, ' + color1 + ', ' + color2 + '); background: -moz-linear-gradient(right, ' + color1 + ', ' + color2 + '); background: linear-gradient(to right, ' + color1 + ', ' + color2 + ');">' + "Value Name: " + serviceProperties.serviceUri.split("/")[serviceProperties.serviceUri.split("/").length - 1] + '</div>';
                              //  popupText += '<div class="recreativeEventMapSubTitle">' + "Value Name: " + serviceProperties.serviceUri.split("/")[serviceProperties.serviceUri.split("/").length - 1] + '</div>';
                            }*/
                        popupText += '<div class="recreativeEventMapBtnContainer"><span data-id="' +
                            latLngId +
                            '" class="recreativeEventMapDetailsBtn recreativeEventMapBtn recreativeEventMapBtnActive" style="background: ' +
                            color1 + '; background: -webkit-linear-gradient(right, ' + color1 + ', ' +
                            color2 + '); background: -o-linear-gradient(right, ' + color1 + ', ' + color2 +
                            '); background: -moz-linear-gradient(right, ' + color1 + ', ' + color2 +
                            '); background: linear-gradient(to right, ' + color1 + ', ' + color2 +
                            ');">Heatmap Details</span></div>';

                        popupText += '';

                        popupText += '<table id="' + latLngId +
                            '" class="gisPopupGeneralDataTable" style="width:90%">';
                        //Intestazione
                        popupText += '<thead>';
                        popupText += '<th style="background: ' + color2 + '">Description</th>';
                        popupText += '<th style="background: ' + color2 + '">Value</th>';
                        popupText += '</thead>';

                        //Corpo
                        popupText += '<tbody>';

                        //    var myKPIFromTimeRangeUTC = new Date(myKPIFromTimeRange).toUTCString();
                        //    var myKPIFromTimeRangeISO = new Date(myKPIFromTimeRangeUTC).toISOString();
                        //    var myKPIFromTimeRangeISOTrimmed = myKPIFromTimeRangeISO.substring(0, isoDate.length - 8);

                        var dateTime = new Date(dataObj.dataTime); // Milliseconds to date
                        dateTime = dateTime.getDate() + "\/" + parseInt(dateTime.getMonth() + 1) + "\/" +
                            dateTime.getFullYear() + " " + dateTime.getHours() + ":" + dateTime
                            .getMinutes() + ":" + dateTime.getSeconds();

                        popupText +=
                            '<tr><td style="text-align:left; font-size: 12px;">Date & Time:</td><td style="font-size: 12px;">' +
                            dateTime + '</td></tr>';
                        popupText +=
                            '<tr><td style="text-align:left; font-size: 12px;">Metric Name:</td><td style="font-size: 12px;">' +
                            dataObj.metricName + '</td></tr>';
                        popupText +=
                            '<tr><td style="text-align:left; font-size: 12px;">Heatmap Value:</td><td style="font-size: 12px;">' +
                            dataObj.value + '</td></tr>';
                        popupText +=
                            '<tr><td style="text-align:left; font-size: 12px;">Coordinates:</td><td style="font-size: 12px;">' +
                            dataObj.latitude + ', ' + dataObj.longitude + '</td></tr>';

                        return popupText;
                    }

                    // TODO: move to map2d
                    map.defaultMapRef.on('click', heatmapClick = function(e) {
                        if (map.testMetadata != null) {
                            //    if (map.testMetadata.metadata.file != 1) {
                            var heatmapPointAndClickData = null;
                            //  alert("Click on Map !");
                            var pointAndClickCoord = e.latlng;
                            var pointAndClickLat = pointAndClickCoord.lat.toFixed(5);
                            var pointAndClickLng = pointAndClickCoord.lng.toFixed(5);
                            //        var pointAndClickApiUrl = "https://heatmap.snap4city.org/interp.php?latitude=" + pointAndClickLat + "&longitude=" + pointAndClickLng + "&dataset=" + map.testMetadata.metadata.mapName + "&date=" + map.testMetadata.metadata.date;
                            var pointAndClickApiUrl = heatmapUrl + "interp.php?latitude=" +
                                pointAndClickLat + "&longitude=" + pointAndClickLng + "&dataset=" +
                                map.testMetadata.metadata.mapName + "&date=" + map.testMetadata
                                .metadata.date;
                            $.ajax({
                                url: pointAndClickApiUrl,
                                async: true,
                                success: function(heatmapPointAndClickData) {
                                    var popupData = {};
                                    popupData.mapName = heatmapPointAndClickData
                                        .mapName;
                                    popupData.latitude = pointAndClickLat;
                                    popupData.longitude = pointAndClickLng;
                                    popupData.metricName = heatmapPointAndClickData
                                        .metricName;
                                    popupData.dataTime = heatmapPointAndClickData.date;
                                    if (heatmapPointAndClickData.value) {
                                        popupData.value = heatmapPointAndClickData.value
                                            .toFixed(5);
                                        var customPointAndClickContent =
                                            prepareCustomMarkerForPointAndClick(
                                                popupData, "#C2D6D6", "#D1E0E0")
                                        //   var pointAndClickPopup = L.popup(customPointAndClickMarker).openOn(map.defaultMapRef);
                                        var popup = L.popup()
                                            .setLatLng(pointAndClickCoord)
                                            .setContent(customPointAndClickContent)
                                            .openOn(map.defaultMapRef);
                                    }
                                },
                                error: function(errorData) {
                                    console.log("Ko Point&Click Heatmap API");
                                    console.log(JSON.stringify(errorData));
                                }
                            });
                            //    }
                        }
                    });

                    map.defaultMapRef.on('zoomend', function(ev) {
                        if (prevZoom === null) {
                            prevZoom = widgetParameters.zoom;
                        }
                        // zoom level changed... adjust heatmap layer options!
                        if (changeRadiusOnZoom === true) {

                            if (baseQuery.includes("heatmap.php")) { // OLD HEATMAP
                                // INSERIRE CAMBIO SLIDER ZOOM
                                document.getElementById("<?= $_REQUEST['name_w'] ?>_sliderradius")
                                    .value = parseFloat(getRadius()).toFixed(1);
                                setOption('radius', getRadius(), 1); // MODALITA HEATMAP ON ZOOM
                            }
                        } else {
                            setOption('radius', current_radius, 1);
                        }
                    });


                    function addHeatmapToMap() {
                        animationFlag = false;
                        animationFlagTraffic = false;
                        /** @type {LoadingDiv} */
                        var loadingDiv;
                        //    current_page = 0;
                        try {
                            if (!event.passedData.includes("heatmap.php")) {
                                passedParams = event.passedParams;

                                var color1 = passedParams.color1;
                                var color2 = passedParams.color2;
                                var desc = passedParams.desc;

                                loadingDiv = new LoadingDiv({
                                    text: desc,
                                    color1,
                                    color2
                                });
                            } else {
                                loadingDiv = new LoadingDiv({
                                    text: 'uknown heatmap',
                                });

                            }
                            const isAddingTrafficHeatmap = (event.passedData.includes(geoServerUrl) && event
                                .passedData.includes("trafficflowmanager=true"));
                            if (map.eventsOnMap.length > 0) {
                                const normalHeatmapPresent = map.eventsOnMap.some(event => (event
                                    .eventType === 'heatmap' || (event._url && event._url.includes(
                                        "animate") && !event.options.pane.includes(
                                        "TrafficFlowManager"))))
                                for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                                    // logica additività trafficflowmanager
                                    // non rimuovere layer dalla mappa se:
                                    // 1. sto aggiungendo una heatmap normale e sulla mappa è presente una traffic heatmap, oppure
                                    // 2. sto aggiungendo una traffic heatmap e sulla mappa è presente una heatmap normale
                                    if (!isAddingTrafficHeatmap && !normalHeatmapPresent) {
                                        // in questo caso non devo rimuovere nulla
                                        break;
                                    } else if (isAddingTrafficHeatmap && normalHeatmapPresent) {
                                        // in questo caso devo solo rimuovere la traffic heatmap corrente
                                        if (map.eventsOnMap[i].eventType === 'traffic_heatmap') {
                                            removeTrafficHeatmap(i, false)
                                            current_page_traffic = 0;
                                            break;
                                        } else if (map.eventsOnMap[i]._url && map.eventsOnMap[i]._url
                                            .includes("animate") && map.eventsOnMap[i].options.pane
                                            .includes("TrafficFlowManager")) {
                                            removeTrafficHeatmap(i, true)
                                            current_page_traffic = 0;
                                            break;
                                        }
                                        continue;
                                    }

                                    if (isAddingTrafficHeatmap) {
                                        // se sto aggiungendo una traffic heatmap e già ce n'è una sulla mappa, rimuovo la traffic heatmap corrente
                                        if (i > 0 && map.eventsOnMap[i - 1].eventType ===
                                            'traffic_heatmap') {
                                            removeTrafficHeatmap(i - 1, false)
                                            current_page_traffic = 0;
                                            break;
                                        } else if (i > 0 && map.eventsOnMap[i - 1]._url && map.eventsOnMap[
                                                i - 1]._url.includes("animate") && map.eventsOnMap[i - 1]
                                            .options.pane.includes("TrafficFlowManager")) {
                                            removeTrafficHeatmap(i - 1, true)
                                            current_page_traffic = 0;
                                            break;
                                        }
                                    } else if (i > 0 && map.eventsOnMap[i - 1].eventType ===
                                        'traffic_heatmap') {
                                        // logica per evitare di rimuovere layer di trafficflowmanager
                                    } else if (map.eventsOnMap[i]._url && map.eventsOnMap[i]._url.includes(
                                            "animate") && map.eventsOnMap[i].options.pane.includes(
                                            "TrafficFlowManager")) {
                                        // logica per evitare di rimuovere layer di trafficflowmanager
                                    } else if (i > 0 && map.eventsOnMap[i - 1]._url && map.eventsOnMap[i -
                                            1]._url.includes("animate") && map.eventsOnMap[i - 1].options
                                        .pane.includes("TrafficFlowManager")) {
                                        // logica per evitare di rimuovere layer di trafficflowmanager

                                    } else if (map.eventsOnMap[i].eventType === 'heatmap') {
                                        removeHeatmap(true);
                                        map.eventsOnMap.splice(i, 1);
                                    } else if (map.eventsOnMap[i].type === 'addHeatmap') {
                                        removeHeatmapColorLegend(i, true);
                                        map.eventsOnMap.splice(i, 1);
                                        map.defaultMapRef.off('click', heatmapClick);
                                    } else if (map.eventsOnMap[i] !== null && map.eventsOnMap[i] !==
                                        undefined) {
                                        if (map.eventsOnMap[i].type === 'trafficRealTimeDetails') {
                                            map.defaultMapRef.removeLayer(map.eventsOnMap[i]);
                                            map.eventsOnMap.splice(i, 1);
                                        } else if (map.eventsOnMap[i]._url) {
                                            if (map.eventsOnMap[i]._url.includes("animate")) {
                                                map.defaultMapRef.removeLayer(map.eventsOnMap[i]);
                                                map.eventsOnMap.splice(i, 1);
                                            }
                                        }
                                    }
                                }
                            }


                            let heatmap = {};
                            heatmap.eventType = "heatmap";
                            baseQuery = event.passedData;
                            let latitude_min = map.defaultMapRef.getBounds()._southWest.lat;
                            let latitude_max = map.defaultMapRef.getBounds()._northEast.lat;
                            let longitude_min = map.defaultMapRef.getBounds()._southWest.lng;
                            let longitude_max = map.defaultMapRef.getBounds()._northEast.lng;
                            // INIZIO TRAFFICFLOWMANAGER
                            if (baseQuery.includes(geoServerUrl) && baseQuery.includes(
                                    "trafficflowmanager=true")) {
                                heatmap.eventType = "traffic_heatmap";
                                console.log("TrafficFlowManager INIT");

                                // Get dataset name and metadata API url from passed data
                                const datasetName = baseQuery.split("WMS&layers=")[1].split("&")[0];
                                const apiUrl = geoServerUrl + "trafficflowmanager/api/metadata?fluxName=" +
                                    datasetName;

                                // Get layers metadata from API
                                //     heatmapData = null;
                                $.ajax({
                                    url: apiUrl,
                                    async: true,
                                    cache: false,
                                    dataType: "text",
                                    success: function(data) {
                                        trafficData = JSON.parse(data);
                                        map.defaultMapRef.createPane('TrafficFlowManager:' + datasetName);
                                        map.defaultMapRef.getPane('TrafficFlowManager:' + datasetName).style
                                            .zIndex = 420;

                                        // Setup map
                                        //       if (heatmapData && heatmapData.length > 0) {
                                        const timestamp = trafficData[0].dateTime;
                                        current_traffic_opacity = 1
                                        trafficMapName = trafficData[0].fluxName;
                                        trafficMapDate = timestamp.replace('T', ' ');

                                        // Add layer to map
                                        trafficWmsLayer = L.tileLayer.wms(geoServerUrl + "geoserver/wms", {
                                            layers: trafficData[0].layerName,
                                            format: 'image/png',
                                            crs: L.CRS.EPSG4326,
                                            transparent: true,
                                            opacity: current_traffic_opacity,
                                            pane: 'TrafficFlowManager:' + datasetName
                                        }).addTo(map.defaultMapRef);

                                        if (is3dOn) {
                                            gifWmsTraffic.isAnimated = false;
                                            var trafficWmsUrl = geoServerUrl + "geoserver/wms";
                                            trafficWmsUrl += "?service=WMS&request=GetMap&layers=" + trafficData[0]
                                                .layerName;
                                            trafficWmsUrl +=
                                                "&styles=&format=image%2Fpng&transparent=true&version=1.1.1&width=256&height=256&srs=EPSG%3A4326";
                                            trafficWmsUrl += '&bbox={bbox}';

                                            layers.trafficWms = createHeatmapLayer({
                                                data: trafficWmsUrl,
                                                id: datasetName,
                                                tileSize: 256,
                                                opacity: 1
                                            });
                                            updateLayers();
                                        }

                                        // Add Legend
                                        if ($('#trafficHeatmapLegend').length != 0)
                                            $('#trafficHeatmapLegend').remove();
                                        $('#traffic-info-btn').css('display', 'block');
                                        $('#traffic-info-btn').click();

                                        map.trafficLegendHeatmap.create();
                                        map.eventsOnMap.push(heatmap);
                                        const heatmapLegendColors = L.control({
                                            position: 'bottomleft'
                                        });
                                        heatmapLegendColors.onAdd = function() {
                                            const div = L.DomUtil.create('div', 'info legend');
                                            const legendImgPath = "../trafficRTDetails/legend.png";
                                            div.innerHTML += " <img src=" + legendImgPath + " height='120'/>"
                                            // '<br style="margin-bottom:20px;">';
                                            return div;
                                        };
                                        heatmapLegendColors.addTo(map.defaultMapRef);
                                        event.legendColors = heatmapLegendColors;
                                        map.eventsOnMap.push(event);

                                        loadingDiv.setStatus('ok')
                                    },
                                    error: function(errorData) {
                                        console.log("Ko Traffic Heatmap");
                                        console.log(JSON.stringify(errorData));
                                    }
                                });

                                return;
                            }
                            //      }
                            // FINE TRAFFICFLOWMANAGER
                            let query = "";
                            if (baseQuery.includes("heatmap.php")) { // OLD HEATMAP
                                //  query = baseQuery + '&limit=30&latitude_min=' + latitude_min + '&latitude_max=' + latitude_max + '&longitude_min=' + longitude_min + '&longitude_max=' + longitude_max;
                                query = baseQuery + '&latitude_min=' + latitude_min + '&latitude_max=' +
                                    latitude_max + '&longitude_min=' + longitude_min + '&longitude_max=' +
                                    longitude_max;
                                query = query.replace("heatmap.php",
                                    "heatmap-metadata.php"
                                ); // CON QUESTA RIGA SI PREDONO SOLO I METADATI ORA !!!
                                let metricNameSplit = baseQuery.split("metricName=")[1];
                            } else {
                                //  let metricNameSplit = baseQuery.split("metricName=")[1];
                                //  heatmapMetricName = baseQuery.split("metricName=")[1];
                                //    var datasetNameAux = baseQuery.split("https://wmsserver.snap4city.org/geoserver/Snap4City/wms?service=WMS&layers=")[1];
                                var datasetNameAux = baseQuery.split("WMS&layers=")[1];
                                wmsDatasetName = datasetNameAux.split("&metricName=")[0];
                                //    query = 'https://heatmap.snap4city.org/heatmap-metadata.php?dataset=' + wmsDatasetName + '&latitude_min=' + latitude_min + '&latitude_max=' + latitude_max + '&longitude_min=' + longitude_min + '&longitude_max=' + longitude_max;
                                query = heatmapUrl + 'heatmap-metadata.php?dataset=' + wmsDatasetName +
                                    '&latitude_min=' + latitude_min + '&latitude_max=' + latitude_max +
                                    '&longitude_min=' + longitude_min + '&longitude_max=' + longitude_max;
                            }

                            heatmapData = null;
                            $.ajax({
                                url: query,
                                async: false,
                                cache: false,
                                dataType: "text",
                                success: function(data) {
                                    heatmapData = JSON.parse(data);
                                },
                                error: function(errorData) {
                                    console.log("Ko Heatmap");
                                    console.log(JSON.stringify(errorData));
                                }
                            });

                            //     for (var i = 0; i < heatmapData.length; i++) {
                            //heatmap recommender data
                            /*   map.testData = {
                                   //   max: 8,
                                   data: heatmapData[current_page].data
                               };  */

                            // Initialize array of Days from metadata
                            daysArray = initDaysArray(heatmapData);

                            //heatmap recommender metadata
                            map.testMetadata = {
                                //   max: 8,
                                metadata: heatmapData[current_page].metadata
                            };

                            if (map.testMetadata.metadata.metricName !== undefined) {
                                heatmapMetricName = map.testMetadata.metadata.metricName
                            } else {
                                heatmapMetricName = "airTemperature";
                                mapName = "WMS_PROVA";
                            }

                            if (map.testMetadata.metadata.mapName !== undefined) {
                                mapName = map.testMetadata.metadata.mapName;
                            } else {
                                mapName = "WMS_PROVA";
                            }

                            if (map.testMetadata.metadata.date !== undefined) {
                                mapDate = map.testMetadata.metadata.date;
                            } else {
                                mapDate = "DATA";
                            }

                            $.ajax({
                                url: "../controllers/getHeatmapRange.php",
                                type: "GET",
                                data: {
                                    metricName: heatmapMetricName
                                },
                                async: true,
                                dataType: 'json',
                                success: function(data) {
                                    try {
                                        if (data['detail'] == "Ok") {

                                            //  if (data['heatmapRange'].length > 1) {
                                            if (data['heatmapRange'][0] && !wmsDatasetName
                                                .includes("elevationTerrain=true")) {
                                                heatmapRange = data['heatmapRange'];
                                                initHeatmapLayer(heatmapRange); // OLD-API
                                                // Set current_radius come variabile globale per essere sincronizzata attraverso le varie azioni (zoom ecc...)
                                                if (current_radius == null) {
                                                    current_radius = map.cfg.radius;
                                                }
                                                if (current_opacity == null) {
                                                    current_opacity = map.cfg.maxOpacity;
                                                }

                                            } else {
                                                heatmapRange = [];
                                            }

                                            if (baseQuery.includes(
                                                    "heatmap.php")) { // OLD HEATMAP
                                                //    if (event.passedData.includes("heatmap.php")) {
                                                addHeatmapFromClient(false);

                                            } else { // NEW HEATMAP  FIRST INSTANTIATION
                                                // CORTI - Pane
                                                map.defaultMapRef.createPane('Snap4City:' +
                                                    wmsDatasetName);
                                                map.defaultMapRef.getPane('Snap4City:' +
                                                    wmsDatasetName).style.zIndex = 420;

                                                //   if (animationFlag === false) {
                                                //   var timestampISO = "2019-01-23T20:20:15.000Z";
                                                var timestamp = map.testMetadata.metadata.date;
                                                var timestampISO = timestamp.replace(" ", "T") +
                                                    ".000Z";
                                                //    wmsLayer = L.tileLayer.wms("https://wmsserver.snap4city.org/geoserver/Snap4City/wms", {
                                                if (is3dOn) {
                                                    var wmsUrl = geoServerUrl +
                                                        "geoserver/Snap4City/wms?"
                                                    wmsUrl +=
                                                        "service=WMS&request=GetMap&layers=Snap4City%3A" +
                                                        wmsDatasetName;
                                                    wmsUrl +=
                                                        "&styles=&format=image%2Fpng&transparent=true&version=1.1.1";
                                                    wmsUrl += "&time=" + timestampISO;
                                                    wmsUrl +=
                                                        "&&tiled=true&width=256&height=256&srs=EPSG%3A4326";
                                                    wmsUrl += '&bbox={bbox}';

                                                    const heatmapLayer = createHeatmapLayer({
                                                        data: wmsUrl,
                                                        id: wmsDatasetName
                                                    });
                                                    layers.wms = heatmapLayer;
                                                    updateLayers();
                                                } else {
                                                    wmsLayer = L.tileLayer.wms(geoServerUrl +
                                                        "geoserver/Snap4City/wms", {
                                                            layers: 'Snap4City:' +
                                                                wmsDatasetName,
                                                            format: 'image/png',
                                                            crs: L.CRS.EPSG4326,
                                                            transparent: true,
                                                            opacity: current_opacity,
                                                            time: timestampISO,
                                                            //  bbox: [24.7926004025304,60.1025194986424,25.1905923952885,60.2516802986263],
                                                            tiled: true, // TESTARE COME ANTWERP ??
                                                            //  attribution: "IGN ©"
                                                            pane: 'Snap4City:' +
                                                                wmsDatasetName // CORTI
                                                        }).addTo(map.defaultMapRef);
                                                }

                                                if ($('#heatmap-info-btn').css('display') === 'block') {
                                                    animationOn = false;
                                                    $('#heatmapLegend').remove();
                                                }
                                                $('#heatmap-info-btn').css('display', 'block');
                                                $('#heatmap-info-btn').click();
                                                // if ($('#trafficHeatmapLegend').length != 0)
                                                //     $('#trafficHeatmapLegend').css('display', 'none');
                                                map.legendHeatmap.create();
                                                // var mapControlsContainer = document
                                                //     .getElementsByClassName("leaflet-control")[
                                                //         0];

                                                var heatmapLegendColors = L.control({
                                                    position: 'bottomleft'
                                                });

                                                heatmapLegendColors.onAdd = function(map) {

                                                    var div = L.DomUtil.create('div',
                                                            'info legend'),
                                                        grades = ["Legend"];
                                                    //    labels = ["http://localhost/dashboardSmartCity/trafficRTDetails/legend.png"];
                                                    var legendImgPath = heatmapRange[0]
                                                        .iconPath; // OLD-API
                                                    div.innerHTML += " <img src=" +
                                                        legendImgPath + " height='100%'" +
                                                        '<br>'; /// OLD-API
                                                    return div;
                                                };

                                                heatmapLegendColors.addTo(map.defaultMapRef);
                                                // map.eventsOnMap.push(heatmap);

                                                event.legendColors = heatmapLegendColors;
                                                map.eventsOnMap.push(event);

                                                loadingDiv.setStatus('ok');
                                            } // FINE ELSE NEW WMS HEATMAP FIRST INSTANTIATION
                                            map.eventsOnMap.push(heatmap);
                                        } else {
                                            console.log("Ko Heatmap");
                                            console.log(JSON.stringify(errorData));
                                            loadingDiv.setStatus('ko');
                                        }
                                    } catch (err) {
                                        console.log("Error: " + err);
                                        if (loadingDiv) {
                                            loadingDiv.setStatus('ko');
                                        }
                                    }
                                },
                                error: function(errorData) {
                                    console.log("Ko Heatmap");
                                    console.log(JSON.stringify(errorData));
                                    loadingDiv.setStatus('ko');
                                }
                            });
                        } catch (err) {
                            console.log("Error: " + err);
                            loadingDiv.setStatus('ko');
                        }
                    }

                    //   window.addHeatmapFromClient = function(animationFlag) {
                    function addHeatmapFromClient(animationFlag) {

                        let heatmap = {};
                        heatmap.eventType = "heatmap";

                        /*   map.testData = {
                               //   max: 8,
                               data: heatmapData[current_page].data
                           };  */

                        //heatmap recommender metadata

                        passedParams = event.passedParams;

                        var color1 = passedParams.color1;
                        var color2 = passedParams.color2;
                        var desc = passedParams.desc;

                        var loadingDiv = new LoadingDiv({
                            text: desc,
                            color1,
                            color2,
                        });


                        var latitude_min = map.defaultMapRef.getBounds()._southWest.lat;
                        var latitude_max = map.defaultMapRef.getBounds()._northEast.lat;
                        var longitude_min = map.defaultMapRef.getBounds()._southWest.lng;
                        var longitude_max = map.defaultMapRef.getBounds()._northEast.lng;

                        if (is3dOn) {
                            const maxBB = getMaxBoundingBox(currentViewState);
                            latitude_min = maxBB[0][1];
                            latitude_max = maxBB[1][1];
                            longitude_min = maxBB[0][0];
                            longitude_max = maxBB[1][0];
                        }
                        // INIZIO TRAFFICFLOWMANAGER PAGINE/ANIMAZIONE
                        if (event.passedData.includes(geoServerUrl) && event.passedData.includes(
                                "trafficflowmanager=true")) {

                            //        console.log("TrafficFlowManager addHeatmapFromClient INIT page=" + current_page_traffic);
                            const animationWidth = event.passedData.includes("&width=") ? event.passedData
                                .split("&width=")[1].split("&")[0] : "512";
                            const datasetName = event.passedData.split("WMS&layers=")[1].split("&")[0];
                            map.defaultMapRef.createPane('TrafficFlowManager:' + datasetName);
                            map.defaultMapRef.getPane('TrafficFlowManager:' + datasetName).style.zIndex =
                                420;
                            const timestamp = trafficData[current_page_traffic].dateTime;
                            heatmap.eventType = "traffic_heatmap";
                            //    if (timestamp != null) {

                            if (!animationFlagTraffic) {

                                // Update map date
                                trafficMapDate = timestamp.replace('T', ' ');

                                // Add correct layer to the map
                                if (is3dOn) {
                                    gifWmsTraffic.isAnimated = false;
                                    var trafficWmsUrl = geoServerUrl + "geoserver/wms";
                                    trafficWmsUrl += "?service=WMS&request=GetMap&layers=" + trafficData[
                                        current_page_traffic].layerName;
                                    trafficWmsUrl +=
                                        "&styles=&format=image%2Fpng&transparent=true&version=1.1.1&width=256&height=256&srs=EPSG%3A4326";
                                    trafficWmsUrl += '&bbox={bbox}';

                                    layers.trafficWms = createHeatmapLayer({
                                        ...layers.trafficWms,
                                        data: trafficWmsUrl
                                    });
                                    updateLayers();
                                }
                                trafficWmsLayer = L.tileLayer.wms(geoServerUrl + "geoserver/wms", {
                                    layers: trafficData[current_page_traffic].layerName,
                                    format: 'image/png',
                                    crs: L.CRS.EPSG4326,
                                    transparent: true,
                                    opacity: current_traffic_opacity,
                                    pane: 'TrafficFlowManager:' + datasetName
                                }).addTo(map.defaultMapRef);

                                map.eventsOnMap.push(heatmap);

                                // Add legend and heatmap
                                $('#traffic-info-btn').css('display', 'block');
                                $('#traffic-info-btn').click();
                                map.trafficLegendHeatmap.create();

                            } else {

                                var animationCurrentDayTimestamp;
                                const animationCurrentDayFwdTimestamp = [];
                                const animationCurrentDayBckwdTimestamp = [];
                                let animationStringTimestamp;
                                const day = timestamp.substring(0, 10);

                                // Get all layer names for animation
                                if (current_page_traffic == 0) {
                                    var offsetFwd = current_page_traffic;
                                    while (trafficData[offsetFwd].dateTime.substring(0, 10) == day) {
                                        animationCurrentDayFwdTimestamp.push(trafficData[offsetFwd]
                                            .layerName);
                                        offsetFwd++;
                                        if (offsetFwd > numTrafficHeatmapPages() - 1) {
                                            break;
                                        }
                                    }
                                } else if (current_page_traffic == numTrafficHeatmapPages() - 1) {
                                    var offsetBckwd = current_page_traffic - 1;
                                    while (trafficData[offsetBckwd].dateTime.substring(0, 10) == day) {
                                        animationCurrentDayBckwdTimestamp.push(trafficData[offsetBckwd]
                                            .layerName);
                                        offsetBckwd--;
                                        if (offsetBckwd < 0) {
                                            break;
                                        }
                                    }
                                } else {
                                    var offsetFwd = current_page_traffic;
                                    while (trafficData[offsetFwd].dateTime.substring(0, 10) == day) {
                                        animationCurrentDayFwdTimestamp.push(trafficData[offsetFwd]
                                            .layerName);
                                        offsetFwd++;
                                        if (offsetFwd > numTrafficHeatmapPages() - 1) {
                                            break;
                                        }
                                    }
                                    var offsetBckwd = current_page_traffic - 1;
                                    while (trafficData[offsetBckwd].dateTime.substring(0, 10) == day) {
                                        animationCurrentDayBckwdTimestamp.push(trafficData[offsetBckwd]
                                            .layerName);
                                        offsetBckwd--;
                                        if (offsetBckwd < 0) {
                                            break;
                                        }
                                    }
                                }

                                // Concatenate layer names
                                animationCurrentDayTimestamp = animationCurrentDayFwdTimestamp.reverse()
                                    .concat(animationCurrentDayBckwdTimestamp);
                                animationStringTimestamp = animationCurrentDayTimestamp.join(",");

                                // Create animated layer using WMS animator
                                const bbox = [longitude_min, latitude_min, longitude_max, latitude_max]
                                    .join(",");
                                //   const imageUrl = geoServerUrl + 'geoserver/wms/animate?layers=' + trafficData[current_page_traffic].layerName + '&aparam=layers&avalues=' + animationStringTimestamp + '&format=image/gif;subtype=animated&format_options=gif_loop_continuosly:true;layout:message;gif_frames_delay:500&transparent=true&bbox=' + bbox;
                                const imageUrl = geoServerUrl + 'geoserver/wms/animate?layers=' +
                                    trafficData[current_page_traffic].layerName +
                                    '&aparam=layers&avalues=' + animationStringTimestamp +
                                    '&format=image/gif;subtype=animated&format_options=gif_loop_continuosly:true;layout:message;gif_frames_delay:1000&transparent=true&bbox=' +
                                    bbox + '&width=' + animationWidth;
                                const imageBounds = [
                                    [latitude_min, longitude_min],
                                    [latitude_max, longitude_max]
                                ];
                                if (is3dOn) {
                                    const bounds = [longitude_min, latitude_min, longitude_max,
                                        latitude_max
                                    ];
                                    loadGif(imageUrl, bounds, "traffic");
                                }

                                const animatedLayer = L.imageOverlay(imageUrl, imageBounds, {
                                    opacity: current_traffic_opacity,
                                    pane: 'TrafficFlowManager:' + datasetName
                                }).addTo(map.defaultMapRef);
                                map.eventsOnMap.push(animatedLayer);

                                // Add legend (w/ correct options) and animated layer to the maps
                                $('#traffic-info-btn').css('display', 'block');
                                $('#traffic-info-btn').click();
                                map.trafficLegendHeatmap.create();
                                document.getElementById("<?= $_REQUEST['name_w'] ?>_animation_traffic")
                                    .checked = true;
                                $("<?= $_REQUEST['name_w'] ?>_slidermaxTrafficOpacity").slider('disable');
                            }

                            // Setup Legend
                            const heatmapLegendColors = L.control({
                                position: 'bottomleft'
                            });
                            heatmapLegendColors.onAdd = function() {
                                const div = L.DomUtil.create('div', 'info legend');
                                const legendImgPath = "../trafficRTDetails/legend.png";
                                div.innerHTML += " <img src=" + legendImgPath + " height='120'" +
                                    '<br style="margin-bottom:20px;">';
                                return div;
                            };
                            heatmapLegendColors.addTo(map.defaultMapRef);
                            event.legendColors = heatmapLegendColors;
                            map.eventsOnMap.push(event);

                            loadingDiv.setStatus('ok');
                            return;
                            //    }
                        }
                        // FINE TRAFFICFLOWMANAGER PAGINE/ANIMAZIONE
                        let query = "";
                        if (event.passedData.includes("heatmap.php")) { // OLD HEATMAP
                            //  query = baseQuery + '&limit=30&latitude_min=' + latitude_min + '&latitude_max=' + latitude_max + '&longitude_min=' + longitude_min + '&longitude_max=' + longitude_max;
                            query = event.passedData + '&latitude_min=' + latitude_min + '&latitude_max=' +
                                latitude_max + '&longitude_min=' + longitude_min + '&longitude_max=' +
                                longitude_max;
                            query = query.replace("heatmap.php",
                                "heatmap-metadata.php"
                            ); // CON QUESTA RIGA SI PREDONO SOLO I METADATI ORA !!!
                            let metricNameSplit = event.passedData.split("metricName=")[1];
                        } else {
                            //  let metricNameSplit = baseQuery.split("metricName=")[1];
                            //  heatmapMetricName = baseQuery.split("metricName=")[1];
                            //    var datasetNameAux = baseQuery.split("https://wmsserver.snap4city.org/geoserver/Snap4City/wms?service=WMS&layers=")[1];
                            var datasetNameAux = event.passedData.split("WMS&layers=")[1];
                            wmsDatasetName = datasetNameAux.split("&metricName=")[0];
                            //   query = 'https://heatmap.snap4city.org/heatmap-metadata.php?dataset=' + wmsDatasetName + '&latitude_min=' + latitude_min + '&latitude_max=' + latitude_max + '&longitude_min=' + longitude_min + '&longitude_max=' + longitude_max;
                            query = heatmapUrl + 'heatmap-metadata.php?dataset=' + wmsDatasetName +
                                '&latitude_min=' + latitude_min + '&latitude_max=' + latitude_max +
                                '&longitude_min=' + longitude_min + '&longitude_max=' + longitude_max;
                        }

                        heatmapData = null;
                        $.ajax({
                            url: query,
                            async: false,
                            cache: false,
                            dataType: "text",
                            success: function(data) {
                                heatmapData = JSON.parse(data);
                            },
                            error: function(errorData) {
                                console.log("Ko Heatmap");
                                console.log(JSON.stringify(errorData));
                            }
                        });

                        map.testMetadata = {
                            //   max: 8,
                            metadata: heatmapData[current_page].metadata
                        };

                        if (map.testMetadata.metadata.metricName !== undefined) {
                            heatmapMetricName = map.testMetadata.metadata.metricName
                        } else {
                            heatmapMetricName = "airTemperature";
                            mapName = "WMS_PROVA";
                        }

                        if (map.testMetadata.metadata.mapName !== undefined) {
                            mapName = map.testMetadata.metadata.mapName;
                        } else {
                            mapName = "WMS_PROVA";
                        }

                        if (map.testMetadata.metadata.date !== undefined) {
                            mapDate = map.testMetadata.metadata.date;
                        } else {
                            mapDate = "DATA";
                        }

                        $.ajax({
                            url: "../controllers/getHeatmapRange.php",
                            type: "GET",
                            data: {
                                metricName: heatmapMetricName
                            },
                            async: true,
                            dataType: 'json',
                            success: function(data) {
                                try {
                                    if (data['detail'] == "Ok") {
                                        //  if (data['heatmapRange'].length > 1) {

                                        if (data['heatmapRange'][0]) {
                                            heatmapRange = data['heatmapRange'];
                                            initHeatmapLayer(heatmapRange); // OLD-API
                                            // Gestione della sincronia dei check-box del cambio raggio on zoom e computo raggio su base dati dopo aggiornamento legenda

                                        } else {
                                            heatmapRange = [];
                                        }

                                        if (baseQuery.includes("heatmap.php")) { // OLD HEATMAP


                                            //    let dataQuery = "https://heatmap.snap4city.org/data/" + mapName + "/" + heatmapMetricName + "/" + mapDate.replace(" ", "T") + "Z/0";
                                            let dataQuery = heatmapUrl + "data/" + mapName +
                                                "/" + heatmapMetricName + "/" + mapDate.replace(
                                                    " ", "T") + "Z/0";

                                            $.ajax({
                                                url: dataQuery,
                                                type: "GET",
                                                data: {},
                                                async: true,
                                                cache: false,
                                                dataType: 'json',
                                                success: function(heatmapResData) {
                                                    if (heatmapResData['data']) {
                                                        //    heatmapRange = heatmapData['heatmapRange'];
                                                        initHeatmapLayer(
                                                            heatmapRange
                                                        ); // OLD-API
                                                        // Set current_radius come variabile globale per essere sincronizzata attraverso le varie azioni (zoom ecc...)
                                                        if (current_radius ==
                                                            null) {
                                                            current_radius = map.cfg
                                                                .radius;
                                                        }
                                                        if (current_opacity ==
                                                            null) {
                                                            current_opacity = map
                                                                .cfg.maxOpacity;
                                                        }

                                                    } else {
                                                        heatmapRange = [];
                                                    }

                                                    if (baseQuery.includes(
                                                            "heatmap.php"
                                                        )) { // OLD HEATMAP
                                                        map.testData = {
                                                            //   max: 8,
                                                            data: heatmapResData
                                                                .data
                                                        };

                                                        //heatmap recommender metadata
                                                        map.testMetadata = {
                                                            //   max: 8,
                                                            metadata: heatmapResData
                                                                .metadata
                                                        };

                                                        if (heatmapRange[0]
                                                            .range1Inf == null) {
                                                            if (heatmapMetricName ==
                                                                "EAQI" ||
                                                                heatmapMetricName ==
                                                                "CAQI") {
                                                                heatmapRange[0]
                                                                    .range1Inf =
                                                                    heatmapRange[0]
                                                                    .range4Inf;
                                                            } else if (
                                                                heatmapMetricName ==
                                                                "CO" ||
                                                                heatmapMetricName ==
                                                                "Benzene") {
                                                                heatmapRange[0]
                                                                    .range1Inf =
                                                                    heatmapRange[0]
                                                                    .range3Inf;
                                                                heatmapRange[0]
                                                                    .range10Inf =
                                                                    heatmapRange[0]
                                                                    .range8Inf;
                                                            }
                                                        }
                                                        map.heatmapLayer.setData({
                                                            max: heatmapRange[
                                                                    0]
                                                                .range10Inf,
                                                            min: heatmapRange[
                                                                    0]
                                                                .range1Inf,
                                                            data: map
                                                                .testData
                                                                .data
                                                        });
                                                        map.defaultMapRef.addLayer(
                                                            map.heatmapLayer
                                                        ); // OLD HEATMAP
                                                        //    if (estimateRadiusFlag === true) {
                                                        var
                                                            distArray = []; // MODALITA HEATMAP ON DATA DISTANCE
                                                        if (heatmapResData.length >
                                                            20) {
                                                            for (k = 0; k <
                                                                20; k++) {
                                                                distArray[k] =
                                                                    distance(
                                                                        heatmapResData[
                                                                            k]
                                                                        .latitude,
                                                                        heatmapResData[
                                                                            k]
                                                                        .latitude,
                                                                        heatmapResData[
                                                                            k + 1]
                                                                        .latitude,
                                                                        heatmapResData[
                                                                            k + 1]
                                                                        .latitude,
                                                                        "K");
                                                            }

                                                            var sum = 0;
                                                            for (var i = 0; i <
                                                                distArray
                                                                .length; i++) {
                                                                sum += distArray[i];
                                                            }
                                                            estimatedRadius = sum /
                                                                distArray.length;
                                                            if (estimatedRadius <=
                                                                1) {
                                                                estimatedRadius = 2;
                                                            }
                                                            //   if (estimateRadiusFlag === true) {
                                                        } else {
                                                            estimatedRadius =
                                                                current_radius;
                                                        }

                                                        metresPerPixel =
                                                            40075016.686 * Math.abs(
                                                                Math.cos(map
                                                                    .defaultMapRef
                                                                    .getCenter()
                                                                    .lat * Math.PI /
                                                                    180)) / Math
                                                            .pow(2, map
                                                                .defaultMapRef
                                                                .getZoom() + 8);
                                                        var initRadius = ((
                                                                estimatedRadius *
                                                                1000) /
                                                            metresPerPixel) / 50;
                                                        if (current_page == 0) {
                                                            setOption('radius',
                                                                initRadius
                                                                .toFixed(1), 1);
                                                        } else {
                                                            setOption('radius',
                                                                current_radius
                                                                .toFixed(1), 1);
                                                        }
                                                        //   }
                                                    } else { // NEW HEATMAP
                                                        //   var timestampISO = "2019-01-23T20:20:15.000Z";
                                                        map.defaultMapRef
                                                            .createPane(
                                                                'Snap4City:' +
                                                                wmsDatasetName
                                                            ); // CORTI
                                                        map.defaultMapRef.getPane(
                                                                'Snap4City:' +
                                                                wmsDatasetName)
                                                            .style.zIndex =
                                                            420; // CORTI

                                                        var timestamp = map
                                                            .testMetadata.metadata
                                                            .date;
                                                        var timestampISO = timestamp
                                                            .replace(" ", "T") +
                                                            ".000Z";
                                                        //    wmsLayer = L.tileLayer.wms("https://wmsserver.snap4city.org/geoserver/Snap4City/wms", {
                                                        wmsLayer = L.tileLayer.wms(
                                                            geoServerUrl +
                                                            "geoserver/Snap4City/wms", {
                                                                layers: 'Snap4City:' +
                                                                    wmsDatasetName,
                                                                format: 'image/png',
                                                                crs: L.CRS
                                                                    .EPSG4326,
                                                                transparent: true,
                                                                opacity: current_opacity,
                                                                time: timestampISO,
                                                                //  bbox: [24.7926004025304,60.1025194986424,25.1905923952885,60.2516802986263],
                                                                tiled: true,
                                                                //  attribution: "IGN ©"
                                                                pane: 'Snap4City:' +
                                                                    wmsDatasetName // CORTI
                                                            }).addTo(map
                                                            .defaultMapRef);

                                                        if (is3dOn) {
                                                            var wmsUrl =
                                                                geoServerUrl +
                                                                "geoserver/Snap4City/wms?"
                                                            wmsUrl +=
                                                                "service=WMS&request=GetMap&layers=Snap4City%3A" +
                                                                wmsDatasetName;
                                                            wmsUrl +=
                                                                "&styles=&format=image%2Fpng&transparent=true&version=1.1.1";
                                                            wmsUrl += "&time=" +
                                                                timestampISO;
                                                            wmsUrl +=
                                                                "&&tiled=true&width=512&height=512&srs=EPSG%3A4326";
                                                            wmsUrl += '&bbox={bbox}';

                                                            layers.wms = createHeatmapLayer({
                                                                data: wmsUrl,
                                                                id: wmsDatasetName
                                                            });
                                                            updateLayers();
                                                        }

                                                        //     current_opacity = 0.5;

                                                    }

                                                    // add legend to map
                                                    $('#heatmap-info-btn').css('display', 'block');
                                                    $('#heatmap-info-btn').click();
                                                    map.legendHeatmap.create();
                                                    map.eventsOnMap.push(heatmap);
                                                    var mapControlsContainer =
                                                        document
                                                        .getElementsByClassName(
                                                            "leaflet-control")[0];

                                                    //    var legendImgPath = heatmapRange[0].iconPath;
                                                    //     div.innerHTML += " <img src=" + legendImgPath + " height='100%'" + '<br>';
                                                    var heatmapLegendColors = L
                                                        .control({
                                                            position: 'bottomleft'
                                                        });

                                                    heatmapLegendColors.onAdd =
                                                        function(map) {

                                                            var div = L.DomUtil
                                                                .create('div',
                                                                    'info legend'),
                                                                grades = ["Legend"];
                                                            //    labels = ["http://localhost/dashboardSmartCity/trafficRTDetails/legend.png"];
                                                            var legendImgPath =
                                                                heatmapRange[0]
                                                                .iconPath; // OLD-API
                                                            div.innerHTML +=
                                                                " <img src=" +
                                                                legendImgPath +
                                                                " height='100%'" +
                                                                '<br>'; /// OLD-API
                                                            return div;
                                                        };

                                                    heatmapLegendColors.addTo(map
                                                        .defaultMapRef);
                                                    //    map.eventsOnMap.push(heatmap);

                                                    event.legendColors =
                                                        heatmapLegendColors;
                                                    map.eventsOnMap.push(event);

                                                    if (changeRadiusOnZoom) {
                                                        $('#<?= $_REQUEST['name_w'] ?>_changeRad')
                                                            .prop('checked', true);
                                                        if (estimateRadiusFlag) {
                                                            $('#<?= $_REQUEST['name_w'] ?>_changeRad')
                                                                .prop('disabled',
                                                                    true);
                                                        }
                                                    }

                                                    if (estimateRadiusFlag) {
                                                        $('#<?= $_REQUEST['name_w'] ?>_estimateRad')
                                                            .prop('checked', true);
                                                        $('#<?= $_REQUEST['name_w'] ?>_estimateRad')
                                                            .prop('disabled',
                                                                false);
                                                    } else {
                                                        $('#<?= $_REQUEST['name_w'] ?>_estimateRad')
                                                            .prop('disabled',
                                                                false);
                                                    }

                                                    loadingDiv.empty();
                                                    loadingDiv.append(loadOkText);

                                                    parHeight = loadOkText.height();
                                                    parMarginTop = Math.floor((
                                                            loadingDiv
                                                            .height() -
                                                            parHeight) /
                                                        2);
                                                    loadOkText.css("margin-top",
                                                        parMarginTop + "px");

                                                    setTimeout(function() {
                                                        loadingDiv.css(
                                                            "opacity", 0
                                                        );
                                                        setTimeout(
                                                            function() {
                                                                loadingDiv
                                                                    .nextAll(
                                                                        "#<?= $_REQUEST['name_w'] ?>_content div.gisMapLoadingDiv"
                                                                    )
                                                                    .each(
                                                                        function(
                                                                            i
                                                                        ) {
                                                                            $(this)
                                                                                .css(
                                                                                    "top",
                                                                                    ($('#<?= $_REQUEST['name_w'] ?>_div')
                                                                                        .height() -
                                                                                        (($('#<?= $_REQUEST['name_w'] ?>_content div.gisMapLoadingDiv')
                                                                                                .length -
                                                                                                1
                                                                                            ) *
                                                                                            loadingDiv
                                                                                            .height()
                                                                                        )
                                                                                    ) +
                                                                                    "px"
                                                                                );
                                                                        }
                                                                    );
                                                                loadingDiv
                                                                    .remove();
                                                            }, 350);
                                                    }, 1000);

                                                },
                                                error: function(errorData) {
                                                    console.log("Ko Heatmap");
                                                    console.log(JSON.stringify(
                                                        errorData));
                                                    loadingDiv.empty();
                                                    loadingDiv.append(loadKoText);

                                                    parHeight = loadKoText.height();
                                                    parMarginTop = Math.floor((
                                                            loadingDiv
                                                            .height() -
                                                            parHeight) /
                                                        2);
                                                    loadKoText.css("margin-top",
                                                        parMarginTop + "px");

                                                    setTimeout(function() {
                                                        loadingDiv.css(
                                                            "opacity", 0
                                                        );
                                                        setTimeout(
                                                            function() {
                                                                loadingDiv
                                                                    .nextAll(
                                                                        "#<?= $_REQUEST['name_w'] ?>_content div.gisMapLoadingDiv"
                                                                    )
                                                                    .each(
                                                                        function(
                                                                            i
                                                                        ) {
                                                                            $(this)
                                                                                .css(
                                                                                    "top",
                                                                                    ($('#<?= $_REQUEST['name_w'] ?>_div')
                                                                                        .height() -
                                                                                        (($('#<?= $_REQUEST['name_w'] ?>_content div.gisMapLoadingDiv')
                                                                                                .length -
                                                                                                1
                                                                                            ) *
                                                                                            loadingDiv
                                                                                            .height()
                                                                                        )
                                                                                    ) +
                                                                                    "px"
                                                                                );
                                                                        }
                                                                    );
                                                                loadingDiv
                                                                    .remove();
                                                            }, 350);
                                                    }, 1000);
                                                }
                                            });


                                        } else {
                                            if (animationFlag === false) {

                                                map.defaultMapRef.createPane('Snap4City:' +
                                                    wmsDatasetName); // CORTI
                                                map.defaultMapRef.getPane('Snap4City:' +
                                                    wmsDatasetName).style.zIndex = 420; // CORTI

                                                // NEW HEATMAP
                                                var timestamp = map.testMetadata.metadata.date;
                                                var timestampISO = timestamp.replace(" ", "T") +
                                                    ".000Z";
                                                //    wmsLayer = L.tileLayer.wms("https://wmsserver.snap4city.org/geoserver/Snap4City/wms", {
                                                wmsLayer = L.tileLayer.wms(geoServerUrl +
                                                    "geoserver/Snap4City/wms", {
                                                        layers: 'Snap4City:' +
                                                            wmsDatasetName,
                                                        format: 'image/png',
                                                        crs: L.CRS.EPSG4326,
                                                        transparent: true,
                                                        opacity: current_opacity,
                                                        time: timestampISO,
                                                        //  bbox: [24.7926004025304,60.1025194986424,25.1905923952885,60.2516802986263],
                                                        tiled: true,
                                                        //  attribution: "IGN ©"
                                                        pane: 'Snap4City:' +
                                                            wmsDatasetName // CORTI
                                                    }).addTo(map.defaultMapRef);

                                                if (is3dOn) {
                                                    gifWms.isAnimated = false;
                                                    var wmsUrl = geoServerUrl +
                                                        "geoserver/Snap4City/wms?"
                                                    wmsUrl +=
                                                        "service=WMS&request=GetMap&layers=Snap4City%3A" +
                                                        wmsDatasetName;
                                                    wmsUrl +=
                                                        "&styles=&format=image%2Fpng&transparent=true&version=1.1.1";
                                                    wmsUrl += "&time=" + timestampISO;
                                                    wmsUrl +=
                                                        "&&tiled=true&width=512&height=512&srs=EPSG%3A4326";
                                                    wmsUrl += '&bbox={bbox}';
                                                    layers.wms = createHeatmapLayer({
                                                        data: wmsUrl,
                                                        id: wmsDatasetName
                                                    });
                                                    updateLayers();
                                                }

                                                // add legend to map
                                                $('#heatmap-info-btn').css('display', 'block');
                                                $('#heatmap-info-btn').click();
                                                map.legendHeatmap.create();
                                                var heatmapLegendColors = L.control({
                                                    position: 'bottomleft'
                                                });

                                                heatmapLegendColors.onAdd = function(map) {

                                                    var div = L.DomUtil.create('div',
                                                            'info legend'),
                                                        grades = ["Legend"];
                                                    //    labels = ["http://localhost/dashboardSmartCity/trafficRTDetails/legend.png"];
                                                    var legendImgPath = heatmapRange[0]
                                                        .iconPath; // OLD-API
                                                    div.innerHTML += " <img src=" +
                                                        legendImgPath + " height='100%'" +
                                                        '<br>'; // OLD-API
                                                    return div;
                                                };

                                                heatmapLegendColors.addTo(map.defaultMapRef);
                                                map.eventsOnMap.push(heatmap);
                                                event.legendColors = heatmapLegendColors;
                                                map.eventsOnMap.push(event);

                                                loadingDiv.setStatus('ok');
                                            } else {
                                                // ANIMATION WMS HEATMAP

                                                map.defaultMapRef.createPane('Snap4City:' +
                                                    wmsDatasetName); // CORTI
                                                map.defaultMapRef.getPane('Snap4City:' +
                                                    wmsDatasetName).style.zIndex = 420; // CORTI

                                                var animationCurrentDayTimestamp = [];
                                                var animationCurrentDayFwdTimestamp = [];
                                                var animationCurrentDayBckwdTimestamp = [];
                                                var animationStringTimestamp = "";
                                                var timestamp = map.testMetadata.metadata.date;
                                                //    var timestampISO = timestamp.replace(" ", "T") + ".000Z";
                                                var day = timestamp.substring(0, 10);
                                                if (current_page == 0) {
                                                    var offsetFwd = current_page;
                                                    while (heatmapData[offsetFwd].metadata[
                                                            'date'].substring(0, 10) == day) {
                                                        animationCurrentDayFwdTimestamp.push(
                                                            heatmapData[offsetFwd].metadata[
                                                                'date'].replace(" ", "T") +
                                                            ".000Z");
                                                        offsetFwd++;
                                                        if (offsetFwd > numHeatmapPages() - 1) {
                                                            break;
                                                        }
                                                    }
                                                } else if (current_page == numHeatmapPages() -
                                                    1) {
                                                    var offsetBckwd = current_page - 1;
                                                    while (heatmapData[offsetBckwd].metadata[
                                                            'date'].substring(0, 10) == day) {
                                                        animationCurrentDayBckwdTimestamp.push(
                                                            heatmapData[offsetBckwd]
                                                            .metadata['date'].replace(" ",
                                                                "T") + ".000Z");
                                                        offsetBckwd--;
                                                        if (offsetBckwd < 0) {
                                                            break;
                                                        }
                                                    }
                                                } else {
                                                    var offsetFwd = current_page;
                                                    while (heatmapData[offsetFwd].metadata[
                                                            'date'].substring(0, 10) == day) {
                                                        animationCurrentDayFwdTimestamp.push(
                                                            heatmapData[offsetFwd].metadata[
                                                                'date'].replace(" ", "T") +
                                                            ".000Z");
                                                        offsetFwd++;
                                                        if (offsetFwd > numHeatmapPages() - 1) {
                                                            break;
                                                        }
                                                    }
                                                    var offsetBckwd = current_page - 1;
                                                    while (heatmapData[offsetBckwd].metadata[
                                                            'date'].substring(0, 10) == day) {
                                                        animationCurrentDayBckwdTimestamp.push(
                                                            heatmapData[offsetBckwd]
                                                            .metadata['date'].replace(" ",
                                                                "T") + ".000Z");
                                                        offsetBckwd--;
                                                        if (offsetBckwd < 0) {
                                                            break;
                                                        }
                                                    }
                                                }

                                                /*     if (animationCurrentDayFwdTimestamp.length == 0) {
                                                         animationCurrentDayTimestamp = animationCurrentDayBckwdTimestamp;
                                                     } else if (animationCurrentDayBckwdTimestamp.length == 0) {
                                                         animationCurrentDayTimestamp = animationCurrentDayFwdTimestamp;
                                                     } else {*/
                                                animationCurrentDayTimestamp =
                                                    animationCurrentDayFwdTimestamp.reverse()
                                                    .concat(animationCurrentDayBckwdTimestamp);
                                                //    animationCurrentDayTimestamp = animationCurrentDayTimestamp.reverse();
                                                animationStringTimestamp =
                                                    animationCurrentDayTimestamp.join(",");
                                                //  }


                                                var bboxJson = {};
                                                $.ajax({
                                                    //    url: "https://heatmap.snap4city.org/bbox.php?layer=" + map.testMetadata.metadata.mapName,
                                                    url: heatmapUrl +
                                                        "bbox.php?layer=" + map
                                                        .testMetadata.metadata.mapName,
                                                    type: "GET",
                                                    async: false,
                                                    dataType: 'json',
                                                    success: function(resultBbox) {
                                                        bboxJson = resultBbox;
                                                    },
                                                    error: function(errbbox) {
                                                        alert("Error in retrieving bounding box for current heatmap: " +
                                                            mapName);
                                                        console.log(errbbox);
                                                    }
                                                });

                                                /*    var bboxPage = "https://wmsserver.snap4city.org/"
                                                    var bboxHtmlContent = "";
                                                    $.get("test.php", function(htmlData){
                                                        bboxHtmlContent = htmlData;
                                                    });  */

                                                /*       var args = {

                                                                // reference to your leaflet map
                                                                map: map.defaultMapRef,

                                                                // WMS endpoint
                                                                url: 'https://wmsserver.snap4city.org/geoserver/Snap4City/wms',

                                                                // time slices to create (u probably want more than 2)
                                                                times: ["2019-04-18T11:06:18.000Z", "2019-04-18T09:06:18.000Z", "2019-04-18T07:06:18.000Z", "2019-04-18T05:06:18.000Z", "2019-04-18T03:06:18.000Z", "2019-04-18T01:06:18.000Z"],

                                                                // the bounds for the entire target WMS layer
                                                                bbox: ["24.90215", "60.1615000000001", "24.98005", "60.1959"],

                                                                // how long to show each frame in the animation
                                                                timeoutMs: 300,

                                                                frames: [
                                                                    {
                                                                        "time": "2019-04-18T11:06:18.000Z",
                                                                         "img": "https://heatmap.snap4city.org/base64.php?layer="+wmsDatasetName+"&date=20190418T110618Z"
                                                                       // "img": "SUkqAAgAAAATAAABAwABAAAAJwAAAAEBAwABAAAAJwAAAAIBAwAEAAAA8gAAAAMBAwABAAAACAAAAAYBAwABAAAAAgAAABUBAwABAAAABAAAABwBAwABAAAAAQAAAD0BAwABAAAAAQAAAEIBAwABAAAAAAEAAEMBAwABAAAAAAEAAEQBBAABAAAAogEAAEUBBAABAAAAwwEAAFIBAwABAAAAAgAAAFMBAwAEAAAA+gAAAA6DDAADAAAAAgEAAIKEDAAGAAAAGgEAAK+HAwAgAAAASgEAALCHDAACAAAAigEAALGHAgAIAAAAmgEAAAAAAAAIAAgACAAIAAEAAQABAAEAg3TCSFm1Xz+4fMraslFMPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA20/G+DDnOEAug5NwBhlOQAAAAAAAAAAAAQABAAAABwAABAAAAQACAAEEAAABAAEAAAgAAAEA5hABCLGHBwAAAAYIAAABAI4jCQiwhwEAAQALCLCHAQAAAIhtdJYdpHJAAAAAQKZUWEFXR1MgODR8AHja7djRCcJAEEXRrdaeUssUNyKYD8HAohHMvnNkGhi4s8Qxfq9vowcQ59G+/iG3fTcA9G8jkNm+GwDZ7bsBEN5/6R/i2q/XsSnIbF//ENJ/HY+NQWb7+oeF+6+JaTcAUtvfxwbhou3XZO8H7esfgvrv92OTkNm+/iG3fTcAFu5/pv39B2S2r3/Ibd8NgDX6/7R9/UNu+24AXLf/M9rXP+S2vz0HyGxf//Af/fdc39590L7vfdC+//kht3/dg/Y1D8HtAxH96x7y2tc8ZPave8hr38Zglfg1D95+vUPq228ZEGRrzQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHzhDpylbKQ="
                                                                     },
                                                                     {
                                                                        "time": "2019-04-18T09:06:18.000Z",
                                                                         "img": "https://heatmap.snap4city.org/base64.php?layer="+wmsDatasetName+"&date=20190418T090618Z"
                                                                      //   "img": "SUkqAAgAAAATAAABAwABAAAAJwAAAAEBAwABAAAAJwAAAAIBAwAEAAAA8gAAAAMBAwABAAAACAAAAAYBAwABAAAAAgAAABUBAwABAAAABAAAABwBAwABAAAAAQAAAD0BAwABAAAAAQAAAEIBAwABAAAAAAEAAEMBAwABAAAAAAEAAEQBBAABAAAAogEAAEUBBAABAAAAxwEAAFIBAwABAAAAAgAAAFMBAwAEAAAA+gAAAA6DDAADAAAAAgEAAIKEDAAGAAAAGgEAAK+HAwAgAAAASgEAALCHDAACAAAAigEAALGHAgAIAAAAmgEAAAAAAAAIAAgACAAIAAEAAQABAAEAg3TCSFm1Xz+4fMraslFMPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA20/G+DDnOEAug5NwBhlOQAAAAAAAAAAAAQABAAAABwAABAAAAQACAAEEAAABAAEAAAgAAAEA5hABCLGHBwAAAAYIAAABAI4jCQiwhwEAAQALCLCHAQAAAIhtdJYdpHJAAAAAQKZUWEFXR1MgODR8AHja7dXRCcMwEERBVeueUouKu5DkJwKDHWKDrZ2Ba2DhSa2dr5ZWDYjzal//kNu+NwD0bxHIbN8bANntewNA/xaCzParf85SENR+H89aENJ/Xz+LQWb7+ofJ++/bZzm4eft9X+veAND+cKV/iOu/xrMkZLavf8ht3xsAAf3X9lkWJmu/9p91IbP9d//eAJij/1+71z9kt+8NgPv2Xwe0r3+4Vvvf3Z7153sD4NrtH3BN/xDZv+5B+5qHjPZ1D5n96x60r3nIaF/3kNm/7iG4fSCuf8tBVvsWg1ni1zz4+/UOqX+/MSDIozQPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwhycnMYt0"
                                                                     },
                                                                    {
                                                                        "time": "2019-04-18T07:06:18.000Z",
                                                                         "img": https://heatmap.snap4city.org/base64.php?layer="+wmsDatasetName+"&date=20190418T070618Z
                                                                    //    "img": "SUkqAAgAAAATAAABAwABAAAAJwAAAAEBAwABAAAAJwAAAAIBAwAEAAAA8gAAAAMBAwABAAAACAAAAAYBAwABAAAAAgAAABUBAwABAAAABAAAABwBAwABAAAAAQAAAD0BAwABAAAAAQAAAEIBAwABAAAAAAEAAEMBAwABAAAAAAEAAEQBBAABAAAAogEAAEUBBAABAAAAzwEAAFIBAwABAAAAAgAAAFMBAwAEAAAA+gAAAA6DDAADAAAAAgEAAIKEDAAGAAAAGgEAAK+HAwAgAAAASgEAALCHDAACAAAAigEAALGHAgAIAAAAmgEAAAAAAAAIAAgACAAIAAEAAQABAAEAg3TCSFm1Xz+4fMraslFMPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA20/G+DDnOEAug5NwBhlOQAAAAAAAAAAAAQABAAAABwAABAAAAQACAAEEAAABAAEAAAgAAAEA5hABCLGHBwAAAAYIAAABAI4jCQiwhwEAAQALCLCHAQAAAIhtdJYdpHJAAAAAQKZUWEFXR1MgODR8AHja7dbRDYJAEEVRqqUna9nixighJCofupLAvnNgGpjkDkzT8er5Amke7esfctuveRkbgaD+5619/UNu+24AZLfvBoD+bQgy23cDILv9avqHyP7bNjYGIe2397E1COi/7Y/NQWb7bgBcvP214x+61z8M0n/n2CQEtl/L2CZktu8GQFD/tT82C5nt6x9y23cDYMD+67uxZQhtf32A6/ZfHe3rH3LbdwPgPO2/9np09/qH8/b/6Rb8s33g/O2Xf33Qfkf7wPD96x7C2wdi2tc9ZPave8hr3wYhr3+bg6z2bQxGiV/z4Nuvd0j99lsGBLmV5gEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADrcAd+SmZk="
                                                                    },
                                                                    {
                                                                        "time": "2019-04-18T05:06:18.000Z",
                                                                         "img": "https://heatmap.snap4city.org/base64.php?layer="+wmsDatasetName+"&date=20190418T050618Z"
                                                                     //   "img": "SUkqAAgAAAATAAABAwABAAAAJwAAAAEBAwABAAAAJwAAAAIBAwAEAAAA8gAAAAMBAwABAAAACAAAAAYBAwABAAAAAgAAABUBAwABAAAABAAAABwBAwABAAAAAQAAAD0BAwABAAAAAQAAAEIBAwABAAAAAAEAAEMBAwABAAAAAAEAAEQBBAABAAAAogEAAEUBBAABAAAA1AEAAFIBAwABAAAAAgAAAFMBAwAEAAAA+gAAAA6DDAADAAAAAgEAAIKEDAAGAAAAGgEAAK+HAwAgAAAASgEAALCHDAACAAAAigEAALGHAgAIAAAAmgEAAAAAAAAIAAgACAAIAAEAAQABAAEAg3TCSFm1Xz+4fMraslFMPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA20/G+DDnOEAug5NwBhlOQAAAAAAAAAAAAQABAAAABwAABAAAAQACAAEEAAABAAEAAAgAAAEA5hABCLGHBwAAAAYIAAABAI4jCQiwhwEAAQALCLCHAQAAAIhtdJYdpHJAAAAAQKZUWEFXR1MgODR8AHja7dvRCYNAEEVRq7Wn1LLFTUggSIgYRQJx3jnrNDBwd7+cpt+r5wekebSvf8ht3x0A4f3P+oe49uf3sRlo3v782b07APSvf8ht3x0A2e3rH7L7r+EOgLj2xzK2BiH9j/WxOWjc/vg+NgjN2h/7xxbhov2PY627A0D7+gftVy1jqxDSf62PzULj9mt7bBcatl/7x5ahSf91fGwZLt5+nRvbhgv2f7b71wH+p/063/au7t0BENP+5gFa9q97yGtf85DXvu4hr3/dQ177moe89nUPef3rHvLa1zz07n/XAdq+/ZqHxm7+ywFvv/9wIfXttwxIar80DwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcMIdCPB4EA=="
                                                                    },
                                                                    {
                                                                        "time": "2019-04-18T03:06:18.000Z",
                                                                         "img": "https://heatmap.snap4city.org/base64.php?layer="+wmsDatasetName+"&date=20190418T030618Z"
                                                                    //    "img": "SUkqAAgAAAATAAABAwABAAAAJwAAAAEBAwABAAAAJwAAAAIBAwAEAAAA8gAAAAMBAwABAAAACAAAAAYBAwABAAAAAgAAABUBAwABAAAABAAAABwBAwABAAAAAQAAAD0BAwABAAAAAQAAAEIBAwABAAAAAAEAAEMBAwABAAAAAAEAAEQBBAABAAAAogEAAEUBBAABAAAAwwEAAFIBAwABAAAAAgAAAFMBAwAEAAAA+gAAAA6DDAADAAAAAgEAAIKEDAAGAAAAGgEAAK+HAwAgAAAASgEAALCHDAACAAAAigEAALGHAgAIAAAAmgEAAAAAAAAIAAgACAAIAAEAAQABAAEAg3TCSFm1Xz+4fMraslFMPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA20/G+DDnOEAug5NwBhlOQAAAAAAAAAAAAQABAAAABwAABAAAAQACAAEEAAABAAEAAAgAAAEA5hABCLGHBwAAAAYIAAABAI4jCQiwhwEAAQALCLCHAQAAAIhtdJYdpHJAAAAAQKZUWEFXR1MgODR8AHja7dfBCcMwEEVBVZueVEuK2xDwJSEQG1tg6c+IbUDwVnZr49WjVQPi1LPVe9wEZLZvB4D+3Qhktm8HQHb7dgDo3w1BZvt2AAS2X5/jtmDh/uv/uDFYrP3aP24NFum/jrVvB0B2+3YAZLevfwjv3w6AnH/+XwdYsv3dB5i+/1MHmK79yw4wTftDDnDr/oce4JbtDz99G+BmC2Bg798DrNd+PzDA3O33EwPM03+/aIA52tc85LWve8jrX/eQ177mIa993UMW3/iQ+/ZrHrz9ugdvv+Zh/Xe/NA/efr1D5NsPJD38mgcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADjhBT9JH44="
                                                                    },
                                                                    {
                                                                        "time": "2019-04-18T01:06:18.000Z",
                                                                         "img": "https://heatmap.snap4city.org/base64.php?layer="+wmsDatasetName+"&date=20190418T010618Z"
                                                                      //  "img": "SUkqAAgAAAATAAABAwABAAAAJwAAAAEBAwABAAAAJwAAAAIBAwAEAAAA8gAAAAMBAwABAAAACAAAAAYBAwABAAAAAgAAABUBAwABAAAABAAAABwBAwABAAAAAQAAAD0BAwABAAAAAQAAAEIBAwABAAAAAAEAAEMBAwABAAAAAAEAAEQBBAABAAAAogEAAEUBBAABAAAAvgEAAFIBAwABAAAAAgAAAFMBAwAEAAAA+gAAAA6DDAADAAAAAgEAAIKEDAAGAAAAGgEAAK+HAwAgAAAASgEAALCHDAACAAAAigEAALGHAgAIAAAAmgEAAAAAAAAIAAgACAAIAAEAAQABAAEAg3TCSFm1Xz+4fMraslFMPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA20/G+DDnOEAug5NwBhlOQAAAAAAAAAAAAQABAAAABwAABAAAAQACAAEEAAABAAEAAAgAAAEA5hABCLGHBwAAAAYIAAABAI4jCQiwhwEAAQALCLCHAQAAAIhtdJYdpHJAAAAAQKZUWEFXR1MgODR8AHja7ddbCsJAEEXB2f8OerUjIkI+FJOY59yqpjcgnOnY2v56b70BcZ7t6x9y2/cGgP79IpDZvjcAstv3BkDw7X8PkPGf/9sAw7b/c4Dh+l80wCDxrxggt39vAOS27w2A7Pb1D5n912SBjPbrwwLjtl8zFhir/1q4wP3br5UL3LP92miB+/RfGy9w/fZrxwWu2f+e3Vd/LXCt9o/ofrrA+Y5sXv8weP+6h7z2NQ9Z7bv1kNe/7iGvfc1DVvtuPeT1r3vIa1/zkNe/7iH39msexmy/z/vuB3JuP5Bz+4EgvukBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD+8QDzyKb4"
                                                                    }
                                                                     ],

                                                            // OPTIONAL - only required if you are not providing your own frames
                                                            // **See defining image request for more info**
                                                            // due to CORS restrictions, you need to define an async function to ask your proxy server to make the WMS
                                                            // GetMap request and resolve the result (as a base64 encoded string). This example is using a call to a server function called
                                                            // 'getImage' (in MeteorJS). Note that if your target WMS is CORS enabled, you can just define a direct HTTP request here instead.
                                                            proxyFunction: function(requestUrl, time, resolve, reject){

                                                                $.ajax({
                                                                    type: "GET",
                                                                    url: requestUrl,
                                                                    beforeSend: function (xhr) {
                                                                        xhr.overrideMimeType('text/plain; charset=x-user-defined');
                                                                    },
                                                                    success: function (result, textStatus, jqXHR) {
                                                                        if(result.length < 1){
                                                                            alert("The thumbnail doesn't exist");
                                                                            $("#thumbnail").attr("src", "data:image/png;base64,");
                                                                            return
                                                                        }

                                                                        var binary = "";
                                                                        var responseText = jqXHR.responseText;
                                                                        var responseTextLen = responseText.length;

                                                                        for ( i = 0; i < responseTextLen; i++ ) {
                                                                            binary += String.fromCharCode(responseText.charCodeAt(i) & 255)
                                                                        }
                                                                     //   $("#thumbnail").attr("src", "data:image/png;base64,"+btoa(binary));
                                                                        resolve({ time: time, img: btoa(binary) });
                                                                    },
                                                                    error: function(xhr, textStatus, errorThrown){
                                                                        alert("Error in getting document "+textStatus);
                                                                    }
                                                                });

                                                            },

                                                            // OPTIONAL - only required if you are not providing your own frames
                                                            // your WMS query params
                                                            params: {
                                                                BBOX: "24.90215,60.1615000000001,24.98005,60.1959",
                                                                LAYERS: "Snap4City:" + wmsDatasetName,
                                                                SRS: "EPSG:4326",
                                                                VERSION: "1.1.1",
                                                                WIDTH: 256,
                                                                HEIGHT: 256,
                                                                transparent: true,

                                                                // ncWMS params (optional)
                                                            //    abovemaxcolor: "extend",
                                                            //    belowmincolor: "extend",
                                                            //    colorscalerange: "10.839295,13.386014",
                                                            //    elevation: "-5.050000000000001",
                                                                format: "image/png",
                                                            //    logscale: false,
                                                            //    numcolorbands: "50",
                                                                opacity: current_opacity,
                                                            //    styles: "boxfill/rainbow"
                                                            }

                                                         };

                                                        LeafletWmsAnimator.initAnimation(args, function(frames){

                                                            // if you didn't provide your own frames this callback function returns the
                                                            // array of images with their respective time stamps (e.g. you can use timestamps in UI)
                                                        });  */

                                                var upEastLat = parseFloat(bboxJson['maxy']);
                                                var upEastLon = parseFloat(bboxJson['maxx']);
                                                var bottomWestLat = parseFloat(bboxJson[
                                                    'miny']);
                                                var bottomWestLon = parseFloat(bboxJson[
                                                    'minx']);
                                                //    var imageUrl = 'https://wmsserver.snap4city.org/geoserver/wms/animate?LAYERS=' + wmsDatasetName + '&aparam=time&avalues=' + animationStringTimestamp + '&format=image/gif;subtype=animated&format_options=gif_loop_continuosly:true;layout:message;gif_frames_delay:500&transparent=true';
                                                var imageUrl = geoServerUrl +
                                                    'geoserver/wms/animate?LAYERS=' +
                                                    wmsDatasetName + '&aparam=time&avalues=' +
                                                    animationStringTimestamp +
                                                    '&format=image/gif;subtype=animated&format_options=gif_loop_continuosly:true;layout:message;gif_frames_delay:500&transparent=true';
                                                var imageBounds = [
                                                    [bottomWestLat, bottomWestLon],
                                                    [upEastLat, upEastLon]
                                                ];
                                                var overlayOpacity = current_opacity;

                                                // ANIMATED GIF LAYER
                                                if (is3dOn) {
                                                    const bounds = [bottomWestLon,
                                                        bottomWestLat, upEastLon, upEastLat
                                                    ];
                                                    loadGif(imageUrl, bounds, "heatmap");
                                                }
                                                var animatedLayer = L.imageOverlay(imageUrl,
                                                    imageBounds, {
                                                        opacity: overlayOpacity,
                                                        pane: 'Snap4City:' + wmsDatasetName
                                                    }).addTo(map.defaultMapRef);
                                                map.eventsOnMap.push(animatedLayer);

                                                // add legend to map
                                                $('#heatmap-info-btn').css('display', 'block');
                                                $('#heatmap-info-btn').click();
                                                map.legendHeatmap.create();
                                                //    $("<?= $_REQUEST['name_w'] ?>_animation").prop("checked",true);
                                                document.getElementById(
                                                        "<?= $_REQUEST['name_w'] ?>_animation")
                                                    .checked = true;
                                                //     $("<?= $_REQUEST['name_w'] ?>_slidermaxOpacity").slider({ disabled: "true" });
                                                $("<?= $_REQUEST['name_w'] ?>_slidermaxOpacity")
                                                    .slider('disable');
                                                //     document.getElementById("<?= $_REQUEST['name_w'] ?>_slidermaxOpacity").slider({ disabled: "true" });
                                                //     document.getElementById("<?= $_REQUEST['name_w'] ?>_slidermaxOpacity").slider({ disabled: "true" });
                                                var mapControlsContainer = document
                                                    .getElementsByClassName("leaflet-control")[
                                                        0];

                                                var heatmapLegendColors = L.control({
                                                    position: 'bottomleft'
                                                });

                                                heatmapLegendColors.onAdd = function(map) {

                                                    var div = L.DomUtil.create('div',
                                                            'info legend'),
                                                        grades = ["Legend"];
                                                    //    labels = ["http://localhost/dashboardSmartCity/trafficRTDetails/legend.png"];
                                                    var legendImgPath = heatmapRange[0]
                                                        .iconPath; // OLD-API
                                                    div.innerHTML += " <img src=" +
                                                        legendImgPath + " height='100%'" +
                                                        '<br>'; /// OLD-API
                                                    return div;
                                                };

                                                heatmapLegendColors.addTo(map.defaultMapRef);
                                                //  map.eventsOnMap.push(heatmap);

                                                event.legendColors = heatmapLegendColors;
                                                map.eventsOnMap.push(event);
                                                loadingDiv.setStatus('ok');
                                            }
                                        }

                                    } else {
                                        console.log("Ko Heatmap");
                                        console.log(JSON.stringify(errorData));
                                        loadingDiv.setStatus('ko');
                                    }
                                } catch (err) {
                                    console.log("Error: " + err);
                                    loadingDiv.setStatus('ko');
                                }
                            },
                            error: function(errorData) {
                                console.log("Ko Heatmap");
                                console.log(JSON.stringify(errorData));
                                loadingDiv.setStatus('ko');
                            }
                        });
                    }

                    if (addMode === 'additive') {
                        //   if (event.animationFlag === true) {
                        //       addHeatmapToMap(true);
                        //   } else {
                        addHeatmapToMap();
                        //   }
                    }
                    if (addMode === 'exclusive') {
                        map.defaultMapRef.eachLayer(function(layer) {
                            map.defaultMapRef.removeLayer(layer);
                        });
                        map.eventsOnMap.length = 0;

                        //Remove WidgetAlarm active pins
                        $.event.trigger({
                            type: "removeAlarmPin",
                        });
                        //Remove WidgetEvacuationPlans active pins
                        $.event.trigger({
                            type: "removeEvacuationPlanPin",
                        });
                        //Remove WidgetEvents active pins
                        $.event.trigger({
                            type: "removeEventFIPin",
                        });
                        //Remove WidgetResources active pins
                        $.event.trigger({
                            type: "removeResourcePin",
                        });
                        //Remove WidgetOperatorEvents active pins
                        $.event.trigger({
                            type: "removeOperatorEventPin",
                        });
                        //Remove WidgetTrafficEvents active pins
                        $.event.trigger({
                            type: "removeTrafficEventPin",
                        });
                        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                            attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                            maxZoom: 18
                        }).addTo(map.defaultMapRef);

                        addHeatmapToMap();
                    }
                }
                eventMapManager.legacyTrigger(event, addHeatmapToMap);
            });

            $(document).on('removeAlarm', function(event) {
                if (event.target === map.mapName) {
                    let passedData = event.passedData;

                    for (let j = 0; j < passedData.length; j++) {

                        let lng = passedData[j].lng;
                        let lat = passedData[j].lat;
                        let eventType = passedData[j].eventType;
                        let eventName = passedData[j].eventName;

                        for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                            if ((map.eventsOnMap[i].lng === lng) && (map.eventsOnMap[i].lat === lat) && (map
                                    .eventsOnMap[i].eventType === eventType) && (map.eventsOnMap[i]
                                    .eventName === eventName)) {
                                map.defaultMapRef.removeLayer(map.eventsOnMap[i].marker);
                                map.eventsOnMap.splice(i, 1);
                            }
                        }
                    }

                    if (lastPopup !== null) {
                        lastPopup.closePopup();
                    }
                    //console.log(map.eventsOnMap.length);

                    //   resizeMapView(map.defaultMapRef);
                }
            });

            $(document).on('removeEvacuationPlans', function(event) {
                if (event.target === map.mapName) {
                    if (lastPopup !== null) {
                        lastPopup.closePopup();
                    }

                    for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                        if (map.eventsOnMap[i].eventType === 'evacuationPlan') {
                            map.defaultMapRef.removeLayer(map.eventsOnMap[i].polyGroup);
                            map.eventsOnMap.splice(i, 1);
                            //    resizeMapView(map.defaultMapRef);
                        }
                    }
                    //console.log(map.eventsOnMap.length);
                }
            });

            $(document).on('removeSelectorPin', function(event) {
                function removeSelectorPin() {
                    var passedData = event.passedData;

                    var desc = passedData.desc;
                    var display = passedData.display;

                    if (is3dOn) {
                        delete apiUrls3D[`${passedData.desc}`];
                        removeLayerSet(`${passedData.desc}-layer`, layers.pin);
                        removeLayerSet(`${passedData.desc}-elevated`, layers.pin);
                        removeLayerSet(passedData.desc, layers.fixedPins);
                        removeLayerSet(`${passedData.desc}-RT`, layers.fixedPins);
                        updateLayers();
                    }

                    if (desc == "") {
                        desc = passedData.query;
                    }

                    if (stopGeometryAjax.hasOwnProperty(desc)) {
                        stopGeometryAjax[desc] = true;
                    }

                    if (display !== 'geometries') {
                        if (gisLayersOnMap[desc] && gisLayersOnMap[desc] !== "loadError") {
                            map.defaultMapRef.removeLayer(gisLayersOnMap[desc]);
                            for (var layer in gisLayersOnMap[desc]._layers) {
                                oms.removeMarker(gisLayersOnMap[desc]._layers[layer]);
                            }
                            if (gisGeometryLayersOnMap.hasOwnProperty(desc)) {
                                if (gisGeometryLayersOnMap[desc].length > 0) {
                                    for (var i = 0; i < gisGeometryLayersOnMap[desc].length; i++) {
                                        map.defaultMapRef.removeLayer(gisGeometryLayersOnMap[desc][i]);
                                    }
                                    delete gisGeometryLayersOnMap[desc];
                                }
                            }
                        }
                        delete gisLayersOnMap[desc];
                    } else {
                        if (gisGeometryLayersOnMap.hasOwnProperty(desc)) {
                            if (gisGeometryLayersOnMap[desc].length > 0) {
                                for (var i = 0; i < gisGeometryLayersOnMap[desc].length; i++) {
                                    map.defaultMapRef.removeLayer(gisGeometryLayersOnMap[desc][i]);
                                }
                                delete gisGeometryLayersOnMap[desc];
                            }
                        }
                    }

                    delete gisGeometryTankForFullscreen[desc];
                }
                eventMapManager.legacyTrigger(event, removeSelectorPin);
            });

            $(document).on('removeBubbles', function(event) {
                function removeBubble() {
                    const passedData = event.passedData;
                    const desc = passedData.desc == "" ? passedData.query : passedData.desc;
                    map.defaultMapRef.removeLayer(bubbles[desc]);
                }
                eventMapManager.legacyTrigger(event, removeBubble);
            });

            $(document).on('removeEventFI', function(event) {
                if (event.target === map.mapName) {
                    let passedData = event.passedData;

                    for (let j = 0; j < passedData.length; j++) {

                        let lng = passedData[j].lng;
                        let lat = passedData[j].lat;
                        let eventType = passedData[j].eventType;
                        let eventName = passedData[j].name;

                        for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                            if ((map.eventsOnMap[i].lng === lng) && (map.eventsOnMap[i].lat === lat) && (map
                                    .eventsOnMap[i].eventType === eventType) && (map.eventsOnMap[i].name ===
                                    eventName)) {
                                map.defaultMapRef.removeLayer(map.eventsOnMap[i].marker);
                                map.eventsOnMap.splice(i, 1);
                            }
                        }
                    }

                    if (lastPopup !== null) {
                        lastPopup.closePopup();
                    }
                    //console.log(map.eventsOnMap.length);

                    //  resizeMapView(map.defaultMapRef);
                }
            });

            $(document).on('removeResource', function(event) {
                if (event.target === map.mapName) {
                    let passedData = event.passedData;

                    for (let j = 0; j < passedData.length; j++) {

                        let lng = passedData[j].lng;
                        let lat = passedData[j].lat;
                        let eventName = passedData[j].eventName;
                        let eventType = passedData[j].eventType;

                        for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                            if ((map.eventsOnMap[i].lng === lng) && (map.eventsOnMap[i].lat === lat) && (map
                                    .eventsOnMap[i].eventType === eventType) && (map.eventsOnMap[i]
                                    .eventName === eventName)) {
                                map.defaultMapRef.removeLayer(map.eventsOnMap[i].marker);
                                map.eventsOnMap.splice(i, 1);
                            }
                        }
                    }

                    if (lastPopup !== null) {
                        lastPopup.closePopup();
                    }
                    //console.log(map.eventsOnMap.length);

                    //   resizeMapView(map.defaultMapRef);
                }
            });

            $(document).on('removeOperatorEvent', function(event) {
                if (event.target === map.mapName) {
                    let passedData = event.passedData;

                    for (let j = 0; j < passedData.length; j++) {

                        let lng = passedData[j].lng;
                        let lat = passedData[j].lat;
                        let eventType = passedData[j].eventType;
                        let eventName = passedData[j].name;

                        for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                            if ((map.eventsOnMap[i].lng === lng) && (map.eventsOnMap[i].lat === lat) && (map
                                    .eventsOnMap[i].eventType === eventType) && (map.eventsOnMap[i].name ===
                                    eventName)) {
                                map.defaultMapRef.removeLayer(map.eventsOnMap[i].marker);
                                map.eventsOnMap.splice(i, 1);
                            }
                        }
                    }

                    if (lastPopup !== null) {
                        lastPopup.closePopup();
                    }
                    //console.log(map.eventsOnMap.length);

                    //  resizeMapView(map.defaultMapRef);
                }
            });

            $(document).on('removeTrafficEvent', function(event) {
                if (event.target === map.mapName) {
                    let passedData = event.passedData;

                    for (let j = 0; j < passedData.length; j++) {

                        let lng = passedData[j].lng;
                        let lat = passedData[j].lat;
                        let eventType = passedData[j].eventType;
                        let eventName = passedData[j].eventName;

                        for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                            if ((map.eventsOnMap[i].lng === lng) && (map.eventsOnMap[i].lat === lat) && (map
                                    .eventsOnMap[i].eventType === eventType) && (map.eventsOnMap[i]
                                    .eventName === eventName)) {
                                map.defaultMapRef.removeLayer(map.eventsOnMap[i].marker);
                                map.eventsOnMap.splice(i, 1);
                            }
                        }
                    }

                    if (lastPopup !== null) {
                        lastPopup.closePopup();
                    }

                    //console.log(map.eventsOnMap.length);

                    //  resizeMapView(map.defaultMapRef);
                }
            });

            $(document).on('removeTrafficRealTimeDetails', function(event) {
                if (event.target === map.mapName) {
                    if (is3dOn) {
                        // removeLayerSet('traffic-line-layer', layers.traffic);
                        delete apiUrls3D['traffic']
                        layers.crest = null;
                        // removeLayerSet('mock-icon-layer', layers.pin);
                        updateLayers();
                    }
                    for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                        if (map.eventsOnMap[i].eventType === "trafficRealTimeDetails") {
                            map.defaultMapRef.removeLayer(map.eventsOnMap[i].marker);
                            map.defaultMapRef.removeControl(map.eventsOnMap[i].legend);
                            map.defaultMapRef.removeLayer(map.eventsOnMap[i].trafficLayer);
                            map.eventsOnMap.splice(i, 1);
                        }
                    }

                    //  resizeMapView(map.defaultMapRef);
                }
            });

            $(document).on('removeHeatmap', function(event) {
                function removeHeatmap(resetPageFlag) {
                    if (baseQuery.includes("heatmap.php")) { // OLD HEATMAP
                        if (resetPageFlag == true) {
                            current_page =
                                0; // CTR SE VA BENE BISOGNA DISTINGUERE IL CASO CHE SI STIA NAVIGANDO LA STESSA HEATMAP_NAME OPPURE UN'ALTRA NUOVA HEATMP_NAME
                            current_radius = null;
                            current_opacity = null;
                            changeRadiusOnZoom = false;
                            estimateRadiusFlag = false;
                            estimatedRadius = null;
                            wmsDatasetName = null;
                        }
                        map.testData = [];
                        map.heatmapLayer.setData({
                            data: []
                        });
                        map.defaultMapRef.removeLayer(map.heatmapLayer);
                        if (resetPageFlag != true) {
                            if (map.cfg["radius"] != current_radius) {
                                setOption('radius', current_radius, 1);
                            }
                            if (map.cfg["maxOpacity"] != current_opacity) {
                                setOption('maxOpacity', current_opacity, 2);
                            }
                        }
                        // map.defaultMapRef.removeControl(map.legendHeatmap);
                        // $('#heatmap-info-btn').css('display', 'none');
                        // $('#heatmapLegend').remove();
                        /*    if(map.heatmapLegendColors) {
                                map.defaultMapRef.removeControl(map.heatmapLegendColors);
                            }*/
                    } else { // NEW WMS HEATMAP
                        if (resetPageFlag == true) {
                            current_page = 0;
                        }
                            gifWms.isAnimated = false;
                            layers.wms = null;
                        updateLayers();
                        if (wmsLayer != null)
                            map.defaultMapRef.removeLayer(wmsLayer);
                        $('#heatmap-info-btn').css('display', 'none');
                        $('#heatmapLegend').remove();
                        switchToFirstActiveInfoMenu();
                        // map.defaultMapRef.removeControl(map.legendHeatmap);
                    }
                }

                function removeHeatmapColorLegend(index, resetPageFlag) {
                    if (baseQuery.includes("heatmap.php")) { // OLD HEATMAP
                        if (resetPageFlag == true) {
                            current_page =
                                0; // CTR SE VA BENE BISOGNA DISTINGUERE IL CASO CHE SI STIA NAVIGANDO LA STESSA HEATMAP_NAME OPPURE UN'ALTRA NUOVA HEATMP_NAME
                            current_radius = null;
                            current_opacity = null;
                            changeRadiusOnZoom = false;
                            estimateRadiusFlag = false;
                            estimatedRadius = null;
                            wmsDatasetName = null;
                        }
                        map.testData = [];
                        map.heatmapLayer.setData({
                            data: []
                        });
                        map.defaultMapRef.removeLayer(map.heatmapLayer);
                        if (resetPageFlag != true) {
                            if (map.cfg["radius"] != current_radius) {
                                setOption('radius', current_radius, 1);
                            }
                            if (map.cfg["maxOpacity"] != current_opacity) {
                                setOption('maxOpacity', current_opacity, 2);
                            }
                        }
                        map.defaultMapRef.removeControl(map.eventsOnMap[index].legendColors);
                    } else { // NEW WMS HEATMAP
                        if (resetPageFlag == true) {
                            current_page = 0;
                        }
                        // if (is3dOn) {
                        //     gifWms.isAnimated = false;
                        //     layers.wms = null;
                        //     updateLayers();
                        // }
                        map.defaultMapRef.removeControl(map.eventsOnMap[index].legendColors);
                        if (wmsLayer != null)
                            map.defaultMapRef.removeLayer(wmsLayer);
                    }
                }

                if (event.target === map.mapName) {
                    for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                        if (event.isTrafficHeatmap) {
                            // rimuovi traffic heatmap
                            if (map.eventsOnMap[i].eventType === 'traffic_heatmap') {
                                map.defaultMapRef.removeLayer(trafficWmsLayer);
                                map.defaultMapRef.removeControl(map.trafficLegendHeatmap);
                                map.defaultMapRef.removeControl(map.eventsOnMap[i + 1].legendColors);
                                map.eventsOnMap.splice(i, 2);
                                break;
                            } else if (map.eventsOnMap[i]._url && map.eventsOnMap[i]._url.includes(
                                    "animate")) {
                                map.defaultMapRef.removeLayer(map.eventsOnMap[i]);
                                map.defaultMapRef.removeControl(map.trafficLegendHeatmap);
                                map.defaultMapRef.removeControl(map.eventsOnMap[i + 1].legendColors);
                                map.eventsOnMap.splice(i, 2);
                                break;
                            }

                            $('#traffic-info-btn').css('display', 'none');
                            $('#trafficHeatmapLegend').remove();
                            switchToFirstActiveInfoMenu();
                            if (is3dOn) {
                                gifWmsTraffic.isAnimated = false;
                                layers.trafficWms = null;
                                updateLayers();
                            }
                        } else if (i > 0 && map.eventsOnMap[i - 1].eventType === 'traffic_heatmap') {
                            // logica per evitare di rimuovere layer di trafficflowmanager
                        } else if (map.eventsOnMap[i].eventType === 'traffic_heatmap') {
                            // logica per evitare di rimuovere layer di trafficflowmanager
                        } else if (i > 0 && map.eventsOnMap[i - 1]._url && map.eventsOnMap[i - 1]._url
                            .includes("animate") && map.eventsOnMap[i - 1].options.pane.includes(
                                "TrafficFlowManager")) {
                            // logica per evitare di rimuovere layer di trafficflowmanager
                        } else if (map.eventsOnMap[i]._url && map.eventsOnMap[i]._url.includes("animate") &&
                            map.eventsOnMap[i].options.pane.includes("TrafficFlowManager")) {
                            // logica per evitare di rimuovere layer di trafficflowmanager
                        } else if (map.eventsOnMap[i].eventType === 'heatmap') {
                            removeHeatmap(true);
                            map.eventsOnMap.splice(i, 1);
                        } else if (map.eventsOnMap[i].type === 'addHeatmap') {
                            removeHeatmapColorLegend(i, true);
                            map.eventsOnMap.splice(i, 1);
                        } else if (map.eventsOnMap[i] !== null && map.eventsOnMap[i] !== undefined) {
                            if (map.eventsOnMap[i].eventType != 'trafficRealTimeDetails') {
                                map.defaultMapRef.removeLayer(map.eventsOnMap[i]);
                                map.eventsOnMap.splice(i, 1);
                                removeHeatmap(true);
                            }
                        }
                    }
                }
                // eventMapManager._legacyTriggerRemove(event, removeHeatmapFromMap);
                map.defaultMapRef.off('click', heatmapClick);
            });

            $(document).on('toggleAddMode', function(event) {
                eventMapManager.setAddMode(event.addMode);
            });
        }

        // Funzione che risponde all'evento resize del widget, indotto o dal ridimensionatore manuale dell'editor di dashboard oppure dalla dashboard stessa in modalità responsive
        function resizeWidget() {
            setWidgetLayout(hostFile, widgetName, widgetContentColor, widgetHeaderColor, widgetHeaderFontColor,
                showHeader, headerHeight, hasTimer);
        }

        //Fine definizioni di funzione

        // inizio funzioni deckgl
        // ********** LAYERS **********
        function createTileLayer(data, id = 'map-layer') {
            return new deck.TileLayer({
                id: id,
                // https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Tile_servers
                data: data,

                minZoom: 0,
                maxZoom: 18,
                tileSize: 256,
                opacity: 1,
                pickable: false,
                parameters: {
                    depthTest: false
                },

                renderSubLayers: props => {
                    const {
                        bbox: {
                            west,
                            south,
                            east,
                            north
                        }
                    } = props.tile;

                    return new deck.BitmapLayer(props, {
                        data: null,
                        image: props.data,
                        bounds: [west, south, east, north]
                    });
                },
                //onClick: (info, event) => addMarker(info.coordinate),

            });
        }

        function createTiledBackgroundLayer() {
            return new deck.TileLayer({
                id: 'background-layer',

                minZoom: 0,
                maxZoom: 20,
                tileSize: 256,
                opacity: 1,
                pickable: false,
                parameters: {
                    depthTest: false
                },

                renderSubLayers: props => {
                    const {
                        bbox: {
                            west,
                            south,
                            east,
                            north
                        }
                    } = props.tile;

                    return new BackgroundLayer(props, {
                        bounds: [west, south, east, north],
                    });
                },
            });
        }

        function createBitmapLayer(image, bounds, id = 'bitmap-layer') {
            return new deck.BitmapLayer({
                id,
                //image: image,
                image: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-districts.png',
                bounds,
            });
        }

        function createImageLayer(image, bounds, id = 'gif-layer', opacity = 1) {
            return new deck.BitmapLayer({
                id,
                data: image,
                opacity: opacity,
                image: image,
                extensions: [new deck._TerrainExtension()],
                terrainDrawMode: 'drape',
                bounds: bounds,
                textureParameters: {
                    [map3dGL.TEXTURE_WRAP_S]: map3dGL.REPEAT,
                    [map3dGL.TEXTURE_WRAP_T]: map3dGL.REPEAT,
                },
                parameters: {
                    depthTest: false
                },
            });
        }

        function createBitmapLayer2(image, bounds, id = 'bitmap-layer') {
            return new deck.BitmapLayer({
                id,
                image: image,
                //image: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-districts.png',
                bounds: [-122.5190, 37.7045, -122.355, 37.829],
                //bounds,
            });
        }

        function createHeatmapLayer(props) {
            var {
                type = "heatmap"
            } = props;
            if (type == "heatmap") {
                gifWms.isAnimated = false;
            } else if (type = "traffic") {
                gifWmsTraffic.isAnimated = false;
            }
            const blurredParams = {
                [map3dGL.TEXTURE_WRAP_S]: map3dGL.CLAMP_TO_EDGE,
                [map3dGL.TEXTURE_WRAP_T]: map3dGL.CLAMP_TO_EDGE,
                [map3dGL.TEXTURE_MIN_FILTER]: map3dGL.LINEAR_MIPMAP_LINEAR,
                [map3dGL.TEXTURE_MAG_FILTER]: map3dGL.LINEAR,
            };
            const pixelParams = {
                [map3dGL.TEXTURE_MIN_FILTER]: map3dGL.NEAREST,
                [map3dGL.TEXTURE_MAG_FILTER]: map3dGL.NEAREST,
            };
            const selectedParams = type == "heatmap" ? blurredParams : pixelParams;
            return new snap4deck.ManagedTileLayer({
                id: 'heatmap-layer',
                type: "heatmap",
                tileSize: 256,
                opacity: 0.2,
                minZoom: 0,
                maxZoom: 18,
                pickable: false,
                renderSubLayers: props => {
                    const {
                        bbox: {
                            west,
                            south,
                            east,
                            north
                        }
                    } = props.tile;

                    return new deck.BitmapLayer(props, {
                        data: null,
                        image: props.data,
                        extensions: [new deck._TerrainExtension()],
                        terrainDrawMode: 'drape',
                        textureParameters: selectedParams,
                        bounds: [west, south, east, north],
                        parameters: { 
                            depthTest: false
                        },
                    });
                },
                updateTriggers: {
                    renderSubLayers: wmsBlurred
                },
                ...props,
            });

        }

        function createGeoJSONLayer(props) {
            return new deck.GeoJsonLayer({
                id: 'geojson-layer',
                extruded: true,
                pickable: true,
                stroked: true,
                filled: true,
                lineWidthScale: 20,
                lineWidthMinPixels: 10,
                getFillColor: [255, 0, 0, 200],
                getLineColor: [0, 0, 0],
                getElevation: f => f.properties.height,
                extensions: [new deck._TerrainExtension()],
                terrainDrawMode: 'offset',
                autoHighlight: true,
                highlightColor: [255, 0, 0, 200],
                getRadius: 100,
                getLineWidth: 100,
                ...props
            });
        }

        function createWhatifLayer(props) {
            const data = JSON.parse(JSON.stringify(props.data));
            for (let feature of data.features) {
                if (feature.geometry.type === 'Polygon') {
                    const [innerPath, outerPath] = snap4deck.createSidedPath(feature.geometry.coordinates[0].slice(0,-1), 5);
                    outerPath.push(outerPath[0]);
                    innerPath.push(innerPath[0]);
                    feature.geometry.coordinates[0] = outerPath;
                    feature.geometry.coordinates.push(innerPath);
                }
                else if (feature.geometry.type === 'Point') {
                    const radius = feature.properties.radius || 1;
                    const points = snap4deck.createCircleFromWorldCoord(feature.geometry.coordinates, radius, 10 * radius);
                    feature.geometry.type = 'Polygon';
                    const [innerPath, outerPath] = snap4deck.createSidedPath(points, 5);
                    outerPath.push(outerPath[0]);
                    innerPath.push(innerPath[0]);
                    feature.geometry.coordinates = [outerPath, innerPath];
                }
            }
            return [new deck.GeoJsonLayer({
                id: 'whatif',
                extruded: true,
                stroked: true,
                getFillColor: [51, 136, 255, 140],
                getLineColor: [51, 136, 255],
                getElevation: 40,
                autoHighlight: true,
                getPointRadius: d =>  d.properties.radius || 1,
                getLineWidth: 10,
                ...props,
                extensions: [new deck._TerrainExtension()], 
                terrainDrawMode: 'offset',
                data
            }), null, layers.whatif[2]];
        }

        function createRoutingLayer(props) {
            return new deck.PolygonLayer({
                id: 'routing-layer',
                extruded: true,
                getElevation: 40,
                stroked: true,
                filled: true,
                extensions: [new deck._TerrainExtension()], 
                terrainDrawMode: 'offset',
                getPolygon: d => d.path,
                getFillColor: [232, 25, 255, 140],
                ...props,
            });
        }

        function createBuildingLayer(props) {
            return new deck.GeoJsonLayer({
                id: 'building-layer',
                extruded: true,
                pickable: deckMode == 'selection',
                stroked: false,
                filled: true,
                lineWidthScale: 20,
                lineWidthMinPixels: 2,
                getElevation: f => f.properties.height,
                autoHighlight: true,
                highlightColor: [0, 0, 128, 128],
                getRadius: 100,
                getLineWidth: 1,
                onClick: (event) => {
                    // TODO: add better timer
                    if (deckMode == 'selection') {
                        const feature = event.object;
                        layers.selection = new deck.GeoJsonLayer({
                            id: 'selection-layer',
                            data: feature,
                            extruded: true,
                            pickable: true,
                            stroked: false,
                            filled: true,
                            lineWidthScale: 20,
                            lineWidthMinPixels: 2,
                            getElevation: f => f.properties.height,
                            getRadius: 100,
                            getFillColor: [235, 231, 0, 180],
                            getLineWidth: 1,
                            parameters: {
                                depthTest: false
                            },
                        });
                        updateLayers();
                        showBuildingPopup(event.object);
                    }
                    return true;
                },
                ...props,
            });
        }

        function createAggregatedBuildingLayer(props) {
            return createGeoJSONLayer({
                id: 'aggregated-building-layer',
                pickable: true,
                getFillColor: (d) => {
                    let type = d.properties.type || "Default";
                    return buildingMappingColor[type];
                },
                opacity: props.hidden ? 0 : 1,
                autoHighlight: false,
                onHover: (info) => {
                    if (deckMode == 'selection') {
                        cursorType = 'pointer';
                        const feature = info.object;
                        if (feature) {
                            const gjson = info.layer.props.data;
                            const hoverFeatures = [];
                            if (feature.properties.aggregations)
                                for (let id of feature.properties.aggregations) {
                                    for (let feat of gjson.features) {
                                        if (feat.properties.OBJECTID == id) {
                                            hoverFeatures.push(feat);
                                            break;
                                        }
                                    }
                                }
                            else
                                hoverFeatures.push(feature);
                            const hoverLayer = createGeoJSONLayer({
                                id: 'hover-layer',
                                pickable: false,
                                data: hoverFeatures,

                                getFillColor: (d) => {
                                    let type = d.properties.type || "Default";
                                    return buildingMappingColor[type];
                                },
                                material: {
                                    ambient: 0.35,
                                    diffuse: 0.6,
                                    shininess: 0,
                                    specularColor: [30, 30, 30]
                                },
                            });
                            layers.hoverBuilding = hoverLayer;
                            updateLayers();
                        } else {
                            layers.hoverBuilding = null;
                            updateLayers();
                        }
                    } else
                        cursorType = 'grab';
                },
                onClick: (event) => {
                    if (deckMode == 'selection') {
                        const feature = event.object;
                        if (feature) {
                            const gjson = event.layer.props.data;
                            const selectedFeatures = [];
                            if (feature.properties.aggregations)
                                for (let id of feature.properties.aggregations) {
                                    for (let feat of gjson.features) {
                                        if (feat.properties.OBJECTID == id) {
                                            selectedFeatures.push(feat);
                                            break;
                                        }
                                    }
                                }
                            else
                                selectedFeatures.push(feature);
                            const selectionLayer = createGeoJSONLayer({
                                id: 'selection-layer',
                                getFillColor: (d) => d.properties.type ? buildingMappingColor[d.properties.type] : buildingColor,
                                pickable: false,
                                data: selectedFeatures,
                                material: {
                                    ambient: 0.35,
                                    diffuse: 0.6,
                                    shininess: 0,
                                    specularColor: [30, 30, 30]
                                },
                            });
                            layers.selection = selectionLayer;
                            updateLayers();
                            showBuildingPopup(event.object);
                        } else {
                            layers.hover = null;
                            updateLayers();
                        }
                    }
                },
                ...props,
            });
        }

        function createMeshLayer(data, id, scenegraph, color = [255, 255, 255, 255], pickable = true) {
            return new deck.ScenegraphLayer({
                id: id,
                data: [
                    data,
                ],
                pickable: false,
                scenegraph: scenegraph,
                _lighting: 'pbr',
                color: [200, 200, 200, 255],
                getOrientation: [0, 0, 90],
                getScale: [0.722, 1, 0.722],
                getPosition: d => d.position,
            });
        }

        function createSceneGraphLayer(props) {
            const {
                position,
                scenegraph
            } = props;
            const name = scenegraph.split("/").pop();
            return new snap4deck.CachedGLBLayer({
                id: `${name.replace('.', '-')}-scene-layer`,
                data: [{
                    position
                }],
                pickable: false,
                _lighting: 'pbr',
                getPosition: d => d.position,
                ...props,
            });
        }

        function searchListGridInfo(x, y) {
            if (!listGridInfo && listGridInfo.hasOwnProperty(x))
                return;
            isFound = false;
            yList = listGridInfo[x];
            start = 0;
            end = yList.length - 1;
            while (!isFound) {
                i = start + parseInt((end - start) / 2);
                yFound = parseInt(yList[i])
                if (yFound == y) {
                    isFound = true;
                    break;
                }
                if (yFound < y)
                    start = i;
                else
                    end = i;
                if (end - start <= 1)
                    break;
            }
            return isFound;
        }

        function lon2tile(lon, zoom) {
            return (Math.floor((lon + 180) / 360 * Math.pow(2, zoom)));
        }

        function lat2tile(lat, zoom) {
            return (Math.floor((1 - Math.log(Math.tan(lat * Math.PI / 180) + 1 / Math.cos(lat * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom)));
        }

        function tile2long(x, z) {
            return (x / Math.pow(2, z) * 360 - 180);
        }

        function tile2lat(y, z) {
            var n = Math.PI - 2 * Math.PI * y / Math.pow(2, z);
            return (180 / Math.PI * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n))));
        }

        function createHighResGridBuildingLayer(props) {
            const {
                glb
            } = props;
            return new snap4deck.GLBTileLayer({
                id: 'grid-high-res-building-layer',
                minZoom: 18,
                maxZoom: 18,
                pickable: false,
                maxTiles: settingOptions.maxTiles.value,
                // maxTiles: settingOptions.maxTiles.value || settingOptions.maxTiles.default,
                TilesetClass: snap4deck.Tileset2D,
                renderSubLayers: props => {
                    const {
                        x,
                        y,
                        z
                    } = props.tile.index;
                    // const x_view = lon2tile(currentViewState.longitude, z);
                    // const y_view = lat2tile(currentViewState.latitude, z);
                    // var deltaTile = 13;
                    // // var deltaTile = 10 * (18 - currentViewState.zoom);
                    // // deltaTile = deltaTile < 10 ? 10 : deltaTile;
                    // if (Math.abs(x_view - x) > deltaTile || Math.abs(y_view - y) > deltaTile)
                    //     return;
                    isPresent = false;
                    if (z <= 17)
                        return;
                    if (listGridInfo) {
                        isPresent = searchListGridInfo(x, y);
                    } else {
                        isPresent = true
                    }
                    if (!isPresent)
                        return;
                    return createSceneGraphLayer({
                        id: `grid-high-res-building-system-${z}-${x}-${y}`,
                        scenegraph: `https://www.snap4industry.org/dashboardSmartCity/widgets/layers/edificato/grid_high_res/${z}/${x}/${y}/model.glb`,
                        // scenegraph: `https://www.snap4industry.org/dashboardSmartCity/widgets/layers/edificato/grid_tiled/${x}/${y}/tile.glb`,
                        ...glb
                    });
                },
            });
        }

        function createLowResGridBuildingLayer(props) {
            const {
                glb
            } = props;
            return new snap4deck.GLBTileLayer({
                id: 'grid-low-res-building-layer',
                minZoom: 18,
                maxZoom: 18,
                TilesetClass: snap4deck.GLBTileSet,
                pickable: false,
                maxTiles: settingOptions.maxTiles.value || settingOptions.maxTiles.default,
                // maxCacheSize: 200000,
                renderSubLayers: props => {
                    const {
                        x,
                        y,
                        z
                    } = props.tile.index;
                    if (z <= 17)
                        return;
                    isPresent = false;
                    if (listGridInfo) {
                        isPresent = searchListGridInfo(x, y);
                    } else {
                        isPresent = true
                    }
                    if (!isPresent)
                        return;
                    return createSceneGraphLayer({
                        id: `grid-low-res-building-system-${z}-${x}-${y}`,
                        scenegraph: `../widgets/layers/edificato/grid_low_res/${z}/${x}/${y}/model.glb`,
                        ...glb
                    });
                },
            });
        }

        function createDynResGridBuildingLayer(props) {
            const {
                glb
            } = props;
            return new deck.TileLayer({
                id: 'grid-dyn-res-building-layer',
                minZoom: 18,
                maxZoom: 18,
                pickable: false,
                TilesetClass: snap4deck.GLBTileSet,
                renderSubLayers: props => {
                    const {
                        x,
                        y,
                        z
                    } = props.tile.index;
                    if (currentViewState.zoom >= 17)
                        return createSceneGraphLayer({
                            id: `grid-dyn-res-building-system-${z}-${x}-${y}`,
                            scenegraph: `../widgets/layers/edificato/grid_high_res/${z}/${x}/${y}/model.glb`,
                            ...glb
                        });
                    else if (currentViewState.zoom >= 15)
                        return createSceneGraphLayer({
                            id: `grid-building-system-${z}-${x}-${y}`,
                            scenegraph: `../widgets/layers/edificato/grid_low_res/${z}/${x}/${y}/model.glb`,
                            ...glb
                        });
                    else
                        return null;
                },
            });
        }

        function clearBuildings() {
            layers.building = null;
            layers.google = null;
            layers.selection = null;
            layers.hiddenBuilding = null;
            layers.modifiedBuildings = [];
            layers.dynamicBuildings = [];
        }

        function loadLightBuildings() {
            layers.building = createBuildingLayer({
                data: '../widgets/layers/edificato/aggregated_buildings.geojson',
                getFillColor: buildingColor,
                getLineColor: [255, 255, 255],
            });
        }

        function loadAggregatedBuildings() {
            layers.building = createAggregatedBuildingLayer({
                data: '../widgets/layers/edificato/aggregated_buildings.geojson',
            });
        }

        function loadHighResBuildingsGLB() {
            layers.building = createSceneGraphLayer({
                scenegraph: "../widgets/layers/edificato/flat-buildings-1.0.0/model_textured.glb",
                ...riccardoBuildingsProp,
            });
        }

        function loadHighResElevatedBuildingsGLB() {
            layers.building = createSceneGraphLayer({
                scenegraph: "../widgets/layers/edificato/elevated-buildings-1.0.0/model_textured.glb",
                ...riccardoBuildingsProp,
            });
        }

        function loadHighResBuildingsGltf() {
            layers.building = createSceneGraphLayer({
                scenegraph: "../widgets/layers/edificato/flat-buildings-1.0.0/model_textured.gltf",
                ...riccardoBuildingsProp,
            });
        }

        function loadHighResBuildingsCutted() {
            layers.building = createSceneGraphLayer({
                scenegraph: "../widgets/layers/edificato/flat-buildings-1.0.0/model_textured_cut.glb",
                ...riccardoBuildingsProp,
            });
        }

        function loadHighValueBuildings() {
            const HVBs = [
                'lanzi',
                'pontevecchio',
                'scroce',
                'slorenzo',
                'smn',
            ];
            for (let hvb of HVBs) {
                layers.dynamicBuildings.push(createSceneGraphLayer({
                    scenegraph: `../widgets/layers/edificato/edifici_aggiunti/${hvb}.glb`,
                    ...riccardoBuildingsProp,
                }));
            }
        }

        function loadOSMB() {
            layers.building = createBuildingLayer({
                data: '../widgets/layers/edificato/osmb.geojson',
                getFillColor: buildingColor,
                getLineColor: [255, 255, 255],
                getElevation: f => f.properties.heightmean - 47.79,
            });
        }

        function loadOSMBRedux() {
            layers.building = createBuildingLayer({
                data: '../widgets/layers/edificato/osmb_redux.geojson',
                getFillColor: buildingColor,
                getLineColor: [255, 255, 255],
                getElevation: f => f.properties.heightmean - 47.79,
            });
        }

        function loadBorders() {
            layers.building = createBuildingLayer({
                data: '../widgets/layers/edificato/tile_grid.geojson',
                getFillColor: buildingColor,
                getLineColor: [255, 255, 255],
            });
        }

        function loadNotTexturedBuildings() {
            layers.building = createSceneGraphLayer({
                scenegraph: "../widgets/layers/edificato/centre.gltf",
                ...riccardoBuildingsProp,
            });
        }

        function loadElevatedBuildings() {
            layers.dynamicBuildings.push(createSceneGraphLayer({
                scenegraph: "../widgets/layers/edificato/elevated-buildings-1.0.0/sangiorgio_textured.glb",
                ...marcoBuildingsProp,
            }));
        }

        function loadMetaBuildings() {
            layers.dynamicBuildings.push(createSceneGraphLayer({
                scenegraph: "../widgets/layers/edificato/test_glb_meta/model.glb",
                ...gridBuildingsProp,
            }));
        }

        function loadHighResGridSystemBuildings() {
            layers.building = createHighResGridBuildingLayer({
                glb: gridBuildingsProp,
            });
        }

        function loadLowResGridSystemBuildings() {
            layers.building = createLowResGridBuildingLayer({
                glb: gridBuildingsProp,
            });
        }

        function loadDynResGridSystemBuildings() {
            layers.building = createDynResGridBuildingLayer({
                glb: gridBuildingsProp,
            });
        }

        function createIconLayer(props) {
            const ICON_MAPPING = {
                marker: {
                    x: 0,
                    y: 0,
                    width: 128,
                    height: 128,
                    mask: true
                },
                warningMarker: {
                    x: 128,
                    y: 0,
                    width: 128,
                    height: 128,
                    mask: true
                },
            };

            return new deck.IconLayer({
                id: 'icon-layer',
                pickable: true,
                iconAtlas: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/icon-atlas.png',
                iconMapping: ICON_MAPPING,
                getIcon: d => 'marker',

                sizeScale: 15,
                getPosition: d => d.coordinates,
                getSize: d => 5,
                getColor: d => d.color,
                parameters: {
                    depthTest: false
                },
                ...props,
            });
        }

        function createWhatifIconLayer(props) {
            const data = [];
            if (whatifRoutingStart)
                data.push({coordinate: whatifRoutingStart});
            if (whatifRoutingEnd)
                data.push({coordinate: whatifRoutingEnd});
            return new deck.IconLayer({
                id: 'whatif-icon-layer',
                data,
                iconAtlas: '../img/dynamic_routing/marker-icon-red.png',
                iconMapping: {
                    marker: {
                        x: 0,
                        y: 0,
                        width: 25,
                        height: 41,
                        anchorX: 12,
                        anchorY: 41,
                    }
                },
                extensions: [new deck._TerrainExtension()],
                terrainDrawMode: 'offset',
                getIcon: d => 'marker',
                sizeScale: 5,
                getSize: 10,
                getPosition: d => d.coordinate,
                // getColor: 'black',
                parameters: {
                    depthTest: false
                },
                ...props,
            });
        }

        function createSVGLayer(props) {
            return new deck.IconLayer({
                getIcon: d => ({
                    url: createSVGDataUrl(d.properties.iconFilePath),
                    width: 50,
                    height: 100
                }),
                pickable: true,
                sizeScale: 7,
                getPosition: d => d.geometry.coordinates,
                getSize: 5,
                loadOptions: {
                    imagebitmap: {
                        resizeWidth: 50,
                        resizeHeight: 100
                    }
                },
                parameters: {
                    depthTest: false
                },
                ...props
            });
        }

        function createMockIcon() {
            const mockData = [{
                position: [
                    currentViewState.longitude,
                    currentViewState.latitude,
                ],
            }];
            return new deck.IconLayer({
                id: 'mock-icon-layer',
                getPosition: d => d.position,
                getIcon: d => {
                    return {
                        url: '../img/gisMapIcons/Environment_Air_quality_monitoring_station.png',
                        width: 32,
                        height: 37,
                        anchorY: 37,
                        anchorX: 0
                    }
                },
                data: mockData,
                pickable: true,
                sizeScale: 7,
                opacity: 0,
                getSize: 5,
            });
        }

        function createSensorLayer(props) {
            const ICON_MAPPING = {
                sensor: {
                    x: 0,
                    y: 0,
                    width: 32,
                    height: 37,
                    anchorY: 37
                },
            };

            // return new deck.IconLayer({
            return new snap4deck.FusionIconLayer({
            // return new deck.IconLayer({
                id: 'sensor-layer',
                pickable: true,
                getIcon: d => {
                    if (d.hover == false) {
                        return {
                            url: d.iconPath,
                            width: d.iconWidth,
                            height: d.iconHeight,
                            anchorY: d.iconAnchorY,
                            anchorX: d.iconAnchorX,
                        };
                    } else {
                        return {
                            url: d.hoverIconPath,
                            width: d.hoverIconWidth,
                            height: d.hoverIconHeight,
                            anchorY: d.hoverIconAnchorY,
                            anchorX: d.hoverIconAnchorX,
                        };
                    }
                },

                // sizeScale: 5,
                getPosition: d => [...d.geometry.coordinates, 0],
                // getPosition: d => [...d.geometry.coordinates, elevationOffset],
                getSize: 35,
                parameters: {
                    depthTest: false
                },

                ...props,
            });

        }

        function reloadPopupDiv() {
            if (popupCoord.length == 0)
                return;
            const state = map3d.props.viewState;
            const viewport = new deck.WebMercatorViewport(state);
            const popupXY = viewport.project(popupCoord);
            const viewportXY = viewport.project([viewport.longitude, viewport.latitude]);
            const refCoord = viewport.unproject([viewportXY[0], popupXY[1]]);

            const mapEl = $(`#${widgetName}_map3d`);
            const popupDiv = $(`#${widgetName}_deck_popup`);
            popupDiv.css('top', `${popupXY[1]}px`);
            popupDiv.css('left', `${popupXY[0] - (popupDiv.width() / 2)}px`);
            // popupDiv.css('left', `${popupXY[0]}px`);

            const distance = getMeterDistanceFromCoords([viewport.longitude, viewport.latitude], refCoord);
            const factor = 1 / 40;
            var scaleFactor = popupXY[1] > viewportXY[1] ? 1 : 1 / (Math.sqrt(distance) * factor);
            scaleFactor = scaleFactor > 1 ? 1 : scaleFactor;
            scaleFactor = scaleFactor < 0.2 ? 0.2 : scaleFactor;
            popupDiv.css('transform', `scale(${scaleFactor})`);
        }

        function createLineLayer(props) {
            return new deck.LineLayer({
                id: 'line-layer',
                pickable: true,
                // parameters: {
                //     depthTest: true
                // },
                getWidth: 500,
                getSourcePosition: d => d.endPos,
                getTargetPosition: d => d.startPos,
                getColor: d => d.color || [0, 0, 255],
                ...props
            });
        }

        function createTrafficLayer(props) {
            return new deck.TripsLayer({
                id: 'trips-layer',
                getPath: d => d.path,
                getTimestamps: d => [0, 100],
                getColor: d => d.color || [253, 128, 93],
                // getColor: [253, 128, 93],
                parameters: {
                    depthTest: false
                },
                opacity: 1,
                // picking: true,
                widthMinPixels: 5,
                rounded: true,
                fadeTrail: false,
                trailLength: 200,
                currentTime: 100,
                ...props
            });
        }

        function createNewTrafficLayer(props) {
            return new deck.TripsLayer({
                id: 'trips-layer',
                getPath: d => d.path,
                getTimestamps: d => [0, 100],
                getColor: d => d.color || [253, 128, 93],
                // getColor: [253, 128, 93],
                parameters: {
                    depthTest: false
                },
                opacity: 1,
                // picking: true,
                widthMinPixels: 5,
                rounded: true,
                fadeTrail: false,
                trailLength: 200,
                currentTime: 100,
                ...props
            });
        }

        function createPathLayer(props) {
            return new deck.PathLayer({
                getPath: d => [...d.geometry.coordinates],
                getColor: d => [0, 0, 255],
                getWidth: d => 5,
                opacity: 0.7,
                pickable: true,
                ...props
            });
        }

        function createSVGDataUrl(url) {
            const svg = loadSVG(url);
            return `data:image/svg+xml;charset=utf-8,${encodeURIComponent(svg)}`;
        }

        function loadAltitude(lngLat) {
            return new Promise((resolve) => {
                if (!terrainOn)
                    resolve(0);

                const [lng, lat] = lngLat;
                // const altitude = layers.terrain.getElevationPoint([lng, lat]);
                // console.log('altitude recived', altitude);
                // callback(altitude);
                let delta = 0.0001;
                let elat = lat + delta;
                let elng = lng + delta;
                let bboxurl = `${lng},${lat},${elng},${elat}`;
                let url = elevationUrl.replace('{bbox}', bboxurl);
                url = url.replace('width=256', 'width=1');
                url = url.replace('height=256', 'height=1');

                let img = new Image();
                img.onload = () => {
                    let canvas = document.createElement('canvas');
                    let ctx = canvas.getContext('2d');
                    ctx.drawImage(img, 0, 0);
                    let imgData = ctx.getImageData(0, 0, 1, 1).data;
                    let altitude = elevationDecoder.offset;
                    altitude += imgData[0] * elevationDecoder.rScaler;
                    altitude += imgData[1] * elevationDecoder.gScaler;
                    altitude += imgData[2] * elevationDecoder.bScaler;
                    // callback(altitude);
                    resolve(altitude);
                };
                img.crossOrigin = "Anonymous";
                img.src = url;
            });
        }

        function createTreeLayer(props) {
            return new snap4deck.TreeLayer({
                id: supportedBuildingSelected.id === 'menu-google-tile' ? 'google-tree-layer' : 'tree-layer',
                pickable: true,
                maxTiles: settingOptions.maxTiles.value,
                // minZoom: 15,
                minTileZoom: settingOptions.minTileZoom.value,
                getElevation: (d) => 0,
                // getElevation: (d) => {
                //     return d.properties && d.properties.elevation ? d.properties.elevation : 0;
                //     // return d.properties && d.properties.elevation ? d.properties.elevation - elevationOffset : 0;
                // },
                onClick: (info, event) => {
                    console.log('clicked');
                },
                opacity: supportedBuildingSelected.id === 'menu-google-tile' ? 0 : 1,
                extensions: [new deck._TerrainExtension()],
                terrainDrawMode: 'offset',
                // updateTriggers: {
                //     opacity: supportedBuildingSelected.id,
                //     renderSubLayers: supportedBuildingSelected.id
                // },
                ...props,
            });
        }

        function createGoogleLayer() {
            const gk = "<?= $X_GOOG_API_KEY; ?>";
            if (gk === "") {
                alert('Key for Google 3D tiles is missing.\nIt needs to be configured on the server.');
                return;
            }
            const TILESET_URL = 'https://tile.googleapis.com/v1/3dtiles/root.json';
            return new snap4deck.Tile3DLoweredLayer({
                id: 'google-3d-tiles',
                pickable: true,
                // pickable: false,
                data: TILESET_URL,
                onTilesetLoad: tileset3d => {
                    tileset3d.options.onTraversalComplete = selectedTiles => {
                    return selectedTiles;
                    };
                },
                loadOptions: {
                    fetch: {headers: {'X-GOOG-API-KEY': gk}}
                },
                // operation: 'terrain+draw'
            });
        }

        function createMultiElevationTerrain(props) {
            let index = 1;
            elevations = [];
            while (true) {
                let refElevation = styleParameters.terrains[`TP${index}`];
                if (refElevation) {
                    let elevation = JSON.parse(JSON.stringify(refElevation));
                    elevation.elevationDecoder.rScaler = parseFloat(elevation.elevationDecoder.rScaler);
                    elevation.elevationDecoder.gScaler = parseFloat(elevation.elevationDecoder.gScaler);
                    elevation.elevationDecoder.bScaler = parseFloat(elevation.elevationDecoder.bScaler);
                    elevation.elevationDecoder.offset = parseFloat(elevation.elevationDecoder.offset);
                    elevation.elevationDecoder.offset += layers.google ? elevationOffset + 2 : -elevationOffset;
                    if (elevation.bbox) {
                        elevation.bbox.north = parseFloat(elevation.bbox.north);
                        elevation.bbox.east = parseFloat(elevation.bbox.east);
                        elevation.bbox.south = parseFloat(elevation.bbox.south);
                        elevation.bbox.west = parseFloat(elevation.bbox.west);
                    }
                    elevations.push(elevation);
                    elevationUrl = elevation.query;
                    elevationDecoder = elevation.elevationDecoder;
                    index++;
                } else
                    break;
            }
            return new snap4deck.MultiElevationTerrainLayer({
                id: 'terrain-layer',
                elevations,
                minZoom: 0,
                // operation: 'terrain',
                operation: 'terrain+draw',
                maxZoom: 16,
                material: {
                    diffuse: 1
                },
                texture: tileUrls,
                tileSize: 256,
                opacity: 1,
                ...props
            });
        }

        function loadSVG(url) {
            var svg;
            $.ajax({
                url,
                async: false,
                dataType: 'html',
                success: (svgData) => svg = svgData,
                error: (err) => console.error(err),
            });
            return svg;
        }

        function loadGif(url, bounds, type) {
            var usedGif;
            switch (type) {
                case "heatmap":
                    usedGif = gifWms;
                    break;
                case "traffic":
                    usedGif = gifWmsTraffic;
                    break;
            }
            usedGif.frames = [];
            usedGif.currentFrame = 0;
            gifFrames({
                url: url,
                outputType: 'png',
                frames: 'all'
            }, function(err, frameData) {
                if (err) {
                    console.error('Error occurred during download gif');
                    console.error(err);
                    throw new Error(err);
                } else {
                    for (let k in frameData) {
                        var frame = frameData[k].getImage();
                        var data = new Uint8Array(frame.data.length);
                        for (var i = 0; i < frame.data.length / 4; i++) {
                            var pixel = [];
                            var oldPixel = [];
                            var newPixel = [];
                            var newIsNotEmpty = false;
                            for (var j = 0; j < 4; j++) {
                                if (usedGif.frames.length != 0) {
                                    oldPixel.push(usedGif.frames[usedGif.frames.length - 1].data[(i * 4) +
                                        j]);
                                }
                                const newColor = frame.data[(i * 4) + j];
                                newIsNotEmpty = newIsNotEmpty == true ? true : newColor != 0;
                                newPixel.push(newColor);
                            }
                            if (usedGif.frames.length != 0)
                                pixel = oldPixel;
                            if (newIsNotEmpty || usedGif.frames.length == 0) {
                                pixel = newPixel;
                            }
                            for (var j = 0; j < pixel.length; j++)
                                data[(i * 4) + j] = pixel[j];
                        }

                        usedGif.frames.push({
                            width: frame.width,
                            height: frame.height,
                            data: data,
                        });
                    }
                    const gifLayer = createImageLayer(usedGif.frames[0], bounds, `gif-${type}-layer`,
                        usedGif.opacity);
                    switch (type) {
                        case "heatmap":
                            layers.wms = gifLayer;
                            break;
                        case "traffic":
                            layers.trafficWms = gifLayer;
                            break;
                    }
                    usedGif.isAnimated = true;
                    updateLayers();
                    animateLayer(usedGif, bounds);
                }
            });
        }

        function animateLayer(gif, bounds, delay = 1) {
            setTimeout(function() {
                if (gif.isAnimated) {
                    gif.currentFrame += 1;
                    if (gif.currentFrame >= gif.frames.length)
                        gif.currentFrame = 0;
                    const gifLayer = createImageLayer(gif.frames[gif.currentFrame], bounds,
                        `gif-${gif.type}-layer`, gif.opacity);
                    switch (gif.type) {
                        case "heatmap":
                            layers.wms = gifLayer;
                            break;
                        case "traffic":
                            layers.trafficWms = gifLayer;
                            break;
                    }
                    updateLayers();
                    animateLayer(gif, bounds, delay);
                }
            }, delay * 1000);
        }

        function startTimerAnimation() {
            // window.requestAnimationFrame(updateCrestAnimation);
            setTimeout(updateCrestAnimation, 30)
        }

        var start;
        var lastTimestamp;
        function updateCrestAnimation(timestamp) {
            if (!settingOptions.animationEnabled.value)
                return;
            if (layers.crest == null)
                return;
            if (!start) {
                start = timestamp;
                lastTimestamp = timestamp;
            }
            const deltaTime = timestamp - lastTimestamp;
            lastTimestamp = timestamp;
            animationTime += 30;
            if (isNaN(animationTime))
                animationTime = 0;
            layers.crest = new snap4deck.FusionTileLayer({
                ...layers.crest.props,
                currentTime: animationTime,
            });
            updateLayers();

            // window.requestAnimationFrame(updateCrestAnimation);
            setTimeout(updateCrestAnimation, 30)
        }

        function addMarker(coordinate) {
            const r = Math.floor(Math.random() * 255);
            const g = Math.floor(Math.random() * 255);
            const b = Math.floor(Math.random() * 255);

            markers.push({
                name: `marker-${markers.length}`,
                coordinates: coordinate,
                color: [r, g, b],
            });

            const iconLayer = createIconLayer(`icon-layer-${markers.length}`);
            layers.icon = iconLayer;

            updateLayers();
        }

        // deprecated using CrestLayer
        function updateTraffic(viewState) {
            const maxbb = getMaxBoundingBox(viewState);
            urlRoads =
                `https://firenzetraffic.km4city.org/trafficRTDetails/roads/read.php?sLat=${maxbb[0][1]}&sLong=${maxbb[0][0]}&eLat=${maxbb[1][1]}&eLong=${maxbb[1][0]}&zoom=15`;
            urlDensity =
                `https://firenzetraffic.km4city.org/trafficRTDetails/density/read.php?sLat=${maxbb[0][1]}&sLong=${maxbb[0][0]}&eLat=${maxbb[1][1]}&eLong=${maxbb[1][0]}&zoom=15`;
            if (ajaxCall != null) {
                ajaxCall.abort();
                ajaxCall = null;
            }
            ajaxCall = $.ajax({
                url: urlRoads,
                success: function(result) {
                    ajaxCall = null;
                    addDensity(urlDensity, result);
                },
            });
        }

        // deprecated using CrestLayer
        function addDensity(urlDensity, roads) {
            $.ajax({
                url: urlDensity,
                success: function(result) {
                    console.log('ajax density success result:');
                    console.log(result);

                    // Removing first null object
                    if (roads[0].road == null)
                        roads = roads.slice(1);

                    // For all roads
                    for (var i = 0; i < roads.length; i++) {
                        var road = roads[i];
                        var density = result[road.road];
                        // for all segments
                        for (var j = 0; j < road.segments.length; j++) {
                            var segment = road.segments[j];
                            var segmentDensity = density.data[0][segment.id];
                            segment.density = segmentDensity;
                            segment.color = getOldDensityColor(segment);
                        }
                    }

                    const lineLayer = createLineLayer(roads, `line-layer-${Date.now()}`);
                    layers.line = lineLayer;
                },
            });
        }

        function updateCyclingPath(viewState) {
            const queryId = '10916300fca38e05e03096daa0418a13';
            const cyclingPath = getWebAppGrafoPath(queryId, viewState);

            const cyclingLayer = createWktLayer(cyclingPath);
            layers.cycling = cyclingLayer;
        }

        function updateSensors(viewState) {
            for (var i = 0; i < layers.pin.length; i++) {
                updateSensorSite(viewState, layers.pin[i]);
            }
        }

        function updateListGridBuilding() {
            $.ajax({
                url: '../widgets/layers/edificato/grid_tiled/16/list_grid_info.json',
                async: false,
                success: (data) => {
                    listGridInfo = data;
                },
                error: () => console.warn('failed to retrive list_grid_info.json'),
            });
        }

        function updateSensorSite(viewState, layer) {
            const selectionString = getSelectionString(viewState);
            const oldApiUrl = apiUrls3D[`${layer.id}`].apiUrl;
            const newApiUrl = oldApiUrl.replace(/(selection[^&]*)/g, selectionString);

            $.ajax({
                url: newApiUrl,
                async: false,
                success: function(geoJsonData) {
                    if (geoJsonData.hasOwnProperty("BusStop")) {
                        fatherGeoJsonNode = geoJsonData.BusStop;
                    } else {
                        if (geoJsonData.hasOwnProperty("Sensor")) {
                            fatherGeoJsonNode = geoJsonData.Sensor;
                        } else {
                            if (geoJsonData.hasOwnProperty("Service")) {
                                fatherGeoJsonNode = geoJsonData.Service;
                            } else {
                                fatherGeoJsonNode = geoJsonData.Services;
                            }
                        }
                    }

                    const id = layer.props.id;
                    const oldProps = apiUrls3D[`${id}`];
                    for (var i = 0; i < fatherGeoJsonNode.features.length; i++) {
                        gisPrepareCustomMarker(fatherGeoJsonNode.features[i], []);

                        fatherGeoJsonNode.features[i].properties.targetWidgets = oldProps.targets;
                        fatherGeoJsonNode.features[i].properties.color1 = oldProps.color1;
                        fatherGeoJsonNode.features[i].properties.color2 = oldProps.color2;
                        fatherGeoJsonNode.features[i].properties.pinattr = oldProps.pinattr;
                        fatherGeoJsonNode.features[i].properties.pincolor = oldProps.pincolor;
                        fatherGeoJsonNode.features[i].properties.symbolcolor = oldProps.symbolcolor;
                        fatherGeoJsonNode.features[i].properties.iconFilePath = oldProps.iconFilePath;
                    }
                    const otherProps = {
                        apiUrl: this.url,
                        targets: oldProps.targets,
                        color1: oldProps.color1,
                        color2: oldProps.color2,
                        pinattr: oldProps.pinattr,
                        pincolor: oldProps.pincolor,
                        symbolcolor: oldProps.symbolcolor,
                        iconFilePath: oldProps.iconFilePath,
                    };
                    apiUrls3D[`${id}`] = otherProps;
                    const sensorLayer = createSensorLayer({
                        data: fatherGeoJsonNode.features,
                        id
                    });


                    //removeLayerSet(id, layers.pin);
                    //layers.pin.push(sensorLayer);
                    const index = getLayerIndexSet(id, layers.pin);

                    layers.pin[index] = null;
                    updateLayers();

                    layers.pin[index] = sensorLayer;
                    updateLayers();
                },
                error: function(error) {
                    console.err("errore durante l'aggiornamento dei sensor site");
                    console.err(error);
                },
            });
        }

        function redrawIconLayer(layer) {
            // const props = apiUrls3D[`${id}`];
            const sensorLayer = createSensorLayer({
                ...layer.props
            });

            removeLayerSet(id, layers.pin);
            layers.pin.push(sensorLayer);
            updateLayers();
        }

        function updateLayers() {
            map3d.setProps({
                layers: [
                    layers.google,
                    layers.terrain,
                    layers.orthomaps,
                    layers.wms,
                    layers.trafficWms,
                    layers.roads,
                    ...layers.cycling,
                    layers.bus,
                    layers.building,
                    ...layers.modifiedBuildings,
                    ...layers.dynamicBuildings,
                    layers.tree,
                    layers.hiddenBuilding,
                    layers.hoverBuilding,
                    ...layers.vehicle,
                    ...layers.buslines,
                    ...layers.whatif,
                    layers.selection,
                    ...layers.fixedPins,
                    layers.mockIcon,
                    ...layers.traffic,
                    layers.crest,
                    ...layers.pin,
                ]
            })
        }

        function formatDatetime(timestamp) {
            const datetime = new Date(timestamp);
            const year = datetime.getFullYear();
            const month = formatNumberDate(datetime.getMonth());
            const day = formatNumberDate(datetime.getDate());
            const hour = formatNumberDate(datetime.getHours());
            const minute = formatNumberDate(datetime.getMinutes());
            const ris = `${year}-${month}-${day}T${hour}:${minute}`;
            return ris;
        }

        function formatNumberDate(number) {
            if (number == 0) {
                return '00';
            } else if (number < 10) {
                return `0${number}`;
            } else {
                return `${number}`;
            }
        }

        function getLayerIndexSet(id, set) {
            for (var i = 0; i < set.length; i++) {
                if (set[i].id == id) {
                    return i;
                }
            }
            return -1;
        }

        function removeLayerSet(id, set) {
            for (var i = 0; i < set.length; i++) {
                if (set[i].id == id) {
                    set.splice(i, 1);
                    return;
                }
            }
        }

        function getWebAppGrafoPath(queryId, viewState) {
            const bb = getBoundingBox(viewState);
            var testCyclingPath = `https://servicemap.disit.org/WebAppGrafo/api/v1/?queryId=${queryId}&format=json`;
            testCyclingPath += "&selection=wkt:POLYGON((";
            testCyclingPath += `${bb[0][0]}%20${bb[0][1]}`;
            for (var i = 1; i < bb.length; i++) {
                testCyclingPath += `,%20${bb[i][0]}%20${bb[i][1]}`;
            }
            testCyclingPath += "))&maxResults=0&geometry=true&fullCount=false";
            return testCyclingPath;
        }

        function getMaxBoundingBox(viewState) {
            const bb = getBoundingBox(viewState);
            var minLng = bb[0][0];
            var maxLng = bb[0][0];
            var minLat = bb[0][1];
            var maxLat = bb[0][1];
            for (var i = 1; i < bb.length; i++) {
                if (minLat > bb[i][1])
                    minLat = bb[i][1];
                if (maxLat < bb[i][1])
                    maxLat = bb[i][1];
                if (minLng > bb[i][0])
                    minLng = bb[i][0];
                if (maxLng < bb[i][0])
                    maxLng = bb[i][0];
            }
            return [
                [minLng, minLat],
                [maxLng, maxLat]
            ];
        }

        function getLegacyBoundingBox(viewState) {
            const bb = getMaxBoundingBox(viewState)
            var bounds = {
                _southWest: {
                    lat: 0,
                    lng: 0
                },
                _northEast: {
                    lat: 0,
                    lng: 0
                }
            };
            bounds["_southWest"].lng = bb[0][0];
            bounds["_southWest"].lat = bb[0][1];
            bounds["_northEast"].lng = bb[1][0];
            bounds["_northEast"].lat = bb[1][1];
            return bounds;
        }

        function getBoundingBox(viewState) {
            const selectionState = {
                ...viewState,
                farZMultiplier: 1.5,
                altitude: 1,
            }
            var viewport = new deck.WebMercatorViewport(selectionState);
            const se = viewport.unproject([viewport.width, viewport.height]);
            const sw = viewport.unproject([0, viewport.height]);

            selectionState.pitch = viewState.pitch > 57 ? 57 : viewState.pitch,
                viewport = new deck.WebMercatorViewport(selectionState);
            const nw = viewport.unproject([0, 0]);
            const ne = viewport.unproject([viewport.width, 0]);

            return [nw, ne, se, sw];
        }

        function createLights({
            timestamp,
            directionalLightColor,
            directionalLightIntensity,
            ambientLightColor,
            ambientLightIntensity,
        }) {
            var now;
            if (timestamp)
                now = Date.parse(timestamp);
            else
                now = Date.now();

            const sunLight = new deck._SunLight({
                timestamp: now,
                color: directionalLightColor || [255, 255, 255],
                intensity: (directionalLightIntensity / 100) * 2,
                _shadow: shadowsOn,
            });
            const ambientLight = new deck.AmbientLight({
                color: ambientLightColor || [255, 255, 255],
                intensity: (ambientLightIntensity / 100) * 2,
            });

            return new deck.LightingEffect({
                ambientLight,
                sunLight,
            });
        }

        /***
         * set building type for deck.gl
         * @param type {string}
         */
        function setBuildingType(type) {

        }

        function reloadLight() {
            if (lightsOn) {
                const lights = createLights();
                map3d.setProps({
                    effects: [lights],
                    _animate: shadowsOn,
                });
            } else {
                map3d.setProps({
                    effects: [],
                    _animate: false,
                });
            }
        }

        function getSelectionString(viewState) {
            const maxbb = getMaxBoundingBox(viewState);
            return `selection=${maxbb[0][1]};${maxbb[0][0]};${maxbb[1][1]};${maxbb[1][0]}`;
        }

        function changeBuildingLayer() {
            buildingOsm = !buildingOsm;
            var buildingLayer;
            if (buildingOsm)
                buildingLayer = createOsmBuildingLayer();
            else
                buildingLayer = createBuildingLayer(cortiBuidlingData);
            layers.building = buildingLayer;
            updateLayers();
        }

        function haversineDistance(lat1,lon1,lat2,lon2) {
            function toRad(x) {
                return x * Math.PI / 180;
            }
            var R = 6371; // km

            var x1 = lat2 - lat1;
            var dLat = toRad(x1);
            var x2 = lon2 - lon1;
            var dLon = toRad(x2)
            var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            var d = R * c;

            return d; //in km
        }

        function setServiceUrl(org,bounds) {
            let sUrl = null;
            lat = bounds.lat;
            lng = bounds.lng;
            let routing = JSON.parse(org.ghRouting);
            //console.log(routing);
            if (routing) {
                ghoptions = routing.length;
                //console.log(ghoptions);
                for (let i = 0; i < ghoptions; i++) {
                    let routing_lat = routing[i].centreLatLng[0];
                    let routing_lng = routing[i].centreLatLng[1];
                    let routing_dist = routing[i].dist;
                    let routing_ghUrl = routing[i].ghUrl;
                    //console.log("havdist");
                    //console.log(haversineDistance(lat,lng,routing_lat,routing_lng));
                    if (haversineDistance(lat, lng, routing_lat, routing_lng) < routing_dist) {
                        sUrl = routing_ghUrl + "route";
                        //console.log("sUrl");
                        //console.log(sUrl);
                    }
                }
            }
            return sUrl;
        }

        function startRouting(vehicle) {
            if (!whatifRoutingEnd || !whatifRoutingStart)
                return;
            serviceUrl = setServiceUrl(orgParams, map.defaultMapRef.getBounds()["_northEast"]);
            lrmControl = L.Routing.control({
                serviceUrl: serviceUrl,
                waypoints: [
                    L.latLng(whatifRoutingStart[1], whatifRoutingStart[0]),
                    L.latLng(whatifRoutingEnd[1], whatifRoutingEnd[0]),
                ],
                avoid_area: encodeURIComponent(JSON.stringify(whatifScenarioData)),
                vehicle: vehicle || whatifVehicle,
                weighting: $('#whatIf-weighting').val(),   // Get the selected weighting
                startDatetime: $('#whatIf-startDatetime').val(),   // Get the selected datetime
                geocoder: L.Control.Geocoder.nominatim(),
                routeWhileDragging: true,
                reverseWaypoints: true,
                showAlternatives: false,
            });

            lrmControl.on('routesfound', function(e) {  
                const path = [];
                for (let coordinate of e.routes[0].coordinates) {
                    path.push([coordinate.lng, coordinate.lat]);
                }
                const [innerPath, outerPath] = snap4deck.createSidedPath(path, 5);
                layers.whatif[1] = createRoutingLayer({
                    data: [{path: [...outerPath, ...innerPath.reverse(), outerPath[0]]}],
                });
                updateLayers();
                const routingDivs = $('.leaflet-routing-container');
                routingDivs.remove();
                $('#whatif-control').append(routingDivs[0]);
            });
            lrmControl.addTo(map.defaultMapRef);
        }

        function dragPopup(elmnt, elementaDraggable = null) {
            var pos1 = 0,
                pos2 = 0,
                pos3 = 0,
                pos4 = 0;
            if (elementaDraggable != null) {
                // if present, the header is where you move the DIV from:
                elementaDraggable.mousedown(dragMouseDown);
                elementaDraggable.bind('touchstart', e => {e.preventDefault(); dragMouseDown(e)});
            } else {
                // otherwise, move the DIV from anywhere inside the DIV:
                elmnt.onmousedown(dragMouseDown);
                elmnt.bind('touchstart', e => {e.preventDefault(); dragMouseDown(e)});
            }

            function dragMouseDown(e) {
                e = e || window.event;
                if (e.clientX) {
                    e.preventDefault();
                } else {
                    e.clientX = e.originalEvent.targetTouches[0].clientX;
                    e.clientY = e.originalEvent.targetTouches[0].clientY;
                }
                pos3 = e.clientX;
                pos4 = e.clientY;
                document.onmouseup = closeDragElement;
                document.addEventListener('touchend', closeDragElement);
                document.onmousemove = elementDrag;
                document.addEventListener('touchmove', elementDrag);
                // document.ontouchmove = elementDrag;
            }

            function elementDrag(e) {
                e = e || window.event;
                if (e.clientX && e.clientY) {
                    e.preventDefault();
                } else {
                    e.clientX = e.targetTouches[0].clientX;
                    e.clientY = e.targetTouches[0].clientY;
                }
                pos1 = pos3 - e.clientX;
                pos2 = pos4 - e.clientY;
                pos3 = e.clientX;
                pos4 = e.clientY;

                const state = map3d.props.viewState;
                const viewport = new deck.WebMercatorViewport(currentViewState);

                const y = elmnt[0].offsetTop - pos2;
                const x = elmnt[0].offsetLeft + (elmnt[0].offsetWidth / 2) - pos1;
                popupCoord = viewport.unproject([x, y]);
                reloadPopupDiv();
            }

            function closeDragElement() {
                document.onmouseup = null;
                document.ontouchend = null;
                document.onmousemove = null;
                document.ontouchmove = null;

                document.removeEventListener('touchend', closeDragElement);
                document.removeEventListener('touchmove', elementDrag);
            }
        }

        function selectTickMenuBuilding(idSelected) {
            selectTickMenu(idSelected, supportedBuildings);
        }

        function selectTickMenuOrthomap(idSelected) {
            selectTickMenu(idSelected, supportedOrthomap);
        }

        function selectTickMenu(idSelected, supportedMenu) {
            for (let key in supportedMenu)
                $(`#${supportedMenu[key].id} i`).addClass('hidden');
            $(`#${idSelected} i`).removeClass('hidden');
        }

        function getMeterDistanceFromCoords(coord1, coord2) {
            return getMeterDistance(coord1[1], coord1[0], coord2[1], coord2[0]);
        }

        function getMeterDistance(lat1, lon1, lat2, lon2) {
            const R = 6371e3; // metres
            const φ1 = lat1 * Math.PI / 180; // φ, λ in radians
            const φ2 = lat2 * Math.PI / 180;
            const Δφ = (lat2 - lat1) * Math.PI / 180;
            const Δλ = (lon2 - lon1) * Math.PI / 180;

            const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +
                Math.cos(φ1) * Math.cos(φ2) *
                Math.sin(Δλ / 2) * Math.sin(Δλ / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

            return R * c; // in metres
        }

        function rgbaStringToArray(rgbaText) {
            if (!rgbaText.match(/rgba\([^\(\)]+\)/))
                return;
            var rgba = [];
            for (let txt of rgbaText.slice(5, -1).split(','))
                rgba.push(parseInt(txt));
            return rgba;
        }

        function floatToString(value, truncate = 2) {
            var str = `${value}`
            str = str.split('.');
            if (str[1] == null)
                return value;
            const result = Array.from(str[1]).slice(0, truncate);
            return str[0] + '.' + result.join('');
        }

        const TILE_SIZE = 512;
        const EARTH_CIRCUMFERENCE = 40.03e6;
        const DEGREES_TO_RADIANS = Math.PI / 180;

        function unitsPerMeter(latitude) {
            const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);
            return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;
        }

        function straightFromPoints(x0, y0, x1, y1) {
            const deltax = x1 - x0;
            const deltay = y1 - y0;
            const m = deltay / deltax;
            const q = y0 - (x0 * m);
            return [m, q];
        }

        function lerp(a, b, t) {
            if (isArray(a)) {
                return a.map((ai, i) => lerp(ai, b[i], t));
            }
            return t * b + (1 - t) * a;
        }

        function getDelta(a, b) {
            var diff = a >= b ? a - b : b - a;
            diff /= 2;
            return (a >= b ? b : a) + diff;
        }

        // da usare solo in un sistema di coordinate lineari e quindi non con lat e lng
        function getMiddlePosition(pos1, pos2) {
            const deltaLng = getDelta(pos1[0], pos2[0]);
            const deltaLat = getDelta(pos1[1], pos2[1]);
            return [deltaLng, deltaLat];
        }

        function connectStartSegments(prevSegm, nextSegm) {
            if (!canConnectSegment(prevSegm, nextSegm))
                return false;

            nextSegm.density = prevSegm.nextDensity;
            nextSegm.relativeDensity = prevSegm.nextRelativeDensity;
            nextSegm.color = prevSegm.nextColor;
            return true;
        }

        function connectEndSegments(prevSegm, nextSegm) {
            if (!canConnectSegment(prevSegm, nextSegm))
                return false;

            prevSegm.nextDensity = nextSegm.density;
            prevSegm.nextRelativeDensity = nextSegm.relativeDensity;
            prevSegm.nextColor = nextSegm.color;
        }

        function checkSamePositions(pos1, pos2, tollerance = 3) {
            const delta = getMeterDistance(pos1[1], pos1[0], pos2[1], pos2[0]);
            return delta < tollerance;
        }

        function canConnectSegmentToEnd(prevSegm, nextSegm) {
            return prevSegm.end.lat == nextSegm.start.lat && prevSegm.end.long == nextSegm.start.long;
        }

        function canConnectSegmentToStart(prevSegm, nextSegm) {
            return prevSegm.start.lat == nextSegm.end.lat && prevSegm.start.long == nextSegm.end.long;
        }

        function loadDensityTable(async = true) {
            const metricName = 'vehicleOccupancy';
            const url = heatmapUrl + "getColorMap.php?metricName=" + metricName;

            $.ajax({
                url,
                type: 'GET',
                async,
                dataType: 'json',
                success: (data) => {
                    densityTable = data;
                },
            });
        }

        function getDensityColor(relativeDensity) {
            var color = [];
            for (let stepColor of densityTable) {
                if (relativeDensity < parseFloat(stepColor.max)) {
                    txtcolor = stepColor.rgb.slice(1, -1).split(',');
                    for (let tc of txtcolor)
                        color.push(parseInt(tc));
                    break;
                }
            }
            if (color.length == 0)
                return [255, 0, 0];
            else
                return color;
        }

        function showBuildingPopup(building) {
            const div = $('#deck-building-popup');
            div.empty();
            div.css('display', 'block');
            div.css('opacity', '1');
            const closeBtn = $('<button id="deck-close-building-popup"><i class="fa fa-times" aria-hidden="true"></i></button>');
            closeBtn.on('click', (event) => {
                layers.selection = null;
                updateLayers();
                div.css('opacity', 0);
                setTimeout(() => {
                    div.css('display', 'none')
                }, 350);
            });
            div.append(closeBtn);
            const titleBar = $('<div class="deck-building-titlebar"></div>');
            div.append(titleBar);
            const title = $(`<h3>Building ID: ${building.properties['OBJECTID']}</h3>`);
            titleBar.append(title);
            const table = $('<div class="deck-building-table"></div>');
            for (let prop in building.properties) {
                const p = $('<p></p>').html(`${prop}: ${building.properties[prop]}`);
                table.append(p);
            }
            div.append(table);
        }

        function setDeckMode(mode) {
            if (deckMode == mode)
                return;
            deckMode = mode;
            reverseColorButton('deck-movement-mode');
            reverseColorButton('deck-selection-mode');

            // if (mode == 'selection') {
            //     cursorType = 'pointer';
            // } else {
            //     cursorType = 'grab';
            //     if (layers.building.id == 'aggregated-building-layer')
            //         loadAggregatedBuildings();
            //     layers.hiddenBuilding = null;
            // }
            supportedBuildingSelected.action();
            updateLayers();
        }

        function toggleMapMenu() {
            // hideMenu(lightMenuId);
            toggleMenu(mapMenuId);
        }

        function toggleLightMenu() {
            hideMenu(mapMenuId);
            toggleMenu(lightMenuId);
        }

        function showLightSection() {
            $('#lightSection').css('display', 'block');
        }

        function hideLightSection() {
            $('#lightSection').css('display', 'none');
        }

        function switchToFirstActiveInfoMenu() {
            if ($('#heatmap-info-btn').css('display') === 'block')
                $('#heatmap-info-btn').click();
            else if ($('#traffic-info-btn').css('display') === 'block')
                $('#traffic-info-btn').click();
        }

        function hideInnerMenus() {
            const menuHeaders = $('#deck-menu-header').children();
            for (let i = 0; i < menuHeaders.length; i++) {
                $(menuHeaders[i]).addClass('deck-btn');
                $(menuHeaders[i]).removeClass('deck-btn-active');
            }
            const menuContents = $('#deck-menu-content').children();
            for (let i = 0; i < menuContents.length; i++) {
                hideMenu(menuContents[i].id);
            }
        }

        function setHeaderMenu(name) {
            hideInnerMenus();
            $(`#${name}-btn`).removeClass('deck-btn');
            $(`#${name}-btn`).addClass('deck-btn-active');
            showMenu(`${name}-menu-content`);
        }

        function toggleMenu(id) {
            if ($(`#${id}`).css('display') == 'none')
                showMenu(id);
            else
                hideMenu(id);
        }

        function hideMenu(id) {
            $(`#${id}`).css('display', 'none');
        }

        function showMenu(id) {
            $(`#${id}`).css('display', 'block');
        }

        function loadSettingContent() {
            const contentDiv = $('#settings-menu-content');
            const settingDiv = $('<div></div>');
            settingDiv.css({width: "100%"});
            for (let key in settingOptions) {
                const item = settingOptions[key];
                const div = $('<div class="itemSetting"></div>');
                const text = $(`<p>${item.text}</p>`);
                div.append(text);
                let input;
                switch (item.type.toLowerCase()) {
                    case "number":
                        input = $(`<input type="number" id="${key}-input" value="${item.value}" min="${item.min || 0}" max="${item.max || 100000}" />`);
                        input.css('width', '40%');
                        break;
                    case "bool":
                        input = $(`<input type="checkbox" role="switch" id="${key}-input">`);
                        input.prop('checked', item.value);
                        input.css('width', '25px');
                        break;
                    case "text":
                    default:
                        input = $(`<input type="text" id="${key}-input" value="${item.value}"/>`);
                        input.css('width', '40%');
                        break;
                }
                div.append(input);
                contentDiv.append(div);
            }
            const divButtons = $('<div></div>');
            divButtons.css({
                display: "flex",
                "justify-content": "space-between",
            })
            const btnReset = $(`<button class="deck-btn">Reset</button>`);
            btnReset.css({
                "background-color": "red",
            });
            btnReset.click(() => {
                document.cookie = `settings=; expires=${(new Date(Date.now() + 1314000000)).toUTCString()}`;
                hideMenu(mapMenuId);
                reloadLayersWithSettings();
            });
            divButtons.append(btnReset);
            const btnSave = $(`<button class="deck-btn">Save</button>`);
            btnSave.css({
                "background-color": "green",
            });
            btnSave.click(() => {
                const items = $('#settings-menu-content input');
                for (let i = 0; i < items.length; i++) {
                    const key = items[i].id.split('-')[0];
                    switch (settingOptions[key].type.toLowerCase()) {
                        case "bool":
                            settingOptions[key].value = items[i].checked;
                        break;
                        case "number":
                            settingOptions[key].value = parseFloat(items[i].value);
                        break;
                        default:
                            settingOptions[key].value = items[i].value;
                        break;
                    }
                }
                document.cookie = `settings=${JSON.stringify(settingOptions)}; expires=${(new Date(Date.now() + 1314000000)).toUTCString()}`;
                hideMenu(mapMenuId);
                reloadLayersWithSettings();
            });
            divButtons.append(btnSave);
            contentDiv.append(divButtons);
        }

        function reloadLayersWithSettings() {
            layers.tree = null;
            layers.vehicle = [];
            layers.roads = null;
            if (supportedBuildingSelected.id === 'menu-grid-building-tiled') {
                layers.building.finalizeState(layers.building.context);
                layers.building = null;
                layers.modifiedBuildings = [];
            }
            updateLayers();

            // max tiles and min zoom 3d
            if (supportedBuildingSelected.id === 'menu-grid-building-tiled') {
                setTimeout(() => {
                    supportedBuildings['grid_building_tiled'].action();
                    updateLayers();
                }, 10);
            }
            // crest animations
            if (layers.crest) {
                layers.crest = new snap4deck.FusionTileLayer({
                    ...layers.crest.props,
                    isAnimated: settingOptions.animationEnabled.value,
                    currentTime: animationTime,
                });
                if (settingOptions.animationEnabled.value)
                    startTimerAnimation();
            }

            // KB roads
            if (settingOptions.roadsKB.value) {
                const roadsData = 'https://www.disit.org/smosm/sparql?format=json&default-graph-uri=&' +
                'format=application%2Fsparql-results%2Bjson&timeout=0&debug=on&' +
                'query=PREFIX+km4c%3A+%3Chttp%3A%2F%2Fwww.disit.org%2Fkm4city%2Fschema%23%3E' +
                'PREFIX+rdf%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F1999%2F02%2F22-rdf-syntax-ns%23%3E' +
                'PREFIX+rdfs%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F01%2Frdf-schema%23%3E' +
                'PREFIX+rdfsn%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F2003%2F01%2Fgeo%2Fwgs84_pos%23%3E' +
                'PREFIX+dct%3A+%3Chttp%3A%2F%2Fpurl.org%2Fdc%2Fterms%2F%3E' +
                'SELECT+%3Fstrada+%3FnomeStrada+%3Felementostradale+%3Fhighwaytype+%3Fstartlat+%3Fstartlong+%3Fendlat+%3Fendlong+%3F' +
                'compositiontipo+%3Foperatingstatus+%3FlatrafficDir+%3Flalunghezza+WHERE+%7B%3Fstrada+a+km4c%3ARoad.%3F' +
                'strada+km4c%3AinMunicipalityOf+%3Fmunicip.%3Fstrada+km4c%3AextendName+%3FnomeStrada.%3Fmunicip+foaf%3Aname+%22Firenze%22.%3F' +
                'strada+km4c%3AcontainsElement+%3Felementostradale.%3Felementostradale+km4c%3AstartsAtNode+%3F' +
                'startnode.%3Felementostradale+km4c%3AhighwayType+%3Fhighwaytype.%3Felementostradale+km4c%3Acomposition+%3F' +
                'compositiontipo.%3Felementostradale+km4c%3AoperatingStatus+%3Foperatingstatus.%3F' +
                'elementostradale+km4c%3AtrafficDir+%3FlatrafficDir.%3Felementostradale+km4c%3Alength+%3F' +
                'lalunghezza.%3Fstartnode+rdfsn%3Alat+%3Fstartlat.%3Fstartnode+rdfsn%3Along+%3Fstartlong.%3F' +
                'elementostradale+km4c%3AendsAtNode+%3Fendnode.%3Fendnode+rdfsn%3Alat+%3Fendlat.%3F' +
                'endnode+rdfsn%3Along+%3Fendlong.' +
                'FILTER ( xsd:float(?startlat) < {north} %26%26 xsd:float(?startlat) > {south} %26%26' +
                ' xsd:float(?startlong) < {east} %26%26 xsd:float(?startlong) > {west})%7D';
                // layers.roads = new deck.TileLayer({
                layers.roads = new snap4deck.FusionTileLayer({
                    data: roadsData,
                    getFusionCoords: d => [d.startlong.value, d.startlat.value],
                    fusionTopDown: snap4deck.jsonFusionTopDown,
                    fusionBottomUP: snap4deck.jsonFusionBottomUp,
                    getTileData: (tile) => {
                        const {signal} = tile; 
                        const {north, west, east, south} = tile.bbox;
                        // const url = tile.url
                        //     .replace('{north}', north)
                        //     .replace('{east}', east)
                        //     .replace('{west}', west)
                        //     .replace('{south}', south);
                        // return fetch(url).then((res) => res.text()).then(async jsontext => {
                        return fetch(tile.url).then((res) => res.text()).then(async jsontext => {
                            jsontext = JSON.parse(jsontext).results.bindings;
                            for (let binding of jsontext) {
                                binding.startlong.value = parseFloat(binding.startlong.value);
                                binding.startlat.value  = parseFloat(binding.startlat.value);
                                binding.endlong.value   = parseFloat(binding.endlong.value);
                                binding.endlat.value    = parseFloat(binding.endlat.value);
                                binding.startPos = [binding.startlong.value, binding.startlat.value, 0];
                                binding.endPos = [binding.endlong.value, binding.endlat.value, 0];
                            }
                            return jsontext;
                        });
                    },
                    renderSubLayers: (props) => {
                        if (!props.data)
                            return;
                        return new deck.LineLayer({
                            ...props,
                            parameters: {
                                depthTest: false
                            },
                            extensions: [new deck._TerrainExtension()],
                            terrainDrawMode: 'offset',
                            pickable: true,
                            getWidth: 5,
                            getSourcePosition: d => d.startPos,
                            getTargetPosition: d => d.endPos,
                            getColor: [255, 0, 0, 255],
                        });
                    },
                });
            }
            // decorations

            if (settingOptions.displayDecorations.value) {
                $.ajax({
                    url: '../widgets/layers/decorations/trees/alberi_firenze.geojson',
                    success: (data) => {
                        let model = '../widgets/layers/decorations/trees/tree_low_1.glb';
                        let getOrientation = [0,0,0];
                        let sizeScale = 1.3;
                        if (settingOptions.realisticDecoration.value) {
                            model = '../widgets/layers/decorations/trees/trees_low2.glb';
                            getOrientation = [0,0,90];
                            sizeScale = 0.017;
                        }
                        setTimeout(() => {
                            layers.tree = createTreeLayer({
                                data: data.features ? data : JSON.parse(data),
                                model,
                                getOrientation,
                                sizeScale,
                            });
                            updateLayers();
                            setTimeout(() => {
                                layers.tree.setNeedsRedraw();
                                console.log(layers.tree);
                            }, 10);
                        }, 10);
                    }
                });

                layers.vehicle.push(new deck.ScenegraphLayer({
                    id: 'airplane-layer',
                    data: [
                        {positions: [11.199664049797294, 43.802922897309, 0], rotation: 0,},
                        {positions: [11.198907706148423, 43.803451457011874, 0], rotation: -30,},
                        {positions: [11.200817114302204, 43.80321975648056, 0], rotation: 40,},
                        {positions: [11.201332283214695, 43.80477050629828, 0], rotation: 50,},
                        {positions: [11.200375340660075, 43.80484798194954, 0], rotation: -140,},
                        {positions: [11.196612079522039, 43.80809041845304, 0], rotation: -70,},
                        {positions: [11.196745364113017, 43.80715239609039, 0], rotation: 90,},
                        {positions: [11.197337839154171, 43.80756254251544, 0], rotation: -90,},
                    ],
                    scenegraph: '../widgets/layers/decorations/vehicles/a319.glb',
                    extensions: [new deck._TerrainExtension()],
                    terrainDrawMode: 'offset',
                    getPosition: d => d.positions,
                    getOrientation: d => [0, d.rotation, 90],
                    getScale: [0.07, 0.07, 0.07],
                    // sizeScale: 0.07,
                    _lighting: 'pbr'
                }));
            }
            updateLayers();
        }

        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
        }

        function unselectInfo() {
            const tabs = $('#deck-info-tab').children();
            tabs.addClass('deck-btn');
            tabs.removeClass('deck-btn-active');

            const contents = $('#deck-info-content').children();
            contents.css('display', 'none');
        }

        function selectFirstInfoTabAvaiable() {
            const tabs = $('#deck-info-tab a');
            for (let i = 0; i < tabs.length; i++) {
                if (tabs[i].style.display !== 'none') {
                    tabs[i].click();
                    break;
                }
            }
        }

        function showInfoBuilding(building, layer, scenegraph, key, index) {
            const oldContent = $('#building-info-content');
            if (oldContent)
                oldContent.remove();
            let htmlBuildingModels = `<div>`
            for (let model of building.models) {
                let isUsed = (building.usedModel && building.usedModel.type === model.type) || (!building.usedModel && model.is_default);
                let htmlBuildingModel = `
                    <div style="margin: 10px 0px;">
                        ${model.type} <button ${isUsed ? "disabled" : ""}>${isUsed ? "In Use" : "Change"}</button>
                    </div>
                `;
                htmlBuildingModels += htmlBuildingModel;
            } 
            htmlBuildingModels += `</div>`
            let htmlBuilding = $(`
                <div id="building-info-content">
                    <h4>${building.name}</h4>
                    <p>ID: ${building.ID}</p>
                    ${htmlBuildingModels}
                </div>
            `);
            $('#deck-info-content').append(htmlBuilding);
            $('#building-info-content').css({
                "padding": "10px 20px 20px 20px",
            });
            $('#building-info-content button').css({
                "background": "var(--wdgt-bg-color)",
                "color": "var(--text-color)",
                "border": "none",
                "float": "right"
            });
            const buttons = $('#building-info-content button').toArray()
            let j = 0;
            for (let l of layers.modifiedBuildings) {
                layers.modifiedBuildings[j] = new deck.ScenegraphLayer({
                    ...l.props,
                    data: [...l.props.data]
                });
                j++;
            }
            for (let i = 0; i < buttons.length; i++) {
                buttons[i].addEventListener('click', (event, info) => {
                    console.log(event, info);
                    if (building.models[i].is_external_url) {
                        window.open(building.models[i].path, "_blank");
                        return;
                    }
                    for (let b of buttons) {
                        b.innerText = "Change";
                        b.disabled = false;
                    }
                    event.currentTarget.innerText = "In Use";
                    event.currentTarget.disabled = true;
                    building.usedModel = building.models[i];
                    building.tileUrl = building.tileUrl.replace('/models.json', '');
                    building.glb = `${building.tileUrl}/${building.usedModel.path}`;
                    // building.picked = true;
                    if (!building.removedFromScene) {
                        let nodes = scenegraph.children[0].children;
                        let i = 0;
                        for (let node of nodes) {
                            if (node.id.includes(building.ID)) {
                                nodes.splice(i,1);
                                building.removedFromScene = true;
                                break;
                            }
                            i++;
                        }
                        var indexRemoved = [];
                        if (buildingRemoved.has(key))
                            indexRemoved = buildingRemoved.get(key);
                        indexRemoved.push(index);
                        indexRemoved.sort();
                        buildingRemoved.set(key, indexRemoved);
                        layer.setNeedsRedraw();
                    }
                    console.log(layer);

                    let j = 0;
                    for (let l of layers.modifiedBuildings) {
                        if (l.id === building.ID) {
                            layers.modifiedBuildings.splice(j, 1);
                            break;
                        } 
                        j++;
                    }

                    const blayer = new snap4deck.LightScenegraphLayer({
                        id: building.ID,
                        data: [building],
                        scenegraph: building.glb,
                        pickable: true,
                        _lighting: 'pbr',
                        getPosition: d => {
                            if (Array.isArray(d.usedModel.coords) && d.usedModel.coords.length == 2)
                                return [...d.usedModel.coords, -elevationOffset]
                            return [0, 0, 0];
                        },
                        getColor: d => d.picked ? [255,255,100] : [255,255,255],
                        updateTriggers: {
                            getColor: {
                                color: building.picked,
                            },
                        },
                        onClick: (info, event) => {
                            if (deckMode !== "selection")
                                return;
                            if (buildingSelected) {
                                if (buildingSelected.children)
                                    buildingSelected.children.traverse((model) => model.setAttributes({aPicked: [0]}))
                                buildingSelected.picked = false;
                            }


                            buildingSelected = building;
                            buildingSelected.picked = true;
                            showInfoBuilding(info.object, info.layer);
                        }
                    });
                    layers.modifiedBuildings.push(blayer)
                    updateLayers();
                });
            }
            $('#building-info-btn').css('display', 'block');
            $('#building-info-btn').click();
            updateLayers();
        }


        function reverseColorButton(id) {
            const element = $(`#${id}`);
            const bg = element.css('color');
            const fg = element.css('background-color');
            element.attr('style', `color: ${fg} !important; background-color: ${bg} !important;`);
            // element.css('color', `${fg}!important`);
            // element.css('background-color', `${bg}!important`);
        }

        function getURLFromTemplate(template, properties) {
            if (!template || !template.length) {
                return null;
            }

            // supporting deckgl version 8.8
            var x, y, z;
            if (properties.x) {
                ({
                    x,
                    y,
                    z
                } = properties);
            } else {
                ({
                    x,
                    y,
                    z
                } = properties.index);
            }

            if (Array.isArray(template)) {
                const index = Math.abs(x + y) % template.length;
                template = template[index];
            }
            const {
                bbox
            } = properties;
            return template
                .replace(/\{x\}/g, x)
                .replace(/\{y\}/g, y)
                .replace(/\{z\}/g, z)
                .replace(/\{-y\}/g, Math.pow(2, z) - y - 1)
                .replace(/\{bbox\}/g, `${bbox.west},${bbox.south},${bbox.east},${bbox.north}`)
                .replace(/\{selection\}/g, `${bbox.west};${bbox.south};${bbox.east};${bbox.north}`);
        }


        // ********** CLASSES **********
        class LoadingDiv {
            static defaultProps = {
                text: 'loading div text',
                color1: '#000000',
                color2: '#ffffff',
                status: 'loading',
                autoremove: true,
                timeout: 1000,
            }
            props
            /** @type {JQuery} */
            element;
            constructor(props) {
                this.props = {
                    ...LoadingDiv.defaultProps,
                    ...props,
                };

                this.element = $('<div class="gisMapLoadingDiv"></div>');
                if ($('#<?= $_REQUEST['name_w'] ?>_content div.gisMapLoadingDiv').length > 0) {
                    this.element.insertAfter($(
                        '#<?= $_REQUEST['name_w'] ?>_content div.gisMapLoadingDiv').last());
                } else {
                    this.element.insertAfter($('#<?= $_REQUEST['name_w'] ?>_map'));
                }

                this._generateCSS();
                this._updateText();
            }
            /***
             * @param status {string}
             */
            setStatus(status) {
                this.props.status = status;
                this._updateText();
                this._autoremove();
            }
            _updateText() {
                const {
                    text,
                    status
                } = this.props
                var htmlText;
                switch (status.toLowerCase()) {
                    case 'loading':
                        htmlText = $('<p class="gisMapLoadingDivTextPar">adding <b>' + text
                            .toLowerCase() +
                            '</b> to map<br><i class="fa fa-circle-o-notch fa-spin" style="font-size: 30px"></i></p>'
                        );
                        break;
                    case 'ok':
                        htmlText = $('<p class="gisMapLoadingDivTextPar"><b>' + text.toLowerCase() +
                            '</b> added to map<br><i class="fa fa-check" style="font-size: 30px"></i></p>'
                        );
                        break;
                    case 'ko':
                        htmlText = $('<p class="gisMapLoadingDivTextPar">error adding <b>' + text
                            .toLowerCase() +
                            '</b> to map<br><i class="fa fa-close" style="font-size: 30px"></i></p>');
                        break;
                    case 'empty':
                        htmlText = $('<p class="gisMapLoadingDivTextPar">empty response for <b>' + text
                            .toLowerCase() +
                            '</b> to map<br><i class="fa fa-close" style="font-size: 30px"></i></p>');
                        break;
                    default:
                        htmlText = $('<p>Error during set status for loading div</p>')
                        break;
                }
                this.element.empty();
                this.element.append(htmlText);
                var parHeight = htmlText.height();
                var parMarginTop = Math.floor((this.element.height() - parHeight) / 2);
                htmlText.css('margin-top', `${parMarginTop}px`);
            }
            remove(timeout) {
                var element = this.element;
                timeout = timeout || this.props.timeout;
                if (timeout)
                    setTimeout(() => {
                        element.css('opacity', 0);
                        setTimeout(() => element.remove(), 350);
                    }, timeout);
                else {
                    element.css('opacity', 0);
                    setTimeout(() => element.remove(), 350);
                }
            }
            _autoremove() {
                const {
                    autoremove,
                    timeout,
                    status
                } = this.props;
                if (autoremove && (status == 'ok' || status == 'ko' || status == 'empty'))
                    this.remove(timeout);
            }
            _generateCSS() {
                const {
                    color1,
                    color2
                } = this.props;

                this.element.css("top", ($('#<?= $_REQUEST['name_w'] ?>_div').height() - ($(
                        '#<?= $_REQUEST['name_w'] ?>_content div.gisMapLoadingDiv')
                    .length * this.element.height())) + "px");
                this.element.css("left", ($('#<?= $_REQUEST['name_w'] ?>_div').width() - this.element
                    .width()) + "px");
                this.element.css("background", color1);
                this.element.css("background", "-webkit-linear-gradient(left top, " + color1 + ", " +
                    color2 + ")");
                this.element.css("background", "-o-linear-gradient(bottom right, " + color1 + ", " +
                    color2 + ")");
                this.element.css("background", "-moz-linear-gradient(bottom right, " + color1 + ", " +
                    color2 + ")");
                this.element.css("background", "linear-gradient(to bottom right, " + color1 + ", " +
                    color2 + ")");
                this.element.show();
                this.element.css('opacity', 1);
            }
        }

        class EventMapManager {
            static exclusiveTypes = [
                'removeAlarmPin',
                'removeEvacuationPlanPin',
                'removeSelectorEventPin',
                'removeSelectorEventPin',
                'removeEventFIPin',
                'removeResourcePin',
                'removeOperatorEventPin',
                'removeTrafficEventPin',
            ];
            static exclusiveMapppingTypes = {
                'addAlarm': 'removeAlarmPin',
                'addEvacuationPlan': 'removeEvacuationPlanPin',
                'addBubbleChart': 'removeSelectorEventPin',
                'addSelectorPin': 'removeSelectorEventPin',
                'addEventFI': 'removeEventFIPin',
                'addResource': 'removeResourcePin',
                'addOperatorEvent': 'removeOperatorEventPin',
                'addTrafficEvent': 'removeTrafficEventPin',
            };
            /** @type {Map} */
            // mapManager;
            widgetName;
            registeredEvents = {};
            autoreloadEvents = {};
            autoreloadEnable = false;
            addMode = 'additive';

            constructor(widgetName) {
                this.widgetName = widgetName;
            }

            addListeners() {

            }

            trigger(event) {

            }

            /***
             * Legacy Trigger usa la funzione callback 
             * al posto dell'equivalente di MapManager.
             * @param event {Event} evento generato.
             * @param callback {Function} funzione chiamata.
             * @param triggerToEsclude {string} trigger da escludere in modalità esclusiva.
             */
            legacyTrigger(event, callback) {
                if (event.target != this.widgetName)
                    return;
                if (event.type.match(/(add)\w+/g))
                    this._legacyTriggerAdd(event, callback);
                else if (event.type.match(/(remove)\w+/g))
                    this._legacyTriggerRemove(event, callback);
            }

            _legacyTriggerAdd(event, callback) {
                // in esclusive mode we need to remove all layers except for the orthomap.
                if (this.addMode == 'exclusive') {
                    const triggerToEsclude = EventMapManager.exclusiveMappingTypes[event.type];
                    for (let type of EventMapManager.exclusiveTypes)
                        if (triggerToEsclude == null || triggerToEsclude != type)
                            $.event.trigger({
                                type
                            });
                }
                this.registeredEvents[`${event.type}-${event.passedData.desc || event.passedParams.desc}`] = event;
                callback(event);
            }

            _legacyTriggerRemove(event, callback) {
                delete this.registeredEvents[`${event.type}-${event.passedData.desc || event.passedParams.desc}`];
                callback(event);
            }

            setAddMode(value) {
                if (value != 'additive' && value != 'exclusive')
                    return;
                this.addMode = value;
            }

            setMapManager(mapManager) {
                EventMapManager.mapManager = mapManager;
            }

            reloadEvents() {
                if (!EventMapManager.auto)
                    return;

                EventMapManager._triggerReload(EventMapManager.autoreloadEvents);
            }

            reloadElevableEvents() {
                for (let key in this.registeredEvents)
                    if (key != "addHeatmap-Terrain")
                        $.event.trigger(this.registeredEvents[key]);
            }

            reloadAllEvents() {
                EventMapManager._triggerReload(EventMapManager.registeredEvents);
            }

            _triggerReload(events) {
                for (let key in events)
                    $.event.trigger(events[key]);
            }
        }

        class Sky {
            gl;
            vertCode = `
                attribute vec4 a_position;
                varying vec4 v_position;
                void main() {
                v_position = a_position;
                gl_Position = a_position;
                gl_Position.z = 1.0;
                }
                `;
            fragCode = `
                precision mediump float;
                uniform samplerCube u_skybox;
                uniform mat4 u_viewDirectionProjectionInverse;
                varying vec4 v_position;
                void main() {
                vec4 t = u_viewDirectionProjectionInverse * v_position;
                gl_FragColor = textureCube(u_skybox, normalize(t.xyz / t.w));
                }
                `;
            program;
            positionLocation;
            positionBuffer;
            fieldOfViewRadians;
            viewDirectionProjectionInverseLocation;
            skyboxLocation;
            constructor(gl) {
                this.init(gl);
            }
            init(gl) {
                this.gl = gl;

                var vertShader = gl.createShader(gl.VERTEX_SHADER);
                gl.shaderSource(vertShader, this.vertCode);
                gl.compileShader(vertShader);

                var fragShader = gl.createShader(gl.FRAGMENT_SHADER);
                gl.shaderSource(fragShader, this.fragCode);
                gl.compileShader(fragShader);

                this.program = gl.createProgram();
                gl.attachShader(this.program, vertShader);
                gl.attachShader(this.program, fragShader);
                gl.linkProgram(this.program);

                // look up where the vertex data needs to go.
                this.positionLocation = gl.getAttribLocation(this.program, "a_position");

                // lookup uniforms
                this.skyboxLocation = gl.getUniformLocation(this.program, "u_skybox");
                this.viewDirectionProjectionInverseLocation =
                    gl.getUniformLocation(this.program, "u_viewDirectionProjectionInverse");

                // Create a buffer for positions
                this.positionBuffer = gl.createBuffer();
                // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)
                gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);
                // Put the positions in the buffer
                var positions = new Float32Array(
                    [
                        -1, -1,
                        1, -1,
                        -1, 1,
                        -1, 1,
                        1, -1,
                        1, 1,
                    ]);
                gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);

                // Create a texture.
                var texture = gl.createTexture();
                gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);
                const wheater = 'daylight';
                // const wheater = 'night';

                const faceInfos = [{
                        target: gl.TEXTURE_CUBE_MAP_POSITIVE_X,
                        url: `../img/Sky/${wheater}/right.png`
                    },
                    {
                        target: gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
                        url: `../img/Sky/${wheater}/left.png`
                    },
                    {
                        target: gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
                        url: `../img/Sky/${wheater}/top.png`
                    },
                    {
                        target: gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
                        url: `../img/Sky/${wheater}/bottom.png`
                    },
                    {
                        target: gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
                        url: `../img/Sky/${wheater}/front.png`
                    },
                    {
                        target: gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,
                        url: `../img/Sky/${wheater}/behind.png`
                    },
                ];
                faceInfos.forEach((faceInfo) => {
                    const {
                        target,
                        url
                    } = faceInfo;
                    const level = 0;
                    const internalFormat = gl.RGBA;
                    const width = 512;
                    const height = 512;
                    const format = gl.RGBA;
                    const type = gl.UNSIGNED_BYTE;
                    const image = new Image();
                    image.src = url;
                    image.addEventListener('load', function() {
                        gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);
                        gl.texImage2D(target, level, internalFormat, format, type, image);
                        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
                    });
                });
                gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);

                function radToDeg(r) {
                    return r * 180 / Math.PI;
                }

                function degToRad(d) {
                    return d * Math.PI / 180;
                }

                this.fieldOfViewRadians = degToRad(60);
                this.cameraYRotationRadians = degToRad(0);

                var spinCamera = true;
                var then = 0;
                this.draw();
            }

            draw(bearing = 0, pitch = 0, maxPitch = 75) {
                var gl = this.gl;
                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
                gl.useProgram(this.program);
                gl.enableVertexAttribArray(this.positionLocation);
                gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);

                // Tell the position attribute how to get data out of positionBuffer (ARRAY_BUFFER)
                var size = 2; // 2 components per iteration
                var type = gl.FLOAT; // the data is 32bit floats
                var normalize = false; // don't normalize the data
                var stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position
                var offset = 0; // start at the beginning of the buffer
                gl.vertexAttribPointer(
                    this.positionLocation, size, type, normalize, stride, offset);

                // Compute the projection matrix
                var aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;
                var projectionMatrix =
                    m4.perspective(this.fieldOfViewRadians, aspect, 1, 2000);

                bearing *= Math.PI / 180;
                pitch *= Math.PI / 180;

                var cameraPosition = [Math.cos(bearing), Math.cos(pitch), Math.sin(bearing)];
                var target = [0, 0, 0];
                var up = [0, 1, 0];

                // Compute the camera's matrix using look at.
                var cameraMatrix = m4.lookAt(cameraPosition, target, up);

                // Make a view matrix from the camera matrix.
                var viewMatrix = m4.inverse(cameraMatrix);

                // We only care about direciton so remove the translation
                viewMatrix[12] = 0;
                viewMatrix[13] = 0;
                viewMatrix[14] = 0;

                var viewDirectionProjectionMatrix =
                    m4.multiply(projectionMatrix, viewMatrix);
                var viewDirectionProjectionInverseMatrix =
                    m4.inverse(viewDirectionProjectionMatrix);

                // Set the uniforms
                gl.uniformMatrix4fv(
                    this.viewDirectionProjectionInverseLocation, false,
                    viewDirectionProjectionInverseMatrix);

                // Tell the shader to use texture unit 0 for u_skybox
                gl.uniform1i(this.skyboxLocation, 0);

                // let our quad pass the depth test at 1.0
                gl.depthFunc(gl.LEQUAL);

                // Draw the geometry.
                gl.drawArrays(gl.TRIANGLES, 0, 1 * 6);
            }
        }

        // fine definizioni deckgl

        //Inizio del main script

        /*IMPORTANTE - Chiamata al modulo server che reperisce i parametri di costruzione del widget dal database (tipicamente
         * da tabella Config_widget_dashboard, la quale memorizza un record per ogni istanza di widget. Tale record viene scritto
         * quando il widget viene creato
         */
        $.ajax({
            //url: "../controllers/getWidgetParams.php",
            url: "../widgets/getParametersWidgets.php",
            type: "GET",
            data: {
                //widgetName: "<?= str_replace('.', '_', str_replace('-', '_', escapeForJS($_REQUEST['name_w']))) ?>"
                nomeWidget: [
                    "<?= str_replace('.', '_', str_replace('-', '_', escapeForJS($_REQUEST['name_w']))) ?>"
                ]
            },
            async: true,
            dataType: 'json',
            success: function(widgetData) {
                widgetData.params = widgetData.param;
                //Parametri di costruzione del widget (struttura e aspetto)
                showTitle = widgetData.params.showTitle;
                widgetContentColor = widgetData.params.color_w;
                fontSize = widgetData.params.fontSize;
                fontColor = widgetData.params.fontColor;
                hasTimer = widgetData.params.hasTimer;
                chartColor = widgetData.params.chartColor;
                dataLabelsFontSize = widgetData.params.dataLabelsFontSize;
                dataLabelsFontColor = widgetData.params.dataLabelsFontColor;
                chartLabelsFontSize = widgetData.params.chartLabelsFontSize;
                chartLabelsFontColor = widgetData.params.chartLabelsFontColor;
                appId = widgetData.params.appId;
                flowId = widgetData.params.flowId;
                nodeId = widgetData.params.nodeId;
                nrMetricType = widgetData.params.nrMetricType;
                sm_based = widgetData.params.sm_based;
                rowParameters = widgetData.params.rowParameters;
                sm_field = widgetData.params.sm_field;
                addMode = widgetData.params.viewMode;
                enableFullscreenModal = widgetData.params.enableFullscreenModal;
                enableFullscreenTab = widgetData.params.enableFullscreenTab;
                geoServerUrl = widgetData.geoServerUrl;
                heatmapUrl = widgetData.heatmapUrl;
                nodeRedInputName = widgetData.params.name;
                nrInputId = widgetData.params.nrInputId;

                getOrganizationParams(function(params) {
                    orgParams = params[0];
                });

                // if (widgetData.params.infoJson != "yes") {
                //     $('#' + mapOptionsDivName).hide();
                // }

                if (((embedWidget === true) && (embedWidgetPolicy === 'auto')) || ((embedWidget ===
                        true) && (embedWidgetPolicy === 'manual') && (showTitle === "no")) || ((
                        embedWidget === false) && (showTitle === "no"))) {
                    showHeader = false;
                } else {
                    showHeader = true;
                }

                metricName = "<?= escapeForJS($_REQUEST['id_metric']) ?>";
                widgetTitle = widgetData.params.title_w;
                widgetHeaderColor = widgetData.params.frame_color_w;
                widgetHeaderFontColor = widgetData.params.headerFontColor;
                sizeRowsWidget = parseInt(widgetData.params.size_rows);
                styleParameters = JSON.parse(widgetData.params.styleParameters);
                widgetParameters = JSON.parse(widgetData.params.parameters);
                wsConnect = widgetParameters.wsConnect;

                if (metricName != 'Map' && nodeId != null) {
                    openWs(widgetName);
                }
                if (socket == null && wsConnect == "yes") {
                    newWSConnect();
                }

                setWidgetLayout(hostFile, widgetName, widgetContentColor, widgetHeaderColor,
                    widgetHeaderFontColor, showHeader, headerHeight, hasTimer);

                $('#<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>_div')
                    .parents('li.gs_w').off('resizeWidgets');
                $('#<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>_div')
                    .parents('li.gs_w').on('resizeWidgets', resizeWidget);

                $("#" + widgetName + "_buttonsDiv").css("height", "100%");
                $("#" + widgetName + "_buttonsDiv").css("float", "left");

                $("#" + widgetName + "_buttonsDiv div.singleBtnContainer").eq(2).css("font-size",
                    "20px");
                $("#" + widgetName + "_buttonsDiv div.singleBtnContainer").eq(2).hover(function() {
                    $(this).find("span").css("color", "red");
                }, function() {
                    $(this).find("span").css("color", widgetHeaderFontColor);
                });
                $("#" + widgetName + "_buttonsDiv div.singleBtnContainer").eq(3).css("font-size",
                    "20px");
                $("#" + widgetName + "_buttonsDiv div.singleBtnContainer").eq(3).hover(function() {
                    $(this).find("span").css("color", "red");
                }, function() {
                    $(this).find("span").css("color", widgetHeaderFontColor);
                });

                if (hostFile === "config") {
                    if ((enableFullscreenModal === 'yes') && (enableFullscreenTab === 'yes')) {
                        $("#" + widgetName + "_buttonsDiv").css("width", "50px");
                        titleWidth = parseInt(parseInt($("#" + widgetName + "_div").width() - 25 -
                            50 - 25 - 2));
                        $("#" + widgetName + "_buttonsDiv div.singleBtnContainer").eq(0).show();
                        $("#" + widgetName + "_buttonsDiv div.singleBtnContainer").eq(1).show();
                    } else {
                        if ((enableFullscreenModal === 'yes') && (enableFullscreenTab === 'no')) {
                            $("#" + widgetName + "_buttonsDiv").css("width", "25px");
                            titleWidth = parseInt(parseInt($("#" + widgetName + "_div").width() -
                                25 - 25 - 25 - 2));
                            $("#" + widgetName + "_buttonsDiv div.singleBtnContainer").eq(0).show();
                            $("#" + widgetName + "_buttonsDiv div.singleBtnContainer").eq(1).hide();
                        } else {
                            if ((enableFullscreenModal === 'no') && (enableFullscreenTab ===
                                    'yes')) {
                                $("#" + widgetName + "_buttonsDiv").css("width", "25px");
                                titleWidth = parseInt(parseInt($("#" + widgetName + "_div")
                                    .width() - 25 - 25 - 25 - 2));
                                $("#" + widgetName + "_buttonsDiv div.singleBtnContainer").eq(0)
                                    .hide();
                                $("#" + widgetName + "_buttonsDiv div.singleBtnContainer").eq(1)
                                    .show();
                            } else {
                                $("#" + widgetName + "_buttonsDiv").css("width", "0px");
                                $("#" + widgetName + "_buttonsDiv").hide();
                                titleWidth = parseInt(parseInt($("#" + widgetName + "_div")
                                    .width() - 25 - 0 - 25 - 2));
                                $("#" + widgetName + "_buttonsDiv div.singleBtnContainer").eq(0)
                                    .hide();
                                $("#" + widgetName + "_buttonsDiv div.singleBtnContainer").eq(0)
                                    .hide();
                            }
                        }
                    }
                } else {
                    if ((enableFullscreenTab === 'yes') && (enableFullscreenModal === 'yes')) {
                        $("#" + widgetName + "_buttonsDiv").css("width", "50px");
                        titleWidth = parseInt(parseInt($("#" + widgetName + "_div").width() - 25 -
                            50 - 2));
                        $("#" + widgetName + "_buttonsDiv div.singleBtnContainer").eq(0).show();
                        $("#" + widgetName + "_buttonsDiv div.singleBtnContainer").eq(1).show();
                    } else {
                        if ((enableFullscreenTab === 'yes') && (enableFullscreenModal === 'no')) {
                            $("#" + widgetName + "_buttonsDiv").css("width", "25px");
                            titleWidth = parseInt(parseInt($("#" + widgetName + "_div").width() -
                                25 - 25 - 2));
                            $("#" + widgetName + "_buttonsDiv div.singleBtnContainer").eq(0).hide();
                            $("#" + widgetName + "_buttonsDiv div.singleBtnContainer").eq(1).show();
                        } else {
                            if ((enableFullscreenTab === 'no') && (enableFullscreenModal ===
                                    'yes')) {
                                $("#" + widgetName + "_buttonsDiv").css("width", "25px");
                                titleWidth = parseInt(parseInt($("#" + widgetName + "_div")
                                    .width() - 25 - 25 - 2));
                                $("#" + widgetName + "_buttonsDiv div.singleBtnContainer").eq(0)
                                    .show();
                                $("#" + widgetName + "_buttonsDiv div.singleBtnContainer").eq(1)
                                    .hide();
                            } else {
                                $("#" + widgetName + "_buttonsDiv").hide();
                                titleWidth = parseInt(parseInt($("#" + widgetName + "_div")
                                    .width() - 25 - 2));
                            }
                        }
                    }
                }

                $("#" + widgetName + "_titleDiv").css("width", titleWidth + "px");

                if (firstLoad === false) {
                    showWidgetContent(widgetName);
                } else {
                    setupLoadingPanel(widgetName, widgetContentColor, firstLoad);
                }
                getMenuAjaxCall();
                populateWidget();
                //   globalMapView = true;

                if (metricName != 'Map' && nodeId != null) {
                    map.defaultMapRef.on('click', function(e) {
                        //    alert('Map Clicked!');
                        let eventJson = new Object();
                        eventJson.latitude = e.latlng.lat;
                        eventJson.longitude = e.latlng.lng;
                        currentValue = JSON.stringify(eventJson);
                        triggerEventOnIotApp(map.defaultMapRef, currentValue);
                    })
                }
                // getMenuAjaxCall();
                $('#<?= $_REQUEST['name_w'] ?>_buttonsDiv').addClass('hidden');
            },
            error: function(errorData) {
                console.error('Errore durante il ricevimento dei parametri widgets');
            }
        });

        //Risponditore ad evento resize
        $("#<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>").on('customResizeEvent',
            function(event) {
                resizeWidget();
            });

        createFullscreenModal();

        $('#<?= $_REQUEST['name_w'] ?>_buttonsDiv a.iconFullscreenModal').click(function() {

            $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen h4.modal-title").html($(
                "#<?= $_REQUEST['name_w'] ?>_titleDiv").html());
            $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen iframe").hide();

            $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen div.modalLinkOpenBodyMap").hide();
            $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen div.modalLinkOpenGisMap").hide();
            $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen div.modalLinkOpenBodyDefaultMap").show();


            //Creazione mappa
            setTimeout(function() {
                    var mapdiv = "<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap";
                    var latInit = 43.769789;
                    var lngInit = 11.255694;
                    //    fullscreendefaultMapRef = L.map(mapdiv).setView([43.769789, 11.255694], 11);
                    //    fullscreendefaultMapRef = L.map(mapdiv).setView([43.769789, 11.255694], widgetParameters.zoom);
                    if (widgetParameters.latLng[0] != null && widgetParameters.latLng[0] != '') {
                        latInit = widgetParameters.latLng[0];
                    }
                    if (widgetParameters.latLng[1] != null && widgetParameters.latLng[1] != '') {
                        lngInit = widgetParameters.latLng[1];
                    }
                    if (fullscreenHeatmapFirstInstantiation === false) {
                        fullscreendefaultMapRef = L.map(mapdiv).setView([latInit, lngInit],
                            widgetParameters.zoom);

                        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                            attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                            maxZoom: 18
                        }).addTo(fullscreendefaultMapRef);
                        fullscreendefaultMapRef.attributionControl.setPrefix('');
                        fullscreenHeatmapFirstInstantiation = true;
                    }

                    //Popolamento mappa (se ci sono eventi su mappa originaria)
                    //if ($('#<?= $_REQUEST['name_w'] ?>_modalLinkOpen input.fullscreenEventPoint').length > 0) {}
                    if (map.eventsOnMap.length > 0) {

                        for (let i = 0; i < map.eventsOnMap.length; i++) {

                            if (map.eventsOnMap[i].type === 'alarmEvent') {
                                let lat = map.eventsOnMap[i].lat;
                                let lng = map.eventsOnMap[i].lng;
                                let eventType = map.eventsOnMap[i].eventType;
                                let eventName = map.eventsOnMap[i].eventName;
                                let eventStartDate = map.eventsOnMap[i].eventStartDate;
                                let eventStartTime = map.eventsOnMap[i].eventStartTime;
                                let eventSeverity = map.eventsOnMap[i].eventSeverity;

                                //Creazione dell'icona custom per il pin
                                switch (eventSeverity) {
                                    case "MINOR":
                                        mapPinImg = '../img/alarmIcons/' + alarmTypes[eventType]
                                            .mapIconLow;
                                        severityColor = "#ffcc00";
                                        break;

                                    case "MAJOR":
                                        mapPinImg = '../img/alarmIcons/' + alarmTypes[eventType]
                                            .mapIconMed;
                                        severityColor = "#ff9900";
                                        break;

                                    case "CRITICAL":
                                        mapPinImg = '../img/alarmIcons/' + alarmTypes[eventType]
                                            .mapIconHigh;
                                        severityColor = "#ff6666";
                                        break;
                                }

                                let pinIcon = new L.DivIcon({
                                    className: null,
                                    html: '<img src="' + mapPinImg + '" class="leafletPin" />',
                                    iconAnchor: [18, 36]
                                });

                                let markerLocation = new L.LatLng(lat, lng);
                                let marker = new L.Marker(markerLocation, {
                                    icon: pinIcon
                                });

                                //Creazione del popup per il pin appena creato
                                let popupText = "<span class='mapPopupTitle'>" + eventName + "</span>" +
                                    "<span class='mapPopupLine'><i>Start date: </i>" + eventStartDate +
                                    " - " + eventStartTime + "</span>" +
                                    "<span class='mapPopupLine'><i>Event type: </i>" + alarmTypes[
                                        eventType].desc.toUpperCase() + "</span>" +
                                    "<span class='mapPopupLine'><i>Event severity: </i><span style='background-color: " +
                                    severityColor + "'>" + eventSeverity.toUpperCase() +
                                    "</span></span>";

                                fullscreendefaultMapRef.addLayer(marker);
                                lastPopup = marker.bindPopup(popupText, {
                                    offset: [-5, -40],
                                    maxWidth: 600
                                }).openPopup();
                            }
                            if (map.eventsOnMap[i].eventType === 'evacuationPlan') {
                                let plansObj = map.eventsOnMap[i].plansObj;
                                let planId = map.eventsOnMap[i].planId;
                                let evacuationColors = map.eventsOnMap[i].colors;

                                shownPolyGroup = L.featureGroup();


                                for (let j = 0; j < plansObj[planId].payload.evacuation_paths
                                    .length; j++) {
                                    path = [];

                                    for (let i = 0; i < plansObj[planId].payload.evacuation_paths[j]
                                        .coords.length; i++) {
                                        let point = [];
                                        point[0] = plansObj[planId].payload.evacuation_paths[j].coords[
                                            i].latitude;
                                        point[1] = plansObj[planId].payload.evacuation_paths[j].coords[
                                            i].longitude;
                                        path.push(point);
                                    }

                                    let polyline = L.polyline(path, {
                                        color: evacuationColors[j % 6]
                                    });
                                    shownPolyGroup.addLayer(polyline);
                                }

                                fullscreendefaultMapRef.addLayer(shownPolyGroup);
                            }
                            if (map.eventsOnMap[i].eventType === 'selectorEvent') {

                                var mapBounds = fullscreendefaultMapRef.getBounds();
                                var query = map.eventsOnMap[i].query;
                                var targets = map.eventsOnMap[i].targets;
                                var eventGenerator = map.eventsOnMap[i].eventGenerator;
                                var color1 = map.eventsOnMap[i].color1;
                                var color2 = map.eventsOnMap[i].color2;
                                var queryType = map.eventsOnMap[i].queryType;
                                var desc = map.eventsOnMap[i].desc;
                                var display = map.eventsOnMap[i].display;

                                var re1 = '(selection)'; // Word 1
                                var re2 = '(=)'; // Any Single Character 1
                                var re3 = '([+-]?\\d*\\.\\d+)(?![-+0-9\\.])'; // Float 1
                                var re4 = '(;|%3B)'; // Any Single Character 2
                                var re5 = '([+-]?\\d*\\.\\d+)(?![-+0-9\\.])'; // Float 2
                                var re6 = '(;|%3B)?'; // Any Single Character 3
                                var re7 = '([+-]?\\d*\\.\\d+)?(?![-+0-9\\.])?'; // Float 3
                                var re8 = '(;|%3B)?'; // Any Single Character 4
                                var re9 = '([+-]?\\d*\\.\\d+)?(?![-+0-9\\.])?'; // Float 4

                                var pattern = new RegExp(re1 + re2 + re3 + re4 + re5 + re6 + re7 + re8 +
                                    re9, ["i"]);

                                if (queryType === "Default") {
                                    if (map.eventsOnMap[i].query.includes(
                                            "datamanager/api/v1/poidata/")) {
                                        if (map.eventsOnMap[i].desc != "My POI") {
                                            myPOIId = map.eventsOnMap[i].query.split(
                                                "datamanager/api/v1/poidata/")[1];
                                            apiUrl = "../controllers/myPOIProxy.php";
                                            dataForApi = myPOIId;
                                            query = map.eventsOnMap[i].query;
                                        } else {
                                            apiUrl = "../controllers/myPOIProxy.php";
                                            dataForApi = "All";
                                            query = map.eventsOnMap[i].query;
                                        }
                                    } else if (map.eventsOnMap[i].query.includes("/iot/") && !passedData
                                        .query.includes("/api/v1/")) {
                                        query = "<?= $superServiceMapProxy ?>api/v1/?serviceUri=" + map
                                            .eventsOnMap[i].query + "&format=json";
                                    } else {
                                        if (pattern.test(query)) {
                                            query = query.replace(pattern, "selection=" + mapBounds[
                                                "_southWest"].lat + ";" + mapBounds[
                                                "_southWest"].lng + ";" + mapBounds[
                                                "_northEast"].lat + ";" + mapBounds[
                                                "_northEast"].lng);
                                        } else {
                                            query = query + "&selection=" + mapBounds["_southWest"]
                                                .lat + ";" + mapBounds["_southWest"].lng + ";" +
                                                mapBounds["_northEast"].lat + ";" + mapBounds[
                                                    "_northEast"].lng;
                                        }
                                        query = "<?= $superServiceMapProxy ?>" + query;
                                    }
                                } else if (queryType === "MyPOI") {
                                    if (map.eventsOnMap[i].desc != "My POI") {
                                        myPOIId = map.eventsOnMap[i].query.split(
                                            "datamanager/api/v1/poidata/")[1];
                                        apiUrl = "../controllers/myPOIProxy.php";
                                        dataForApi = myPOIId;
                                        query = map.eventsOnMap[i].query;
                                    } else {
                                        apiUrl = "../controllers/myPOIProxy.php";
                                        dataForApi = "All";
                                        query = map.eventsOnMap[i].query;
                                    }

                                } else {
                                    query = map.eventsOnMap[i].query;
                                }

                                if (targets !== "") {
                                    targets = targets.split(",");
                                } else {
                                    targets = [];
                                }

                                if (queryType != "MyPOI" && !map.eventsOnMap[i].query.includes(
                                        "datamanager/api/v1/poidata/")) {
                                    apiUrl = query + "&geometry=true&fullCount=false";
                                }

                                //    if (queryType === "Sensor" && query.includes("%2525")) {
                                if (query.includes("%2525") && !query.includes("%252525")) {
                                    let queryPart1 = query.split("/resource/")[0];
                                    let queryPart2 = (query.split("/resource/")[1]).split("&format=")[
                                        0];
                                    let queryPart3 = query.split("&format=")[1];
                                    if (queryPart3 != undefined) {
                                        apiUrl = queryPart1 + "/resource/" + encodeURI(queryPart2) +
                                            "&format=" + queryPart3;
                                    } else {
                                        apiUrl = queryPart1 + "/resource/" + encodeURI(queryPart2);
                                    }
                                }

                                $.ajax({
                                    //    url: query + "&geometry=true&fullCount=false",
                                    url: apiUrl,
                                    type: "GET",
                                    data: {},
                                    async: true,
                                    timeout: 0,
                                    dataType: 'json',
                                    success: function(geoJsonData) {
                                        var fatherGeoJsonNode = null;

                                        if (queryType === "Default") {
                                            var countObjKeys = 0;
                                            var objContainer = {};
                                            Object.keys(geoJsonData).forEach(function(key) {
                                                if (countObjKeys == 0) {
                                                    if (geoJsonData.hasOwnProperty(
                                                            key)) {
                                                        fatherGeoJsonNode =
                                                            geoJsonData[key];
                                                    }
                                                } else {
                                                    if (geoJsonData.hasOwnProperty(
                                                            key)) {
                                                        if (geoJsonData[key]
                                                            .features) {
                                                            fatherGeoJsonNode
                                                                .features =
                                                                fatherGeoJsonNode
                                                                .features.concat(
                                                                    geoJsonData[key]
                                                                    .features);
                                                        }
                                                    }
                                                }
                                                countObjKeys++;
                                            });
                                            /*    if (geoJsonData.hasOwnProperty("BusStops")) {
                                                    fatherGeoJsonNode = geoJsonData.BusStops;
                                                }
                                                else {
                                                    if (geoJsonData.hasOwnProperty("SensorSites")) {
                                                        fatherGeoJsonNode = geoJsonData.SensorSites;
                                                    }
                                                    else {
                                                        fatherGeoJsonNode = geoJsonData.Services;
                                                    }
                                                }*/
                                        } else if (queryType === "MyPOI") {
                                            fatherGeoJsonNode.features = [];
                                            if (map.eventsOnMap[i].desc != "My POI") {
                                                fatherGeoJsonNode.features[0] = geoJsonData;
                                            } else {
                                                fatherGeoJsonNode.features = geoJsonData;
                                            }
                                            fatherGeoJsonNode.type = "FeatureCollection";
                                        } else {
                                            var countObjKeys = 0;
                                            var objContainer = {};
                                            Object.keys(geoJsonData).forEach(function(key) {
                                                if (countObjKeys == 0) {
                                                    if (geoJsonData.hasOwnProperty(
                                                            key)) {
                                                        fatherGeoJsonNode =
                                                            geoJsonData[key];
                                                    }
                                                } else {
                                                    if (geoJsonData.hasOwnProperty(
                                                            key)) {
                                                        if (geoJsonData[key]
                                                            .features) {
                                                            fatherGeoJsonNode
                                                                .features =
                                                                fatherGeoJsonNode
                                                                .features.concat(
                                                                    geoJsonData[key]
                                                                    .features);
                                                        }
                                                    }
                                                }
                                                countObjKeys++;
                                            });
                                            /*    if (geoJsonData.hasOwnProperty("BusStop")) {
                                                    fatherGeoJsonNode = geoJsonData.BusStop;
                                                }
                                                else {
                                                    if (geoJsonData.hasOwnProperty("Sensor")) {
                                                        fatherGeoJsonNode = geoJsonData.Sensor;
                                                    }
                                                    else {
                                                        if (geoJsonData.hasOwnProperty("Service")) {
                                                            fatherGeoJsonNode = geoJsonData.Service;
                                                        }
                                                        else {
                                                            fatherGeoJsonNode = geoJsonData.Services;
                                                        }
                                                    }
                                                }*/
                                        }

                                        for (var i = 0; i < fatherGeoJsonNode.features
                                            .length; i++) {

                                            fatherGeoJsonNode.features[i].properties
                                                .targetWidgets = targets;
                                            fatherGeoJsonNode.features[i].properties
                                                .color1 = color1;
                                            fatherGeoJsonNode.features[i].properties
                                                .color2 = color2;
                                        }

                                        if (gisLayersOnMap.hasOwnProperty(desc) && (
                                                display !== 'geometries')) {
                                            gisLayersOnMap[desc] = L.geoJSON(
                                                fatherGeoJsonNode, {
                                                    pointToLayer: gisPrepareCustomMarkerFullScreen,
                                                    onEachFeature: onEachFeature
                                                }).addTo(fullscreendefaultMapRef);
                                        }

                                        //eventGenerator.parents("div.gisMapPtrContainer").find("i.gisLoadingIcon").hide();
                                        eventGenerator.parents('div.gisMapPtrContainer')
                                            .siblings('div.gisQueryDescContainer').find(
                                                'p.gisQueryDescPar').css("font-weight",
                                                "bold");
                                        eventGenerator.parents('div.gisMapPtrContainer')
                                            .siblings('div.gisQueryDescContainer').find(
                                                'p.gisQueryDescPar').css("color",
                                                eventGenerator.attr("data-activeFontColor")
                                            );
                                        if (eventGenerator.parents("div.gisMapPtrContainer")
                                            .find('a.gisPinLink').attr(
                                                "data-symbolMode") === 'auto') {
                                            eventGenerator.parents("div.gisMapPtrContainer")
                                                .find("i.gisPinIcon").html("near_me");
                                            eventGenerator.parents("div.gisMapPtrContainer")
                                                .find("i.gisPinIcon").css("color", "white");
                                            eventGenerator.parents("div.gisMapPtrContainer")
                                                .find("i.gisPinIcon").css("text-shadow",
                                                    "2px 2px 4px black");
                                        } else {
                                            //Evidenziazione che gli eventi di questa query sono su mappa in caso di icona custom
                                            eventGenerator.parents("div.gisMapPtrContainer")
                                                .find("div.gisPinCustomIconUp").show();
                                            eventGenerator.parents("div.gisMapPtrContainer")
                                                .find("div.gisPinCustomIconUp").css(
                                                    "height", "100%");
                                        }

                                        eventGenerator.show();

                                        var wkt = null;

                                        if (display !== 'pins') {
                                            stopGeometryAjax[desc] = false;
                                            gisGeometryTankForFullscreen[desc] = {
                                                capacity: fatherGeoJsonNode.features
                                                    .length,
                                                shown: false,
                                                tank: [],
                                                lastConsumedIndex: 0
                                            };

                                            for (var i = 0; i < fatherGeoJsonNode.features
                                                .length; i++) {
                                                if (fatherGeoJsonNode.features[i].properties
                                                    .hasOwnProperty('hasGeometry') &&
                                                    fatherGeoJsonNode.features[i].properties
                                                    .hasOwnProperty('serviceUri')) {
                                                    if (fatherGeoJsonNode.features[i]
                                                        .properties.hasGeometry === true) {
                                                        //gisGeometryServiceUriToShowFullscreen[event.desc].push(fatherGeoJsonNode.features[i].properties.serviceUri);

                                                        $.ajax({
                                                            url: "<?= $superServiceMapProxy; ?>api/v1/?serviceUri=" +
                                                                fatherGeoJsonNode
                                                                .features[i]
                                                                .properties
                                                                .serviceUri,
                                                            type: "GET",
                                                            data: {},
                                                            async: true,
                                                            timeout: 0,
                                                            dataType: 'json',
                                                            success: function(
                                                                geometryGeoJson
                                                            ) {
                                                                if (!
                                                                    stopGeometryAjax[
                                                                        desc]) {
                                                                    // Creazione nuova istanza del parser Wkt
                                                                    wkt =
                                                                        new Wkt
                                                                        .Wkt();

                                                                    // Lettura del WKT dalla risposta
                                                                    wkt.read(
                                                                        geometryGeoJson
                                                                        .Service
                                                                        .features[
                                                                            0
                                                                        ]
                                                                        .properties
                                                                        .wktGeometry
                                                                    );

                                                                    var ciclePathFeature = [{
                                                                        type: "Feature",
                                                                        properties: geometryGeoJson
                                                                            .Service
                                                                            .features[
                                                                                0
                                                                            ]
                                                                            .properties,
                                                                        geometry: wkt
                                                                            .toJson()
                                                                    }];

                                                                    if (!
                                                                        gisGeometryLayersOnMap
                                                                        .hasOwnProperty(
                                                                            desc
                                                                        )) {
                                                                        gisGeometryLayersOnMap
                                                                            [
                                                                                desc
                                                                            ] = [];
                                                                    }

                                                                    gisGeometryLayersOnMap
                                                                        [desc]
                                                                        .push(L
                                                                            .geoJSON(
                                                                                ciclePathFeature, {}
                                                                            )
                                                                            .addTo(
                                                                                fullscreendefaultMapRef
                                                                            )
                                                                        );
                                                                    gisGeometryTankForFullscreen
                                                                        [desc]
                                                                        .tank
                                                                        .push(
                                                                            ciclePathFeature
                                                                        );
                                                                }
                                                            },
                                                            error: function(
                                                                geometryErrorData
                                                            ) {
                                                                console.log(
                                                                    "Ko");
                                                                console.log(JSON
                                                                    .stringify(
                                                                        geometryErrorData
                                                                    ));
                                                            }
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    },
                                });
                            }
                            if (map.eventsOnMap[i].eventType === 'eventFI') {
                                let lat = map.eventsOnMap[i].lat;
                                let lng = map.eventsOnMap[i].lng;
                                let categoryIT = map.eventsOnMap[i].categoryIT;

                                let name = map.eventsOnMap[i].name;
                                if (name.includes('?')) {
                                    name = name.replace(/\?/g, "'");
                                }

                                let place = map.eventsOnMap[i].place;
                                if (place.includes('?')) {
                                    place = place.replace(/\?/g, "'");
                                }

                                let startDate = map.eventsOnMap[i].startDate;
                                let endDate = map.eventsOnMap[i].endDate;
                                let startTime = map.eventsOnMap[i].startTime;
                                let freeEvent = map.eventsOnMap[i].freeEvent;
                                let address = map.eventsOnMap[i].address;
                                if (address.includes('?')) {
                                    address = address.replace(/\?/g, "'");
                                }

                                let civic = map.eventsOnMap[i].civic;
                                let price = map.eventsOnMap[i].price;
                                let phone = map.eventsOnMap[i].phone;
                                let descriptionIT = map.eventsOnMap[i].descriptionIT;
                                if (descriptionIT.includes('?')) {
                                    descriptionIT = descriptionIT.replace(/\?/g, "'");
                                }

                                let website = map.eventsOnMap[i].website;
                                let colorClass = map.eventsOnMap[i].colorClass;
                                let mapIconName = map.eventsOnMap[i].mapIconName;

                                let mapPinImg = '../img/eventsIcons/' + mapIconName + '.png';

                                let pinIcon = new L.DivIcon({
                                    className: null,
                                    html: '<img src="' + mapPinImg + '" class="leafletPin" />',
                                    iconAnchor: [18, 36]
                                });

                                let markerLocation = new L.LatLng(lat, lng);
                                let marker = new L.Marker(markerLocation, {
                                    icon: pinIcon
                                });

                                //Creazione del popup per il pin appena creato
                                let popupText = '<h3 class="' + colorClass +
                                    ' recreativeEventMapTitle">' + name + '</h3>';
                                popupText +=
                                    '<div class="recreativeEventMapBtnContainer"><button class="recreativeEventMapDetailsBtn recreativeEventMapBtn ' +
                                    colorClass +
                                    ' recreativeEventMapBtnActive" type="button">Details</button><button class="recreativeEventMapDescriptionBtn recreativeEventMapBtn ' +
                                    colorClass +
                                    '" type="button">Description</button><button class="recreativeEventMapTimingBtn recreativeEventMapBtn ' +
                                    colorClass +
                                    '" type="button">Timing</button><button class="recreativeEventMapContactsBtn recreativeEventMapBtn ' +
                                    colorClass + '" type="button">Contacts</button></div>';

                                popupText +=
                                    '<div class="recreativeEventMapDataContainer recreativeEventMapDetailsContainer">';
                                if ((place !== 'undefined') || (address !== 'undefined')) {
                                    if (categoryIT !== 'undefined') {
                                        popupText += '<b>Category: </b>' + categoryIT;
                                    }

                                    if (place !== 'undefined') {
                                        popupText += '<br/>';
                                        popupText += '<b>Location: </b>' + place;
                                    }

                                    if (address !== 'undefined') {
                                        popupText += '<br/>';
                                        popupText += '<b>Address: </b>' + address;
                                        if (civic !== 'undefined') {
                                            popupText += ' ' + civic;
                                        }
                                    }

                                    if (freeEvent !== 'undefined') {
                                        popupText += '<br/>';
                                        if ((freeEvent !== 'yes') && (freeEvent !== 'YES') && (
                                                freeEvent !== 'Yes')) {
                                            if (price !== 'undefined') {
                                                popupText += '<b>Price (€) : </b>' + price + "<br>";
                                            } else {
                                                popupText += '<b>Price (€) : </b>N/A<br>';
                                            }
                                        } else {
                                            popupText += '<b>Free event: </b>' + freeEvent + '<br>';
                                        }
                                    }
                                } else {
                                    popupText += 'No further details available';
                                }
                                popupText += '</div>';

                                popupText +=
                                    '<div class="recreativeEventMapDataContainer recreativeEventMapDescContainer">';
                                if (descriptionIT !== 'undefined') {
                                    popupText += descriptionIT;
                                } else {
                                    popupText += 'No description available';
                                }
                                popupText += '</div>';

                                popupText +=
                                    '<div class="recreativeEventMapDataContainer recreativeEventMapTimingContainer">';
                                if ((startDate !== 'undefined') || (endDate !== 'undefined') || (
                                        startTime !== 'undefined')) {
                                    popupText += '<b>From: </b>';
                                    if (startDate !== 'undefined') {
                                        popupText += startDate;
                                    } else {
                                        popupText += 'N/A';
                                    }
                                    popupText += '<br/>';

                                    popupText += '<b>To: </b>';
                                    if (endDate !== 'undefined') {
                                        popupText += endDate;
                                    } else {
                                        popupText += 'N/A';
                                    }
                                    popupText += '<br/>';

                                    if (startTime !== 'undefined') {
                                        popupText += '<b>Times: </b>' + startTime + '<br/>';
                                    } else {
                                        popupText += '<b>Times: </b>N/A<br/>';
                                    }

                                } else {
                                    popupText += 'No timings info available';
                                }
                                popupText += '</div>';

                                popupText +=
                                    '<div class="recreativeEventMapDataContainer recreativeEventMapContactsContainer">';
                                if ((phone !== 'undefined') || (website !== 'undefined')) {
                                    if (phone !== 'undefined') {
                                        popupText += '<b>Phone: </b>' + phone + '<br/>';
                                    } else {
                                        popupText += '<b>Phone: </b>N/A<br/>';
                                    }

                                    if (website !== 'undefined') {
                                        if (website.includes('http') || website.includes('https')) {
                                            popupText += '<b><a href="' + website +
                                                '" target="_blank">Website</a></b><br>';
                                        } else {
                                            popupText += '<b><a href="' + website +
                                                '" target="_blank">Website</a></b><br>';
                                        }
                                    } else {
                                        popupText += '<b>Website: </b>N/A';
                                    }
                                } else {
                                    popupText += 'No contacts info available';
                                }
                                popupText += '</div>';

                                fullscreendefaultMapRef.addLayer(marker);
                                lastPopup = marker.bindPopup(popupText, {
                                    offset: [-5, -40],
                                    maxWidth: 300
                                });

                                lastPopup.on('popupopen', function() {
                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.recreativeEventMapDetailsBtn')
                                        .off('click');
                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.recreativeEventMapDetailsBtn')
                                        .click(function() {
                                            $('#' + widgetName +
                                                '_modalLinkOpenBodyDefaultMap div.recreativeEventMapDataContainer'
                                            ).hide();
                                            $('#' + widgetName +
                                                '_modalLinkOpenBodyDefaultMap div.recreativeEventMapDetailsContainer'
                                            ).show();
                                            $('#' + widgetName +
                                                '_modalLinkOpenBodyDefaultMap button.recreativeEventMapBtn'
                                            ).removeClass(
                                                'recreativeEventMapBtnActive');
                                            $(this).addClass('recreativeEventMapBtnActive');
                                        });

                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.recreativeEventMapDescriptionBtn')
                                        .off('click');
                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.recreativeEventMapDescriptionBtn')
                                        .click(function() {
                                            $('#' + widgetName +
                                                '_modalLinkOpenBodyDefaultMap div.recreativeEventMapDataContainer'
                                            ).hide();
                                            $('#' + widgetName +
                                                '_modalLinkOpenBodyDefaultMap div.recreativeEventMapDescContainer'
                                            ).show();
                                            $('#' + widgetName +
                                                '_modalLinkOpenBodyDefaultMap button.recreativeEventMapBtn'
                                            ).removeClass(
                                                'recreativeEventMapBtnActive');
                                            $(this).addClass('recreativeEventMapBtnActive');
                                        });

                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.recreativeEventMapTimingBtn')
                                        .off('click');
                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.recreativeEventMapTimingBtn')
                                        .click(function() {
                                            $('#' + widgetName +
                                                '_modalLinkOpenBodyDefaultMap div.recreativeEventMapDataContainer'
                                            ).hide();
                                            $('#' + widgetName +
                                                '_modalLinkOpenBodyDefaultMap div.recreativeEventMapTimingContainer'
                                            ).show();
                                            $('#' + widgetName +
                                                '_modalLinkOpenBodyDefaultMap button.recreativeEventMapBtn'
                                            ).removeClass(
                                                'recreativeEventMapBtnActive');
                                            $(this).addClass('recreativeEventMapBtnActive');
                                        });

                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.recreativeEventMapContactsBtn')
                                        .off('click');
                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpenBodyDefaultMap button.recreativeEventMapContactsBtn')
                                        .click(function() {
                                            $('#' + widgetName +
                                                '_modalLinkOpenBodyDefaultMap div.recreativeEventMapDataContainer'
                                            ).hide();
                                            $('#' + widgetName +
                                                '_modalLinkOpenBodyDefaultMap div.recreativeEventMapContactsContainer'
                                            ).show();
                                            $('#' + widgetName +
                                                '_modalLinkOpenBodyDefaultMap button.recreativeEventMapBtn'
                                            ).removeClass(
                                                'recreativeEventMapBtnActive');
                                            $(this).addClass('recreativeEventMapBtnActive');
                                        });
                                });

                                lastPopup.openPopup();
                            }
                            if (map.eventsOnMap[i].eventType === 'resource') {
                                let lat = map.eventsOnMap[i].lat;
                                let lng = map.eventsOnMap[i].lng;
                                let eventName = map.eventsOnMap[i].eventName;
                                let eventStartDate = map.eventsOnMap[i].eventStartDate;
                                let eventStartTime = map.eventsOnMap[i].eventStartTime;

                                mapPinImg = '../img/resourceIcons/metroMap.png';

                                pinIcon = new L.DivIcon({
                                    className: null,
                                    html: '<img src="' + mapPinImg + '" class="leafletPin" />',
                                    iconAnchor: [18, 36]
                                });

                                var markerLocation = new L.LatLng(lat, lng);
                                var marker = new L.Marker(markerLocation, {
                                    icon: pinIcon
                                });

                                //Creazione del popup per il pin appena creato
                                var popupText = "<span class='mapPopupTitle'>" + eventName
                                    .toUpperCase() + "</span>" +
                                    "<span class='mapPopupLine'>" + eventStartDate + " - " +
                                    eventStartTime + "</span>";

                                fullscreendefaultMapRef.addLayer(marker);
                                lastPopup = marker.bindPopup(popupText, {
                                    offset: [-5, -40]
                                }).openPopup();
                            }
                            if (map.eventsOnMap[i].eventType === 'OperatorEvent') {
                                let lat = map.eventsOnMap[i].lat;
                                let lng = map.eventsOnMap[i].lng;
                                let eventStartDate = map.eventsOnMap[i].eventStartDate;
                                let eventStartTime = map.eventsOnMap[i].eventStartTime;
                                let eventPeopleNumber = parseInt(map.eventsOnMap[i].eventPeopleNumber);
                                let eventOperatorName = map.eventsOnMap[i].eventOperatorName;
                                let eventColor = map.eventsOnMap[i].eventColor;


                                let markerLocation = new L.LatLng(lat, lng);
                                let marker = new L.Marker(markerLocation);

                                //Creazione del popup per il pin appena creato
                                popupText = "<span class='mapPopupTitle'>" + eventColor.toUpperCase() +
                                    "</span>" +
                                    "<span class='mapPopupLine'>" + eventStartDate + " - " +
                                    eventStartTime + "</span>" +
                                    //  "<span class='mapPopupLine'>PEOPLE INVOLVED: " + eventPeopleNumber + "</span>" +
                                    "<span class='mapPopupLine'>TICKET NUMBER: " + eventPeopleNumber +
                                    "</span>" +
                                    "<span class='mapPopupLine'>OPERATOR: " + eventOperatorName
                                    .toUpperCase() + "</span>";

                                fullscreendefaultMapRef.addLayer(marker);
                                lastPopup = marker.bindPopup(popupText, {
                                    offset: [0, 0]
                                }).openPopup();
                            }
                            if (map.eventsOnMap[i].type === 'trafficEvent') {
                                let lat = map.eventsOnMap[i].lat;
                                let lng = map.eventsOnMap[i].lng;
                                let eventType = map.eventsOnMap[i].eventType;
                                let eventSubtype = map.eventsOnMap[i].eventSubtype;
                                let eventName = map.eventsOnMap[i].eventName;
                                let eventStartDate = map.eventsOnMap[i].eventStartDate;
                                let eventStartTime = map.eventsOnMap[i].eventStartTime;
                                let eventSeverity = map.eventsOnMap[i].eventSeverity;
                                let eventseveritynum = map.eventsOnMap[i].eventseveritynum;


                                //Creazione dell'icona custom per il pin
                                switch (eventSeverity) {
                                    case "Low":
                                        mapPinImg = '../img/trafficIcons/' + trafficEventTypes["type" +
                                            eventType].mapIconLow;
                                        severityColor = "#ffcc00";
                                        break;

                                    case "Med":
                                        mapPinImg = '../img/trafficIcons/' + trafficEventTypes["type" +
                                            eventType].mapIconMed;
                                        severityColor = "#ff9900";
                                        break;

                                    case "High":
                                        mapPinImg = '../img/trafficIcons/' + trafficEventTypes["type" +
                                            eventType].mapIconHigh;
                                        severityColor = "#ff6666";
                                        break;
                                }

                                let pinIcon = new L.DivIcon({
                                    className: null,
                                    html: '<img src="' + mapPinImg + '" class="leafletPin" />',
                                    iconAnchor: [18, 36]
                                });

                                let markerLocation = new L.LatLng(lat, lng);
                                let marker = new L.Marker(markerLocation, {
                                    icon: pinIcon
                                });

                                //Creazione del popup per il pin appena creato
                                popupText = "<span class='mapPopupTitle'>" + eventName + "</span>" +
                                    "<span class='mapPopupLine'><i>Start date</i>: " + eventStartDate +
                                    " - " + eventStartTime + "</span>" +
                                    "<span class='mapPopupLine'><i>Event type</i>: " +
                                    trafficEventTypes["type" + eventType].desc.toUpperCase() +
                                    "</span>" +
                                    "<span class='mapPopupLine'><i>Event subtype</i>: " +
                                    trafficEventSubTypes["subType" + eventSubtype].toUpperCase() +
                                    "</span>" +
                                    "<span class='mapPopupLine'><i>Event severity</i>: " +
                                    eventseveritynum + " - <span style='background-color: " +
                                    severityColor + "'>" + eventSeverity.toUpperCase() +
                                    "</span></span>";

                                fullscreendefaultMapRef.addLayer(marker);
                                lastPopup = marker.bindPopup(popupText, {
                                    offset: [-5, -40],
                                    maxWidth: 600
                                }).openPopup();
                            }
                            if (map.eventsOnMap[i].eventType === 'trafficRealTimeDetails') {

                                var event = map.eventsOnMap[i];

                                var myMarker = new L.LayerGroup();

                                $.ajax({
                                    //    url: "../trafficRTDetails/sensorsCoord.json",
                                    url: "https://firenzetraffic.km4city.org/trafficRTDetails/sensorsCoord.php",
                                    type: "GET",
                                    async: false,
                                    cache: false,
                                    dataType: 'json',
                                    success: function(_sensors) {
                                        sensors = JSON.parse(_sensors);
                                        for (var i = 0; i < sensors.length; i++) {
                                            if (sensors[i].sensorLat > event.minLat &&
                                                sensors[i].sensorLat < event.maxLat &&
                                                sensors[i].sensorLong > event.minLng &&
                                                sensors[i].sensorLong < event.maxLng) {
                                                var mark = L.circleMarker([sensors[i]
                                                    .sensorLat, sensors[i]
                                                    .sensorLong
                                                ]);
                                                mark.addTo(myMarker);
                                            }
                                        }
                                        myMarker.addTo(fullscreendefaultMapRef);
                                    }
                                });

                                map.defaultMapRef.on('click', function(e) {
                                    var bnds = map.defaultMapRef.getBounds()
                                    if (roads == null)
                                        loadRoads();
                                    else {}
                                });

                                var wktLayer = new L.LayerGroup();
                                var roads = null;
                                var time = 0;

                                loadRoads();

                                function loadRoads() {
                                    defaults = {
                                        icon: new L.DivIcon({
                                            className: "geo-icon"
                                        }),
                                        editable: true,
                                        color: '#AA0000',
                                        weight: 2.5,
                                        opacity: 1,
                                        fillColor: '#AA0000',
                                        fillOpacity: 1
                                    };

                                    $.ajax({
                                        //    url: "http://localhost/dashboardSmartCity/trafficRTDetails/roads/read.php" + "?sLat=" + event.minLat + "&sLong=" + event.minLng + "&eLat=" + event.maxLat + "&eLong=" + event.maxLng + "&zoom=" + event.zm,
                                        url: "https://firenzetraffic.km4city.org/trafficRTDetails/roads/read.php" +
                                            "?sLat=" + event.minLat + "&sLong=" + event.minLng +
                                            "&eLat=" + event.maxLat + "&eLong=" + event.maxLng +
                                            "&zoom=" + event.zm, // MOD GP
                                        type: "GET",
                                        async: true,
                                        dataType: 'json',
                                        success: function(_roads) {
                                            roads = JSON.parse(JSON.stringify(_roads));

                                            loadDensity();
                                        },
                                        error: function(err) {
                                            console.log(err);
                                            alert("error see log json");
                                        }
                                    });
                                }

                                function loadDensity() {
                                    $.ajax({
                                        //    url: "http://localhost/dashboardSmartCity/trafficRTDetails/density/read.php" + "?sLat=" + event.minLat + "&sLong=" + event.minLng + "&eLat=" + event.maxLat + "&eLong=" + event.maxLng + "&zoom=" + event.zm,
                                        url: "https://firenzetraffic.km4city.org/trafficRTDetails/density/read.php" +
                                            "?sLat=" + event.minLat + "&sLong=" + event.minLng +
                                            "&eLat=" + event.maxLat + "&eLong=" + event.maxLng +
                                            "&zoom=" + event.zm, // MOD GP
                                        type: "GET",
                                        async: false,
                                        cache: false,
                                        dataType: 'json',
                                        success: function(_density) {
                                            density = JSON.parse(JSON.stringify(_density));

                                            for (var i = 0; i < roads.length; i++) {
                                                if (density.hasOwnProperty((roads[i]
                                                        .road))) {
                                                    roads[i].data = density[roads[i].road]
                                                        .data;
                                                }
                                            }

                                            time = 0;
                                            draw(time);
                                            console.log("@time " + time);
                                        },
                                        error: function(err) {
                                            console.log(err);
                                            alert("error see log json");
                                        }
                                    });
                                }

                                function draw(t) {
                                    if (roads == null)
                                        return;
                                    //wktLayer.clearLayers();
                                    for (var i = 0; i < roads.length; i++) {
                                        var segs = roads[i].segments;
                                        for (var j = 0; j < segs.length; j++) {
                                            var seg = segs[j];
                                            if (typeof seg.start != "undefined") {
                                                var wktPoint = "POINT(" + seg.start.long + " " + seg
                                                    .start.lat + ")";
                                                var wktLine = "LINESTRING(" + seg.start.long + " " + seg
                                                    .start.lat + "," + seg.end.long + " " + seg.end
                                                    .lat + ")";

                                                try {
                                                    if (!jQuery.isEmptyObject(roads[i].data[0])) {
                                                        var value = Number(roads[i].data[t][seg.id]
                                                            .replace(",", "."));
                                                        var green = 0.3;
                                                        var yellow = 0.6;
                                                        var orange = 0.9;
                                                        if (seg.Lanes == 2) {
                                                            green = 0.6;
                                                            yellow = 1.2;
                                                            orange = 1.8;
                                                        }
                                                        if (seg.FIPILI == 1) {
                                                            green = 0.25;
                                                            yellow = 0.5;
                                                            orange = 0.75;
                                                        }
                                                        if (seg.Lanes == 3) {
                                                            green = 0.9;
                                                            yellow = 1.5;
                                                            orange = 2;
                                                        }
                                                        if (seg.Lanes == 4) {
                                                            green = 1.2;
                                                            yellow = 1.6;
                                                            orange = 2;
                                                        }
                                                        if (seg.Lanes == 5) {
                                                            green = 1.6;
                                                            yellow = 2;
                                                            orange = 2.4;
                                                        }
                                                        if (seg.Lanes == 6) {
                                                            green = 2;
                                                            yellow = 2.4;
                                                            orange = 2.8;
                                                        }
                                                        if (value <= green)
                                                            defaults.color = "#00ff00";
                                                        else if (value <= yellow)
                                                            defaults.color = "#ffff00";
                                                        else if (value <= orange)
                                                            defaults.color = "#ff8c00";
                                                        else
                                                            defaults.color = "#ff0000";
                                                        defaults.fillColor = defaults.color;

                                                        if (!seg.obj) {
                                                            var wkt = new Wkt.Wkt();
                                                            wkt.read(wktLine, "newMap");
                                                            obj = wkt.toObject(defaults);
                                                            obj.options.trafficFlow = true;
                                                            obj.addTo(wktLayer);
                                                            seg.obj = obj;

                                                        } else {
                                                            seg.obj.setStyle(defaults);
                                                        }
                                                    }
                                                } catch (e) {
                                                    console.log(e);
                                                }
                                            }
                                        }
                                    }
                                    wktLayer.addTo(fullscreendefaultMapRef);
                                }

                                //Create legend
                                var legend = L.control({
                                    position: 'bottomleft'
                                });

                                legend.onAdd = function(map) {

                                    var div = L.DomUtil.create('div', 'info legend'),
                                        grades = ["Legend"],
                                        //    labels = ["http://localhost/dash/trafficRTDetails/legend.png"];
                                        labels = [
                                            "https://firenzetraffic.km4city.org/trafficRTDetails/legend.png"
                                        ]; // MOD GP

                                    // loop through our density intervals and generate a label with a colored square for each interval
                                    for (var i = 0; i < grades.length; i++) {
                                        div.innerHTML +=
                                            grades[i] + (" <img src=" + labels[i] +
                                                " height='120' width='80' background='#cccccc'>") +
                                            '<br>';
                                    }

                                    return div;
                                };

                                legend.addTo(fullscreendefaultMapRef);
                            }
                            if (map.eventsOnMap[i].eventType === 'heatmap' || map.eventsOnMap[i]
                                .eventType === undefined) {
                                /*  let cfg = {
                                      // radius should be small ONLY if scaleRadius is true (or small radius is intended)
                                      // if scaleRadius is false it will be the constant radius used in pixels
                                      "radius": 0.0008,
                                      "maxOpacity": .8,
                                      // scales the radius based on map zoom
                                      "scaleRadius": true,
                                      // if set to false the heatmap uses the global maximum for colorization
                                      // if activated: uses the data maximum within the current map boundaries
                                      //   (there will always be a red spot with useLocalExtremas true)
                                      "useLocalExtrema": false,
                                      // which field name in your data represents the latitude - default "lat"
                                      latField: 'latitude',
                                      // which field name in your data represents the longitude - default "lng"
                                      lngField: 'longitude',
                                      // which field name in your data represents the data value - default "value"
                                      valueField: 'value',
                                      gradient: {
                                          // enter n keys between 0 and 1 here
                                          // for gradient color customization
                                          '.0': 'blue',
                                          '.1': 'cyan',
                                          '.2': 'green',
                                          '.3': 'yellowgreen',
                                          '.4': 'yellow',
                                          '.5': 'gold',
                                          '.6': 'orange',
                                          '.7': 'darkorange',
                                          '.8': 'tomato',
                                          '.9': 'orangered',
                                          '1.0': 'red'
                                      }
                                  };*/

                                fullscreendefaultMapRef.off('click');

                                function prepareCustomMarkerForPointAndClickFullScreen(dataObj, color1,
                                    color2) {
                                    var latLngId = dataObj.latitude + "" + dataObj.longitude;
                                    latLngId = latLngId.replace(".", "");
                                    latLngId = latLngId.replace(".",
                                        ""
                                    ); //Incomprensibile il motivo ma con l'espressione regolare /./g non funziona

                                    var popupText =
                                        '<h3 class="recreativeEventMapTitle" style="background: ' +
                                        color1 + '; background: -webkit-linear-gradient(right, ' +
                                        color1 + ', ' + color2 +
                                        '); background: -o-linear-gradient(right, ' + color1 + ', ' +
                                        color2 + '); background: -moz-linear-gradient(right, ' +
                                        color1 + ', ' + color2 +
                                        '); background: linear-gradient(to right, ' + color1 + ', ' +
                                        color2 + '); text-transform: none;">' + dataObj.mapName +
                                        '</h3>';
                                    /*  if((serviceProperties.serviceUri !== '')&&(serviceProperties.serviceUri !== undefined)&&(serviceProperties.serviceUri !== 'undefined')&&(serviceProperties.serviceUri !== null)&&(serviceProperties.serviceUri !== 'null')) {
                                          popupText += '<div class="recreativeEventMapSubTitle" style="background: ' + color1 + '; background: -webkit-linear-gradient(right, ' + color1 + ', ' + color2 + '); background: -o-linear-gradient(right, ' + color1 + ', ' + color2 + '); background: -moz-linear-gradient(right, ' + color1 + ', ' + color2 + '); background: linear-gradient(to right, ' + color1 + ', ' + color2 + ');">' + "Value Name: " + serviceProperties.serviceUri.split("/")[serviceProperties.serviceUri.split("/").length - 1] + '</div>';
                                         // popupText += '<div class="recreativeEventMapSubTitle">' + "Value Name: " + serviceProperties.serviceUri.split("/")[serviceProperties.serviceUri.split("/").length - 1] + '</div>';
                                      }*/
                                    popupText +=
                                        '<div class="recreativeEventMapBtnContainer"><span data-id="' +
                                        latLngId +
                                        '" class="recreativeEventMapDetailsBtn recreativeEventMapBtn recreativeEventMapBtnActive" style="background: ' +
                                        color1 + '; background: -webkit-linear-gradient(right, ' +
                                        color1 + ', ' + color2 +
                                        '); background: -o-linear-gradient(right, ' + color1 + ', ' +
                                        color2 + '); background: -moz-linear-gradient(right, ' +
                                        color1 + ', ' + color2 +
                                        '); background: linear-gradient(to right, ' + color1 + ', ' +
                                        color2 + ');">Heatmap Details</span></div>';

                                    popupText +=
                                        '<div class="recreativeEventMapDataContainer recreativeEventMapDetailsContainer" style="height:100px; width:270px;">';

                                    popupText += '<table id="' + latLngId +
                                        '" class="gisPopupGeneralDataTable" style="width:90%">';
                                    //Intestazione
                                    popupText += '<thead>';
                                    popupText += '<th style="background: ' + color2 +
                                        '">Description</th>';
                                    popupText += '<th style="background: ' + color2 + '">Value</th>';
                                    popupText += '</thead>';

                                    //Corpo
                                    popupText += '<tbody>';

                                    //    var myKPIFromTimeRangeUTC = new Date(myKPIFromTimeRange).toUTCString();
                                    //    var myKPIFromTimeRangeISO = new Date(myKPIFromTimeRangeUTC).toISOString();
                                    //    var myKPIFromTimeRangeISOTrimmed = myKPIFromTimeRangeISO.substring(0, isoDate.length - 8);

                                    var dateTime = new Date(dataObj.dataTime); // Milliseconds to date
                                    dateTime = dateTime.getDate() + "\/" + parseInt(dateTime
                                            .getMonth() + 1) + "\/" + dateTime.getFullYear() + " " +
                                        dateTime.getHours() + ":" + dateTime.getMinutes() + ":" +
                                        dateTime.getSeconds();

                                    popupText +=
                                        '<tr><td style="text-align:left; font-size: 12px;">Date & Time:</td><td style="font-size: 12px;">' +
                                        dateTime + '</td></tr>';
                                    popupText +=
                                        '<tr><td style="text-align:left; font-size: 12px;">Metric Name:</td><td style="font-size: 12px;">' +
                                        dataObj.metricName + '</td></tr>';
                                    popupText +=
                                        '<tr><td style="text-align:left; font-size: 12px;">Heatmap Value:</td><td style="font-size: 12px;">' +
                                        dataObj.value + '</td></tr>';
                                    popupText +=
                                        '<tr><td style="text-align:left; font-size: 12px;">Coordinates:</td><td style="font-size: 12px;">' +
                                        dataObj.latitude + ', ' + dataObj.longitude + '</td></tr>';

                                    return popupText;
                                }

                                fullscreendefaultMapRef.on('click', function(e) {
                                    if (map.testMetadata.metadata.file != 1) {
                                        var heatmapPointAndClickData = null;
                                        //  alert("Click on Map !");
                                        var pointAndClickCoord = e.latlng;
                                        var pointAndClickLat = pointAndClickCoord.lat.toFixed(
                                            5);
                                        var pointAndClickLng = pointAndClickCoord.lng.toFixed(
                                            5);
                                        //    var pointAndClickApiUrl = "https://heatmap.snap4city.org/interp.php?latitude=" + pointAndClickLat + "&longitude=" + pointAndClickLng + "&dataset=" + map.testMetadata.metadata.mapName + "&date=" + map.testMetadata.metadata.date;
                                        var pointAndClickApiUrl = heatmapUrl +
                                            "interp.php?latitude=" + pointAndClickLat +
                                            "&longitude=" + pointAndClickLng + "&dataset=" + map
                                            .testMetadata.metadata.mapName + "&date=" + map
                                            .testMetadata.metadata.date;
                                        $.ajax({
                                            url: pointAndClickApiUrl,
                                            async: true,
                                            success: function(
                                                heatmapPointAndClickData) {
                                                var popupData = {};
                                                popupData.mapName =
                                                    heatmapPointAndClickData
                                                    .mapName;
                                                popupData.latitude =
                                                    pointAndClickLat;
                                                popupData.longitude =
                                                    pointAndClickLng;
                                                popupData.metricName =
                                                    heatmapPointAndClickData
                                                    .metricName;
                                                popupData.dataTime =
                                                    heatmapPointAndClickData.date;
                                                if (heatmapPointAndClickData
                                                    .value) {
                                                    popupData.value =
                                                        heatmapPointAndClickData
                                                        .value.toFixed(5);
                                                    var customPointAndClickContent =
                                                        prepareCustomMarkerForPointAndClickFullScreen(
                                                            popupData, "#C2D6D6",
                                                            "#D1E0E0")
                                                    //   var pointAndClickPopup = L.popup(customPointAndClickMarker).openOn(map.defaultMapRef);
                                                    var popup = L.popup()
                                                        .setLatLng(
                                                            pointAndClickCoord)
                                                        .setContent(
                                                            customPointAndClickContent
                                                        )
                                                        .openOn(
                                                            fullscreendefaultMapRef
                                                        );
                                                }
                                            },
                                            error: function(errorData) {
                                                console.log(
                                                    "Ko Point&Click Heatmap API"
                                                );
                                                console.log(JSON.stringify(
                                                    errorData));
                                            }
                                        });
                                    }
                                });

                                // CANCELLARE PRIMA IL LAYER PRCEDENTE !!!

                                if (fullscreenHeatmapFirstInst != true) {
                                    for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                                        if (map.eventsOnMap[i].eventType === 'heatmap') {
                                            removeHeatmap(false);
                                            //    removeHeatmapColorLegend(i, false);
                                            //  map.eventsOnMap.splice(i, 1);
                                        } else if (map.eventsOnMap[i].eventType === undefined) {
                                            removeHeatmap(false);
                                        }
                                    }
                                } else {
                                    fullscreenHeatmapFirstInst = false;
                                }

                                legendHeatmapFullscreen = L.control({
                                    position: 'topright'
                                });


                                window.addHeatmapFromFullscreenClient = function(animationFlag) {
                                    //  function addHeatMapFromClient() {

                                    var color1 = passedParams.color1;
                                    var color2 = passedParams.color2;
                                    var desc = passedParams.desc;

                                    var loadingDiv = $('<div class="gisMapModalLoadingDiv"></div>');

                                    if ($(
                                            '#<?= $_REQUEST['name_w'] ?>_content div.gisMapModalLoadingDiv'
                                        )
                                        .length > 0) {
                                        loadingDiv.insertAfter($(
                                            '#<?= $_REQUEST['name_w'] ?>_content div.gisMapModalLoadingDiv'
                                        ).last());
                                    } else {
                                        loadingDiv.insertAfter($(
                                            '#<?= $_REQUEST['name_w'] ?>_modalLinkOpen'));
                                    }

                                    loadingDiv.css("top", ($('#<?= $_REQUEST['name_w'] ?>_div')
                                        .height() - ($(
                                            '#<?= $_REQUEST['name_w'] ?>_content div.gisMapModalLoadingDiv'
                                        ).length * loadingDiv.height())) + "px");
                                    loadingDiv.css("left", ($('#<?= $_REQUEST['name_w'] ?>_div')
                                        .width() - loadingDiv.width()) + "px");

                                    var loadingText = $(
                                        '<p class="gisMapModalLoadingDivTextPar">adding <b>' +
                                        desc.toLowerCase() +
                                        '</b> to map<br><i class="fa fa-circle-o-notch fa-spin" style="font-size: 30px"></i></p>'
                                    );
                                    var loadOkText = $(
                                        '<p class="gisMapModalLoadingDivTextPar"><b>' + desc
                                        .toLowerCase() +
                                        '</b> added to map<br><i class="fa fa-check" style="font-size: 30px"></i></p>'
                                    );
                                    var loadKoText = $(
                                        '<p class="gisMapModalLoadingDivTextPar">error adding <b>' +
                                        desc.toLowerCase() +
                                        '</b> to map<br><i class="fa fa-close" style="font-size: 30px"></i></p>'
                                    );

                                    loadingDiv.css("background", color1);
                                    loadingDiv.css("background",
                                        "-webkit-linear-gradient(left top, " + color1 + ", " +
                                        color2 + ")");
                                    loadingDiv.css("background",
                                        "-o-linear-gradient(bottom right, " + color1 + ", " +
                                        color2 + ")");
                                    loadingDiv.css("background",
                                        "-moz-linear-gradient(bottom right, " + color1 + ", " +
                                        color2 + ")");
                                    loadingDiv.css("background",
                                        "linear-gradient(to bottom right, " + color1 + ", " +
                                        color2 + ")");

                                    loadingDiv.show();

                                    loadingDiv.append(loadingText);
                                    loadingDiv.css("opacity", 1);

                                    var parHeight = loadingText.height();
                                    var parMarginTop = Math.floor((loadingDiv.height() -
                                        parHeight) / 2);
                                    loadingText.css("margin-top", parMarginTop + "px");

                                    let heatmap = {};
                                    heatmap.eventType = "heatmap";

                                    /*   map.testData = {
                                           //   max: 8,
                                           data: heatmapData[current_page].data
                                       };  */

                                    //heatmap recommender metadata
                                    map.testMetadata = {
                                        //   max: 8,
                                        metadata: heatmapData[current_page].metadata
                                    };

                                    if (map.testMetadata.metadata.metricName !== undefined) {
                                        heatmapMetricName = map.testMetadata.metadata.metricName
                                    } else {
                                        heatmapMetricName = "airTemperature";
                                        mapName = "WMS_PROVA";
                                    }

                                    if (map.testMetadata.metadata.mapName !== undefined) {
                                        mapName = map.testMetadata.metadata.mapName;
                                    } else {
                                        mapName = "WMS_PROVA";
                                    }

                                    if (map.testMetadata.metadata.date !== undefined) {
                                        mapDate = map.testMetadata.metadata.date;
                                    } else {
                                        mapDate = "DATA";
                                    }

                                    $.ajax({
                                        url: "../controllers/getHeatmapRange.php",
                                        type: "GET",
                                        data: {
                                            metricName: heatmapMetricName
                                        },
                                        async: true,
                                        dataType: 'json',
                                        success: function(data) {
                                            try {
                                                if (data['detail'] == "Ok") {
                                                    //  if (data['heatmapRange'].length > 1) {

                                                    if (data['heatmapRange'][0]) {
                                                        heatmapRange = data[
                                                            'heatmapRange'];
                                                        initHeatmapLayer(
                                                            heatmapRange); // OLD-API
                                                        // Gestione della sincronia dei check-box del cambio raggio on zoom e computo raggio su base dati dopo aggiornamento legenda

                                                    } else {
                                                        heatmapRange = [];
                                                    }

                                                    if (baseQuery.includes(
                                                            "heatmap.php"
                                                        )) { // OLD HEATMAP


                                                        //    let dataQuery = "https://heatmap.snap4city.org/data/" + mapName + "/" + heatmapMetricName + "/" + mapDate.replace(" ", "T") + "Z/0";
                                                        let dataQuery = heatmapUrl +
                                                            "data/" + mapName + "/" +
                                                            heatmapMetricName + "/" +
                                                            mapDate.replace(" ", "T") +
                                                            "Z/0";

                                                        $.ajax({
                                                            url: dataQuery,
                                                            type: "GET",
                                                            data: {},
                                                            async: true,
                                                            cache: false,
                                                            dataType: 'json',
                                                            success: function(
                                                                heatmapResData
                                                            ) {
                                                                if (heatmapResData[
                                                                        'data'
                                                                    ]) {
                                                                    //    heatmapRange = heatmapData['heatmapRange'];
                                                                    initHeatmapLayer
                                                                        (
                                                                            heatmapRange
                                                                        ); // OLD-API
                                                                    // Set current_radius come variabile globale per essere sincronizzata attraverso le varie azioni (zoom ecc...)
                                                                    if (current_radius ==
                                                                        null
                                                                    ) {
                                                                        current_radius
                                                                            =
                                                                            map
                                                                            .cfg
                                                                            .radius;
                                                                    }
                                                                    if (current_opacity ==
                                                                        null
                                                                    ) {
                                                                        current_opacity
                                                                            =
                                                                            map
                                                                            .cfg
                                                                            .maxOpacity;
                                                                    }

                                                                } else {
                                                                    heatmapRange
                                                                        = [];
                                                                }

                                                                if (baseQuery
                                                                    .includes(
                                                                        "heatmap.php"
                                                                    )
                                                                ) { // OLD HEATMAP
                                                                    map.testData = {
                                                                        //   max: 8,
                                                                        data: heatmapResData
                                                                            .data
                                                                    };

                                                                    //heatmap recommender metadata
                                                                    map.testMetadata = {
                                                                        //   max: 8,
                                                                        metadata: heatmapResData
                                                                            .metadata
                                                                    };

                                                                    if (heatmapRange[
                                                                            0
                                                                        ]
                                                                        .range1Inf ==
                                                                        null
                                                                    ) {
                                                                        if (heatmapMetricName ==
                                                                            "EAQI" ||
                                                                            heatmapMetricName ==
                                                                            "CAQI"
                                                                        ) {
                                                                            heatmapRange
                                                                                [
                                                                                    0
                                                                                ]
                                                                                .range1Inf =
                                                                                heatmapRange[
                                                                                    0
                                                                                ]
                                                                                .range4Inf;
                                                                        } else if (
                                                                            heatmapMetricName ==
                                                                            "CO" ||
                                                                            heatmapMetricName ==
                                                                            "Benzene"
                                                                        ) {
                                                                            heatmapRange
                                                                                [
                                                                                    0
                                                                                ]
                                                                                .range1Inf =
                                                                                heatmapRange[
                                                                                    0
                                                                                ]
                                                                                .range3Inf;
                                                                            heatmapRange
                                                                                [
                                                                                    0
                                                                                ]
                                                                                .range10Inf =
                                                                                heatmapRange[
                                                                                    0
                                                                                ]
                                                                                .range8Inf;
                                                                        }
                                                                    }

                                                                    fullscreenHeatmap
                                                                        .setData({
                                                                            max: heatmapRange[
                                                                                    0
                                                                                ]
                                                                                .range10Inf,
                                                                            min: heatmapRange[
                                                                                    0
                                                                                ]
                                                                                .range1Inf,
                                                                            data: map
                                                                                .testData
                                                                                .data
                                                                        });
                                                                    fullscreendefaultMapRef
                                                                        .addLayer(
                                                                            fullscreenHeatmap
                                                                        ); // OLD HEATMAP
                                                                    //    if (estimateRadiusFlag === true) {
                                                                    var
                                                                        distArray = []; // MODALITA HEATMAP ON DATA DISTANCE
                                                                    if (heatmapResData
                                                                        .length >
                                                                        20
                                                                    ) {
                                                                        for (
                                                                            k =
                                                                            0; k <
                                                                            20; k++
                                                                        ) {
                                                                            distArray
                                                                                [
                                                                                    k
                                                                                ] =
                                                                                distance(
                                                                                    heatmapResData[
                                                                                        k
                                                                                    ]
                                                                                    .latitude,
                                                                                    heatmapResData[
                                                                                        k
                                                                                    ]
                                                                                    .latitude,
                                                                                    heatmapResData[
                                                                                        k +
                                                                                        1
                                                                                    ]
                                                                                    .latitude,
                                                                                    heatmapResData[
                                                                                        k +
                                                                                        1
                                                                                    ]
                                                                                    .latitude,
                                                                                    "K"
                                                                                );
                                                                        }

                                                                        var sum =
                                                                            0;
                                                                        for (
                                                                            var i =
                                                                                0; i <
                                                                            distArray
                                                                            .length; i++
                                                                        ) {
                                                                            sum +=
                                                                                distArray[
                                                                                    i
                                                                                ];
                                                                        }
                                                                        estimatedRadius
                                                                            =
                                                                            sum /
                                                                            distArray
                                                                            .length;
                                                                        if (estimatedRadius <=
                                                                            1
                                                                        ) {
                                                                            estimatedRadius
                                                                                =
                                                                                2;
                                                                        }
                                                                        //   if (estimateRadiusFlag === true) {
                                                                    } else {
                                                                        estimatedRadius
                                                                            =
                                                                            current_radius;
                                                                    }

                                                                    metresPerPixel
                                                                        =
                                                                        40075016.686 *
                                                                        Math
                                                                        .abs(
                                                                            Math
                                                                            .cos(
                                                                                fullscreendefaultMapRef
                                                                                .getCenter()
                                                                                .lat *
                                                                                Math
                                                                                .PI /
                                                                                180
                                                                            )
                                                                        ) /
                                                                        Math
                                                                        .pow(
                                                                            2,
                                                                            fullscreendefaultMapRef
                                                                            .getZoom() +
                                                                            8
                                                                        );
                                                                    var initRadius =
                                                                        ((estimatedRadius *
                                                                                1000
                                                                            ) /
                                                                            metresPerPixel
                                                                        ) /
                                                                        50;
                                                                    if (current_page ==
                                                                        0) {
                                                                        setOption
                                                                            ('radius',
                                                                                initRadius
                                                                                .toFixed(
                                                                                    1
                                                                                ),
                                                                                1
                                                                            );
                                                                    } else {
                                                                        setOption
                                                                            ('radius',
                                                                                current_radius
                                                                                .toFixed(
                                                                                    1
                                                                                ),
                                                                                1
                                                                            );
                                                                    }
                                                                    //   }
                                                                } else { // NEW HEATMAP

                                                                    map.defaultMapRef
                                                                        .createPane(
                                                                            'Snap4City:' +
                                                                            wmsDatasetName
                                                                        ); // CORTI
                                                                    map.defaultMapRef
                                                                        .getPane(
                                                                            'Snap4City:' +
                                                                            wmsDatasetName
                                                                        )
                                                                        .style
                                                                        .zIndex =
                                                                        420; // CORTI

                                                                    //   var timestampISO = "2019-01-23T20:20:15.000Z";
                                                                    var timestamp =
                                                                        map
                                                                        .testMetadata
                                                                        .metadata
                                                                        .date;
                                                                    var timestampISO =
                                                                        timestamp
                                                                        .replace(
                                                                            " ",
                                                                            "T"
                                                                        ) +
                                                                        ".000Z";
                                                                    //    wmsLayerFullscreen = L.tileLayer.wms("https://wmsserver.snap4city.org/geoserver/Snap4City/wms", {
                                                                    wmsLayerFullscreen
                                                                        = L
                                                                        .tileLayer
                                                                        .wms(
                                                                            geoServerUrl +
                                                                            "geoserver/Snap4City/wms", {
                                                                                layers: 'Snap4City:' +
                                                                                    wmsDatasetName,
                                                                                format: 'image/png',
                                                                                crs: L
                                                                                    .CRS
                                                                                    .EPSG4326,
                                                                                transparent: true,
                                                                                opacity: current_opacity,
                                                                                time: timestampISO,
                                                                                //  bbox: [24.7926004025304,60.1025194986424,25.1905923952885,60.2516802986263],
                                                                                tiled: true,
                                                                                //  attribution: "IGN ©"
                                                                                pane: 'Snap4City:' +
                                                                                    wmsDatasetName // CORTI
                                                                            }
                                                                        )
                                                                        .addTo(
                                                                            fullscreendefaultMapRef
                                                                        );
                                                                    //   current_opacity = 0.5;

                                                                }

                                                                // add legend to map
                                                                legendHeatmapFullscreen
                                                                    .addTo(
                                                                        fullscreendefaultMapRef
                                                                    );
                                                                map.eventsOnMap
                                                                    .push(
                                                                        heatmap
                                                                    );
                                                                var mapControlsContainer =
                                                                    document
                                                                    .getElementsByClassName(
                                                                        "leaflet-control"
                                                                    )[
                                                                        0];

                                                                //    var legendImgPath = heatmapRange[0].iconPath;
                                                                //     div.innerHTML += " <img src=" + legendImgPath + " height='100%'" + '<br>';
                                                                heatmapLegendColorsFullscreen
                                                                    = L
                                                                    .control({
                                                                        position: 'bottomleft'
                                                                    });

                                                                heatmapLegendColorsFullscreen
                                                                    .onAdd =
                                                                    function(
                                                                        map
                                                                    ) {

                                                                        var div =
                                                                            L
                                                                            .DomUtil
                                                                            .create(
                                                                                'div',
                                                                                'info legend'
                                                                            ),
                                                                            grades = [
                                                                                "Legend"
                                                                            ];
                                                                        //    labels = ["http://localhost/dashboardSmartCity/trafficRTDetails/legend.png"];
                                                                        var legendImgPath =
                                                                            heatmapRange[
                                                                                0
                                                                            ]
                                                                            .iconPath; // OLD-API
                                                                        div.innerHTML +=
                                                                            " <img src=" +
                                                                            legendImgPath +
                                                                            " height='100%'" +
                                                                            '<br>'; /// OLD-API
                                                                        return div;
                                                                    };

                                                                heatmapLegendColorsFullscreen
                                                                    .addTo(
                                                                        fullscreendefaultMapRef
                                                                    );

                                                                if (
                                                                    changeRadiusOnZoom
                                                                ) {
                                                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_changeRad')
                                                                        .prop(
                                                                            'checked',
                                                                            true
                                                                        );
                                                                    if (
                                                                        estimateRadiusFlag
                                                                    ) {
                                                                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_changeRad')
                                                                            .prop(
                                                                                'disabled',
                                                                                true
                                                                            );
                                                                    }
                                                                }

                                                                if (
                                                                    estimateRadiusFlag
                                                                ) {
                                                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_estimateRad')
                                                                        .prop(
                                                                            'checked',
                                                                            true
                                                                        );
                                                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_estimateRad')
                                                                        .prop(
                                                                            'disabled',
                                                                            false
                                                                        );
                                                                } else {
                                                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_estimateRad')
                                                                        .prop(
                                                                            'disabled',
                                                                            false
                                                                        );
                                                                }

                                                                loadingDiv
                                                                    .empty();
                                                                loadingDiv
                                                                    .append(
                                                                        loadOkText
                                                                    );

                                                                parHeight =
                                                                    loadOkText
                                                                    .height();
                                                                parMarginTop
                                                                    = Math
                                                                    .floor((loadingDiv
                                                                            .height() -
                                                                            parHeight
                                                                        ) /
                                                                        2);
                                                                loadOkText
                                                                    .css(
                                                                        "margin-top",
                                                                        parMarginTop +
                                                                        "px"
                                                                    );

                                                                setTimeout(
                                                                    function() {
                                                                        loadingDiv
                                                                            .css(
                                                                                "opacity",
                                                                                0
                                                                            );
                                                                        setTimeout
                                                                            (function() {
                                                                                    loadingDiv
                                                                                        .nextAll(
                                                                                            "#<?= $_REQUEST['name_w'] ?>_content div.gisMapModalLoadingDiv"
                                                                                        )
                                                                                        .each(
                                                                                            function(
                                                                                                i
                                                                                            ) {
                                                                                                $(this)
                                                                                                    .css(
                                                                                                        "top",
                                                                                                        ($('#<?= $_REQUEST['name_w'] ?>_div')
                                                                                                            .height() -
                                                                                                            (($('#<?= $_REQUEST['name_w'] ?>_content div.gisMapModalLoadingDiv')
                                                                                                                    .length -
                                                                                                                    1
                                                                                                                ) *
                                                                                                                loadingDiv
                                                                                                                .height()
                                                                                                            )
                                                                                                        ) +
                                                                                                        "px"
                                                                                                    );
                                                                                            }
                                                                                        );
                                                                                    loadingDiv
                                                                                        .remove();
                                                                                },
                                                                                350
                                                                            );
                                                                    },
                                                                    1000
                                                                );


                                                            },
                                                            error: function(
                                                                errorData) {
                                                                console.log(
                                                                    "Ko Heatmap"
                                                                );
                                                                console.log(
                                                                    JSON
                                                                    .stringify(
                                                                        errorData
                                                                    )
                                                                );

                                                                loadingDiv
                                                                    .empty();
                                                                loadingDiv
                                                                    .append(
                                                                        loadKoText
                                                                    );

                                                                parHeight =
                                                                    loadKoText
                                                                    .height();
                                                                parMarginTop
                                                                    = Math
                                                                    .floor((loadingDiv
                                                                            .height() -
                                                                            parHeight
                                                                        ) /
                                                                        2);
                                                                loadKoText
                                                                    .css(
                                                                        "margin-top",
                                                                        parMarginTop +
                                                                        "px"
                                                                    );

                                                                setTimeout(
                                                                    function() {
                                                                        loadingDiv
                                                                            .css(
                                                                                "opacity",
                                                                                0
                                                                            );
                                                                        setTimeout
                                                                            (function() {
                                                                                    loadingDiv
                                                                                        .nextAll(
                                                                                            "#<?= $_REQUEST['name_w'] ?>_content div.gisMapModalLoadingDiv"
                                                                                        )
                                                                                        .each(
                                                                                            function(
                                                                                                i
                                                                                            ) {
                                                                                                $(this)
                                                                                                    .css(
                                                                                                        "top",
                                                                                                        ($('#<?= $_REQUEST['name_w'] ?>_div')
                                                                                                            .height() -
                                                                                                            (($('#<?= $_REQUEST['name_w'] ?>_content div.gisMapModalLoadingDiv')
                                                                                                                    .length -
                                                                                                                    1
                                                                                                                ) *
                                                                                                                loadingDiv
                                                                                                                .height()
                                                                                                            )
                                                                                                        ) +
                                                                                                        "px"
                                                                                                    );
                                                                                            }
                                                                                        );
                                                                                    loadingDiv
                                                                                        .remove();
                                                                                },
                                                                                350
                                                                            );
                                                                    },
                                                                    1000
                                                                );

                                                            }
                                                        });


                                                    } else {
                                                        if (animationFlag === false) {
                                                            // NEW HEATMAP

                                                            map.defaultMapRef
                                                                .createPane(
                                                                    'Snap4City:' +
                                                                    wmsDatasetName
                                                                ); // CORTI
                                                            map.defaultMapRef.getPane(
                                                                    'Snap4City:' +
                                                                    wmsDatasetName)
                                                                .style.zIndex =
                                                                420; // CORTI

                                                            var timestamp = map
                                                                .testMetadata.metadata
                                                                .date;
                                                            var timestampISO = timestamp
                                                                .replace(" ", "T") +
                                                                ".000Z";
                                                            //    wmsLayerFullscreen = L.tileLayer.wms("https://wmsserver.snap4city.org/geoserver/Snap4City/wms", {
                                                            wmsLayerFullscreen = L
                                                                .tileLayer.wms(
                                                                    geoServerUrl +
                                                                    "geoserver/Snap4City/wms", {
                                                                        layers: 'Snap4City:' +
                                                                            wmsDatasetName,
                                                                        format: 'image/png',
                                                                        crs: L.CRS
                                                                            .EPSG4326,
                                                                        transparent: true,
                                                                        opacity: current_opacity,
                                                                        time: timestampISO,
                                                                        //  bbox: [24.7926004025304,60.1025194986424,25.1905923952885,60.2516802986263],
                                                                        tiled: true,
                                                                        //  attribution: "IGN ©"
                                                                        pane: 'Snap4City:' +
                                                                            wmsDatasetName // CORTI
                                                                    }).addTo(
                                                                    fullscreendefaultMapRef
                                                                );

                                                            // add legend to map
                                                            legendHeatmapFullscreen
                                                                .addTo(
                                                                    fullscreendefaultMapRef
                                                                );
                                                            heatmapLegendColorsFullscreen
                                                                = L.control({
                                                                    position: 'bottomleft'
                                                                });

                                                            heatmapLegendColorsFullscreen
                                                                .onAdd = function(map) {

                                                                    var div = L.DomUtil
                                                                        .create('div',
                                                                            'info legend'
                                                                        ),
                                                                        grades = [
                                                                            "Legend"
                                                                        ];
                                                                    //    labels = ["http://localhost/dashboardSmartCity/trafficRTDetails/legend.png"];
                                                                    var legendImgPath =
                                                                        heatmapRange[0]
                                                                        .iconPath; // OLD-API
                                                                    div.innerHTML +=
                                                                        " <img src=" +
                                                                        legendImgPath +
                                                                        " height='100%'" +
                                                                        '<br>'; // OLD-API
                                                                    return div;
                                                                };

                                                            heatmapLegendColorsFullscreen
                                                                .addTo(
                                                                    fullscreendefaultMapRef
                                                                );
                                                            map.eventsOnMap.push(
                                                                heatmap);
                                                            //    event.legendColors = heatmapLegendColorsFullscreen;

                                                            loadingDiv.empty();
                                                            loadingDiv.append(
                                                                loadOkText);

                                                            parHeight = loadOkText
                                                                .height();
                                                            parMarginTop = Math.floor((
                                                                loadingDiv
                                                                .height() -
                                                                parHeight) / 2);
                                                            loadOkText.css("margin-top",
                                                                parMarginTop + "px");

                                                            setTimeout(function() {
                                                                loadingDiv.css(
                                                                    "opacity",
                                                                    0);
                                                                setTimeout(
                                                                    function() {
                                                                        loadingDiv
                                                                            .nextAll(
                                                                                "#<?= $_REQUEST['name_w'] ?>_content div.gisMapLoadingDiv"
                                                                            )
                                                                            .each(
                                                                                function(
                                                                                    i
                                                                                ) {
                                                                                    $(this)
                                                                                        .css(
                                                                                            "top",
                                                                                            ($('#<?= $_REQUEST['name_w'] ?>_div')
                                                                                                .height() -
                                                                                                (($('#<?= $_REQUEST['name_w'] ?>_content div.gisMapLoadingDiv')
                                                                                                        .length -
                                                                                                        1
                                                                                                    ) *
                                                                                                    loadingDiv
                                                                                                    .height()
                                                                                                )
                                                                                            ) +
                                                                                            "px"
                                                                                        );
                                                                                }
                                                                            );
                                                                        loadingDiv
                                                                            .remove();
                                                                    }, 350);
                                                            }, 1000);
                                                        } else {
                                                            // ANIMATION WMS HEATMAP

                                                            map.defaultMapRef
                                                                .createPane(
                                                                    'Snap4City:' +
                                                                    wmsDatasetName
                                                                ); // CORTI
                                                            map.defaultMapRef.getPane(
                                                                    'Snap4City:' +
                                                                    wmsDatasetName)
                                                                .style.zIndex =
                                                                420; // CORTI

                                                            var
                                                                animationCurrentDayTimestamp = [];
                                                            var
                                                                animationCurrentDayFwdTimestamp = [];
                                                            var
                                                                animationCurrentDayBckwdTimestamp = [];
                                                            var animationStringTimestamp =
                                                                "";
                                                            var timestamp = map
                                                                .testMetadata.metadata
                                                                .date;
                                                            //    var timestampISO = timestamp.replace(" ", "T") + ".000Z";
                                                            var day = timestamp
                                                                .substring(0, 10);
                                                            if (current_page == 0) {
                                                                var offsetFwd =
                                                                    current_page;
                                                                while (heatmapData[
                                                                        offsetFwd]
                                                                    .metadata['date']
                                                                    .substring(0, 10) ==
                                                                    day) {
                                                                    animationCurrentDayFwdTimestamp
                                                                        .push(
                                                                            heatmapData[
                                                                                offsetFwd
                                                                            ]
                                                                            .metadata[
                                                                                'date']
                                                                            .replace(
                                                                                " ", "T"
                                                                            ) +
                                                                            ".000Z");
                                                                    offsetFwd++;
                                                                }
                                                            } else if (current_page ==
                                                                numHeatmapPages() - 1) {
                                                                var offsetBckwd =
                                                                    current_page - 1;
                                                                while (heatmapData[
                                                                        offsetBckwd]
                                                                    .metadata['date']
                                                                    .substring(0, 10) ==
                                                                    day) {
                                                                    animationCurrentDayBckwdTimestamp
                                                                        .push(
                                                                            heatmapData[
                                                                                offsetBckwd
                                                                            ]
                                                                            .metadata[
                                                                                'date']
                                                                            .replace(
                                                                                " ", "T"
                                                                            ) +
                                                                            ".000Z");
                                                                    offsetBckwd--;
                                                                    if (offsetBckwd <
                                                                        0) {
                                                                        break;
                                                                    }
                                                                }
                                                            } else {
                                                                var offsetFwd =
                                                                    current_page;
                                                                while (heatmapData[
                                                                        offsetFwd]
                                                                    .metadata['date']
                                                                    .substring(0, 10) ==
                                                                    day) {
                                                                    animationCurrentDayFwdTimestamp
                                                                        .push(
                                                                            heatmapData[
                                                                                offsetFwd
                                                                            ]
                                                                            .metadata[
                                                                                'date']
                                                                            .replace(
                                                                                " ", "T"
                                                                            ) +
                                                                            ".000Z");
                                                                    offsetFwd++;
                                                                }
                                                                var offsetBckwd =
                                                                    current_page - 1;
                                                                while (heatmapData[
                                                                        offsetBckwd]
                                                                    .metadata['date']
                                                                    .substring(0, 10) ==
                                                                    day) {
                                                                    animationCurrentDayBckwdTimestamp
                                                                        .push(
                                                                            heatmapData[
                                                                                offsetBckwd
                                                                            ]
                                                                            .metadata[
                                                                                'date']
                                                                            .replace(
                                                                                " ", "T"
                                                                            ) +
                                                                            ".000Z");
                                                                    offsetBckwd--;
                                                                    if (offsetBckwd <
                                                                        0) {
                                                                        break;
                                                                    }
                                                                }
                                                            }

                                                            animationCurrentDayTimestamp
                                                                =
                                                                animationCurrentDayFwdTimestamp
                                                                .reverse().concat(
                                                                    animationCurrentDayBckwdTimestamp
                                                                );
                                                            //    animationCurrentDayTimestamp = animationCurrentDayTimestamp.reverse();
                                                            animationStringTimestamp =
                                                                animationCurrentDayTimestamp
                                                                .join(",");

                                                            var bboxJson = {};
                                                            $.ajax({
                                                                //    url: "https://heatmap.snap4city.org/bbox.php?layer=" + map.testMetadata.metadata.mapName,
                                                                url: heatmapUrl +
                                                                    "bbox.php?layer=" +
                                                                    map
                                                                    .testMetadata
                                                                    .metadata
                                                                    .mapName,
                                                                type: "GET",
                                                                async: false,
                                                                dataType: 'json',
                                                                success: function(
                                                                    resultBbox
                                                                ) {
                                                                    bboxJson
                                                                        =
                                                                        resultBbox;
                                                                },
                                                                error: function(
                                                                    errbbox
                                                                ) {
                                                                    alert("Error in retrieving bounding box for current heatmap: " +
                                                                        mapName
                                                                    );
                                                                    console
                                                                        .log(
                                                                            errbbox
                                                                        );
                                                                }
                                                            });

                                                            var upEastLat = parseFloat(
                                                                bboxJson['maxy']);
                                                            var upEastLon = parseFloat(
                                                                bboxJson['maxx']);
                                                            var bottomWestLat =
                                                                parseFloat(bboxJson[
                                                                    'miny']);
                                                            var bottomWestLon =
                                                                parseFloat(bboxJson[
                                                                    'minx']);
                                                            //    var imageUrl = 'https://wmsserver.snap4city.org/geoserver/wms/animate?LAYERS=' + wmsDatasetName + '&aparam=time&avalues=' + animationStringTimestamp + '&format=image/gif;subtype=animated&format_options=gif_loop_continuosly:true;layout:message;gif_frames_delay:500&transparent=true';
                                                            var imageUrl =
                                                                geoServerUrl +
                                                                'geoserver/wms/animate?LAYERS=' +
                                                                wmsDatasetName +
                                                                '&aparam=time&avalues=' +
                                                                animationStringTimestamp +
                                                                '&format=image/gif;subtype=animated&format_options=gif_loop_continuosly:true;layout:message;gif_frames_delay:500&transparent=true';
                                                            var imageBounds = [
                                                                [bottomWestLat,
                                                                    bottomWestLon
                                                                ],
                                                                [upEastLat,
                                                                    upEastLon
                                                                ]
                                                            ];
                                                            var overlayOpacity =
                                                                current_opacity;

                                                            // ANIMATED GIF LAYER
                                                            var animatedLayer = L
                                                                .imageOverlay(imageUrl,
                                                                    imageBounds, {
                                                                        opacity: overlayOpacity,
                                                                        pane: 'Snap4City:' +
                                                                            wmsDatasetName
                                                                    }).addTo(
                                                                    fullscreendefaultMapRef
                                                                );

                                                            // add legend to map
                                                            $('#heatmap-info-btn').css('display', 'block');
                                                            $('#heatmap-info-btn').click();
                                                            map.legendHeatmap.create();
                                                            //    $("<?= $_REQUEST['name_w'] ?>_animation").prop("checked",true);
                                                            document.getElementById(
                                                                "<?= $_REQUEST['name_w'] ?>_animation"
                                                            ).checked = true;
                                                            //     $("<?= $_REQUEST['name_w'] ?>_slidermaxOpacity").slider({ disabled: "true" });
                                                            $("<?= $_REQUEST['name_w'] ?>_slidermaxOpacity")
                                                                .slider('disable');
                                                            //     document.getElementById("<?= $_REQUEST['name_w'] ?>_slidermaxOpacity").slider({ disabled: "true" });
                                                            //     document.getElementById("<?= $_REQUEST['name_w'] ?>_slidermaxOpacity").slider({ disabled: "true" });
                                                            map.eventsOnMap.push(
                                                                animatedLayer);
                                                            var mapControlsContainer =
                                                                document
                                                                .getElementsByClassName(
                                                                    "leaflet-control")[
                                                                    0];

                                                            var heatmapLegendColors = L
                                                                .control({
                                                                    position: 'bottomleft'
                                                                });

                                                            heatmapLegendColors.onAdd =
                                                                function(map) {

                                                                    var div = L.DomUtil
                                                                        .create('div',
                                                                            'info legend'
                                                                        ),
                                                                        grades = [
                                                                            "Legend"
                                                                        ];
                                                                    //    labels = ["http://localhost/dashboardSmartCity/trafficRTDetails/legend.png"];
                                                                    var legendImgPath =
                                                                        heatmapRange[0]
                                                                        .iconPath; // OLD-API
                                                                    div.innerHTML +=
                                                                        " <img src=" +
                                                                        legendImgPath +
                                                                        " height='100%'" +
                                                                        '<br>'; /// OLD-API
                                                                    return div;
                                                                };

                                                            // add legend to map
                                                            legendHeatmapFullscreen
                                                                .addTo(
                                                                    fullscreendefaultMapRef
                                                                );
                                                            map.eventsOnMap.push(
                                                                heatmap);
                                                            var mapControlsContainer =
                                                                document
                                                                .getElementsByClassName(
                                                                    "leaflet-control")[
                                                                    0];

                                                            //    var legendImgPath = heatmapRange[0].iconPath;
                                                            //     div.innerHTML += " <img src=" + legendImgPath + " height='100%'" + '<br>';
                                                            heatmapLegendColorsFullscreen
                                                                = L.control({
                                                                    position: 'bottomleft'
                                                                });

                                                            heatmapLegendColorsFullscreen
                                                                .onAdd = function(map) {

                                                                    var div = L.DomUtil
                                                                        .create('div',
                                                                            'info legend'
                                                                        ),
                                                                        grades = [
                                                                            "Legend"
                                                                        ];
                                                                    //    labels = ["http://localhost/dashboardSmartCity/trafficRTDetails/legend.png"];
                                                                    var legendImgPath =
                                                                        heatmapRange[0]
                                                                        .iconPath; // OLD-API
                                                                    div.innerHTML +=
                                                                        " <img src=" +
                                                                        legendImgPath +
                                                                        " height='100%'" +
                                                                        '<br>'; /// OLD-API
                                                                    return div;
                                                                };

                                                            heatmapLegendColorsFullscreen
                                                                .addTo(
                                                                    fullscreendefaultMapRef
                                                                );

                                                            if (changeRadiusOnZoom) {
                                                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_changeRad')
                                                                    .prop('checked',
                                                                        true);
                                                                if (
                                                                    estimateRadiusFlag
                                                                ) {
                                                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_changeRad')
                                                                        .prop(
                                                                            'disabled',
                                                                            true);
                                                                }
                                                            }

                                                            if (estimateRadiusFlag) {
                                                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_estimateRad')
                                                                    .prop('checked',
                                                                        true);
                                                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_estimateRad')
                                                                    .prop('disabled',
                                                                        false);
                                                            } else {
                                                                $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_estimateRad')
                                                                    .prop('disabled',
                                                                        false);
                                                            }

                                                            loadingDiv.empty();
                                                            loadingDiv.append(
                                                                loadOkText);

                                                            parHeight = loadOkText
                                                                .height();
                                                            parMarginTop = Math.floor((
                                                                loadingDiv
                                                                .height() -
                                                                parHeight) / 2);
                                                            loadOkText.css("margin-top",
                                                                parMarginTop + "px");

                                                            setTimeout(function() {
                                                                loadingDiv.css(
                                                                    "opacity",
                                                                    0);
                                                                setTimeout(
                                                                    function() {
                                                                        loadingDiv
                                                                            .nextAll(
                                                                                "#<?= $_REQUEST['name_w'] ?>_content div.gisMapModalLoadingDiv"
                                                                            )
                                                                            .each(
                                                                                function(
                                                                                    i
                                                                                ) {
                                                                                    $(this)
                                                                                        .css(
                                                                                            "top",
                                                                                            ($('#<?= $_REQUEST['name_w'] ?>_div')
                                                                                                .height() -
                                                                                                (($('#<?= $_REQUEST['name_w'] ?>_content div.gisMapModalLoadingDiv')
                                                                                                        .length -
                                                                                                        1
                                                                                                    ) *
                                                                                                    loadingDiv
                                                                                                    .height()
                                                                                                )
                                                                                            ) +
                                                                                            "px"
                                                                                        );
                                                                                }
                                                                            );
                                                                        loadingDiv
                                                                            .remove();
                                                                    }, 350);
                                                            }, 1000);
                                                        }
                                                    }

                                                } else {
                                                    console.log("Ko Heatmap");
                                                    console.log(JSON.stringify(
                                                        errorData));

                                                    loadingDiv.empty();
                                                    loadingDiv.append(loadKoText);

                                                    parHeight = loadKoText.height();
                                                    parMarginTop = Math.floor((
                                                        loadingDiv.height() -
                                                        parHeight) / 2);
                                                    loadKoText.css("margin-top",
                                                        parMarginTop + "px");

                                                    setTimeout(function() {
                                                        loadingDiv.css(
                                                            "opacity", 0);
                                                        setTimeout(function() {
                                                            loadingDiv
                                                                .nextAll(
                                                                    "#<?= $_REQUEST['name_w'] ?>_content div.gisMapLoadingDiv"
                                                                )
                                                                .each(
                                                                    function(
                                                                        i
                                                                    ) {
                                                                        $(this)
                                                                            .css(
                                                                                "top",
                                                                                ($('#<?= $_REQUEST['name_w'] ?>_div')
                                                                                    .height() -
                                                                                    (($('#<?= $_REQUEST['name_w'] ?>_content div.gisMapLoadingDiv')
                                                                                            .length -
                                                                                            1
                                                                                        ) *
                                                                                        loadingDiv
                                                                                        .height()
                                                                                    )
                                                                                ) +
                                                                                "px"
                                                                            );
                                                                    });
                                                            loadingDiv
                                                                .remove();
                                                        }, 350);
                                                    }, 1000);

                                                }
                                            } catch (err) {
                                                loadingDiv.empty();
                                                loadingDiv.append(loadKoText);

                                                parHeight = loadKoText.height();
                                                parMarginTop = Math.floor((loadingDiv
                                                    .height() - parHeight) / 2);
                                                loadKoText.css("margin-top",
                                                    parMarginTop + "px");
                                                console.log("Error: " + err);
                                                setTimeout(function() {
                                                    loadingDiv.css("opacity",
                                                        0);
                                                    setTimeout(function() {
                                                        loadingDiv
                                                            .nextAll(
                                                                "#<?= $_REQUEST['name_w'] ?>_content div.gisMapLoadingDiv"
                                                            ).each(
                                                                function(
                                                                    i) {
                                                                    $(this)
                                                                        .css(
                                                                            "top",
                                                                            ($('#<?= $_REQUEST['name_w'] ?>_div')
                                                                                .height() -
                                                                                (($('#<?= $_REQUEST['name_w'] ?>_content div.gisMapLoadingDiv')
                                                                                        .length -
                                                                                        1
                                                                                    ) *
                                                                                    loadingDiv
                                                                                    .height()
                                                                                )
                                                                            ) +
                                                                            "px"
                                                                        );
                                                                });
                                                        loadingDiv
                                                            .remove();
                                                    }, 350);
                                                }, 1000);
                                            }
                                        },
                                        error: function(errorData) {
                                            console.log("Ko Heatmap");
                                            console.log(JSON.stringify(errorData));

                                            loadingDiv.empty();
                                            loadingDiv.append(loadKoText);

                                            parHeight = loadKoText.height();
                                            parMarginTop = Math.floor((loadingDiv
                                                .height() - parHeight) / 2);
                                            loadKoText.css("margin-top", parMarginTop +
                                                "px");

                                            setTimeout(function() {
                                                loadingDiv.css("opacity", 0);
                                                setTimeout(function() {
                                                    loadingDiv.nextAll(
                                                        "#<?= $_REQUEST['name_w'] ?>_content div.gisMapLoadingDiv"
                                                    ).each(
                                                        function(
                                                            i) {
                                                            $(this)
                                                                .css(
                                                                    "top",
                                                                    ($('#<?= $_REQUEST['name_w'] ?>_div')
                                                                        .height() -
                                                                        (($('#<?= $_REQUEST['name_w'] ?>_content div.gisMapLoadingDiv')
                                                                                .length -
                                                                                1
                                                                            ) *
                                                                            loadingDiv
                                                                            .height()
                                                                        )
                                                                    ) +
                                                                    "px"
                                                                );
                                                        });
                                                    loadingDiv.remove();
                                                }, 350);
                                            }, 1000);

                                        }
                                    });

                                }


                                function distance(lat1, lon1, lat2, lon2,
                                    unit) { // unit: 'K' for Kilometers
                                    if ((lat1 == lat2) && (lon1 == lon2)) {
                                        return 0;
                                    } else {
                                        var radlat1 = Math.PI * lat1 / 180;
                                        var radlat2 = Math.PI * lat2 / 180;
                                        var theta = lon1 - lon2;
                                        var radtheta = Math.PI * theta / 180;
                                        var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(
                                            radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
                                        if (dist > 1) {
                                            dist = 1;
                                        }
                                        dist = Math.acos(dist);
                                        dist = dist * 180 / Math.PI;
                                        dist = dist * 60 * 1.1515;
                                        if (unit == "K") {
                                            dist = dist * 1.609344
                                        }
                                        if (unit == "N") {
                                            dist = dist * 0.8684
                                        }
                                        return dist;
                                    }
                                }

                                function getRadius() {
                                    var radius;
                                    var currentZoom = fullscreendefaultMapRef.getZoom();
                                    if (estimateRadiusFlag && estimatedRadius) {
                                        metresPerPixel = 40075016.686 * Math.abs(Math.cos(
                                            fullscreendefaultMapRef.getCenter().lat * Math.PI /
                                            180)) / Math.pow(2, currentZoom + 8);
                                        radius = ((estimatedRadius * 1000) / metresPerPixel) / 50;
                                        if (radius > 1000) {

                                        } else if (radius > 1) {
                                            if (currentZoom < prevZoom) {
                                                prevZoom = currentZoom;
                                                return radius / 1.2;
                                            } else {
                                                prevZoom = currentZoom;
                                                return radius / 1.2;
                                            }
                                        } else {
                                            prevZoom = currentZoom;
                                            return 1;
                                        }
                                    }
                                    if (prevZoom == null) {
                                        prevZoom = widgetParameters.zoom;
                                    }
                                    if (currentZoom === 7) {
                                        radius = 1;
                                    } else if (currentZoom === 8) {
                                        radius = 1;
                                    } else if (currentZoom === 9) {
                                        radius = 1;
                                    } else if (currentZoom === 10) {
                                        if (currentZoom > prevZoom) {
                                            radius = 2;
                                        } else {
                                            radius = 1;
                                        }
                                    } else if (currentZoom === 11) {
                                        if (currentZoom > prevZoom) {
                                            radius = 3.5;
                                        } else {
                                            radius = 2;
                                        }
                                    } else if (currentZoom === 12) {
                                        if (currentZoom > prevZoom) {
                                            radius = 10;
                                        } else {
                                            radius = 3.5;
                                        }
                                    } else if (currentZoom === 13) {
                                        if (currentZoom > prevZoom) {
                                            radius = 16;
                                        } else {
                                            radius = 10;
                                        }
                                    } else if (currentZoom === 14) {
                                        if (currentZoom > prevZoom) {
                                            radius = 31;
                                        } else {
                                            radius = 16;
                                        }
                                    } else if (currentZoom === 15) {
                                        if (currentZoom > prevZoom) {
                                            radius = 60;
                                        } else {
                                            radius = 31;
                                        }
                                    } else if (currentZoom === 16) {
                                        if (currentZoom > prevZoom) {
                                            radius = 80;
                                        } else {
                                            radius = 60;
                                        }
                                    } else if (currentZoom === 17) {
                                        if (currentZoom > prevZoom) {
                                            radius = 100;
                                        } else {
                                            radius = 80;
                                        }
                                    } else if (currentZoom === 18) {
                                        if (currentZoom > prevZoom) {
                                            radius = 130;
                                        } else {
                                            radius = 100;
                                        }
                                    }
                                    prevZoom = currentZoom;
                                    return radius;
                                }

                                //    fullscreendefaultMapRef.on('zoomstart', function(ev) {
                                fullscreendefaultMapRef.on('zoomend', function(ev) {
                                    // zoom level changed... adjust heatmap layer options!
                                    if (changeRadiusOnZoom === true) {
                                        if (prevZoom === null) {
                                            prevZoom = widgetParameters.zoom;
                                        }

                                        if (baseQuery.includes("heatmap.php")) { // OLD HEATMAP
                                            // INSERIRE CAMBIO SLIDER ZOOM
                                            document.getElementById(
                                                "<?= $_REQUEST['name_w'] ?>_modalLinkOpen_sliderradius"
                                            ).value = parseFloat(getRadius()).toFixed(1);
                                            setOption('radius', getRadius(),
                                                1) // MODALITA HEATMAP ON ZOOM
                                        }
                                    }
                                });

                                function initHeatmapLayer(heatmapRangeObject) {

                                    var heatmapCfg = {};

                                    map.cfg = JSON.parse(heatmapRangeObject[0].leafletConfigJSON);
                                    //    map.cfg['blur'] = 0.85;

                                    if (current_radius != null) {
                                        map.cfg['radius'] = current_radius;
                                    }
                                    if (current_opacity != null) {
                                        map.cfg['maxOpacity'] = current_opacity;
                                    }

                                    fullscreenHeatmap = new HeatmapOverlay(map.cfg);
                                    //map.heatmapLayer.zIndex = 20;
                                    //  map.legendHeatmap = L.control({position: 'topright'});
                                }

                                function nextHeatmapPage() {
                                    animationFlag = false;
                                    if (current_page > 0) {
                                        current_page--;
                                        changeHeatmapPage(current_page);

                                        for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                                            if (map.eventsOnMap[i].eventType === 'heatmap') {
                                                removeHeatmap(false);
                                                map.eventsOnMap.splice(i, 1);
                                            } else if (map.eventsOnMap[i].eventType === undefined && map
                                                .eventsOnMap[i].type === undefined) {
                                                fullscreendefaultMapRef.eachLayer(function(layer) {
                                                    fullscreendefaultMapRef.removeLayer(layer);
                                                });
                                                removeHeatmap(false);
                                                L.tileLayer(
                                                    'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                                        attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                                                        maxZoom: 18
                                                    }).addTo(fullscreendefaultMapRef);
                                            }
                                        }

                                        if (addMode === 'additive') {
                                            //  if (baseQuery.includes("heatmap.php")) {
                                            // addHeatmapToMap();
                                            addHeatmapFromFullscreenClient(false);
                                            /*    } else {
                                                    // addHeatmapFromWMSClient();        // TBD
                                                }*/
                                        }
                                        if (addMode === 'exclusive') {
                                            fullscreendefaultMapRef.eachLayer(function(layer) {
                                                fullscreendefaultMapRef.removeLayer(layer);
                                            });
                                            map.eventsOnMap.length = 0;

                                            //Remove WidgetAlarm active pins
                                            $.event.trigger({
                                                type: "removeAlarmPin",
                                            });
                                            //Remove WidgetEvacuationPlans active pins
                                            $.event.trigger({
                                                type: "removeEvacuationPlanPin",
                                            });
                                            //Remove WidgetEvents active pins
                                            $.event.trigger({
                                                type: "removeEventFIPin",
                                            });
                                            //Remove WidgetResources active pins
                                            $.event.trigger({
                                                type: "removeResourcePin",
                                            });
                                            //Remove WidgetOperatorEvents active pins
                                            $.event.trigger({
                                                type: "removeOperatorEventPin",
                                            });
                                            //Remove WidgetTrafficEvents active pins
                                            $.event.trigger({
                                                type: "removeTrafficEventPin",
                                            });
                                            L.tileLayer(
                                                'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                                    attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                                                    maxZoom: 18
                                                }).addTo(fullscreendefaultMapRef);

                                            addHeatmapFromClient();
                                        }

                                    }
                                }

                                //   window.nextHeatmapPage = function()
                                function prevHeatmapPage() {
                                    animationFlag = false;
                                    if (current_page < numHeatmapPages() - 1) {
                                        current_page++;
                                        changeHeatmapPage(current_page);

                                        for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                                            if (map.eventsOnMap[i].eventType === 'heatmap') {
                                                removeHeatmap(false);
                                                //    removeHeatmapColorLegend(i, false);
                                                map.eventsOnMap.splice(i, 1);
                                            } else if (map.eventsOnMap[i].eventType === undefined && map
                                                .eventsOnMap[i].type === undefined) {
                                                //  fullscreendefaultMapRef.removeLayer(map.eventsOnMap[i]);
                                                fullscreendefaultMapRef.eachLayer(function(layer) {
                                                    fullscreendefaultMapRef.removeLayer(layer);
                                                });
                                                removeHeatmap(false);
                                                L.tileLayer(
                                                    'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                                        attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                                                        maxZoom: 18
                                                    }).addTo(fullscreendefaultMapRef);
                                            }
                                        }

                                        if (addMode === 'additive') {
                                            //  if (baseQuery.includes("heatmap.php")) {
                                            // addHeatmapToMap();
                                            addHeatmapFromFullscreenClient(false);
                                            /*    } else {
                                                    // addHeatmapFromWMSClient();        // TBD
                                                }*/
                                        }
                                        if (addMode === 'exclusive') {
                                            fullscreendefaultMapRef.eachLayer(function(layer) {
                                                fullscreendefaultMapRef.removeLayer(layer);
                                            });
                                            map.eventsOnMap.length = 0;

                                            //Remove WidgetAlarm active pins
                                            $.event.trigger({
                                                type: "removeAlarmPin",
                                            });
                                            //Remove WidgetEvacuationPlans active pins
                                            $.event.trigger({
                                                type: "removeEvacuationPlanPin",
                                            });
                                            //Remove WidgetEvents active pins
                                            $.event.trigger({
                                                type: "removeEventFIPin",
                                            });
                                            //Remove WidgetResources active pins
                                            $.event.trigger({
                                                type: "removeResourcePin",
                                            });
                                            //Remove WidgetOperatorEvents active pins
                                            $.event.trigger({
                                                type: "removeOperatorEventPin",
                                            });
                                            //Remove WidgetTrafficEvents active pins
                                            $.event.trigger({
                                                type: "removeTrafficEventPin",
                                            });
                                            L.tileLayer(
                                                'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                                    attribution: '&copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
                                                    maxZoom: 18
                                                }).addTo(fullscreendefaultMapRef);

                                            addHeatmapFromFullscreenClient(false);
                                        }
                                    }
                                }

                                function animateFullscreenHeatmap() {
                                    for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                                        if (map.eventsOnMap[i].eventType === 'heatmap') {
                                            removeHeatmap(false);
                                            map.eventsOnMap.splice(i, 1);
                                        } else if (map.eventsOnMap[i].type === 'addHeatmap') {
                                            removeHeatmapColorLegend(i, false);
                                            map.eventsOnMap.splice(i, 1);
                                        } else if (map.eventsOnMap[i] !== null && map.eventsOnMap[i] !==
                                            undefined) {
                                            if (map.eventsOnMap[i].eventType !=
                                                'trafficRealTimeDetails') {
                                                map.defaultMapRef.removeLayer(map.eventsOnMap[i]);
                                                map.eventsOnMap.splice(i, 1);
                                            }
                                        }
                                    }
                                    if (animationFlag === false) {
                                        animationFlag = true;
                                        addHeatmapFromFullscreenClient(animationFlag);
                                    } else {
                                        animationFlag = false;
                                        for (let i = map.eventsOnMap.length - 1; i >= 0; i--) {
                                            if (map.eventsOnMap[i].eventType === 'heatmap') {
                                                removeHeatmap(false);
                                                //    removeHeatmapColorLegend(i, false);
                                                map.eventsOnMap.splice(i, 1);
                                            }
                                            /*else if (map.eventsOnMap[i].type === 'addHeatmap') {
                                                                                           removeHeatmapColorLegend(i, false);
                                                                                           map.eventsOnMap.splice(i, 1);
                                                                                       }*/
                                        }
                                        addHeatmapFromFullscreenClient(animationFlag);
                                    }
                                }

                                function changeHeatmapPage(page) {
                                    var btn_next = document.getElementById(
                                        "<?= $_REQUEST['name_w'] ?>_modalLinkOpen_nextButt");
                                    var btn_prev = document.getElementById(
                                        "<?= $_REQUEST['name_w'] ?>_modalLinkOpen_prevButt");
                                    var heatmapDescr = document.getElementById(
                                        "<?= $_REQUEST['name_w'] ?>_modalLinkOpen_heatMapDescr");

                                    // Validate page
                                    if (numHeatmapPages() > 1) {
                                        if (page < 1) page = 1;
                                        if (page > numHeatmapPages()) page = numHeatmapPages();

                                        if (current_page == 0) {
                                            btn_next.style.visibility = "hidden";
                                        } else {
                                            btn_next.style.visibility = "visible";
                                        }

                                        if (current_page == numHeatmapPages() - 1) {
                                            btn_prev.style.visibility = "hidden";
                                        } else {
                                            btn_prev.style.visibility = "visible";
                                        }
                                    }

                                    if (current_page < numHeatmapPages()) {
                                        //  $("#modalLinkOpenHeatMapDescr").text(heatmapData[current_page].metadata[0].date); // OLD-API
                                        //   heatmapDescr.text(heatmapData[current_page].metadata.date);
                                        //heatmapDescr.firstChild.wholeText = heatmapData[current_page].metadata.date;
                                        // heatmapData[current_page].metadata[0].date

                                        if (heatmapData[current_page].metadata != null) {
                                            heatmapDescr.firstChild.wholeText = heatmapData[
                                                current_page].metadata.date;
                                        } else {
                                            heatmapDescr.firstChild.wholeText = heatmapData[
                                                current_page].dateTime;
                                        }
                                    }
                                }

                                function numHeatmapPages() {
                                    //   return Math.ceil(heatmapData.length / records_per_page);
                                    return heatmapData.length;
                                }


                                function updateChangeRadiusOnZoom(htmlElement) {
                                    if (htmlElement.checked) {
                                        changeRadiusOnZoom = true;
                                        $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_estimateRad").attr(
                                            'disabled', false);
                                    } else {
                                        changeRadiusOnZoom = false;
                                        $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_estimateRad").attr(
                                            'disabled', true);
                                    }
                                    //  $("#radiusEstCnt").toggle(htmlElement.checked);
                                }

                                function computeRadiusOnData(htmlElement) {
                                    if (htmlElement.checked) {
                                        estimateRadiusFlag = true;
                                        $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_changeRad").attr(
                                            'disabled', true);
                                    } else {
                                        estimateRadiusFlag = false;
                                        $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_changeRad").attr(
                                            'disabled', false);
                                    }
                                }

                                function setOption(option, value, decimals) {
                                    if (baseQuery.includes("heatmap.php")) {
                                        if (option ==
                                            "radius"
                                        ) { // AGGIUNGERE SE FLAG è TRUE SI METTE IL VALORE DI CONFIG
                                            if (resetPageFlag) {
                                                if (resetPageFlag === true) {
                                                    current_radius = map.cfg['radius'];
                                                } else {
                                                    current_radius = Math.max(value, 2);
                                                }
                                            } else {
                                                current_radius = Math.max(value, 2);
                                            }
                                            map.cfg["radius"] = current_radius.toFixed(1);
                                            if (decimals) {
                                                $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_range" +
                                                    option).text(parseFloat(current_radius).toFixed(
                                                    parseInt(decimals)));
                                                $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_slider" +
                                                    option).attr("value", parseFloat(current_radius)
                                                    .toFixed(parseInt(decimals)));
                                            }
                                        } else if (option == "maxOpacity") {
                                            if (resetPageFlag) {
                                                if (resetPageFlag === true) {
                                                    current_opacity = map.cfg['maxOpacity'];
                                                } else {
                                                    current_opacity = value;
                                                }
                                            } else {
                                                current_opacity = value;
                                            }
                                            map.cfg["maxOpacity"] = current_opacity;
                                            if (decimals) {
                                                $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_range" +
                                                    option).text(parseFloat(current_opacity)
                                                    .toFixed(parseInt(decimals)));
                                                $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_slider" +
                                                    option).attr("value", parseFloat(
                                                    current_opacity).toFixed(parseInt(
                                                    decimals)));
                                            }
                                        }
                                        // update the heatmap with the new configuration
                                        //  map.heatmapLayer.configure(map.cfg);
                                        fullscreenHeatmap.configure(map.cfg);
                                    } else {
                                        if (option == "maxOpacity") {
                                            if (wmsLayerFullscreen) {
                                                wmsLayerFullscreen.setOpacity(value);
                                                current_opacity = value;
                                                if (decimals) {
                                                    $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_range" +
                                                        option).text(parseFloat(current_opacity)
                                                        .toFixed(parseInt(decimals)));
                                                    $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_slider" +
                                                        option).attr("value", parseFloat(
                                                        current_opacity).toFixed(parseInt(
                                                        decimals)));
                                                }
                                            }
                                        }
                                        fullscreenHeatmap.configure(map.cfg);
                                    }

                                }

                                /*    function setOption(option, value, decimals) {
                                        if (baseQuery.includes("heatmap.php")) {
                                            if (option == "radius") {       // AGGIUNGERE SE FLAG è TRUE SI METTE IL VALORE DI CONFIG
                                                if (resetPageFlag) {
                                                    if (resetPageFlag === true) {
                                                        current_radius = map.cfg['radius'];
                                                    } else {
                                                        current_radius = Math.max(value, 2);
                                                    }
                                                } else {
                                                    current_radius = Math.max(value, 2);
                                                }
                                                map.cfg["radius"] = current_radius.toFixed(1);
                                                if (decimals) {
                                                    $("#<?= $_REQUEST['name_w'] ?>_range" + option).text(parseFloat(current_radius).toFixed(parseInt(decimals)));
                                                    $("#<?= $_REQUEST['name_w'] ?>_slider" + option).attr("value", parseFloat(current_radius).toFixed(parseInt(decimals)));
                                                }
                                            } else if (option == "maxOpacity") {
                                                if (resetPageFlag) {
                                                    if (resetPageFlag === true) {
                                                        current_opacity = map.cfg['maxOpacity'];
                                                    } else {
                                                        current_opacity = value;
                                                    }
                                                } else {
                                                    current_opacity = value;
                                                }
                                                map.cfg["maxOpacity"] = current_opacity;
                                                if (decimals) {
                                                    $("#<?= $_REQUEST['name_w'] ?>_range" + option).text(parseFloat(current_opacity).toFixed(parseInt(decimals)));
                                                    $("#<?= $_REQUEST['name_w'] ?>_slider" + option).attr("value", parseFloat(current_opacity).toFixed(parseInt(decimals)));
                                                }
                                            }
                                            // update the heatmap with the new configuration
                                            map.heatmapLayer.configure(map.cfg);
                                        } else {
                                            if (option == "maxOpacity") {
                                                if (wmsLayerFullscreen) {
                                                    wmsLayerFullscreen.setOpacity(value);
                                                    current_opacity = value;
                                                    if (decimals) {
                                                        $("#<?= $_REQUEST['name_w'] ?>_range" + option).text(parseFloat(current_opacity).toFixed(parseInt(decimals)));
                                                        $("#<?= $_REQUEST['name_w'] ?>_slider" + option).attr("value", parseFloat(current_opacity).toFixed(parseInt(decimals)));
                                                    }
                                                    // });
                                                }
                                            }
                                        }
                                        map.heatmapLayer.configure(map.cfg);
                                    }   */

                                /*    function setOption(option, value, decimals) {
                                        if (baseQuery.includes("heatmap.php")) {
                                            cfg[option] = value;
                                            if (decimals) {
                                                $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_range" + option).text(parseFloat(value).toFixed(parseInt(decimals)));
                                                $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_slider" + option).attr("value", parseFloat(value).toFixed(parseInt(decimals)));
                                            }
                                            if (option == "radius") {       // AGGIUNGERE SE FLAG è TRUE SI METTE IL VALORE DI CONFIG
                                                if (resetPageFlag) {
                                                    if (resetPageFlag === true) {
                                                        current_radius = map.cfg['radius'];
                                                    } else {
                                                        current_radius = Math.max(value, 2);
                                                    }
                                                } else {
                                                    current_radius = Math.max(value, 2);
                                                }
                                            } else if (option == "maxOpacity") {
                                                if (resetPageFlag) {
                                                    if (resetPageFlag === true) {
                                                        current_opacity = map.cfg['maxOpacity'];
                                                    } else {
                                                        current_opacity = value;
                                                    }
                                                } else {
                                                    current_opacity = value;
                                                }
                                            }
                                            // update the heatmap with the new configuration
                                            fullscreenHeatmap.configure(cfg);
                                        } else {
                                            if (option == "maxOpacity") {
                                                if (wmsLayerFullscreen) {
                                                   // wmsLayerFullscreen.eachLayer(function (layer) {
                                                        var density = wmsLayerFullscreen.options["opacity"];
                                                        wmsLayerFullscreen.setStyle(getStyle(density));
                                                        current_opacity = value;
                                                   // });
                                                }
                                            }
                                        }
                                    }   */

                                function upSlider(color, step, decimals, max) {
                                    let value = $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_slider" +
                                        color).attr("value");
                                    if (parseFloat(parseFloat(value) + parseFloat(step)) <= max) {
                                        $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_range" + color)
                                            .text(parseFloat(parseFloat(value) + parseFloat(step))
                                                .toFixed(parseInt(decimals)));
                                        document.getElementById(
                                            "<?= $_REQUEST['name_w'] ?>_modalLinkOpen_slider" +
                                            color).value = parseFloat(parseFloat(value) +
                                            parseFloat(step)).toFixed(parseInt(decimals));
                                        $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_slider" + color)
                                            .trigger('change');
                                    }
                                }

                                function downSlider(color, step, decimals, min) {
                                    let value = $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_slider" +
                                        color).attr("value");
                                    if (parseFloat(parseFloat(value) - parseFloat(step)) >= min) {
                                        $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_range" + color)
                                            .text(parseFloat(parseFloat(value) - parseFloat(step))
                                                .toFixed(parseInt(decimals)));
                                        document.getElementById(
                                            "<?= $_REQUEST['name_w'] ?>_modalLinkOpen_slider" +
                                            color).value = parseFloat(parseFloat(value) -
                                            parseFloat(step)).toFixed(parseInt(decimals));
                                        $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_slider" + color)
                                            .trigger('change');
                                    }
                                }

                                function removeHeatmap(resetPageFlag) {
                                    if (baseQuery.includes("heatmap.php")) { // OLD HEATMAP
                                        if (resetPageFlag == true) {
                                            current_page =
                                                0; // CTR SE VA BENE BISOGNA DISTINGUERE IL CASO CHE SI STIA NAVIGANDO LA STESSA HEATMAP_NAME OPPURE UN'ALTRA NUOVA HEATMP_NAME
                                            current_radius = null;
                                            current_opacity = null;
                                            changeRadiusOnZoom = false;
                                            estimateRadiusFlag = false;
                                            estimatedRadius = null;
                                            wmsDatasetName = null;
                                        }
                                        //   map.testData = [];
                                        if (wmsLayerFullscreen) {
                                            fullscreendefaultMapRef.removeLayer(wmsLayerFullscreen);
                                            wmsLayerFullscreen = null;
                                        } else {
                                            fullscreenHeatmap.setData({
                                                data: []
                                            });
                                            fullscreendefaultMapRef.removeLayer(fullscreenHeatmap);
                                            fullscreenHeatmap = null;
                                        }
                                        if (resetPageFlag != true) {
                                            if (map.cfg["radius"] != current_radius) {
                                                setOption('radius', current_radius, 1);
                                            }
                                            if (map.cfg["maxOpacity"] != current_opacity) {
                                                setOption('maxOpacity', current_opacity, 2);
                                            }
                                        }
                                        fullscreendefaultMapRef.removeControl(legendHeatmapFullscreen);
                                        if (heatmapLegendColorsFullscreen) {
                                            fullscreendefaultMapRef.removeControl(
                                                heatmapLegendColorsFullscreen);
                                        }
                                    } else { // NEW WMS HEATMAP
                                        if (resetPageFlag == true) {
                                            current_page = 0;
                                        }
                                        if (fullscreenHeatmap) {
                                            fullscreenHeatmap.setData({
                                                data: []
                                            });
                                            fullscreendefaultMapRef.removeLayer(fullscreenHeatmap);
                                            fullscreenHeatmap = null;
                                        }
                                        if (wmsLayerFullscreen) {
                                            fullscreendefaultMapRef.removeLayer(wmsLayerFullscreen);
                                            wmsLayerFullscreen = null;
                                        }
                                        fullscreendefaultMapRef.removeControl(legendHeatmapFullscreen);
                                        fullscreendefaultMapRef.removeControl(
                                            heatmapLegendColorsFullscreen);
                                    }
                                }

                                function removeHeatmapColorLegend(index, resetPageFlag) {
                                    if (baseQuery.includes("heatmap.php")) { // OLD HEATMAP
                                        if (resetPageFlag == true) {
                                            current_page =
                                                0; // CTR SE VA BENE BISOGNA DISTINGUERE IL CASO CHE SI STIA NAVIGANDO LA STESSA HEATMAP_NAME OPPURE UN'ALTRA NUOVA HEATMP_NAME
                                            current_radius = null;
                                            current_opacity = null;
                                            changeRadiusOnZoom = false;
                                            estimateRadiusFlag = false;
                                            estimatedRadius = null;
                                            wmsDatasetName = null;
                                        }
                                        map.testData = [];
                                        fullscreenHeatmap.setData({
                                            data: []
                                        });
                                        fullscreendefaultMapRef.removeLayer(fullscreenHeatmap);
                                        if (resetPageFlag != true) {
                                            if (map.cfg["radius"] != current_radius) {
                                                setOption('radius', current_radius, 1);
                                            }
                                            if (map.cfg["maxOpacity"] != current_opacity) {
                                                setOption('maxOpacity', current_opacity, 2);
                                            }
                                        }
                                        //    fullscreendefaultMapRef.removeControl(map.eventsOnMap[index].legendColors);
                                        fullscreendefaultMapRef.removeControl(
                                            heatmapLegendColorsFullscreen);
                                    } else { // NEW WMS HEATMAP
                                        if (resetPageFlag == true) {
                                            current_page = 0;
                                        }
                                        //    fullscreendefaultMapRef.removeControl(map.eventsOnMap[index].legendColors);
                                        fullscreendefaultMapRef.removeControl(
                                            heatmapLegendColorsFullscreen);
                                        if (wmsLayerFullscreen) {
                                            fullscreendefaultMapRef.removeLayer(wmsLayerFullscreen);
                                        }
                                    }
                                }

                                function updateChangeRadiusOnZoom(htmlElement) {
                                    if (htmlElement.checked) {
                                        changeRadiusOnZoom = true;
                                        $("#<?= $_REQUEST['name_w'] ?>_estimateRad").attr('disabled',
                                            false);
                                    } else {
                                        changeRadiusOnZoom = false;
                                        $("#<?= $_REQUEST['name_w'] ?>_estimateRad").attr('disabled',
                                            true);
                                    }
                                    //  $("#radiusEstCnt").toggle(htmlElement.checked);
                                }

                                function computeRadiusOnData(htmlElement) {
                                    if (htmlElement.checked) {
                                        estimateRadiusFlag = true;
                                        $("#<?= $_REQUEST['name_w'] ?>_changeRad").attr('disabled',
                                            true);
                                    } else {
                                        estimateRadiusFlag = false;
                                        $("#<?= $_REQUEST['name_w'] ?>_changeRad").attr('disabled',
                                            false);
                                    }
                                }

                                legendHeatmapFullscreen.onAdd = function() {
                                    let legendHeatmapDiv = L.DomUtil.create('div');
                                    legendHeatmapDiv.id = "heatmapLegend";
                                    // disable interaction of this div with map
                                    if (L.Browser.touch) {
                                        L.DomEvent.disableClickPropagation(legendHeatmapDiv);
                                        L.DomEvent.on(legendHeatmapDiv, 'mousewheel', L.DomEvent
                                            .stopPropagation);
                                    } else {
                                        L.DomEvent.on(legendHeatmapDiv, 'click', L.DomEvent
                                            .stopPropagation);
                                    }
                                    legendHeatmapDiv.style.width = "340px";
                                    legendHeatmapDiv.style.fontWeight = "bold";
                                    legendHeatmapDiv.style.background = "#cccccc";
                                    //map.legendHeatmap.style.background = "-webkit-gradient(linear, left top, left bottom, from(#eeeeee), to(#cccccc))";
                                    legendHeatmapDiv.style.padding = "10px";

                                    //categories = ['blue', 'cyan', 'green', 'yellowgreen', 'yellow', 'gold', 'orange', 'darkorange', 'tomato', 'orangered', 'red'];
                                    let colors = [];
                                    /*   colors['blue'] = '#0000FF';
                                       colors['cyan'] = '#00FFFF';
                                       colors['green'] = '#008000';
                                       colors['yellowgreen'] = '#9ACD32';
                                       colors['yellow'] = '#FFFF00';
                                       colors['gold'] = '#FFD700';
                                       colors['orange'] = '#FFA500';
                                       colors['darkorange'] = '#FF8C00';
                                       colors['orangered'] = '#FF4500';
                                       colors['tomato'] = '#FF6347';
                                       colors['red'] = '#FF0000';  */
                                    colors['blue'] = 'rgb(0,0,255)';
                                    colors['cyan'] = 'rgb(0,153,255)';
                                    colors['green'] = 'rgb(0,153,0)';
                                    colors['yellowgreen'] = 'rgb(0,255,0)';
                                    colors['yellow'] = 'rgb(255,255,0)';
                                    colors['gold'] = 'rgb(255,187,0)';
                                    colors['orange'] = 'rgb(255,102,0)';
                                    colors['red'] = 'rgb(255,0,0)';
                                    colors['darkred'] = 'rgb(153,0,0)';
                                    colors['maroon'] = 'rgb(84, 0, 0)';
                                    //   colors['red'] = '#FF0000';
                                    let colors_value = [];
                                    colors_value['blue'] = 'rgb(0,0,255)';
                                    colors_value['cyan'] = 'rgb(0,153,255)';
                                    colors_value['green'] = 'rgb(0,153,0)';
                                    colors_value['yellowgreen'] = 'rgb(0,255,0)';
                                    colors_value['yellow'] = 'rgb(255,255,0)';
                                    colors_value['gold'] = 'rgb(255,187,0)';
                                    colors_value['orange'] = 'rgb(255,102,0)';
                                    colors_value['red'] = 'rgb(255,0,0)';
                                    colors_value['darkred'] = 'rgb(153,0,0)';
                                    colors_value['maroon'] = 'rgb(84, 0, 0)';
                                    //  colors_value['red'] = '#FF0000';
                                    //   legendHeatmapDiv.innerHTML += '<div class="textTitle" style="text-align:center">' + heatmapMetricName + '</div>';
                                    //    legendHeatmapDiv.innerHTML += '<div class="textTitle" style="text-align:center">' + map.testMetadata.metadata[0].mapName + + '</div>'; // OLD-API
                                    legendHeatmapDiv.innerHTML +=
                                        '<div class="textTitle" style="text-align:center">' +
                                        mapName + '</div>';
                                    legendHeatmapDiv.innerHTML += '<div class="text">' +
                                        '<?php echo ucfirst(isset($_REQUEST["profile"]) ? $_REQUEST["profile"] : "Heatmap Controls"); ?>' +
                                        '</div>';
                                    /*  if (!baseQuery.includes("heatmap.php")) {
                                          legendHeatmapDiv.innerHTML += '<div id="<?= $_REQUEST['name_w'] ?>_modalLinkOpen_controlsContainer" style="height:20px"><div class="text"  style="width:50%; float:left">' + '<?php echo ucfirst(isset($_REQUEST["profile"]) ? $_REQUEST["profile"] : "Heatmap Controls:"); ?></div><div class="text" style="width:50%; float:right"><label class="switch"><input type="checkbox" id="<?= $_REQUEST['name_w'] ?>_modalLinkOpen_animation"><div class="slider round"><span class="animationOn"></span><span class="animationOff" style="color: black; text-align: right">24H</span><span class="animationOn" style="color: black; text-align: right">Static</span></div></label></div></div>';
                                      } else {
                                          legendHeatmapDiv.innerHTML += '<div class="text">' + '<?php echo ucfirst(isset($_REQUEST["profile"]) ? $_REQUEST["profile"] : "Heatmap Controls:"); ?></div>';
                                      }*/
                                    // radius
                                    if (baseQuery.includes("heatmap.php")) { // OLD HEATMAP
                                        legendHeatmapDiv.innerHTML +=
                                            '<div id="heatmapRadiusControl" style="margin-top:10px">' +
                                            '<div style="display:inline-block; vertical-align:super;">Radius (px):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>' +
                                            '<div id= "<?= $_REQUEST['name_w'] ?>_modalLinkOpen_downSlider_radius" style="display:inline-block; vertical-align:super; color: #0078A8">&#10094;</div>&nbsp;&nbsp;&nbsp;' +
                                            //  '<input id="<?= $_REQUEST['name_w'] ?>_modalLinkOpen_sliderradius" style="display:inline-block; vertical-align:baseline; width:auto" type="range" min="0" max="0.0010" value="0.0008" step="0.00001">' +
                                            //  '<input id="<?= $_REQUEST['name_w'] ?>_modalLinkOpen_sliderradius" style="display:inline-block; vertical-align:baseline; width:auto" type="range" min="1" max="' + estimatedRadius * 50 + '" value="' + current_radius + '" step="' + Math.floor((estimatedRadius * 50)/40) + '">' +
                                            '<input id="<?= $_REQUEST['name_w'] ?>_modalLinkOpen_sliderradius" style="display:inline-block; vertical-align:baseline; width:auto" type="range" min="1" max="' +
                                            estimatedRadius * 30 + '" value="' + current_radius +
                                            '" step="2">' +
                                            '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<div id="upSlider_radius" style="display:inline-block; vertical-align:super; color: #0078A8">&#10095;</div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' +
                                            '<span id="<?= $_REQUEST['name_w'] ?>_modalLinkOpen_rangeradius" style="display:inline-block; vertical-align:super;">' +
                                            current_radius + '</span>' +
                                            '';
                                    }
                                    // max opacity
                                    legendHeatmapDiv.innerHTML +=
                                        '<div id="heatmapOpacityControl">' +
                                        '<div style="display:inline-block; vertical-align:super;">Max Opacity: &nbsp;&nbsp;&nbsp;&nbsp;</div>' +
                                        '<div id="<?= $_REQUEST['name_w'] ?>_modalLinkOpen_downSlider_opacity" style="display:inline-block; vertical-align:super; color: #0078A8">&#10094;</div>&nbsp;&nbsp;&nbsp;' +
                                        '<input id="<?= $_REQUEST['name_w'] ?>_modalLinkOpen_slidermaxOpacity" style="display:inline-block; vertical-align:baseline; width:auto" type="range" min="0" max="1" value="' +
                                        current_opacity + '" step="0.01">' +
                                        '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<div id="upSlider_opacity" style="display:inline-block;vertical-align:super; color: #0078A8">&#10095;</div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' +
                                        '<span id="<?= $_REQUEST['name_w'] ?>_modalLinkOpen_rangemaxOpacity" style="display:inline-block;vertical-align:super;">' +
                                        current_opacity + '</span>' +
                                        '</div>';
                                    legendHeatmapDiv.innerHTML +=
                                        '<div id="heatmapNavigationCnt">' +
                                        '<input type="button" id="<?= $_REQUEST['name_w'] ?>_modalLinkOpen_prevButt" value="< Prev" style="float: left"/>' +
                                        '<input type="button" id="<?= $_REQUEST['name_w'] ?>_modalLinkOpen_nextButt" value="Next >" style="float: right"/>' +
                                        //  '<div id="modalLinkOpenHeatMapDescr" style="text-align: center">' + map.testMetadata.metadata[0].date + '</p>' +  // OLD-API
                                        '<div id="<?= $_REQUEST['name_w'] ?>_modalLinkOpen_heatMapDescr" style="text-align: center">' +
                                        mapDate + '</p>' +
                                        '</div>';
                                    if (baseQuery.includes("heatmap.php")) { // OLD HEATMAP
                                        legendHeatmapDiv.innerHTML +=
                                            '<div id="radiusCnt">' +
                                            // '<input type="checkbox" name="checkfield" id="g01-01" onchange="updateChangeRadiusOnZoom(this)"/> Change Radius on Zoom' +
                                            '<input type="checkbox" name="checkfield" id="<?= $_REQUEST['name_w'] ?>_modalLinkOpen_changeRad"/> Change Radius on Zoom' +
                                            '</div>';
                                        legendHeatmapDiv.innerHTML +=
                                            '<div id="radiusEstCnt">' +
                                            // '<input type="checkbox" name="checkfield" id="g01-01" onchange="updateChangeRadiusOnZoom(this)"/> Change Radius on Zoom' +
                                            '<input type="checkbox" name="checkfield" id="<?= $_REQUEST['name_w'] ?>_modalLinkOpen_estimateRad" disabled="true"/> Estimate Radius Based on Data' +
                                            '</div>';
                                    }

                                    function checkLegend() {
                                        /*  if(document.getElementById("<?= $_REQUEST['name_w'] ?>_modalLinkOpen_downSlider_radius") == null){
                                              setTimeout(checkLegend, 500);
                                          }
                                          else{   */
                                        if (baseQuery.includes("heatmap.php")) { // OLD HEATMAP
                                            document.getElementById(
                                                "<?= $_REQUEST['name_w'] ?>_modalLinkOpen_sliderradius"
                                            ).addEventListener("input", function() {
                                                setOption('radius', this.value, 1)
                                            }, false);
                                        }
                                        document.getElementById(
                                            "<?= $_REQUEST['name_w'] ?>_modalLinkOpen_slidermaxOpacity"
                                        ).addEventListener("input", function() {
                                            setOption('maxOpacity', this.value, 2)
                                        }, false);

                                        if (!baseQuery.includes("heatmap.php")) {
                                            document.getElementById(
                                                    "<?= $_REQUEST['name_w'] ?>_animation")
                                                .addEventListener("click", function() {
                                                    animateFullscreenHeatmap()
                                                }, false);
                                        }

                                        document.getElementById(
                                                "<?= $_REQUEST['name_w'] ?>_modalLinkOpen_prevButt")
                                            .addEventListener("click", function() {
                                                prevHeatmapPage()
                                            }, false);
                                        document.getElementById(
                                                "<?= $_REQUEST['name_w'] ?>_modalLinkOpen_nextButt")
                                            .addEventListener("click", function() {
                                                nextHeatmapPage()
                                            }, false);

                                        if (baseQuery.includes("heatmap.php")) { // OLD HEATMAP
                                            document.getElementById(
                                                "<?= $_REQUEST['name_w'] ?>_modalLinkOpen_changeRad"
                                            ).addEventListener("change", function() {
                                                updateChangeRadiusOnZoom(this)
                                            }, false);
                                            document.getElementById(
                                                "<?= $_REQUEST['name_w'] ?>_modalLinkOpen_estimateRad"
                                            ).addEventListener("change", function() {
                                                computeRadiusOnData(this)
                                            }, false);
                                        }

                                        if (current_page == 0) {
                                            document.getElementById(
                                                "<?= $_REQUEST['name_w'] ?>_modalLinkOpen_nextButt"
                                            ).style.visibility = "hidden";
                                        } else {
                                            document.getElementById(
                                                "<?= $_REQUEST['name_w'] ?>_modalLinkOpen_nextButt"
                                            ).style.visibility = "visible";
                                        }

                                        if (current_page == numHeatmapPages() - 1) {
                                            document.getElementById(
                                                "<?= $_REQUEST['name_w'] ?>_modalLinkOpen_prevButt"
                                            ).style.visibility = "hidden";
                                        } else {
                                            document.getElementById(
                                                "<?= $_REQUEST['name_w'] ?>_modalLinkOpen_prevButt"
                                            ).style.visibility = "visible";
                                        }
                                        //    }
                                    }
                                    setTimeout(checkLegend, 500);

                                    return legendHeatmapDiv;
                                };

                                /*  fullscreendefaultMapRef.eachLayer(function (layer) {
                                      fullscreendefaultMapRef.removeLayer(layer);
                                  });*/

                                /*   let cfg = JSON.parse(heatmapRange[0].leafletConfigJSON);

                                   if (current_radius != null) {
                                       cfg['radius'] = current_radius;
                                   }
                                   if (current_opacity != null) {
                                       cfg['maxOpacity'] = current_opacity;
                                   }*/

                                if (current_radius != null) {
                                    map.cfg['radius'] = current_radius;
                                }
                                if (current_opacity != null) {
                                    map.cfg['maxOpacity'] = current_opacity;
                                }

                                //   map.heatmapLayer.setData({max:heatmapRange[0].range10Inf, min:heatmapRange[0].range1Inf, data:map.testData.data});

                                fullscreenHeatmap = new HeatmapOverlay(map.cfg);

                                if (baseQuery.includes("heatmap.php")) {
                                    fullscreenHeatmap.setData(map.testData);
                                    fullscreendefaultMapRef.addLayer(fullscreenHeatmap);
                                } else {
                                    if (animationFlag === false) {

                                        map.defaultMapRef.createPane('Snap4City:' +
                                            wmsDatasetName); // CORTI
                                        map.defaultMapRef.getPane('Snap4City:' + wmsDatasetName).style
                                            .zIndex = 420; // CORTI

                                        var timestamp = map.testMetadata.metadata.date;
                                        var timestampISO = timestamp.replace(" ", "T") + ".000Z";
                                        //    wmsLayerFullscreen = L.tileLayer.wms("https://wmsserver.snap4city.org/geoserver/Snap4City/wms", {
                                        wmsLayerFullscreen = L.tileLayer.wms(geoServerUrl +
                                            "geoserver/Snap4City/wms", {
                                                layers: 'Snap4City:' + wmsDatasetName,
                                                format: 'image/png',
                                                crs: L.CRS.EPSG4326,
                                                transparent: true,
                                                opacity: current_opacity,
                                                time: timestampISO,
                                                //  bbox: [24.7926004025304,60.1025194986424,25.1905923952885,60.2516802986263],
                                                tiled: true, // TESTARE COME ANTWERP ??
                                                //  attribution: "IGN ©"
                                                pane: 'Snap4City:' + wmsDatasetName // CORTI
                                            }).addTo(fullscreendefaultMapRef);
                                    } else {
                                        // ANIMATION WMS HEATMAP

                                        map.defaultMapRef.createPane('Snap4City:' +
                                            wmsDatasetName); // CORTI
                                        map.defaultMapRef.getPane('Snap4City:' + wmsDatasetName).style
                                            .zIndex = 420; // CORTI

                                        var animationCurrentDayTimestamp = [];
                                        var animationCurrentDayFwdTimestamp = [];
                                        var animationCurrentDayBckwdTimestamp = [];
                                        var animationStringTimestamp = "";
                                        var timestamp = map.testMetadata.metadata.date;
                                        //    var timestampISO = timestamp.replace(" ", "T") + ".000Z";
                                        var day = timestamp.substring(0, 10);
                                        if (current_page == 0) {
                                            var offsetFwd = current_page;
                                            while (heatmapData[offsetFwd].metadata['date'].substring(0,
                                                    10) == day) {
                                                animationCurrentDayFwdTimestamp.push(heatmapData[
                                                    offsetFwd].metadata['date'].replace(" ",
                                                    "T") + ".000Z");
                                                offsetFwd++;
                                            }
                                        } else if (current_page == numHeatmapPages() - 1) {
                                            var offsetBckwd = current_page - 1;
                                            while (heatmapData[offsetBckwd].metadata['date'].substring(
                                                    0, 10) == day) {
                                                animationCurrentDayBckwdTimestamp.push(heatmapData[
                                                    offsetBckwd].metadata['date'].replace(" ",
                                                    "T") + ".000Z");
                                                offsetBckwd--;
                                                if (offsetBckwd < 0) {
                                                    break;
                                                }
                                            }
                                        } else {
                                            var offsetFwd = current_page;
                                            while (heatmapData[offsetFwd].metadata['date'].substring(0,
                                                    10) == day) {
                                                animationCurrentDayFwdTimestamp.push(heatmapData[
                                                    offsetFwd].metadata['date'].replace(" ",
                                                    "T") + ".000Z");
                                                offsetFwd++;
                                            }
                                            var offsetBckwd = current_page - 1;
                                            while (heatmapData[offsetBckwd].metadata['date'].substring(
                                                    0, 10) == day) {
                                                animationCurrentDayBckwdTimestamp.push(heatmapData[
                                                    offsetBckwd].metadata['date'].replace(" ",
                                                    "T") + ".000Z");
                                                offsetBckwd--;
                                                if (offsetBckwd < 0) {
                                                    break;
                                                }
                                            }
                                        }

                                        animationCurrentDayTimestamp = animationCurrentDayFwdTimestamp
                                            .reverse().concat(animationCurrentDayBckwdTimestamp);
                                        //    animationCurrentDayTimestamp = animationCurrentDayTimestamp.reverse();
                                        animationStringTimestamp = animationCurrentDayTimestamp.join(
                                            ",");

                                        var bboxJson = {};
                                        $.ajax({
                                            //    url: "https://heatmap.snap4city.org/bbox.php?layer=" + map.testMetadata.metadata.mapName,
                                            url: heatmapUrl + "bbox.php?layer=" + map
                                                .testMetadata.metadata.mapName,
                                            type: "GET",
                                            async: false,
                                            dataType: 'json',
                                            success: function(resultBbox) {
                                                bboxJson = resultBbox;
                                            },
                                            error: function(errbbox) {
                                                alert("Error in retrieving bounding box for current heatmap: " +
                                                    mapName);
                                                console.log(errbbox);
                                            }
                                        });

                                        var upEastLat = parseFloat(bboxJson['maxy']);
                                        var upEastLon = parseFloat(bboxJson['maxx']);
                                        var bottomWestLat = parseFloat(bboxJson['miny']);
                                        var bottomWestLon = parseFloat(bboxJson['minx']);
                                        //    var imageUrl = 'https://wmsserver.snap4city.org/geoserver/wms/animate?LAYERS=' + wmsDatasetName + '&aparam=time&avalues=' + animationStringTimestamp + '&format=image/gif;subtype=animated&format_options=gif_loop_continuosly:true;layout:message;gif_frames_delay:500&transparent=true';
                                        var imageUrl = geoServerUrl + 'geoserver/wms/animate?LAYERS=' +
                                            wmsDatasetName + '&aparam=time&avalues=' +
                                            animationStringTimestamp +
                                            '&format=image/gif;subtype=animated&format_options=gif_loop_continuosly:true;layout:message;gif_frames_delay:500&transparent=true';
                                        var imageBounds = [
                                            [bottomWestLat, bottomWestLon],
                                            [upEastLat, upEastLon]
                                        ];
                                        var overlayOpacity = current_opacity;

                                        // ANIMATED GIF LAYER
                                        var animatedLayer = L.imageOverlay(imageUrl, imageBounds, {
                                            opacity: overlayOpacity,
                                            pane: 'Snap4City:' + wmsDatasetName
                                        }).addTo(fullscreendefaultMapRef);

                                        /*    // add legend to map
                                            map.legendHeatmap.addTo(map.defaultMapRef);
                                            //    $("<?= $_REQUEST['name_w'] ?>_animation").prop("checked",true);
                                            document.getElementById("<?= $_REQUEST['name_w'] ?>_animation").checked = true;
                                            //     $("<?= $_REQUEST['name_w'] ?>_slidermaxOpacity").slider({ disabled: "true" });
                                            $("<?= $_REQUEST['name_w'] ?>_slidermaxOpacity").slider('disable');
                                            //     document.getElementById("<?= $_REQUEST['name_w'] ?>_slidermaxOpacity").slider({ disabled: "true" });
                                            //     document.getElementById("<?= $_REQUEST['name_w'] ?>_slidermaxOpacity").slider({ disabled: "true" });
                                            map.eventsOnMap.push(animatedLayer);
                                            var mapControlsContainer = document.getElementsByClassName("leaflet-control")[0];

                                            var heatmapLegendColors = L.control({position: 'bottomleft'});

                                            heatmapLegendColors.onAdd = function (map) {

                                                var div = L.DomUtil.create('div', 'info legend'),
                                                    grades = ["Legend"];
                                                //    labels = ["http://localhost/dashboardSmartCity/trafficRTDetails/legend.png"];
                                                var legendImgPath = heatmapRange[0].iconPath; // OLD-API
                                                div.innerHTML += " <img src=" + legendImgPath + " height='100%'" + '<br>';    /// OLD-API
                                                return div;
                                            };

                                            heatmapLegendColors.addTo(map.defaultMapRef);
                                            //  map.eventsOnMap.push(heatmap);

                                            event.legendColors = heatmapLegendColors;
                                            map.eventsOnMap.push(event);

                                            loadingDiv.empty();
                                            loadingDiv.append(loadOkText);

                                            parHeight = loadOkText.height();
                                            parMarginTop = Math.floor((loadingDiv.height() - parHeight) / 2);
                                            loadOkText.css("margin-top", parMarginTop + "px");

                                            setTimeout(function () {
                                                loadingDiv.css("opacity", 0);
                                                setTimeout(function () {
                                                    loadingDiv.nextAll("#<?= $_REQUEST['name_w'] ?>_content div.gisMapLoadingDiv").each(function (i) {
                                                        $(this).css("top", ($('#<?= $_REQUEST['name_w'] ?>_div').height() - (($('#<?= $_REQUEST['name_w'] ?>_content div.gisMapLoadingDiv').length - 1) * loadingDiv.height())) + "px");
                                                    });
                                                    loadingDiv.remove();
                                                }, 350);
                                            }, 1000);   */
                                    }
                                }

                                //  fullscreendefaultMapRef.addLayer(map.heatmapLayer);

                                legendHeatmapFullscreen.addTo(fullscreendefaultMapRef);

                                heatmapLegendColorsFullscreen = L.control({
                                    position: 'bottomleft'
                                });

                                heatmapLegendColorsFullscreen.onAdd = function(map) {

                                    var div = L.DomUtil.create('div', 'info legend'),
                                        grades = ["Legend"];
                                    //    labels = ["http://localhost/dashboardSmartCity/trafficRTDetails/legend.png"];
                                    var legendImgPath = heatmapRange[0].iconPath;
                                    div.innerHTML += " <img src=" + legendImgPath +
                                        " height='100%'" + '<br>';
                                    return div;
                                };

                                heatmapLegendColorsFullscreen.addTo(fullscreendefaultMapRef);

                                if (changeRadiusOnZoom) {
                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_changeRad').prop(
                                        'checked', true);
                                    if (estimateRadiusFlag) {
                                        $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_changeRad').prop(
                                            'disabled', true);
                                    }
                                }

                                if (estimateRadiusFlag) {
                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_estimateRad').prop(
                                        'checked', true);
                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_estimateRad').prop(
                                        'disabled', false);
                                } else {
                                    $('#<?= $_REQUEST['name_w'] ?>_modalLinkOpen_estimateRad').prop(
                                        'disabled', false);
                                }

                            }

                            //  resizeMapView(fullscreendefaultMapRef);
                        }

                    }
                },
                750
            ); // PANTALEO - AUMENTARE UN PO' IL VALORE DI setTimeOut QUI SE LA MAPPA NON CARICA ABBASTANZA VELOCEMENTE SE HA UNA HEATMAP DI DEFAULT

            $("#<?= $_REQUEST['name_w'] ?>_modalLinkOpen").modal('show');

        });


        var openWs = function(widget) {
            try {
                <?php
                echo 'wsRetryActive = "' . $wsRetryActive . '";' . "\n";
                echo 'wsRetryTime = ' . $wsRetryTime . ';' . "\n";
                echo 'wsUrl="' . $wsProtocol . '://' . $wsServerAddress . ':' . $wsServerPort . '/' . $wsPath . '";' . "\n";
                ?>
                //webSocket = new WebSocket(wsUrl);
                initWebsocket(widget, wsUrl, null, wsRetryTime * 1000, function(socket) {
                    console.log('socket initialized!');
                    //do something with socket...
                    //Window.webSockets["<?= $_REQUEST['name_w'] ?>"] = socket;
                    openWsConn(widget);
                }, function() {
                    console.log('init of socket failed!');
                });
                //   webSocket.addEventListener('open', openWsConn);
                //   webSocket.addEventListener('close', wsClosed);
            } catch (e) {
                wsClosed();
            }
        };

        var manageIncomingWsMsg = function(msg) {
            var msgObj = JSON.parse(msg.data);
            console.log(msgObj);
            if (msgObj.msgType == "DataToEmitter") {
                if (currentValue != msgObj.newValue) {
                    updatedEverFlag = true;
                    updatedFlag = true;
                    lastValueOk = msgObj.newValue;
                    //  showUpdateResult("Device OK");
                }
            }
            if (msgObj.msgType == "DataToEmitterAck") {
                if (lastValueOk) {
                    //   currentValue = lastValueOk;
                    lastValueOk = null;
                    //    handleMouseDown();
                    //    handleExtUpdate();
                    $('#<?= $_REQUEST['name_w'] ?>_onOffButton').off('click');
                    //    showUpdateResult("Device OK");
                } else {
                    var webSocket = Window.webSockets[msgObj.widgetUniqueName];
                    if (!webSocket.ackReceived) {
                        clearTimeout(webSocket.timeout);
                        webSocket.ackReceived = true;
                        console.log(msgObj.widgetUniqueName + " ACK ackReceived:" + webSocket.ackReceived)
                        webSocket.onAck({
                            result: "Ok",
                            widgetName: msgObj.widgetUniqueName
                        });
                    }
                }
            }
            /*    if(msgObj.msgType=="newNRMetricData") {
                    if(encodeURIComponent(msgObj.metricName) === encodeURIComponent(metricName))
                    {
                        //    <?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>(firstLoad, metricNameFromDriver, widgetTitleFromDriver, widgetHeaderColorFromDriver, widgetHeaderFontColorFromDriver, fromGisExternalContent, fromGisExternalContentServiceUri, fromGisExternalContentField, fromGisExternalContentRange, fromGisMarker, fromGisMapRef, fromGisFakeId);

                        currentValue = msgObj.newValue;

                    }
                }*/
        };

        var openWsConn = function(widget) {
            var webSocket = Window.webSockets[widget];
            var wsRegistration = {
                msgType: "ClientWidgetRegistration",
                userType: "widgetInstance",
                //   metricName: encodeURIComponent(metricName),
                widgetUniqueName: "<?= $_REQUEST['name_w'] ?>"
            };
            webSocket.send(JSON.stringify(wsRegistration));
            /*setTimeout(function(){
                var webSocket = Window.webSockets[widget];
                webSocket.removeEventListener('message', manageIncomingWsMsg);
                webSocket.close();
            }, (timeToReload - 2)*1000);*/

            webSocket.addEventListener('message', manageIncomingWsMsg);
        };

        var wsClosed = function(e) {
            var webSocket = Window.webSockets["<?= $_REQUEST['name_w'] ?>"];
            webSocket.removeEventListener('message', manageIncomingWsMsg);
            if (wsRetryActive === 'yes') {
                setTimeout(openWs, parseInt(wsRetryTime * 1000));
            }
        };


        function initWebsocket(widget, url, existingWebsocket, retryTimeMs, success, failed) {
            if (!existingWebsocket || existingWebsocket.readyState != existingWebsocket.OPEN) {
                if (existingWebsocket) {
                    existingWebsocket.close();
                }
                var websocket = new WebSocket(url);
                websocket.widget = widget;
                console.log("store websocket for " + widget)
                Window.webSockets[widget] = websocket;
                websocket.onopen = function() {
                    console.info('websocket opened! url: ' + url);
                    success(websocket);
                };
                websocket.onclose = function() {
                    console.info('websocket closed! url: ' + url + " reconnect in " + retryTimeMs + "ms");
                    //reconnect after a retryTime
                    setTimeout(function() {
                        initWebsocket(widget, url, existingWebsocket, retryTimeMs, success, failed);
                    }, retryTimeMs);
                };
                websocket.onerror = function(e) {
                    console.info('websocket error! url: ' + url);
                    console.info(e);
                };
            } else {
                success(existingWebsocket);
            }
            return;
        };

        function newWSConnect() {
            try {
                if (socket == null) {
                    subscribedWsDevices = [];
                    socket = io.connect("<?= $ssoEndpoint ?>", {
                        "path": "/synopticsdev/socket.io"
                    });

                    socket.on('connect', () => {
                        try {
                            console.log("New WS Connected. Socket ID: " + socket.id);

                            if (refreshToken != null && refreshToken != "") {
                                tryingAuth = true;
                                $.ajax({
                                    url: "../controllers/getAccessToken.php",
                                    data: {
                                        refresh_token: refreshToken
                                    },
                                    type: "GET",
                                    async: true,
                                    dataType: 'json',
                                    success: function(dataSso) {
                                        try {
                                            if (socket != null && socket.connected) {
                                                socket.emit("authenticate", dataSso
                                                    .accessToken);
                                            }
                                        } catch (errajax) {
                                            console.log("Error in ajax authencticate: " +
                                                errajax.message);
                                        }
                                    },
                                    error: function(errorData) {

                                    }
                                });
                            }

                            socket.on("authenticate", function(data) {
                                try {
                                    console.log(JSON.parse(data))
                                    // aggiorna var provando a fare authenticate
                                    tryingAuth = false;
                                } catch (errAuth) {
                                    console.log("Error in authencticate new WS: " + errAuth
                                        .message);
                                }
                            });

                            socket.on("subscribe", function(dataSub) {
                                try {
                                    let subscribeObj = JSON.parse(dataSub);
                                    console.log(subscribeObj);
                                    if (subscribeObj.status != "OK") {

                                        socket.emit("subscribe", subscribeObj.request);
                                        socket.emit("subscribe", subscribeObj.request.split(" ")[
                                            0] + " __location");

                                    } else {
                                        subscribedWsDevices.push(subscribeObj.request);
                                    }
                                } catch (errSub) {
                                    console.log("Error in subscribe new WS: " + errSub.message);
                                }
                            });
                        } catch (er) {
                            consoloe.log("Error on Connect new WS.")
                        }
                    });

                    socket.on('disconnect', function(data) {
                        try {
                            console.log("DISCONNECTED!");
                            //    socket = null;
                            //   newWSConnect();
                        } catch (errSub) {
                            console.log("Catch event in disconnect new WS: " + errSub.message);
                        }
                    });
                }
            } catch (e) {
                console.log("Error in wsConnect.")
            }

        }

        function subscribeWsDevice(serviceUri, attr, currentCustomSvgLayer, isMobile) {

            //    console.log("Subscribe invoked for : " + serviceUri);
            // Controllo se mi sto autenticando
            try {
                if (tryingAuth != true) {
                    if (!subscribedWsDevices.includes(serviceUri + " " + attr)) {
                        socket.off("update " + serviceUri + " " + attr);
                        socket.on("update " + serviceUri + " " + attr, function(data) {
                            try {
                                let updateObj = JSON.parse(data);
                                console.log(updateObj);
                                var countCustomPin = 0;
                                gisLayersOnMap[currentCustomSvgLayer].eachLayer(function(marker) {
                                    try {
                                        countCustomPin++;
                                        if (marker.feature.properties.serviceUri == serviceUri) {
                                            let svgContainerUpdt = null;
                                            //   let tplPath = feature.properties.iconFilePath;
                                            svgContainerUpdt = $('<div id="' + widgetName +
                                                '_svgCtn' + countCustomPin + '">');
                                            $("#" + widgetName).append(svgContainerUpdt);
                                            buildSvgIcon(marker.feature.properties.iconFilePath,
                                                updateObj.lastValue, 'error', null,
                                                svgContainerUpdt, widgetName, "map",
                                                countCustomPin, totalSvgCnt,
                                                currentCustomSvgLayer, svgContainerArray, true,
                                                serviceUri);
                                        }
                                    } catch (errlayer) {
                                        console.log("Error in displaying new marker (new WS): " +
                                            errlayer.message);
                                    }
                                });
                            } catch (errUpdt) {
                                console.log("Error in update new WS: " + errUpdt.message);
                            }
                        });
                        if (isMobile) {
                            socket.off("update " + serviceUri + " __location");
                            socket.on("update " + serviceUri + " __location", function(data) {
                                try {
                                    let updateObj = JSON.parse(data);
                                    console.log(updateObj);
                                    var countCustomPin = 0;
                                    gisLayersOnMap[currentCustomSvgLayer].eachLayer(function(marker) {
                                        try {
                                            countCustomPin++;
                                            if (marker.feature.properties.serviceUri ==
                                                serviceUri) {
                                                if (updateObj.lastValue["latitude"] && updateObj
                                                    .lastValue["longitude"]) {
                                                    var newLatLng = new L.LatLng(updateObj
                                                        .lastValue["latitude"], updateObj
                                                        .lastValue["longitude"]);
                                                    marker.setLatLng(newLatLng);
                                                }
                                            }
                                        } catch (errlayer) {
                                            console.log(
                                                "Error in displaying new marker (new WS): " +
                                                errlayer.message);
                                        }
                                    });
                                } catch (errUpdt) {
                                    console.log("Error in update new WS: " + errUpdt.message);
                                }
                            });
                        }

                        setTimeout(function() {
                            try {
                                if (!subscribedWsDevices.includes(serviceUri + " " + attr)) {
                                    socket.emit("subscribe", serviceUri + " " + attr);
                                    if (isMobile) {
                                        socket.emit("subscribe", serviceUri + " __location");
                                    }
                                }
                            } catch (err) {
                                console.log("Error in subscribe emit (new WS): " + err.message);
                            }
                        }, Math.floor(Math.random() * (1000 - 100 + 1) + 100));
                    }
                } else {
                    setTimeout(function() {
                        try {
                            subscribeWsDevice(serviceUri, attr, currentCustomSvgLayer, isMobile);
                        } catch (err) {
                            console.log("Error in subscribe reattempt (new WS): " + err.message);
                        }
                    }, 1000);
                }
            } catch (err) {
                console.log("Error in subscribeWsDevice method (new WS): " + err.message);
            }
        }

        // leaflet token world 3d "9c04ad00edd787920af1a451bdd6553a", {
        // map box token 'pk.eyJ1IjoiYW5kcmVhY29ydGk5MCIsImEiOiJjanhjN2dndTIwMGhnNDBvNDFkZzN3eHVoIn0.w07jn7vRfAcstoSz2EO5Ew';

        // CORTI
        function getMenuAjaxCall() {
            $.ajax({
                url: "../controllers/getWidgetParams.php?widgetName=<?php echo $_REQUEST['name_w']; ?>",
                type: "GET",
                dataType: 'json',
                success: function(data) {
                    let parameters = JSON.parse(data.params.parameters);
                    if (parameters.dropdownMenu) {
                        for (let itemMenu of parameters.dropdownMenu) {
                            const itemTemplate = `
                            <li class="appendable deck-btn">
                                <a class="dropdown-item" href="#" id="${itemMenu.id}">
                                    <i class="fa appendable-icon hidden fa-map-pin"></i>
                                &nbsp;${itemMenu.label}</a>
                            </li>
                            `;
                            if (itemMenu.header == 'layers')
                                supportedOrthomap[itemMenu.id] = {
                                    id: itemMenu.id,
                                    name: itemMenu.label
                                }
                            const itemElement = $(itemTemplate);

                            switch (itemMenu.service) {
                                case "tileLayer":
                                    $('#orthomaps-menu-content').append(itemElement);
                                    break;
                                case "WMS":
                                    $('#geojson-menu-content').append(itemElement);
                                    break;
                                case "GeoJSON":
                                    $('#geojson-menu-content').append(itemElement);
                                    break;
                            }

                            itemElement.click((event) => {
                                switch (itemMenu.service) {
                                    case "tileLayer":
                                        addTileLayer(event, itemMenu);
                                        break;
                                    case "WMS":
                                        addLayerWMS(event, itemMenu);
                                        break;
                                    case "KML":
                                        addLayerKML(event, itemMenu);
                                        break;
                                    case "GeoJSON":
                                        addLayerGeoJSON(event, itemMenu);
                                        break;
                                    case "SVG":
                                        addLayerSVG(event, itemMenu);
                                        break;
                                }
                                hideMenu(mapMenuId);
                            });
                        }
                    }
                },
                error: function() {
                    console.log("Error loading menu");
                },
            });
        }

        function addLayerWMS(evt, menu) {
            let imageType = menu.imageType || 'png';
            // if (menu.imageType) {
            //     imageType = menu.imageType;
            // }
            for (var subLayerIndex = 0; subLayerIndex < menu.layers.length; subLayerIndex++) {

                // zIndex
                map.defaultMapRef.createPane(menu.id + menu.layers[subLayerIndex].name);
                if (menu.zIndex) {
                    map.defaultMapRef.getPane(menu.id + menu.layers[subLayerIndex].name).style.zIndex = menu.zIndex;
                }

                let layer = L.tileLayer.wms(menu.linkUrl, {
                    layers: menu.layers[subLayerIndex].name,
                    format: 'image/' + imageType,
                    transparent: true,
                    version: '1.1.0',
                    attribution: "",
                    pane: menu.id + menu.layers[subLayerIndex].name
                });
                if (!arrayContains(layersCreated, layer)) {
                    layersCreated.push({
                        "menu": menu,
                        "layer": layer,
                        "subLayerIndex": subLayerIndex
                    });
                }

                // check zoom and add to map
                addLayerToMapByZoom(menu, layer, subLayerIndex, layersCreated.length - 1);

            }
        }

        function addLayerToMapByZoom(menu, layer, subLayerIndex, i) {
            let zoom = map.defaultMapRef.getZoom();
            if ((zoom <= menu.layers[subLayerIndex].maxZoom && zoom >= menu.layers[subLayerIndex].minZoom) || !menu
                .layers[subLayerIndex].minZoom) {
                //  if (zoom <= menu.layers[subLayerIndex].maxZoom && zoom >= menu.layers[subLayerIndex].minZoom) {
                // check if layer is already on the map
                if (!map.defaultMapRef.hasLayer(layer)) {
                    layer.on('loading', function() {
                        $('#loadingMenu').removeClass('hidden');
                    }).on('load', function() {
                        $('#loadingMenu').addClass('hidden');
                    }).addTo(map.defaultMapRef);
                    if (!arrayContains(layersAddedToMap, layer)) {
                        layersAddedToMap.push({
                            "id": menu.id,
                            "layer": layer
                        });
                    }
                }
            } else {
                map.defaultMapRef.removeLayer(layer);
                // remove from array layersAddedToMap
                for (var j = 0; j < layersAddedToMap.length; j++) {
                    if (layersAddedToMap[j].layer.options.layers === layer.options.layers) {
                        layersAddedToMap.splice(j, 1);
                        j--;
                    }
                }
            }
        }

        function removeLayerById(layerId, evt) {
            // remove from array layersAddedToMap
            for (var i = 0; i < layersAddedToMap.length; i++) {
                if (layersAddedToMap[i].id === layerId) {
                    map.defaultMapRef.removeLayer(layersAddedToMap[i].layer);
                    // remove from array
                    layersAddedToMap.splice(i, 1);
                    i--;
                }
            }
            // remove from array layersCreated
            for (var j = 0; j < layersCreated.length; j++) {
                if (layersCreated[j].menu.id === layerId) {
                    map.defaultMapRef.removeLayer(layersCreated[j].layer);
                    // remove from array
                    layersCreated.splice(j, 1);
                    j--;
                }
            }
            if (evt) {
                $(evt.target).find('.appendable-icon').addClass('hidden');
            }
            $('#loadingMenu').addClass('hidden');
        }

        function removeAllLayers(map) {
            map.eachLayer(function(layer) {
                map.removeLayer(layer);
            });
            layersAddedToMap = [];
            layersCreated = [];

            // remove icons
            removeAllIcons();
        }

        // change tileLayer of the map: light, dark, etc
        function addTileLayer(evt, menu) {
            selectTickMenuOrthomap(menu.id);
            if (is3dOn) {
                tileUrls = [];
                tileUrls.push(menu.linkUrl.replace("{s}", "a"));
                tileUrls.push(menu.linkUrl.replace("{s}", "b"));
                tileUrls.push(menu.linkUrl.replace("{s}", "c"));
                if (terrainOn)
                    layers.terrain = new snap4deck.MultiElevationTerrainLayer({
                        ...layers.terrain.props,
                        // elevationUrl,
                        texture: tileUrls,
                    });
                else
                    layers.terrain = createTileLayer(tileUrls, menu.id);
                updateLayers();
            } else {
                let layer;
                if (menu.minZoom != undefined && menu.maxZoom != undefined) { // MOD PANTALEO-CORTI
                    layer = L.tileLayer(menu.linkUrl, {
                        attribution: menu.layerAttribution,
                        apikey: menu.apiKey,
                        minZoom: menu.minZoom,
                        maxZoom: menu.maxZoom
                    }).addTo(map.defaultMapRef);
                } else {
                    layer = L.tileLayer(menu.linkUrl, {
                        attribution: menu.layerAttribution,
                        apikey: menu.apiKey
                    }).addTo(map.defaultMapRef);
                }
                layersAddedToMap.push({
                    "id": menu.id,
                    "layer": layer
                });
            }
        }

        function addLayerKML(evt, menu) {
            var kmlLayer = new L.KML(menu.linkUrl, {
                async: true
            });
            map.defaultMapRef.addLayer(kmlLayer);
            layersAddedToMap.push({
                "id": menu.id,
                "layer": kmlLayer
            });

            map.defaultMapRef.kmlLayer.zIndex = 420;
        }

        function addLayerGeoJSON(evt, menu) {

            // zIndex
            map.defaultMapRef.createPane(menu.id);
            if (menu.zIndex) {
                map.defaultMapRef.getPane(menu.id).style.zIndex = menu.zIndex;
            }

            jQuery.getJSON(menu.linkUrl, function(data) {
                let layer = L.geoJSON(data, {
                    pane: menu.id
                }).addTo(map.defaultMapRef);
                layersAddedToMap.push({
                    "id": menu.id,
                    "layer": layer
                });
            });
        }

        function addLayerSVG(evt, menu) {
            let imageBounds = [
                [9.716489, 42.2392816],
                [12.3529926, 44.47160041252872]
            ];
            L.imageOverlay(menu.linkUrl, imageBounds).addTo(map.defaultMapRef);
        }

        function removeAllIcons() {
            $('.appendable-icon').addClass('hidden');
        }

        function removeTileIcons() {
            //  $('.appendable-icon').addClass('hidden');
            for (n = 0; n < $('.appendable-icon').length; n++) {
                if ($('.appendable-icon')[n].className.includes("fa-map") && !$('.appendable-icon')[n].className
                    .includes("hidden")) {
                    $('.appendable-icon')[n].className = $('.appendable-icon')[n].className + " hidden";
                }
            }
        }

        function arrayContains(array, layer) {
            for (var i = 0; i < array.length; i++) {
                if (array[i].layer.options.layers === layer.options.layers) {
                    return true;
                }
            }
            return false;
        }

    }); //Fine document ready
</script>

<style>
    #<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>_chartContainer {
        overflow-y: hidden;
    }

    #<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>_map3d {
        position: relative !important;
        top: -100% !important;
        left: 0 !important;
        width: 100% !important;
        height: 100% !important;
        overflow: hidden !important;
        z-index: 999;
        background-color: white;
    }

    #deckgl-overlay {
        background-image: linear-gradient(#98d4ed, #87CEEB, #87CEEB);
    }

    .mapOptions {
        position: inherit;
        /* top: 36px;
        left: 70px; */
        z-index: 430;
    }



    #universal-map-overlay .dropdown-menu .dropdown-item {
        padding-left: 10px;
    }

    .hoverName {
        font-size: 16px;
        color: white;
    }

    #universal-controls {
        z-index: 430;
    }

    #deck-controls-bottom {
        position: absolute;
        bottom: 0px;
        left: 5px;
        z-index: 425;
    }

    #deck-controls input {
        background-color: #337ab7;
        color: #fff;
        border-color: #2e6da4;
        font-size: 13px;
        display: block;
        float: right;
    }

    .deck-btn-set {
        margin: 5px;
        display: flex;
        flex-wrap: nowrap;
        flex-direction: row;
    }

    .deck-btn-set>button,
    #deck-zoom-box {
        background-color: #337ab7;
        color: #fff;
        border-color: #2e6da4;
        width: 25px;
        height: 25px;
        margin-right: 5px;
        font-size: 16px;
    }

    #deck-controls-bottom button {
        display: block;
        float: left;
        margin-right: 5px;
    }

    .deck-sunlight-div {
        background-color: #337ab7;
        color: #fff;
    }

    .deck-sunlight-div>button {
        display: block;
        background-color: #337ab7;
        color: #fff;
    }

    .deck-sunlight-div>input {
        background-color: #337ab7;
        color: #fff;
    }

    #deck-zoom-box {
        text-align: center;
        line-height: 25px;
    }

    .deck-popup {
        position: absolute;
        background-color: white;
        z-index: 424;
        min-width: 400px;
        max-width: 1200px;
        transform-origin: top center;
    }

    #deck-whatif-popup {
        position: absolute;
        background-color: white;
        z-index: 425;
        top: 200px;
        left: 200px;
        pointer-events: all;
        transform-origin: top center;
        padding: 5px;
        border-radius: 5px;
        display: none;
    }

    #deck-whatif-popup > button {
        margin: 0;
        display: block;
        margin-right: 25px;
        /* color: black; */
    }

    #start-whatif-btn {
        margin-bottom: 5px!important;
    }

    #close-whatif-btn {
        border: 0!important;
        position: absolute;
        background-color: white;
        right: 0;
        top: 0;
        margin-right: 0!important;
        border-radius: 5px;
    }

    #close-whatif-btn:hover {
        color: red!important;
    }

    .deck-close-btn {
        position: absolute;
        top: 0px;
        right: 0px;

        background-color: transparent;
        color: #000;
        border: 0px;
        width: 25px;
        height: 25px;
        font-size: 16px;
    }

    .icon-margin-right {
        margin-right: 5px;
    }

    .draggable-popup {
        cursor: move;
        padding-top: 20px;
    }

    #loadingDivsSection {
        position: absolute;
        bottom: 0;
        right: 0;
        display: flex;
        justify-content: space-between;
        flex-direction: column-reverse;
        z-index: 9999;
    }

    #deck-building-popup {
        position: absolute;
        top: 10px;
        left: calc(50% - 200px);
        width: 400px;
        height: 150px;
        background-color: rgba(20, 20, 20, 0.95);
        color: white;
        border-radius: 20px;
        z-index: 550;
        transition: opacity 0.35s;
        display: none;
    }

    .leaflet-control-zoom,
    .leaflet-control-zoom-display {
        display: none;
    }

    .deck-building-table {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-evenly;
        overflow-y: scroll;
        -ms-overflow-style: none;
        /* IE and Edge */
        scrollbar-width: none;
        /* Firefox */
        height: calc(100% - 25px);
        padding: 0px 10px;
    }

    .deck-building-table::-webkit-scrollbar {
        display: none;
    }

    .deck-building-titlebar {
        text-align: center;
        height: 25px;
    }

    .deck-building-titlebar>h3 {
        text-align: center;
        margin: 0px 10px;
    }

    #deck-close-building-popup {
        position: absolute;
        right: 10px;
        background: none;
        border: none;
        width: 25px;
        height: 25px;
        color: white;
    }

    #deck-close-building-popup:hover {
        color: red;
    }

    /* #deck-movement-mode,
    #deck-selection-mode {
        padding: 0;
    } */

    .deck-btn-set>button {
        padding: 0;
    }

    #universal-map-container {
        position: relative !important;
        top: -200% !important;
        left: 0 !important;
        width: 100% !important;
        height: 100% !important;
        overflow: hidden !important;
    }

    #universal-map-controls,
    #universal-map-overlay,
    #universal-map-popups {
        position: absolute;
        top: 0px;
        left: 0px;
        z-index: 1050;
        height: 100%;
        width: 100%;
        pointer-events: none;
    }

    .deck-controls {
        z-index: 430;
    }

    #universal-top-left,
    #universal-bottom-left,
    #universal-top-middle,
    #universal-bottom-middle,
    #universal-top-right,
    #universal-bottom-right {
        position: absolute;
        pointer-events: none;
    }

    #universal-map-overlay *,
    #universal-top-left *,
    #universal-bottom-left *,
    #universal-top-middle *,
    #universal-bottom-middle *,
    #universal-top-right *,
    #universal-bottom-right * {
        pointer-events: auto;
    }

    #universal-top-left {
        top: 0;
        left: 0;
    }

    #universal-bottom-left {
        bottom: 0;
        left: 0;
    }

    #universal-top-middle {
        top: 0;
        left: 33.3%;
        right: 33.3%;
    }

    #universal-bottom-middle {
        bottom: 0;
        left: 33.3%;
        right: 33.3%;
    }

    #universal-top-right {
        top: 0;
        right: 0;
    }

    #universal-bottom-right {
        bottom: 0;
        right: 0;
    }

    .map-menu-container {
        position: absolute;
        top: 40px;
        left: 80px;
        bottom: 0;
        z-index: 440;
    }

    #universal-map-overlay .dropdown-menu {
        display: inline-flex;
        writing-mode: vertical-lr;
        flex-wrap: wrap;
        align-content: flex-start;
        overflow: hidden;
    }

    #universal-map-overlay .dropdown-menu>li {
        writing-mode: horizontal-tb;
        margin: 2px;
    }

    .map-menu {
        left: 40px;
        top: 0px;
        /* height: calc(100% - 40px); */
    }

    #universal-map-overlay .dropdown-menu {
        background-color: white;
    }

    #universal-map-overlay .dropdown-header {
        color: black;
        padding: 3px 10px !important;
        font-weight: bold;
    }

    #universal-map-overlay .dropdown-item {
        color: #2c2c2c;
    }

    .map-light-menu {
        writing-mode: horizontal-tb !important;
        position: absolute;
        padding: 10px;
    }

    .map-light-menu-container {
        bottom: auto;
        min-width: 150px;
    }

    #universal-map-popups {
        overflow: hidden;
    }

    #<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>_deck_popup,
    #deck-building-popup {
        pointer-events: all;
    }

    #deck-menu-header {
        width: calc(40% - 10px);
        margin-left: 10px;
        margin-top: 10px;
        float: left;
    }

    #deck-menu-content {
        width: calc(60% - 20px);
        left: calc(40% + 10px);
        height: calc(100% - 20px);
        position: absolute;
        overflow-y: auto;
        cursor: pointer;
        top: 10px;
    }

    #universal-map-controls, #universal-map-overlay {
        top: 10px;
        left: 10px;
        width: calc(100% - 20px);
        height: calc(100% - 20px);
    }

    #deck-map-menu {
        background-color: white;
        left: 80px !important;
        width: 40%;
        height: 590px;
        border: 1px solid rgba(0, 0, 0, 0.5);
    }

    #universal-map-overlay .dropdown-header {
        background: none !important;
        box-shadow: none !important;
    }

    #universal-map-controls #dropdownMenu1 {
        width: 55px;
    }

    /* added style */

    #universal-top-right {
        background-color: white;
        border-radius: 30px;
    }

    #deck-controls input,
    #light-dropdown input {
        background-color: var(--acc-01-color) !important;
        color: #000 !important;
        border: none !important;
        font-size: 16px !important;
        border-radius: 30px !important;
        padding: 0 10px !important;
        display: inline-flex;
        justify-content: center;
        align-items: center;
    }

    .dropdown-menu a:hover,
    .dropdown-menu a:focus {
        background-color: var(--dash-bg-color) !important;
    }

    #deck-menu-header a {
        font-size: 1vw !important;
        text-decoration: none;
        display: block;
        color: black;
        padding: 10px 0px;
        text-align: center;
        border-radius: 30px;
        margin-bottom: 20px;
        border: 1px solid rgba(0, 0, 0, 0.1);
    }

    #deck-menu-content .appendable {
        margin-bottom: 10px;
        border: 1px solid rgba(0, 0, 0, 0.1);
        padding: 15px !important;
        text-align: center;
        font-size: 1vw !important;
    }

    #deck-menu-content .appendable a {
        text-decoration: none;
    }

    #deck-info-tab {
        height: 42px;
        margin-bottom: 10px;
    }

    #deck-info-tab a {
        float: left;
        /* font-size: 2em; */
        text-decoration: none;
        display: block;
        color: black;
        padding: 10px 0px;
        text-align: center;
        border-radius: 30px;
        margin-bottom: 20px;
        border: 1px solid rgba(0, 0, 0, 0.1);
        width: 100px;
        margin-left: 10px;
    }

    #deck-info-content #selection {
        background: none;
    }

    #deck-info-content .leaflet-routing-geocoders {
        color: black;
    }

    #deck-metrics-div {
        position: absolute;
        bottom: 0;
        right: 0;
        background-color: rgba(0,0,0,0.8);
        color: white;
    }

    #compass-div {
        flex-direction: column;
        align-items: center;
        color: var(--dash-bg-color);
        transform-origin: 50% 33.5px;
    }

    #compass-div > * {
        margin: 0;
    }

    #compass-icon {
        font-size: 2em;
        transform: rotate(-45deg);
        cursor: pointer;
    }

    .deck-btn {
        box-shadow: 0px 10px rgba(0, 0, 0, 0.1) !important;
    }

    .deck-btn:hover {
        box-shadow: 0px 8px rgba(0, 0, 0, 0.1) !important;
        transform: translate(0px, 2px);
    }

    .deck-btn-active {
        box-shadow: 0px 5px rgba(0, 0, 0, 0.1) !important;
        transform: translate(0px, 5px);
    }

    .leaflet-bottom.leaflet-left {
        display: flex;
        align-items: flex-end;
    }

    .itemSetting {
        display: flex;
        width: 100%;
        padding: 10px;
        justify-content: space-between;
        font-size: 1vw !important;
    }

    .itemSetting > * {
        margin: 0;
    }

    .itemSetting > p {
        line-height: 34px;
    }

    .itemSetting > input {
        color: black;
    }

    #settings-menu-content button {
        width: 35%;
        font-size: 1vw !important;
        text-decoration: none;
        color: white;
        padding: 10px 0px;
        text-align: center;
        border-radius: 30px;
        border: 1px solid rgba(0, 0, 0, 0.1);
    }

    .hoverName {
        margin: 0;
    }
</style>

<div class="widget" id="<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>_div">
    <div class='ui-widget-content'>
        <!-- Inclusione del modulo comune che costruisce la testata del widget, JS incluso -->
        <?php include '../widgets/widgetHeader.php'; ?>

        <!-- Inclusione del modulo comune che costruisce il menu constestaule di gestione del widget -->
        <?php include '../widgets/widgetCtxMenu.php'; ?>

        <!-- Schermata di loading -->
        <div id="<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>_loading" class="loadingDiv">
            <div class="loadingTextDiv">
                <p>Loading data, please wait</p>
            </div>
            <div class="loadingIconDiv">
                <i class='fa fa-spinner fa-spin'></i>
            </div>
        </div>

        <!-- Contenitore esterno del contenuto del widget -->
        <div id="<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>_content" class="content">

            <!-- Modulo comune per la gestione dei dimensionatori del widget in edit dashboard -->
            <?php include '../widgets/commonModules/widgetDimControls.php'; ?>

            <!-- Pannello che viene mostrato quando non ci sono dati disponibili per il widget in esame -->
            <div id="<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>_noDataAlert" class="noDataAlert">
                <div id="<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>_noDataAlertText" class="noDataAlertText">
                    No data available
                </div>
                <div id="<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>_noDataAlertIcon" class="noDataAlertIcon">
                    <i class="fa fa-times"></i>
                </div>
            </div>

            <!-- Dentro questo DIV ci va il contenuto vero e proprio (e specifico) del widget (si chiama _chartContainer solo per legacy, non contiene necessariamente un grafico) -->
            <div id="<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>_chartContainer" class="chartContainer">
                <!-- Mappa 2D -->
                <div id="<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>_map" style="height: 100%; width: 100%;" class="mapContainer"></div>
                <!-- Mappa 3D -->
                <div id="<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>_map3d" class="map3d"></div>
                <div id="universal-map-container">
                    <!-- Controlli universali -->
                    <div id="universal-map-popups">
                        <div id="<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>_deck_popup" class="deck-popup"></div>
                        <div id="deck-building-popup"></div>
                        <div id="deck-whatif-popup">
                            <button id="start-whatif-btn">Start from this location</button>
                            <button id="end-whatif-btn">Go to this location</button>
                            <button id="close-whatif-btn">X</button>
                        </div>
                    </div>
                    <div id="universal-map-controls">
                        <div id="universal-top-left">
                            <div id="deck-controls">
                                <div class="deck-btn-set">
                                    <div class="dropdown mapOptions" id="<?= str_replace('.', '_', str_replace('-', '_', $_REQUEST['name_w'])) ?>_mapOptions">
                                        <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                                            <i class="fa fa-cog" aria-hidden="true"></i>
                                            <!-- <i class="fa fa-spinner fa-spin hidden" id="loadingMenu"></i> Maps -->
                                            <i class="fa fa-caret-right" id="loadingMenu"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="deck-btn-set">
                                    <button id="deck-pitch-up">↙</button>
                                    <button id="deck-pitch-down">↗</button>
                                </div>
                                <div class="deck-btn-set">
                                    <button id="deck-bear-down">↶</button>
                                    <button id="deck-bear-up">↷</button>
                                </div>
                                <div class="deck-btn-set">
                                    <button id="deck-zoom-down">-</button>
                                    <button id="deck-zoom-up">+</button>
                                </div>
                                <div class="deck-btn-set">
                                    <div id="deck-zoom-box">
                                        14
                                    </div>
                                    <button id="fullscreen-map-btn">
                                        <i class="fa fa-arrows-alt" aria-hidden="true"></i>
                                    </button>
                                </div>
                                <div class="deck-btn-set">
                                    <button id="deck-movement-mode">
                                        <!-- <i class="fa-solid fa-arrow-pointer"></i> -->
                                        <i class="fa fa-mouse-pointer" aria-hidden="true"></i>
                                    </button>
                                    <button id="deck-selection-mode">
                                        <i class="fa-solid fa-hand-pointer"></i>
                                        <i class="fa fa-hand-pointer-o" aria-hidden="true"></i>
                                    </button>
                                </div>
                                <div id="compass-div" class="deck-btn-set">
                                    <p>N</p>
                                    <i id="compass-icon" class="fa fa-compass" aria-hidden="true"></i>
                                </div>
                            </div>
                        </div>
                        <div id="universal-bottom-left"></div>
                        <div id="universal-top-middle"></div>
                        <div id="universal-bottom-middle"></div>
                        <div id="universal-top-right">
                            <div id="deck-info-tab">
                                <a id="heatmap-info-btn" class="deck-btn" style="display: none;" href="#">Heatmap</a>
                                <a id="traffic-info-btn" class="deck-btn" style="display: none;" href="#">Traffic</a>
                                <a id="building-info-btn" class="deck-btn" style="display: none;" href="#">Building</a>
                                <a id="scenario-info-btn" class="deck-btn" style="display: none;" href="#">Scenario</a>
                                <a id="whatif-info-btn" class="deck-btn" style="display: none;" href="#">What-If</a>
                            </div>
                            <div id="deck-info-content">

                            </div>
                        </div>
                        <div id="universal-bottom-right"></div>
                    </div>
                    <div id="universal-map-overlay">
                        <div id="deck-metrics-div">
                            <p id="fps"></p>
                            <p id="tiles"></p>
                        </div>
                        <div id="deck-map-menu" class="map-menu map-menu-container">
                            <div id="deck-menu-header">
                                <a id="orthomaps-btn" class="deck-btn-active" href="#">Orthomaps</a>
                                <a id="geojson-btn" class="deck-btn" href="#">WMS & GeoJSON</a>
                                <a id="buildings-btn" class="deck-btn" href="#">Buildings</a>
                                <a id="settings-btn" class="deck-btn" href="#">Settings</a>
                                <!-- <a id="lights-btn" class="deck-btn" href="#">Lights</a> -->
                            </div>
                            <div id="deck-menu-content">
                                <div id="orthomaps-menu-content">
                                    <li class="dropdown-header" id="layersHeader">External Providers <span id="glid">O</span>pen Orthomaps</li>
                                </div>
                                <div id="geojson-menu-content" style="display: none;">
                                    <li class="dropdown-header" id="checkablesHeader">WMS &amp; GeoJSON Orthomaps</li>
                                </div>
                                <div id="buildings-menu-content" style="display: none;">
                                    <!-- <li class="dropdown-header">Buildings</li> -->
                                    <li class="dropdown-header" id="buildingHeader">Buildings</li>
                                </div>
                                <div id="settings-menu-content" style="display: none;">
                                    <li class="dropdown-header" id="buildingHeader">Settings</li>
                                </div>
                                <div id="lights-menu-content" style="display: none;">
                                    <li class="dropdown-header">Lights</li>
                                    <div id="light-dropdown" class="dropdown-menu map-menu map-menu-container map-light-menu map-light-menu-container">
                                        <div>
                                            <label for="ligth-enable">Enable Lights</label>
                                            <input type="checkbox" name="light-enable" id="lightEnable">
                                        </div>
                                        <div id="lightSection">
                                            <div>
                                                <label for="light-timestamp">Datetime: </label>
                                                <input type="datetime-local" name="light-timestamp" id="lightTimestamp" />
                                            </div>
                                            <div>
                                                <label for="shadow-enable">Enable Sky</label>
                                                <input type="checkbox" name="sky-enable" id="skyEnable" checked>
                                            </div>
                                            <div>
                                                <label for="shadow-enable">Enable dynamic shadows (experimental)</label>
                                                <input type="checkbox" name="shadow-enable" id="shadowEnable">
                                            </div>
                                            <div>
                                                <button>Animate day cycle</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>